
projekt_mikro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044e8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000248  080045f4  080045f4  000055f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800483c  0800483c  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  0800483c  0800483c  0000583c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004844  08004844  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004844  08004844  00005844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004848  08004848  00005848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  0800484c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007a4  2000005c  080048a8  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000800  080048a8  00006800  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ca1b  00000000  00000000  00006085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000218d  00000000  00000000  00012aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c98  00000000  00000000  00014c30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009ed  00000000  00000000  000158c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018225  00000000  00000000  000162b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f3d3  00000000  00000000  0002e4da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b332  00000000  00000000  0003d8ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c8bdf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a0c  00000000  00000000  000c8c24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000cc630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	080045dc 	.word	0x080045dc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	080045dc 	.word	0x080045dc

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b088      	sub	sp, #32
 8000160:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000162:	f107 0310 	add.w	r3, r7, #16
 8000166:	2200      	movs	r2, #0
 8000168:	601a      	str	r2, [r3, #0]
 800016a:	605a      	str	r2, [r3, #4]
 800016c:	609a      	str	r2, [r3, #8]
 800016e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000170:	4b2d      	ldr	r3, [pc, #180]	@ (8000228 <MX_GPIO_Init+0xcc>)
 8000172:	699b      	ldr	r3, [r3, #24]
 8000174:	4a2c      	ldr	r2, [pc, #176]	@ (8000228 <MX_GPIO_Init+0xcc>)
 8000176:	f043 0310 	orr.w	r3, r3, #16
 800017a:	6193      	str	r3, [r2, #24]
 800017c:	4b2a      	ldr	r3, [pc, #168]	@ (8000228 <MX_GPIO_Init+0xcc>)
 800017e:	699b      	ldr	r3, [r3, #24]
 8000180:	f003 0310 	and.w	r3, r3, #16
 8000184:	60fb      	str	r3, [r7, #12]
 8000186:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000188:	4b27      	ldr	r3, [pc, #156]	@ (8000228 <MX_GPIO_Init+0xcc>)
 800018a:	699b      	ldr	r3, [r3, #24]
 800018c:	4a26      	ldr	r2, [pc, #152]	@ (8000228 <MX_GPIO_Init+0xcc>)
 800018e:	f043 0320 	orr.w	r3, r3, #32
 8000192:	6193      	str	r3, [r2, #24]
 8000194:	4b24      	ldr	r3, [pc, #144]	@ (8000228 <MX_GPIO_Init+0xcc>)
 8000196:	699b      	ldr	r3, [r3, #24]
 8000198:	f003 0320 	and.w	r3, r3, #32
 800019c:	60bb      	str	r3, [r7, #8]
 800019e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001a0:	4b21      	ldr	r3, [pc, #132]	@ (8000228 <MX_GPIO_Init+0xcc>)
 80001a2:	699b      	ldr	r3, [r3, #24]
 80001a4:	4a20      	ldr	r2, [pc, #128]	@ (8000228 <MX_GPIO_Init+0xcc>)
 80001a6:	f043 0304 	orr.w	r3, r3, #4
 80001aa:	6193      	str	r3, [r2, #24]
 80001ac:	4b1e      	ldr	r3, [pc, #120]	@ (8000228 <MX_GPIO_Init+0xcc>)
 80001ae:	699b      	ldr	r3, [r3, #24]
 80001b0:	f003 0304 	and.w	r3, r3, #4
 80001b4:	607b      	str	r3, [r7, #4]
 80001b6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001b8:	4b1b      	ldr	r3, [pc, #108]	@ (8000228 <MX_GPIO_Init+0xcc>)
 80001ba:	699b      	ldr	r3, [r3, #24]
 80001bc:	4a1a      	ldr	r2, [pc, #104]	@ (8000228 <MX_GPIO_Init+0xcc>)
 80001be:	f043 0308 	orr.w	r3, r3, #8
 80001c2:	6193      	str	r3, [r2, #24]
 80001c4:	4b18      	ldr	r3, [pc, #96]	@ (8000228 <MX_GPIO_Init+0xcc>)
 80001c6:	699b      	ldr	r3, [r3, #24]
 80001c8:	f003 0308 	and.w	r3, r3, #8
 80001cc:	603b      	str	r3, [r7, #0]
 80001ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80001d0:	2200      	movs	r2, #0
 80001d2:	2120      	movs	r1, #32
 80001d4:	4815      	ldr	r0, [pc, #84]	@ (800022c <MX_GPIO_Init+0xd0>)
 80001d6:	f001 fbb7 	bl	8001948 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80001da:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80001de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80001e0:	4b13      	ldr	r3, [pc, #76]	@ (8000230 <MX_GPIO_Init+0xd4>)
 80001e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001e4:	2300      	movs	r3, #0
 80001e6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80001e8:	f107 0310 	add.w	r3, r7, #16
 80001ec:	4619      	mov	r1, r3
 80001ee:	4811      	ldr	r0, [pc, #68]	@ (8000234 <MX_GPIO_Init+0xd8>)
 80001f0:	f001 fa26 	bl	8001640 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80001f4:	2320      	movs	r3, #32
 80001f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001f8:	2301      	movs	r3, #1
 80001fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001fc:	2300      	movs	r3, #0
 80001fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000200:	2302      	movs	r3, #2
 8000202:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000204:	f107 0310 	add.w	r3, r7, #16
 8000208:	4619      	mov	r1, r3
 800020a:	4808      	ldr	r0, [pc, #32]	@ (800022c <MX_GPIO_Init+0xd0>)
 800020c:	f001 fa18 	bl	8001640 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000210:	2200      	movs	r2, #0
 8000212:	2100      	movs	r1, #0
 8000214:	2028      	movs	r0, #40	@ 0x28
 8000216:	f001 f92a 	bl	800146e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800021a:	2028      	movs	r0, #40	@ 0x28
 800021c:	f001 f943 	bl	80014a6 <HAL_NVIC_EnableIRQ>

}
 8000220:	bf00      	nop
 8000222:	3720      	adds	r7, #32
 8000224:	46bd      	mov	sp, r7
 8000226:	bd80      	pop	{r7, pc}
 8000228:	40021000 	.word	0x40021000
 800022c:	40010800 	.word	0x40010800
 8000230:	10110000 	.word	0x10110000
 8000234:	40011000 	.word	0x40011000

08000238 <calculate_crc_byte>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* === CRC === */
uint16_t calculate_crc_byte(uint16_t crc, uint8_t data) {
 8000238:	b480      	push	{r7}
 800023a:	b085      	sub	sp, #20
 800023c:	af00      	add	r7, sp, #0
 800023e:	4603      	mov	r3, r0
 8000240:	460a      	mov	r2, r1
 8000242:	80fb      	strh	r3, [r7, #6]
 8000244:	4613      	mov	r3, r2
 8000246:	717b      	strb	r3, [r7, #5]
	crc ^= (data << 8);
 8000248:	797b      	ldrb	r3, [r7, #5]
 800024a:	021b      	lsls	r3, r3, #8
 800024c:	b21a      	sxth	r2, r3
 800024e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000252:	4053      	eors	r3, r2
 8000254:	b21b      	sxth	r3, r3
 8000256:	80fb      	strh	r3, [r7, #6]
	for (uint8_t i = 0; i < 8; i++) {
 8000258:	2300      	movs	r3, #0
 800025a:	73fb      	strb	r3, [r7, #15]
 800025c:	e013      	b.n	8000286 <calculate_crc_byte+0x4e>
		if (crc & 0x8000) crc = (crc << 1) ^ 0x1021;
 800025e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000262:	2b00      	cmp	r3, #0
 8000264:	da09      	bge.n	800027a <calculate_crc_byte+0x42>
 8000266:	88fb      	ldrh	r3, [r7, #6]
 8000268:	005b      	lsls	r3, r3, #1
 800026a:	b21b      	sxth	r3, r3
 800026c:	f483 5381 	eor.w	r3, r3, #4128	@ 0x1020
 8000270:	f083 0301 	eor.w	r3, r3, #1
 8000274:	b21b      	sxth	r3, r3
 8000276:	80fb      	strh	r3, [r7, #6]
 8000278:	e002      	b.n	8000280 <calculate_crc_byte+0x48>
		else crc <<= 1;
 800027a:	88fb      	ldrh	r3, [r7, #6]
 800027c:	005b      	lsls	r3, r3, #1
 800027e:	80fb      	strh	r3, [r7, #6]
	for (uint8_t i = 0; i < 8; i++) {
 8000280:	7bfb      	ldrb	r3, [r7, #15]
 8000282:	3301      	adds	r3, #1
 8000284:	73fb      	strb	r3, [r7, #15]
 8000286:	7bfb      	ldrb	r3, [r7, #15]
 8000288:	2b07      	cmp	r3, #7
 800028a:	d9e8      	bls.n	800025e <calculate_crc_byte+0x26>
	}
	return crc;
 800028c:	88fb      	ldrh	r3, [r7, #6]
}
 800028e:	4618      	mov	r0, r3
 8000290:	3714      	adds	r7, #20
 8000292:	46bd      	mov	sp, r7
 8000294:	bc80      	pop	{r7}
 8000296:	4770      	bx	lr

08000298 <USART_fsend>:
	} else {
		return 1;
	}
}

void USART_fsend(char* format, ...) {
 8000298:	b40f      	push	{r0, r1, r2, r3}
 800029a:	b580      	push	{r7, lr}
 800029c:	b0c4      	sub	sp, #272	@ 0x110
 800029e:	af00      	add	r7, sp, #0
	char tmp[256];
	va_list arglist;
	va_start(arglist, format);
 80002a0:	f507 728e 	add.w	r2, r7, #284	@ 0x11c
 80002a4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80002a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80002ac:	601a      	str	r2, [r3, #0]
	vsprintf(tmp, format, arglist);
 80002ae:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80002b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80002b6:	f107 000c 	add.w	r0, r7, #12
 80002ba:	681a      	ldr	r2, [r3, #0]
 80002bc:	f8d7 1118 	ldr.w	r1, [r7, #280]	@ 0x118
 80002c0:	f003 fcd2 	bl	8003c68 <vsiprintf>
	va_end(arglist);
	volatile int idx = USART_TX_EMPTY;
 80002c4:	4b44      	ldr	r3, [pc, #272]	@ (80003d8 <USART_fsend+0x140>)
 80002c6:	881b      	ldrh	r3, [r3, #0]
 80002c8:	b29b      	uxth	r3, r3
 80002ca:	461a      	mov	r2, r3
 80002cc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80002d0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80002d4:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < strlen(tmp); i++) {
 80002d6:	2300      	movs	r3, #0
 80002d8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80002dc:	e025      	b.n	800032a <USART_fsend+0x92>
		USART_BUF_TX[idx] = tmp[i];
 80002de:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80002e2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80002ec:	f5a2 7182 	sub.w	r1, r2, #260	@ 0x104
 80002f0:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 80002f4:	440a      	add	r2, r1
 80002f6:	7811      	ldrb	r1, [r2, #0]
 80002f8:	4a38      	ldr	r2, [pc, #224]	@ (80003dc <USART_fsend+0x144>)
 80002fa:	54d1      	strb	r1, [r2, r3]
		idx = (idx + 1) % USART_TXBUF_SIZE;
 80002fc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000300:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	3301      	adds	r3, #1
 8000308:	425a      	negs	r2, r3
 800030a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800030e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8000312:	bf58      	it	pl
 8000314:	4253      	negpl	r3, r2
 8000316:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800031a:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 800031e:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < strlen(tmp); i++) {
 8000320:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000324:	3301      	adds	r3, #1
 8000326:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800032a:	f107 030c 	add.w	r3, r7, #12
 800032e:	4618      	mov	r0, r3
 8000330:	f7ff ff0c 	bl	800014c <strlen>
 8000334:	4602      	mov	r2, r0
 8000336:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800033a:	429a      	cmp	r2, r3
 800033c:	d8cf      	bhi.n	80002de <USART_fsend+0x46>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800033e:	b672      	cpsid	i
}
 8000340:	bf00      	nop
	}

	__disable_irq();
	if (USART_TX_EMPTY == USART_TX_BUSY && __HAL_UART_GET_FLAG(&huart2, UART_FLAG_TXE) == SET) {
 8000342:	4b25      	ldr	r3, [pc, #148]	@ (80003d8 <USART_fsend+0x140>)
 8000344:	881b      	ldrh	r3, [r3, #0]
 8000346:	b29a      	uxth	r2, r3
 8000348:	4b25      	ldr	r3, [pc, #148]	@ (80003e0 <USART_fsend+0x148>)
 800034a:	881b      	ldrh	r3, [r3, #0]
 800034c:	b29b      	uxth	r3, r3
 800034e:	429a      	cmp	r2, r3
 8000350:	d130      	bne.n	80003b4 <USART_fsend+0x11c>
 8000352:	4b24      	ldr	r3, [pc, #144]	@ (80003e4 <USART_fsend+0x14c>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800035c:	2b80      	cmp	r3, #128	@ 0x80
 800035e:	d129      	bne.n	80003b4 <USART_fsend+0x11c>
		USART_TX_EMPTY = idx;
 8000360:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000364:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	b29a      	uxth	r2, r3
 800036c:	4b1a      	ldr	r3, [pc, #104]	@ (80003d8 <USART_fsend+0x140>)
 800036e:	801a      	strh	r2, [r3, #0]
		uint8_t tmp = USART_BUF_TX[USART_TX_BUSY];
 8000370:	4b1b      	ldr	r3, [pc, #108]	@ (80003e0 <USART_fsend+0x148>)
 8000372:	881b      	ldrh	r3, [r3, #0]
 8000374:	b29b      	uxth	r3, r3
 8000376:	461a      	mov	r2, r3
 8000378:	4b18      	ldr	r3, [pc, #96]	@ (80003dc <USART_fsend+0x144>)
 800037a:	5c9a      	ldrb	r2, [r3, r2]
 800037c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000380:	f2a3 130d 	subw	r3, r3, #269	@ 0x10d
 8000384:	701a      	strb	r2, [r3, #0]
		USART_TX_BUSY++;
 8000386:	4b16      	ldr	r3, [pc, #88]	@ (80003e0 <USART_fsend+0x148>)
 8000388:	881b      	ldrh	r3, [r3, #0]
 800038a:	b29b      	uxth	r3, r3
 800038c:	3301      	adds	r3, #1
 800038e:	b29a      	uxth	r2, r3
 8000390:	4b13      	ldr	r3, [pc, #76]	@ (80003e0 <USART_fsend+0x148>)
 8000392:	801a      	strh	r2, [r3, #0]
		if (USART_TX_BUSY >= USART_TXBUF_SIZE) USART_TX_BUSY = 0;
 8000394:	4b12      	ldr	r3, [pc, #72]	@ (80003e0 <USART_fsend+0x148>)
 8000396:	881b      	ldrh	r3, [r3, #0]
 8000398:	b29b      	uxth	r3, r3
 800039a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800039e:	d302      	bcc.n	80003a6 <USART_fsend+0x10e>
 80003a0:	4b0f      	ldr	r3, [pc, #60]	@ (80003e0 <USART_fsend+0x148>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart2, &tmp, 1);
 80003a6:	1cfb      	adds	r3, r7, #3
 80003a8:	2201      	movs	r2, #1
 80003aa:	4619      	mov	r1, r3
 80003ac:	480d      	ldr	r0, [pc, #52]	@ (80003e4 <USART_fsend+0x14c>)
 80003ae:	f002 fde3 	bl	8002f78 <HAL_UART_Transmit_IT>
	if (USART_TX_EMPTY == USART_TX_BUSY && __HAL_UART_GET_FLAG(&huart2, UART_FLAG_TXE) == SET) {
 80003b2:	e007      	b.n	80003c4 <USART_fsend+0x12c>
	}
	else USART_TX_EMPTY = idx;
 80003b4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80003b8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	b29a      	uxth	r2, r3
 80003c0:	4b05      	ldr	r3, [pc, #20]	@ (80003d8 <USART_fsend+0x140>)
 80003c2:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80003c4:	b662      	cpsie	i
}
 80003c6:	bf00      	nop
	__enable_irq();
}
 80003c8:	bf00      	nop
 80003ca:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 80003ce:	46bd      	mov	sp, r7
 80003d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80003d4:	b004      	add	sp, #16
 80003d6:	4770      	bx	lr
 80003d8:	200004fc 	.word	0x200004fc
 80003dc:	200000fc 	.word	0x200000fc
 80003e0:	200004fe 	.word	0x200004fe
 80003e4:	2000066c 	.word	0x2000066c

080003e8 <HAL_UART_RxCpltCallback>:

/* === USART CALLBACK RECEIVE === */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b082      	sub	sp, #8
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
	if (huart == &huart2) {
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	4a10      	ldr	r2, [pc, #64]	@ (8000434 <HAL_UART_RxCpltCallback+0x4c>)
 80003f4:	4293      	cmp	r3, r2
 80003f6:	d119      	bne.n	800042c <HAL_UART_RxCpltCallback+0x44>
		USART_RX_EMPTY++;
 80003f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000438 <HAL_UART_RxCpltCallback+0x50>)
 80003fa:	881b      	ldrh	r3, [r3, #0]
 80003fc:	b29b      	uxth	r3, r3
 80003fe:	3301      	adds	r3, #1
 8000400:	b29a      	uxth	r2, r3
 8000402:	4b0d      	ldr	r3, [pc, #52]	@ (8000438 <HAL_UART_RxCpltCallback+0x50>)
 8000404:	801a      	strh	r2, [r3, #0]
		if (USART_RX_EMPTY >= USART_RXBUF_SIZE) USART_RX_EMPTY = 0;
 8000406:	4b0c      	ldr	r3, [pc, #48]	@ (8000438 <HAL_UART_RxCpltCallback+0x50>)
 8000408:	881b      	ldrh	r3, [r3, #0]
 800040a:	b29b      	uxth	r3, r3
 800040c:	2b7f      	cmp	r3, #127	@ 0x7f
 800040e:	d902      	bls.n	8000416 <HAL_UART_RxCpltCallback+0x2e>
 8000410:	4b09      	ldr	r3, [pc, #36]	@ (8000438 <HAL_UART_RxCpltCallback+0x50>)
 8000412:	2200      	movs	r2, #0
 8000414:	801a      	strh	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, &USART_BUF_RX[USART_RX_EMPTY], 1);
 8000416:	4b08      	ldr	r3, [pc, #32]	@ (8000438 <HAL_UART_RxCpltCallback+0x50>)
 8000418:	881b      	ldrh	r3, [r3, #0]
 800041a:	b29b      	uxth	r3, r3
 800041c:	461a      	mov	r2, r3
 800041e:	4b07      	ldr	r3, [pc, #28]	@ (800043c <HAL_UART_RxCpltCallback+0x54>)
 8000420:	4413      	add	r3, r2
 8000422:	2201      	movs	r2, #1
 8000424:	4619      	mov	r1, r3
 8000426:	4803      	ldr	r0, [pc, #12]	@ (8000434 <HAL_UART_RxCpltCallback+0x4c>)
 8000428:	f002 fddb 	bl	8002fe2 <HAL_UART_Receive_IT>
	}
}
 800042c:	bf00      	nop
 800042e:	3708      	adds	r7, #8
 8000430:	46bd      	mov	sp, r7
 8000432:	bd80      	pop	{r7, pc}
 8000434:	2000066c 	.word	0x2000066c
 8000438:	200000f8 	.word	0x200000f8
 800043c:	20000078 	.word	0x20000078

08000440 <HAL_UART_TxCpltCallback>:

/* === USART TRANSMIT CALLBACK === */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000440:	b580      	push	{r7, lr}
 8000442:	b084      	sub	sp, #16
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
    if (huart == &huart2) {
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	4a16      	ldr	r2, [pc, #88]	@ (80004a4 <HAL_UART_TxCpltCallback+0x64>)
 800044c:	4293      	cmp	r3, r2
 800044e:	d125      	bne.n	800049c <HAL_UART_TxCpltCallback+0x5c>
        // sprawdzenie, czy są dane do wysłania
        if (USART_TX_EMPTY != USART_TX_BUSY) {
 8000450:	4b15      	ldr	r3, [pc, #84]	@ (80004a8 <HAL_UART_TxCpltCallback+0x68>)
 8000452:	881b      	ldrh	r3, [r3, #0]
 8000454:	b29a      	uxth	r2, r3
 8000456:	4b15      	ldr	r3, [pc, #84]	@ (80004ac <HAL_UART_TxCpltCallback+0x6c>)
 8000458:	881b      	ldrh	r3, [r3, #0]
 800045a:	b29b      	uxth	r3, r3
 800045c:	429a      	cmp	r2, r3
 800045e:	d01d      	beq.n	800049c <HAL_UART_TxCpltCallback+0x5c>
        	uint8_t tmp = USART_BUF_TX[USART_TX_BUSY];
 8000460:	4b12      	ldr	r3, [pc, #72]	@ (80004ac <HAL_UART_TxCpltCallback+0x6c>)
 8000462:	881b      	ldrh	r3, [r3, #0]
 8000464:	b29b      	uxth	r3, r3
 8000466:	461a      	mov	r2, r3
 8000468:	4b11      	ldr	r3, [pc, #68]	@ (80004b0 <HAL_UART_TxCpltCallback+0x70>)
 800046a:	5c9b      	ldrb	r3, [r3, r2]
 800046c:	73fb      	strb	r3, [r7, #15]
        	USART_TX_BUSY++;
 800046e:	4b0f      	ldr	r3, [pc, #60]	@ (80004ac <HAL_UART_TxCpltCallback+0x6c>)
 8000470:	881b      	ldrh	r3, [r3, #0]
 8000472:	b29b      	uxth	r3, r3
 8000474:	3301      	adds	r3, #1
 8000476:	b29a      	uxth	r2, r3
 8000478:	4b0c      	ldr	r3, [pc, #48]	@ (80004ac <HAL_UART_TxCpltCallback+0x6c>)
 800047a:	801a      	strh	r2, [r3, #0]
        	if (USART_TX_BUSY >= USART_TXBUF_SIZE) USART_TX_BUSY = 0;
 800047c:	4b0b      	ldr	r3, [pc, #44]	@ (80004ac <HAL_UART_TxCpltCallback+0x6c>)
 800047e:	881b      	ldrh	r3, [r3, #0]
 8000480:	b29b      	uxth	r3, r3
 8000482:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000486:	d302      	bcc.n	800048e <HAL_UART_TxCpltCallback+0x4e>
 8000488:	4b08      	ldr	r3, [pc, #32]	@ (80004ac <HAL_UART_TxCpltCallback+0x6c>)
 800048a:	2200      	movs	r2, #0
 800048c:	801a      	strh	r2, [r3, #0]
            HAL_UART_Transmit_IT(&huart2, &tmp, 1); // bajt wysłany, można wysłać następny
 800048e:	f107 030f 	add.w	r3, r7, #15
 8000492:	2201      	movs	r2, #1
 8000494:	4619      	mov	r1, r3
 8000496:	4803      	ldr	r0, [pc, #12]	@ (80004a4 <HAL_UART_TxCpltCallback+0x64>)
 8000498:	f002 fd6e 	bl	8002f78 <HAL_UART_Transmit_IT>
        }
    }
}
 800049c:	bf00      	nop
 800049e:	3710      	adds	r7, #16
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bd80      	pop	{r7, pc}
 80004a4:	2000066c 	.word	0x2000066c
 80004a8:	200004fc 	.word	0x200004fc
 80004ac:	200004fe 	.word	0x200004fe
 80004b0:	200000fc 	.word	0x200000fc

080004b4 <USART_getchar>:

int16_t USART_getchar(){
 80004b4:	b480      	push	{r7}
 80004b6:	b083      	sub	sp, #12
 80004b8:	af00      	add	r7, sp, #0
	int16_t tmp;
	if (USART_RX_EMPTY != USART_RX_BUSY) {
 80004ba:	4b14      	ldr	r3, [pc, #80]	@ (800050c <USART_getchar+0x58>)
 80004bc:	881b      	ldrh	r3, [r3, #0]
 80004be:	b29a      	uxth	r2, r3
 80004c0:	4b13      	ldr	r3, [pc, #76]	@ (8000510 <USART_getchar+0x5c>)
 80004c2:	881b      	ldrh	r3, [r3, #0]
 80004c4:	b29b      	uxth	r3, r3
 80004c6:	429a      	cmp	r2, r3
 80004c8:	d018      	beq.n	80004fc <USART_getchar+0x48>
		 tmp = USART_BUF_RX[USART_RX_BUSY];
 80004ca:	4b11      	ldr	r3, [pc, #68]	@ (8000510 <USART_getchar+0x5c>)
 80004cc:	881b      	ldrh	r3, [r3, #0]
 80004ce:	b29b      	uxth	r3, r3
 80004d0:	461a      	mov	r2, r3
 80004d2:	4b10      	ldr	r3, [pc, #64]	@ (8000514 <USART_getchar+0x60>)
 80004d4:	5c9b      	ldrb	r3, [r3, r2]
 80004d6:	80fb      	strh	r3, [r7, #6]
		 USART_RX_BUSY++;
 80004d8:	4b0d      	ldr	r3, [pc, #52]	@ (8000510 <USART_getchar+0x5c>)
 80004da:	881b      	ldrh	r3, [r3, #0]
 80004dc:	b29b      	uxth	r3, r3
 80004de:	3301      	adds	r3, #1
 80004e0:	b29a      	uxth	r2, r3
 80004e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000510 <USART_getchar+0x5c>)
 80004e4:	801a      	strh	r2, [r3, #0]
		 if (USART_RX_BUSY >= USART_RXBUF_SIZE) USART_RX_BUSY = 0;
 80004e6:	4b0a      	ldr	r3, [pc, #40]	@ (8000510 <USART_getchar+0x5c>)
 80004e8:	881b      	ldrh	r3, [r3, #0]
 80004ea:	b29b      	uxth	r3, r3
 80004ec:	2b7f      	cmp	r3, #127	@ 0x7f
 80004ee:	d902      	bls.n	80004f6 <USART_getchar+0x42>
 80004f0:	4b07      	ldr	r3, [pc, #28]	@ (8000510 <USART_getchar+0x5c>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	801a      	strh	r2, [r3, #0]
		 return tmp;
 80004f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80004fa:	e001      	b.n	8000500 <USART_getchar+0x4c>
	} else return -1;
 80004fc:	f04f 33ff 	mov.w	r3, #4294967295

}
 8000500:	4618      	mov	r0, r3
 8000502:	370c      	adds	r7, #12
 8000504:	46bd      	mov	sp, r7
 8000506:	bc80      	pop	{r7}
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop
 800050c:	200000f8 	.word	0x200000f8
 8000510:	200000fa 	.word	0x200000fa
 8000514:	20000078 	.word	0x20000078

08000518 <validate_and_atoi>:

uint16_t validate_and_atoi(const char *str, size_t length) {
 8000518:	b480      	push	{r7}
 800051a:	b085      	sub	sp, #20
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
 8000520:	6039      	str	r1, [r7, #0]
    uint16_t result = 0;
 8000522:	2300      	movs	r3, #0
 8000524:	81fb      	strh	r3, [r7, #14]

    // sprawdzanie czy kazdy znak to cyfra
    for (size_t i = 0; i < length; i++) {
 8000526:	2300      	movs	r3, #0
 8000528:	60bb      	str	r3, [r7, #8]
 800052a:	e01e      	b.n	800056a <validate_and_atoi+0x52>
        if (str[i] < '0' || str[i] > '9') {
 800052c:	687a      	ldr	r2, [r7, #4]
 800052e:	68bb      	ldr	r3, [r7, #8]
 8000530:	4413      	add	r3, r2
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	2b2f      	cmp	r3, #47	@ 0x2f
 8000536:	d905      	bls.n	8000544 <validate_and_atoi+0x2c>
 8000538:	687a      	ldr	r2, [r7, #4]
 800053a:	68bb      	ldr	r3, [r7, #8]
 800053c:	4413      	add	r3, r2
 800053e:	781b      	ldrb	r3, [r3, #0]
 8000540:	2b39      	cmp	r3, #57	@ 0x39
 8000542:	d901      	bls.n	8000548 <validate_and_atoi+0x30>
            //USART_fsend("invalid char '%c' during atoi\n", str[i]);
            return 0; // kod bledu
 8000544:	2300      	movs	r3, #0
 8000546:	e015      	b.n	8000574 <validate_and_atoi+0x5c>
        }
        result = (result * 10) + (str[i] - '0');
 8000548:	89fb      	ldrh	r3, [r7, #14]
 800054a:	461a      	mov	r2, r3
 800054c:	0092      	lsls	r2, r2, #2
 800054e:	4413      	add	r3, r2
 8000550:	005b      	lsls	r3, r3, #1
 8000552:	b29b      	uxth	r3, r3
 8000554:	6879      	ldr	r1, [r7, #4]
 8000556:	68ba      	ldr	r2, [r7, #8]
 8000558:	440a      	add	r2, r1
 800055a:	7812      	ldrb	r2, [r2, #0]
 800055c:	4413      	add	r3, r2
 800055e:	b29b      	uxth	r3, r3
 8000560:	3b30      	subs	r3, #48	@ 0x30
 8000562:	81fb      	strh	r3, [r7, #14]
    for (size_t i = 0; i < length; i++) {
 8000564:	68bb      	ldr	r3, [r7, #8]
 8000566:	3301      	adds	r3, #1
 8000568:	60bb      	str	r3, [r7, #8]
 800056a:	68ba      	ldr	r2, [r7, #8]
 800056c:	683b      	ldr	r3, [r7, #0]
 800056e:	429a      	cmp	r2, r3
 8000570:	d3dc      	bcc.n	800052c <validate_and_atoi+0x14>
    }

    return result;
 8000572:	89fb      	ldrh	r3, [r7, #14]
}
 8000574:	4618      	mov	r0, r3
 8000576:	3714      	adds	r7, #20
 8000578:	46bd      	mov	sp, r7
 800057a:	bc80      	pop	{r7}
 800057c:	4770      	bx	lr
	...

08000580 <process_frame>:

//void err01() {
//
//}

void process_frame() {
 8000580:	b580      	push	{r7, lr}
 8000582:	b08c      	sub	sp, #48	@ 0x30
 8000584:	af00      	add	r7, sp, #0


	if (frame.length_int < 5 || frame.length_int > 256) {
 8000586:	4b7a      	ldr	r3, [pc, #488]	@ (8000770 <process_frame+0x1f0>)
 8000588:	f8b3 311a 	ldrh.w	r3, [r3, #282]	@ 0x11a
 800058c:	2b04      	cmp	r3, #4
 800058e:	f240 80e5 	bls.w	800075c <process_frame+0x1dc>
 8000592:	4b77      	ldr	r3, [pc, #476]	@ (8000770 <process_frame+0x1f0>)
 8000594:	f8b3 311a 	ldrh.w	r3, [r3, #282]	@ 0x11a
 8000598:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800059c:	f200 80de 	bhi.w	800075c <process_frame+0x1dc>
		//err01();
		return;
	}

	uint8_t length = frame.length_int - frame.masked_counter; // dla odkodowanej ramki dlugosc musi byc pomniejszona o ilosc zamaskowanych znakow
 80005a0:	4b73      	ldr	r3, [pc, #460]	@ (8000770 <process_frame+0x1f0>)
 80005a2:	f8b3 311a 	ldrh.w	r3, [r3, #282]	@ 0x11a
 80005a6:	b2da      	uxtb	r2, r3
 80005a8:	4b71      	ldr	r3, [pc, #452]	@ (8000770 <process_frame+0x1f0>)
 80005aa:	f8b3 311c 	ldrh.w	r3, [r3, #284]	@ 0x11c
 80005ae:	b2db      	uxtb	r3, r3
 80005b0:	1ad3      	subs	r3, r2, r3
 80005b2:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e


	if (strncmp((char *)frame.data, "READ", 4) == 0) {
 80005b6:	2204      	movs	r2, #4
 80005b8:	496e      	ldr	r1, [pc, #440]	@ (8000774 <process_frame+0x1f4>)
 80005ba:	486f      	ldr	r0, [pc, #444]	@ (8000778 <process_frame+0x1f8>)
 80005bc:	f003 fb73 	bl	8003ca6 <strncmp>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d166      	bne.n	8000694 <process_frame+0x114>

		char *start_ptr = (char *)&frame.data[4];
 80005c6:	4b6d      	ldr	r3, [pc, #436]	@ (800077c <process_frame+0x1fc>)
 80005c8:	61fb      	str	r3, [r7, #28]
		char *dash_ptr = strchr(start_ptr, '-');
 80005ca:	212d      	movs	r1, #45	@ 0x2d
 80005cc:	69f8      	ldr	r0, [r7, #28]
 80005ce:	f003 fb5d 	bl	8003c8c <strchr>
 80005d2:	61b8      	str	r0, [r7, #24]

		if (!dash_ptr) {
 80005d4:	69bb      	ldr	r3, [r7, #24]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d103      	bne.n	80005e2 <process_frame+0x62>
			USART_fsend("brak myslnika");
 80005da:	4869      	ldr	r0, [pc, #420]	@ (8000780 <process_frame+0x200>)
 80005dc:	f7ff fe5c 	bl	8000298 <USART_fsend>
			//err03();
			return;
 80005e0:	e0c3      	b.n	800076a <process_frame+0x1ea>
		}

		char start_str[4] = {0};
 80005e2:	2300      	movs	r3, #0
 80005e4:	60bb      	str	r3, [r7, #8]
		char count_str[3] = {0};
 80005e6:	4b67      	ldr	r3, [pc, #412]	@ (8000784 <process_frame+0x204>)
 80005e8:	881b      	ldrh	r3, [r3, #0]
 80005ea:	80bb      	strh	r3, [r7, #4]
 80005ec:	2300      	movs	r3, #0
 80005ee:	71bb      	strb	r3, [r7, #6]

		size_t start_length = dash_ptr - (char *)frame.data - 4;
 80005f0:	69bb      	ldr	r3, [r7, #24]
 80005f2:	4a61      	ldr	r2, [pc, #388]	@ (8000778 <process_frame+0x1f8>)
 80005f4:	1a9b      	subs	r3, r3, r2
 80005f6:	3b04      	subs	r3, #4
 80005f8:	617b      	str	r3, [r7, #20]
		if (start_length >= sizeof(start_str)) {
 80005fa:	697b      	ldr	r3, [r7, #20]
 80005fc:	2b03      	cmp	r3, #3
 80005fe:	d903      	bls.n	8000608 <process_frame+0x88>
			USART_fsend("zly parametr");
 8000600:	4861      	ldr	r0, [pc, #388]	@ (8000788 <process_frame+0x208>)
 8000602:	f7ff fe49 	bl	8000298 <USART_fsend>
			//err03();
			return;
 8000606:	e0b0      	b.n	800076a <process_frame+0x1ea>
		}
		memcpy(start_str, frame.data + 4, start_length);
 8000608:	495c      	ldr	r1, [pc, #368]	@ (800077c <process_frame+0x1fc>)
 800060a:	f107 0308 	add.w	r3, r7, #8
 800060e:	697a      	ldr	r2, [r7, #20]
 8000610:	4618      	mov	r0, r3
 8000612:	f003 fb87 	bl	8003d24 <memcpy>

		size_t count_length = (uint8_t *)frame.data + length - ((uint8_t *)dash_ptr + 1);
 8000616:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800061a:	4a57      	ldr	r2, [pc, #348]	@ (8000778 <process_frame+0x1f8>)
 800061c:	441a      	add	r2, r3
 800061e:	69bb      	ldr	r3, [r7, #24]
 8000620:	3301      	adds	r3, #1
 8000622:	1ad3      	subs	r3, r2, r3
 8000624:	613b      	str	r3, [r7, #16]
		if (count_length >= sizeof(count_str)) {
 8000626:	693b      	ldr	r3, [r7, #16]
 8000628:	2b02      	cmp	r3, #2
 800062a:	d903      	bls.n	8000634 <process_frame+0xb4>
			USART_fsend("zly parametr");
 800062c:	4856      	ldr	r0, [pc, #344]	@ (8000788 <process_frame+0x208>)
 800062e:	f7ff fe33 	bl	8000298 <USART_fsend>
			//err03();
			return;
 8000632:	e09a      	b.n	800076a <process_frame+0x1ea>
		}
		memcpy(count_str, dash_ptr + 1, count_length);
 8000634:	69bb      	ldr	r3, [r7, #24]
 8000636:	1c59      	adds	r1, r3, #1
 8000638:	1d3b      	adds	r3, r7, #4
 800063a:	693a      	ldr	r2, [r7, #16]
 800063c:	4618      	mov	r0, r3
 800063e:	f003 fb71 	bl	8003d24 <memcpy>

		uint8_t start = validate_and_atoi(start_str, start_length);
 8000642:	f107 0308 	add.w	r3, r7, #8
 8000646:	6979      	ldr	r1, [r7, #20]
 8000648:	4618      	mov	r0, r3
 800064a:	f7ff ff65 	bl	8000518 <validate_and_atoi>
 800064e:	4603      	mov	r3, r0
 8000650:	73fb      	strb	r3, [r7, #15]
		uint8_t count = validate_and_atoi(count_str, count_length);
 8000652:	1d3b      	adds	r3, r7, #4
 8000654:	6939      	ldr	r1, [r7, #16]
 8000656:	4618      	mov	r0, r3
 8000658:	f7ff ff5e 	bl	8000518 <validate_and_atoi>
 800065c:	4603      	mov	r3, r0
 800065e:	73bb      	strb	r3, [r7, #14]

		if (start < 1 || start > 750 || count < 1 || count > 21 || (start + count - 1) > 750) {
 8000660:	7bfb      	ldrb	r3, [r7, #15]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d00b      	beq.n	800067e <process_frame+0xfe>
 8000666:	7bbb      	ldrb	r3, [r7, #14]
 8000668:	2b00      	cmp	r3, #0
 800066a:	d008      	beq.n	800067e <process_frame+0xfe>
 800066c:	7bbb      	ldrb	r3, [r7, #14]
 800066e:	2b15      	cmp	r3, #21
 8000670:	d805      	bhi.n	800067e <process_frame+0xfe>
 8000672:	7bfa      	ldrb	r2, [r7, #15]
 8000674:	7bbb      	ldrb	r3, [r7, #14]
 8000676:	4413      	add	r3, r2
 8000678:	f5b3 7f3c 	cmp.w	r3, #752	@ 0x2f0
 800067c:	db03      	blt.n	8000686 <process_frame+0x106>
			USART_fsend("zly parametr");
 800067e:	4842      	ldr	r0, [pc, #264]	@ (8000788 <process_frame+0x208>)
 8000680:	f7ff fe0a 	bl	8000298 <USART_fsend>
			//err03();
			return;
 8000684:	e071      	b.n	800076a <process_frame+0x1ea>
		}

		USART_fsend("READ(%d - %d)", start, count);
 8000686:	7bfb      	ldrb	r3, [r7, #15]
 8000688:	7bba      	ldrb	r2, [r7, #14]
 800068a:	4619      	mov	r1, r3
 800068c:	483f      	ldr	r0, [pc, #252]	@ (800078c <process_frame+0x20c>)
 800068e:	f7ff fe03 	bl	8000298 <USART_fsend>
		return;
 8000692:	e06a      	b.n	800076a <process_frame+0x1ea>
	}
	else if (strncmp((char *)frame.data, "COUNT_DATA", 10) == 0) {
 8000694:	220a      	movs	r2, #10
 8000696:	493e      	ldr	r1, [pc, #248]	@ (8000790 <process_frame+0x210>)
 8000698:	4837      	ldr	r0, [pc, #220]	@ (8000778 <process_frame+0x1f8>)
 800069a:	f003 fb04 	bl	8003ca6 <strncmp>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d103      	bne.n	80006ac <process_frame+0x12c>
		if (length != 10) {
 80006a4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80006a8:	2b0a      	cmp	r3, #10
 80006aa:	e05e      	b.n	800076a <process_frame+0x1ea>
//			count_data();
//			return;
//		}
	}

	else if (strncmp((char *)frame.data, "SET_INTERVAL", 12) == 0) {
 80006ac:	220c      	movs	r2, #12
 80006ae:	4939      	ldr	r1, [pc, #228]	@ (8000794 <process_frame+0x214>)
 80006b0:	4831      	ldr	r0, [pc, #196]	@ (8000778 <process_frame+0x1f8>)
 80006b2:	f003 faf8 	bl	8003ca6 <strncmp>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d142      	bne.n	8000742 <process_frame+0x1c2>
		if (length < 16 || length > 22) {
 80006bc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80006c0:	2b0f      	cmp	r3, #15
 80006c2:	d94d      	bls.n	8000760 <process_frame+0x1e0>
 80006c4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80006c8:	2b16      	cmp	r3, #22
 80006ca:	d849      	bhi.n	8000760 <process_frame+0x1e0>
			//USART_fsend("wrong command");
			//err02();
			return;
		}

		char *numberStr = (char *)&frame.data[12];
 80006cc:	4b32      	ldr	r3, [pc, #200]	@ (8000798 <process_frame+0x218>)
 80006ce:	62bb      	str	r3, [r7, #40]	@ 0x28
		uint8_t numberLength = length - 12;
 80006d0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80006d4:	3b0c      	subs	r3, #12
 80006d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

		for (uint8_t i = 0; i < numberLength; i++){
 80006da:	2300      	movs	r3, #0
 80006dc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80006e0:	e011      	b.n	8000706 <process_frame+0x186>
			if (!isdigit((unsigned char)numberStr[i])) {
 80006e2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80006e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80006e8:	4413      	add	r3, r2
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	3301      	adds	r3, #1
 80006ee:	4a2b      	ldr	r2, [pc, #172]	@ (800079c <process_frame+0x21c>)
 80006f0:	4413      	add	r3, r2
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	f003 0304 	and.w	r3, r3, #4
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d033      	beq.n	8000764 <process_frame+0x1e4>
		for (uint8_t i = 0; i < numberLength; i++){
 80006fc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000700:	3301      	adds	r3, #1
 8000702:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000706:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800070a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800070e:	429a      	cmp	r2, r3
 8000710:	d3e7      	bcc.n	80006e2 <process_frame+0x162>
				return;
			}
		}

		char *endptr;
		uint32_t interval = strtoul(numberStr, &endptr, 10);
 8000712:	463b      	mov	r3, r7
 8000714:	220a      	movs	r2, #10
 8000716:	4619      	mov	r1, r3
 8000718:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800071a:	f003 fa85 	bl	8003c28 <strtoul>
 800071e:	6238      	str	r0, [r7, #32]

		if (*endptr != '\0') {
 8000720:	683b      	ldr	r3, [r7, #0]
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d003      	beq.n	8000730 <process_frame+0x1b0>
			//err03();
			USART_fsend("blad przy konwersji");
 8000728:	481d      	ldr	r0, [pc, #116]	@ (80007a0 <process_frame+0x220>)
 800072a:	f7ff fdb5 	bl	8000298 <USART_fsend>
			return;
 800072e:	e01c      	b.n	800076a <process_frame+0x1ea>
		}

		if (interval < 2000 || interval > UINT32_MAX) {
 8000730:	6a3b      	ldr	r3, [r7, #32]
 8000732:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000736:	d317      	bcc.n	8000768 <process_frame+0x1e8>
			//err03();
			return;
		}

		//setinterval
		USART_fsend("interval: %lu ", interval);
 8000738:	6a39      	ldr	r1, [r7, #32]
 800073a:	481a      	ldr	r0, [pc, #104]	@ (80007a4 <process_frame+0x224>)
 800073c:	f7ff fdac 	bl	8000298 <USART_fsend>
		return;
 8000740:	e013      	b.n	800076a <process_frame+0x1ea>
	}

	else if (strncmp((char *)frame.data, "GET_INTERVAL", 12) == 0) {
 8000742:	220c      	movs	r2, #12
 8000744:	4918      	ldr	r1, [pc, #96]	@ (80007a8 <process_frame+0x228>)
 8000746:	480c      	ldr	r0, [pc, #48]	@ (8000778 <process_frame+0x1f8>)
 8000748:	f003 faad 	bl	8003ca6 <strncmp>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d10b      	bne.n	800076a <process_frame+0x1ea>
		if (frame.length_int != 12) {
 8000752:	4b07      	ldr	r3, [pc, #28]	@ (8000770 <process_frame+0x1f0>)
 8000754:	f8b3 311a 	ldrh.w	r3, [r3, #282]	@ 0x11a
 8000758:	2b0c      	cmp	r3, #12
 800075a:	e006      	b.n	800076a <process_frame+0x1ea>
		return;
 800075c:	bf00      	nop
 800075e:	e004      	b.n	800076a <process_frame+0x1ea>
			return;
 8000760:	bf00      	nop
 8000762:	e002      	b.n	800076a <process_frame+0x1ea>
				return;
 8000764:	bf00      	nop
 8000766:	e000      	b.n	800076a <process_frame+0x1ea>
			return;
 8000768:	bf00      	nop
//		else {
//			get_interval();
//			return
//		}
	}
}
 800076a:	3730      	adds	r7, #48	@ 0x30
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	20000500 	.word	0x20000500
 8000774:	080045f4 	.word	0x080045f4
 8000778:	2000050a 	.word	0x2000050a
 800077c:	2000050e 	.word	0x2000050e
 8000780:	080045fc 	.word	0x080045fc
 8000784:	0800467c 	.word	0x0800467c
 8000788:	0800460c 	.word	0x0800460c
 800078c:	0800461c 	.word	0x0800461c
 8000790:	0800462c 	.word	0x0800462c
 8000794:	08004638 	.word	0x08004638
 8000798:	20000516 	.word	0x20000516
 800079c:	08004706 	.word	0x08004706
 80007a0:	08004648 	.word	0x08004648
 80007a4:	0800465c 	.word	0x0800465c
 80007a8:	0800466c 	.word	0x0800466c

080007ac <reset_frame>:

void reset_frame() {
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
	memset(&frame, 0, sizeof(Frame));
 80007b0:	f44f 7290 	mov.w	r2, #288	@ 0x120
 80007b4:	2100      	movs	r1, #0
 80007b6:	4807      	ldr	r0, [pc, #28]	@ (80007d4 <reset_frame+0x28>)
 80007b8:	f003 fa60 	bl	8003c7c <memset>
	frame.state = IDLE;
 80007bc:	4b05      	ldr	r3, [pc, #20]	@ (80007d4 <reset_frame+0x28>)
 80007be:	2200      	movs	r2, #0
 80007c0:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
	frame.crc_calculated = 0xFFFF;
 80007c4:	4b03      	ldr	r3, [pc, #12]	@ (80007d4 <reset_frame+0x28>)
 80007c6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80007ca:	f8a3 2110 	strh.w	r2, [r3, #272]	@ 0x110
}
 80007ce:	bf00      	nop
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	20000500 	.word	0x20000500

080007d8 <get_frame>:

void get_frame(uint8_t ch) {
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	4603      	mov	r3, r0
 80007e0:	71fb      	strb	r3, [r7, #7]

	if (ch == FRAME_START) {
 80007e2:	79fb      	ldrb	r3, [r7, #7]
 80007e4:	2b3a      	cmp	r3, #58	@ 0x3a
 80007e6:	d106      	bne.n	80007f6 <get_frame+0x1e>
		reset_frame();
 80007e8:	f7ff ffe0 	bl	80007ac <reset_frame>
		frame.state = FIND_SENDER;
 80007ec:	4bb5      	ldr	r3, [pc, #724]	@ (8000ac4 <get_frame+0x2ec>)
 80007ee:	2201      	movs	r2, #1
 80007f0:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
		return;
 80007f4:	e23d      	b.n	8000c72 <get_frame+0x49a>
	}
	if (ch == '\0') {
 80007f6:	79fb      	ldrb	r3, [r7, #7]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d104      	bne.n	8000806 <get_frame+0x2e>
		frame.state = IDLE;
 80007fc:	4bb1      	ldr	r3, [pc, #708]	@ (8000ac4 <get_frame+0x2ec>)
 80007fe:	2200      	movs	r2, #0
 8000800:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
		return;
 8000804:	e235      	b.n	8000c72 <get_frame+0x49a>
	}

	switch (frame.state) {
 8000806:	4baf      	ldr	r3, [pc, #700]	@ (8000ac4 <get_frame+0x2ec>)
 8000808:	f893 311e 	ldrb.w	r3, [r3, #286]	@ 0x11e
 800080c:	2b07      	cmp	r3, #7
 800080e:	f200 8230 	bhi.w	8000c72 <get_frame+0x49a>
 8000812:	a201      	add	r2, pc, #4	@ (adr r2, 8000818 <get_frame+0x40>)
 8000814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000818:	08000c73 	.word	0x08000c73
 800081c:	08000839 	.word	0x08000839
 8000820:	080008c5 	.word	0x080008c5
 8000824:	08000953 	.word	0x08000953
 8000828:	080009d7 	.word	0x080009d7
 800082c:	08000bc3 	.word	0x08000bc3
 8000830:	08000c4d 	.word	0x08000c4d
 8000834:	08000aa1 	.word	0x08000aa1
	case IDLE: {
		return;
	}

	case FIND_SENDER: {
		if (ch >= 'A' && ch <= 'Z') {
 8000838:	79fb      	ldrb	r3, [r7, #7]
 800083a:	2b40      	cmp	r3, #64	@ 0x40
 800083c:	d93d      	bls.n	80008ba <get_frame+0xe2>
 800083e:	79fb      	ldrb	r3, [r7, #7]
 8000840:	2b5a      	cmp	r3, #90	@ 0x5a
 8000842:	d83a      	bhi.n	80008ba <get_frame+0xe2>
			frame.sender[frame.sender_id] = ch;
 8000844:	4b9f      	ldr	r3, [pc, #636]	@ (8000ac4 <get_frame+0x2ec>)
 8000846:	f893 3112 	ldrb.w	r3, [r3, #274]	@ 0x112
 800084a:	4619      	mov	r1, r3
 800084c:	4a9d      	ldr	r2, [pc, #628]	@ (8000ac4 <get_frame+0x2ec>)
 800084e:	79fb      	ldrb	r3, [r7, #7]
 8000850:	5453      	strb	r3, [r2, r1]
			frame.crc_calculated = calculate_crc_byte(frame.crc_calculated, ch);
 8000852:	4b9c      	ldr	r3, [pc, #624]	@ (8000ac4 <get_frame+0x2ec>)
 8000854:	f8b3 3110 	ldrh.w	r3, [r3, #272]	@ 0x110
 8000858:	79fa      	ldrb	r2, [r7, #7]
 800085a:	4611      	mov	r1, r2
 800085c:	4618      	mov	r0, r3
 800085e:	f7ff fceb 	bl	8000238 <calculate_crc_byte>
 8000862:	4603      	mov	r3, r0
 8000864:	461a      	mov	r2, r3
 8000866:	4b97      	ldr	r3, [pc, #604]	@ (8000ac4 <get_frame+0x2ec>)
 8000868:	f8a3 2110 	strh.w	r2, [r3, #272]	@ 0x110
			if (frame.sender_id == 1) {
 800086c:	4b95      	ldr	r3, [pc, #596]	@ (8000ac4 <get_frame+0x2ec>)
 800086e:	f893 3112 	ldrb.w	r3, [r3, #274]	@ 0x112
 8000872:	2b01      	cmp	r3, #1
 8000874:	d117      	bne.n	80008a6 <get_frame+0xce>
				frame.sender[2] = '\0';
 8000876:	4b93      	ldr	r3, [pc, #588]	@ (8000ac4 <get_frame+0x2ec>)
 8000878:	2200      	movs	r2, #0
 800087a:	709a      	strb	r2, [r3, #2]
				if (strncmp((char *)frame.sender, SENDER, 2) == 0){
 800087c:	2202      	movs	r2, #2
 800087e:	4992      	ldr	r1, [pc, #584]	@ (8000ac8 <get_frame+0x2f0>)
 8000880:	4890      	ldr	r0, [pc, #576]	@ (8000ac4 <get_frame+0x2ec>)
 8000882:	f003 fa10 	bl	8003ca6 <strncmp>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d107      	bne.n	800089c <get_frame+0xc4>
					USART_fsend("sender ok");
 800088c:	488f      	ldr	r0, [pc, #572]	@ (8000acc <get_frame+0x2f4>)
 800088e:	f7ff fd03 	bl	8000298 <USART_fsend>
					frame.state = FIND_RECEIVER;
 8000892:	4b8c      	ldr	r3, [pc, #560]	@ (8000ac4 <get_frame+0x2ec>)
 8000894:	2202      	movs	r2, #2
 8000896:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
					return;
 800089a:	e1ea      	b.n	8000c72 <get_frame+0x49a>
				}
				else {
					frame.state = IDLE;
 800089c:	4b89      	ldr	r3, [pc, #548]	@ (8000ac4 <get_frame+0x2ec>)
 800089e:	2200      	movs	r2, #0
 80008a0:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
					return;
 80008a4:	e1e5      	b.n	8000c72 <get_frame+0x49a>
				}
			}
			else frame.sender_id++;
 80008a6:	4b87      	ldr	r3, [pc, #540]	@ (8000ac4 <get_frame+0x2ec>)
 80008a8:	f893 3112 	ldrb.w	r3, [r3, #274]	@ 0x112
 80008ac:	3301      	adds	r3, #1
 80008ae:	b2da      	uxtb	r2, r3
 80008b0:	4b84      	ldr	r3, [pc, #528]	@ (8000ac4 <get_frame+0x2ec>)
 80008b2:	f883 2112 	strb.w	r2, [r3, #274]	@ 0x112
			if (frame.sender_id == 1) {
 80008b6:	bf00      	nop
		}
		//else if (ch == FRAME_START || ch == FRAME_END) frame.state = FIND_START;
		else frame.state = IDLE;
		return;
 80008b8:	e1db      	b.n	8000c72 <get_frame+0x49a>
		else frame.state = IDLE;
 80008ba:	4b82      	ldr	r3, [pc, #520]	@ (8000ac4 <get_frame+0x2ec>)
 80008bc:	2200      	movs	r2, #0
 80008be:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
		return;
 80008c2:	e1d6      	b.n	8000c72 <get_frame+0x49a>
	}

	case FIND_RECEIVER: {
		if (ch >= 'A' && ch <= 'Z') {
 80008c4:	79fb      	ldrb	r3, [r7, #7]
 80008c6:	2b40      	cmp	r3, #64	@ 0x40
 80008c8:	d93e      	bls.n	8000948 <get_frame+0x170>
 80008ca:	79fb      	ldrb	r3, [r7, #7]
 80008cc:	2b5a      	cmp	r3, #90	@ 0x5a
 80008ce:	d83b      	bhi.n	8000948 <get_frame+0x170>
			frame.receiver[frame.receiver_id] = ch;
 80008d0:	4b7c      	ldr	r3, [pc, #496]	@ (8000ac4 <get_frame+0x2ec>)
 80008d2:	f893 3113 	ldrb.w	r3, [r3, #275]	@ 0x113
 80008d6:	461a      	mov	r2, r3
 80008d8:	4b7a      	ldr	r3, [pc, #488]	@ (8000ac4 <get_frame+0x2ec>)
 80008da:	4413      	add	r3, r2
 80008dc:	79fa      	ldrb	r2, [r7, #7]
 80008de:	70da      	strb	r2, [r3, #3]
			frame.crc_calculated = calculate_crc_byte(frame.crc_calculated, ch);
 80008e0:	4b78      	ldr	r3, [pc, #480]	@ (8000ac4 <get_frame+0x2ec>)
 80008e2:	f8b3 3110 	ldrh.w	r3, [r3, #272]	@ 0x110
 80008e6:	79fa      	ldrb	r2, [r7, #7]
 80008e8:	4611      	mov	r1, r2
 80008ea:	4618      	mov	r0, r3
 80008ec:	f7ff fca4 	bl	8000238 <calculate_crc_byte>
 80008f0:	4603      	mov	r3, r0
 80008f2:	461a      	mov	r2, r3
 80008f4:	4b73      	ldr	r3, [pc, #460]	@ (8000ac4 <get_frame+0x2ec>)
 80008f6:	f8a3 2110 	strh.w	r2, [r3, #272]	@ 0x110
			if (frame.receiver_id == 1) {
 80008fa:	4b72      	ldr	r3, [pc, #456]	@ (8000ac4 <get_frame+0x2ec>)
 80008fc:	f893 3113 	ldrb.w	r3, [r3, #275]	@ 0x113
 8000900:	2b01      	cmp	r3, #1
 8000902:	d117      	bne.n	8000934 <get_frame+0x15c>
				frame.receiver[2] = '\0';
 8000904:	4b6f      	ldr	r3, [pc, #444]	@ (8000ac4 <get_frame+0x2ec>)
 8000906:	2200      	movs	r2, #0
 8000908:	715a      	strb	r2, [r3, #5]
				if (strncmp((char *)frame.receiver, RECEIVER, 2) == 0) {
 800090a:	2202      	movs	r2, #2
 800090c:	4970      	ldr	r1, [pc, #448]	@ (8000ad0 <get_frame+0x2f8>)
 800090e:	4871      	ldr	r0, [pc, #452]	@ (8000ad4 <get_frame+0x2fc>)
 8000910:	f003 f9c9 	bl	8003ca6 <strncmp>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d107      	bne.n	800092a <get_frame+0x152>
					USART_fsend("receiver ok");
 800091a:	486f      	ldr	r0, [pc, #444]	@ (8000ad8 <get_frame+0x300>)
 800091c:	f7ff fcbc 	bl	8000298 <USART_fsend>
					frame.state = FIND_LENGTH;
 8000920:	4b68      	ldr	r3, [pc, #416]	@ (8000ac4 <get_frame+0x2ec>)
 8000922:	2203      	movs	r2, #3
 8000924:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
					return;
 8000928:	e1a3      	b.n	8000c72 <get_frame+0x49a>
				}
				else {
					frame.state = IDLE;
 800092a:	4b66      	ldr	r3, [pc, #408]	@ (8000ac4 <get_frame+0x2ec>)
 800092c:	2200      	movs	r2, #0
 800092e:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
					return;
 8000932:	e19e      	b.n	8000c72 <get_frame+0x49a>
				}
			}
			else frame.receiver_id++;
 8000934:	4b63      	ldr	r3, [pc, #396]	@ (8000ac4 <get_frame+0x2ec>)
 8000936:	f893 3113 	ldrb.w	r3, [r3, #275]	@ 0x113
 800093a:	3301      	adds	r3, #1
 800093c:	b2da      	uxtb	r2, r3
 800093e:	4b61      	ldr	r3, [pc, #388]	@ (8000ac4 <get_frame+0x2ec>)
 8000940:	f883 2113 	strb.w	r2, [r3, #275]	@ 0x113
			if (frame.receiver_id == 1) {
 8000944:	bf00      	nop
		}
		//else if (ch == FRAME_START || ch == FRAME_END) frame.state = FIND_START;
		else frame.state = IDLE;
		return;
 8000946:	e194      	b.n	8000c72 <get_frame+0x49a>
		else frame.state = IDLE;
 8000948:	4b5e      	ldr	r3, [pc, #376]	@ (8000ac4 <get_frame+0x2ec>)
 800094a:	2200      	movs	r2, #0
 800094c:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
		return;
 8000950:	e18f      	b.n	8000c72 <get_frame+0x49a>
	}

	case FIND_LENGTH: {
		if (ch >= '0' && ch <= '9') {
 8000952:	79fb      	ldrb	r3, [r7, #7]
 8000954:	2b2f      	cmp	r3, #47	@ 0x2f
 8000956:	d939      	bls.n	80009cc <get_frame+0x1f4>
 8000958:	79fb      	ldrb	r3, [r7, #7]
 800095a:	2b39      	cmp	r3, #57	@ 0x39
 800095c:	d836      	bhi.n	80009cc <get_frame+0x1f4>
			frame.length[frame.length_id] = ch;
 800095e:	4b59      	ldr	r3, [pc, #356]	@ (8000ac4 <get_frame+0x2ec>)
 8000960:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 8000964:	461a      	mov	r2, r3
 8000966:	4b57      	ldr	r3, [pc, #348]	@ (8000ac4 <get_frame+0x2ec>)
 8000968:	4413      	add	r3, r2
 800096a:	79fa      	ldrb	r2, [r7, #7]
 800096c:	719a      	strb	r2, [r3, #6]
			frame.crc_calculated = calculate_crc_byte(frame.crc_calculated, ch);
 800096e:	4b55      	ldr	r3, [pc, #340]	@ (8000ac4 <get_frame+0x2ec>)
 8000970:	f8b3 3110 	ldrh.w	r3, [r3, #272]	@ 0x110
 8000974:	79fa      	ldrb	r2, [r7, #7]
 8000976:	4611      	mov	r1, r2
 8000978:	4618      	mov	r0, r3
 800097a:	f7ff fc5d 	bl	8000238 <calculate_crc_byte>
 800097e:	4603      	mov	r3, r0
 8000980:	461a      	mov	r2, r3
 8000982:	4b50      	ldr	r3, [pc, #320]	@ (8000ac4 <get_frame+0x2ec>)
 8000984:	f8a3 2110 	strh.w	r2, [r3, #272]	@ 0x110
			if (frame.length_id == 2) {
 8000988:	4b4e      	ldr	r3, [pc, #312]	@ (8000ac4 <get_frame+0x2ec>)
 800098a:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 800098e:	2b02      	cmp	r3, #2
 8000990:	d112      	bne.n	80009b8 <get_frame+0x1e0>
				frame.length[3] = '\0';
 8000992:	4b4c      	ldr	r3, [pc, #304]	@ (8000ac4 <get_frame+0x2ec>)
 8000994:	2200      	movs	r2, #0
 8000996:	725a      	strb	r2, [r3, #9]
				frame.length_int = atoi((char *)frame.length);
 8000998:	4850      	ldr	r0, [pc, #320]	@ (8000adc <get_frame+0x304>)
 800099a:	f003 f84f 	bl	8003a3c <atoi>
 800099e:	4603      	mov	r3, r0
 80009a0:	b29a      	uxth	r2, r3
 80009a2:	4b48      	ldr	r3, [pc, #288]	@ (8000ac4 <get_frame+0x2ec>)
 80009a4:	f8a3 211a 	strh.w	r2, [r3, #282]	@ 0x11a
				USART_fsend("length ok");
 80009a8:	484d      	ldr	r0, [pc, #308]	@ (8000ae0 <get_frame+0x308>)
 80009aa:	f7ff fc75 	bl	8000298 <USART_fsend>
				frame.state = FIND_DATA;
 80009ae:	4b45      	ldr	r3, [pc, #276]	@ (8000ac4 <get_frame+0x2ec>)
 80009b0:	2204      	movs	r2, #4
 80009b2:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
				return;
 80009b6:	e15c      	b.n	8000c72 <get_frame+0x49a>
			}
			else frame.length_id++;
 80009b8:	4b42      	ldr	r3, [pc, #264]	@ (8000ac4 <get_frame+0x2ec>)
 80009ba:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 80009be:	3301      	adds	r3, #1
 80009c0:	b2da      	uxtb	r2, r3
 80009c2:	4b40      	ldr	r3, [pc, #256]	@ (8000ac4 <get_frame+0x2ec>)
 80009c4:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
			if (frame.length_id == 2) {
 80009c8:	bf00      	nop
		}
		//else if (ch == FRAME_START || ch == FRAME_END) frame.state = FIND_START;
		else frame.state = IDLE;
		return;
 80009ca:	e152      	b.n	8000c72 <get_frame+0x49a>
		else frame.state = IDLE;
 80009cc:	4b3d      	ldr	r3, [pc, #244]	@ (8000ac4 <get_frame+0x2ec>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
		return;
 80009d4:	e14d      	b.n	8000c72 <get_frame+0x49a>
	}

	case FIND_DATA: {

		if (frame.data_id + frame.masked_counter < frame.length_int) {
 80009d6:	4b3b      	ldr	r3, [pc, #236]	@ (8000ac4 <get_frame+0x2ec>)
 80009d8:	f8b3 3116 	ldrh.w	r3, [r3, #278]	@ 0x116
 80009dc:	461a      	mov	r2, r3
 80009de:	4b39      	ldr	r3, [pc, #228]	@ (8000ac4 <get_frame+0x2ec>)
 80009e0:	f8b3 311c 	ldrh.w	r3, [r3, #284]	@ 0x11c
 80009e4:	4413      	add	r3, r2
 80009e6:	4a37      	ldr	r2, [pc, #220]	@ (8000ac4 <get_frame+0x2ec>)
 80009e8:	f8b2 211a 	ldrh.w	r2, [r2, #282]	@ 0x11a
 80009ec:	4293      	cmp	r3, r2
 80009ee:	da52      	bge.n	8000a96 <get_frame+0x2be>

			if (ch == FRAME_START || ch == FRAME_END) {
 80009f0:	79fb      	ldrb	r3, [r7, #7]
 80009f2:	2b3a      	cmp	r3, #58	@ 0x3a
 80009f4:	d002      	beq.n	80009fc <get_frame+0x224>
 80009f6:	79fb      	ldrb	r3, [r7, #7]
 80009f8:	2b3b      	cmp	r3, #59	@ 0x3b
 80009fa:	d104      	bne.n	8000a06 <get_frame+0x22e>
				frame.state = IDLE;
 80009fc:	4b31      	ldr	r3, [pc, #196]	@ (8000ac4 <get_frame+0x2ec>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
				return;
 8000a04:	e135      	b.n	8000c72 <get_frame+0x49a>
			}

			frame.crc_calculated = calculate_crc_byte(frame.crc_calculated, ch);
 8000a06:	4b2f      	ldr	r3, [pc, #188]	@ (8000ac4 <get_frame+0x2ec>)
 8000a08:	f8b3 3110 	ldrh.w	r3, [r3, #272]	@ 0x110
 8000a0c:	79fa      	ldrb	r2, [r7, #7]
 8000a0e:	4611      	mov	r1, r2
 8000a10:	4618      	mov	r0, r3
 8000a12:	f7ff fc11 	bl	8000238 <calculate_crc_byte>
 8000a16:	4603      	mov	r3, r0
 8000a18:	461a      	mov	r2, r3
 8000a1a:	4b2a      	ldr	r3, [pc, #168]	@ (8000ac4 <get_frame+0x2ec>)
 8000a1c:	f8a3 2110 	strh.w	r2, [r3, #272]	@ 0x110

			if (ch == MASK) {
 8000a20:	79fb      	ldrb	r3, [r7, #7]
 8000a22:	2b2f      	cmp	r3, #47	@ 0x2f
 8000a24:	d10c      	bne.n	8000a40 <get_frame+0x268>
				frame.masked_counter++;
 8000a26:	4b27      	ldr	r3, [pc, #156]	@ (8000ac4 <get_frame+0x2ec>)
 8000a28:	f8b3 311c 	ldrh.w	r3, [r3, #284]	@ 0x11c
 8000a2c:	3301      	adds	r3, #1
 8000a2e:	b29a      	uxth	r2, r3
 8000a30:	4b24      	ldr	r3, [pc, #144]	@ (8000ac4 <get_frame+0x2ec>)
 8000a32:	f8a3 211c 	strh.w	r2, [r3, #284]	@ 0x11c
				frame.state = FIND_MASKED;
 8000a36:	4b23      	ldr	r3, [pc, #140]	@ (8000ac4 <get_frame+0x2ec>)
 8000a38:	2207      	movs	r2, #7
 8000a3a:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
				return;
 8000a3e:	e118      	b.n	8000c72 <get_frame+0x49a>
			}

			frame.data[frame.data_id++] = ch;
 8000a40:	4b20      	ldr	r3, [pc, #128]	@ (8000ac4 <get_frame+0x2ec>)
 8000a42:	f8b3 3116 	ldrh.w	r3, [r3, #278]	@ 0x116
 8000a46:	1c5a      	adds	r2, r3, #1
 8000a48:	b291      	uxth	r1, r2
 8000a4a:	4a1e      	ldr	r2, [pc, #120]	@ (8000ac4 <get_frame+0x2ec>)
 8000a4c:	f8a2 1116 	strh.w	r1, [r2, #278]	@ 0x116
 8000a50:	461a      	mov	r2, r3
 8000a52:	4b1c      	ldr	r3, [pc, #112]	@ (8000ac4 <get_frame+0x2ec>)
 8000a54:	4413      	add	r3, r2
 8000a56:	79fa      	ldrb	r2, [r7, #7]
 8000a58:	729a      	strb	r2, [r3, #10]

			if (frame.data_id + frame.masked_counter == frame.length_int) {
 8000a5a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ac4 <get_frame+0x2ec>)
 8000a5c:	f8b3 3116 	ldrh.w	r3, [r3, #278]	@ 0x116
 8000a60:	461a      	mov	r2, r3
 8000a62:	4b18      	ldr	r3, [pc, #96]	@ (8000ac4 <get_frame+0x2ec>)
 8000a64:	f8b3 311c 	ldrh.w	r3, [r3, #284]	@ 0x11c
 8000a68:	4413      	add	r3, r2
 8000a6a:	4a16      	ldr	r2, [pc, #88]	@ (8000ac4 <get_frame+0x2ec>)
 8000a6c:	f8b2 211a 	ldrh.w	r2, [r2, #282]	@ 0x11a
 8000a70:	4293      	cmp	r3, r2
 8000a72:	f040 80fd 	bne.w	8000c70 <get_frame+0x498>
				frame.data[frame.data_id] = '\0';
 8000a76:	4b13      	ldr	r3, [pc, #76]	@ (8000ac4 <get_frame+0x2ec>)
 8000a78:	f8b3 3116 	ldrh.w	r3, [r3, #278]	@ 0x116
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	4b11      	ldr	r3, [pc, #68]	@ (8000ac4 <get_frame+0x2ec>)
 8000a80:	4413      	add	r3, r2
 8000a82:	2200      	movs	r2, #0
 8000a84:	729a      	strb	r2, [r3, #10]
				USART_fsend("data ok");
 8000a86:	4817      	ldr	r0, [pc, #92]	@ (8000ae4 <get_frame+0x30c>)
 8000a88:	f7ff fc06 	bl	8000298 <USART_fsend>
				frame.state = FIND_CRC;
 8000a8c:	4b0d      	ldr	r3, [pc, #52]	@ (8000ac4 <get_frame+0x2ec>)
 8000a8e:	2205      	movs	r2, #5
 8000a90:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
			}

			return;
 8000a94:	e0ec      	b.n	8000c70 <get_frame+0x498>
		}


		else {
			frame.state = IDLE;
 8000a96:	4b0b      	ldr	r3, [pc, #44]	@ (8000ac4 <get_frame+0x2ec>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
			return;
 8000a9e:	e0e8      	b.n	8000c72 <get_frame+0x49a>
		}
	}

	case FIND_MASKED: {

		if (frame.data_id + frame.masked_counter >= frame.length_int) {
 8000aa0:	4b08      	ldr	r3, [pc, #32]	@ (8000ac4 <get_frame+0x2ec>)
 8000aa2:	f8b3 3116 	ldrh.w	r3, [r3, #278]	@ 0x116
 8000aa6:	461a      	mov	r2, r3
 8000aa8:	4b06      	ldr	r3, [pc, #24]	@ (8000ac4 <get_frame+0x2ec>)
 8000aaa:	f8b3 311c 	ldrh.w	r3, [r3, #284]	@ 0x11c
 8000aae:	4413      	add	r3, r2
 8000ab0:	4a04      	ldr	r2, [pc, #16]	@ (8000ac4 <get_frame+0x2ec>)
 8000ab2:	f8b2 211a 	ldrh.w	r2, [r2, #282]	@ 0x11a
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	db16      	blt.n	8000ae8 <get_frame+0x310>
			frame.state = IDLE;
 8000aba:	4b02      	ldr	r3, [pc, #8]	@ (8000ac4 <get_frame+0x2ec>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
			return;
 8000ac2:	e0d6      	b.n	8000c72 <get_frame+0x49a>
 8000ac4:	20000500 	.word	0x20000500
 8000ac8:	08004680 	.word	0x08004680
 8000acc:	08004684 	.word	0x08004684
 8000ad0:	08004690 	.word	0x08004690
 8000ad4:	20000503 	.word	0x20000503
 8000ad8:	08004694 	.word	0x08004694
 8000adc:	20000506 	.word	0x20000506
 8000ae0:	080046a0 	.word	0x080046a0
 8000ae4:	080046ac 	.word	0x080046ac
		}

		switch(ch) {
 8000ae8:	79fb      	ldrb	r3, [r7, #7]
 8000aea:	2b2f      	cmp	r3, #47	@ 0x2f
 8000aec:	d029      	beq.n	8000b42 <get_frame+0x36a>
 8000aee:	2b2f      	cmp	r3, #47	@ 0x2f
 8000af0:	dc39      	bgt.n	8000b66 <get_frame+0x38e>
 8000af2:	2b2c      	cmp	r3, #44	@ 0x2c
 8000af4:	d013      	beq.n	8000b1e <get_frame+0x346>
 8000af6:	2b2e      	cmp	r3, #46	@ 0x2e
 8000af8:	d135      	bne.n	8000b66 <get_frame+0x38e>
		case MASKED_START: {
			frame.data[frame.data_id++] = FRAME_START;
 8000afa:	4b5f      	ldr	r3, [pc, #380]	@ (8000c78 <get_frame+0x4a0>)
 8000afc:	f8b3 3116 	ldrh.w	r3, [r3, #278]	@ 0x116
 8000b00:	1c5a      	adds	r2, r3, #1
 8000b02:	b291      	uxth	r1, r2
 8000b04:	4a5c      	ldr	r2, [pc, #368]	@ (8000c78 <get_frame+0x4a0>)
 8000b06:	f8a2 1116 	strh.w	r1, [r2, #278]	@ 0x116
 8000b0a:	461a      	mov	r2, r3
 8000b0c:	4b5a      	ldr	r3, [pc, #360]	@ (8000c78 <get_frame+0x4a0>)
 8000b0e:	4413      	add	r3, r2
 8000b10:	223a      	movs	r2, #58	@ 0x3a
 8000b12:	729a      	strb	r2, [r3, #10]
			frame.state = FIND_DATA;
 8000b14:	4b58      	ldr	r3, [pc, #352]	@ (8000c78 <get_frame+0x4a0>)
 8000b16:	2204      	movs	r2, #4
 8000b18:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
			break;
 8000b1c:	e028      	b.n	8000b70 <get_frame+0x398>
		}
		case MASKED_END: {
			frame.data[frame.data_id++] = FRAME_END;
 8000b1e:	4b56      	ldr	r3, [pc, #344]	@ (8000c78 <get_frame+0x4a0>)
 8000b20:	f8b3 3116 	ldrh.w	r3, [r3, #278]	@ 0x116
 8000b24:	1c5a      	adds	r2, r3, #1
 8000b26:	b291      	uxth	r1, r2
 8000b28:	4a53      	ldr	r2, [pc, #332]	@ (8000c78 <get_frame+0x4a0>)
 8000b2a:	f8a2 1116 	strh.w	r1, [r2, #278]	@ 0x116
 8000b2e:	461a      	mov	r2, r3
 8000b30:	4b51      	ldr	r3, [pc, #324]	@ (8000c78 <get_frame+0x4a0>)
 8000b32:	4413      	add	r3, r2
 8000b34:	223b      	movs	r2, #59	@ 0x3b
 8000b36:	729a      	strb	r2, [r3, #10]
			frame.state = FIND_DATA;
 8000b38:	4b4f      	ldr	r3, [pc, #316]	@ (8000c78 <get_frame+0x4a0>)
 8000b3a:	2204      	movs	r2, #4
 8000b3c:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
			break;
 8000b40:	e016      	b.n	8000b70 <get_frame+0x398>
		}
		case MASK: {
			frame.data[frame.data_id++] = MASK;
 8000b42:	4b4d      	ldr	r3, [pc, #308]	@ (8000c78 <get_frame+0x4a0>)
 8000b44:	f8b3 3116 	ldrh.w	r3, [r3, #278]	@ 0x116
 8000b48:	1c5a      	adds	r2, r3, #1
 8000b4a:	b291      	uxth	r1, r2
 8000b4c:	4a4a      	ldr	r2, [pc, #296]	@ (8000c78 <get_frame+0x4a0>)
 8000b4e:	f8a2 1116 	strh.w	r1, [r2, #278]	@ 0x116
 8000b52:	461a      	mov	r2, r3
 8000b54:	4b48      	ldr	r3, [pc, #288]	@ (8000c78 <get_frame+0x4a0>)
 8000b56:	4413      	add	r3, r2
 8000b58:	222f      	movs	r2, #47	@ 0x2f
 8000b5a:	729a      	strb	r2, [r3, #10]
			frame.state = FIND_DATA;
 8000b5c:	4b46      	ldr	r3, [pc, #280]	@ (8000c78 <get_frame+0x4a0>)
 8000b5e:	2204      	movs	r2, #4
 8000b60:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
			break;
 8000b64:	e004      	b.n	8000b70 <get_frame+0x398>
		}
		default: { // błąd, powrót do początku
			frame.state = IDLE;
 8000b66:	4b44      	ldr	r3, [pc, #272]	@ (8000c78 <get_frame+0x4a0>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
			return;
 8000b6e:	e080      	b.n	8000c72 <get_frame+0x49a>
		}
		}

		frame.crc_calculated = calculate_crc_byte(frame.crc_calculated, ch);
 8000b70:	4b41      	ldr	r3, [pc, #260]	@ (8000c78 <get_frame+0x4a0>)
 8000b72:	f8b3 3110 	ldrh.w	r3, [r3, #272]	@ 0x110
 8000b76:	79fa      	ldrb	r2, [r7, #7]
 8000b78:	4611      	mov	r1, r2
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f7ff fb5c 	bl	8000238 <calculate_crc_byte>
 8000b80:	4603      	mov	r3, r0
 8000b82:	461a      	mov	r2, r3
 8000b84:	4b3c      	ldr	r3, [pc, #240]	@ (8000c78 <get_frame+0x4a0>)
 8000b86:	f8a3 2110 	strh.w	r2, [r3, #272]	@ 0x110

		if (frame.data_id < frame.length_int - 1) {
 8000b8a:	4b3b      	ldr	r3, [pc, #236]	@ (8000c78 <get_frame+0x4a0>)
 8000b8c:	f8b3 3116 	ldrh.w	r3, [r3, #278]	@ 0x116
 8000b90:	461a      	mov	r2, r3
 8000b92:	4b39      	ldr	r3, [pc, #228]	@ (8000c78 <get_frame+0x4a0>)
 8000b94:	f8b3 311a 	ldrh.w	r3, [r3, #282]	@ 0x11a
 8000b98:	3b01      	subs	r3, #1
 8000b9a:	429a      	cmp	r2, r3
 8000b9c:	da04      	bge.n	8000ba8 <get_frame+0x3d0>
			frame.state = FIND_DATA;
 8000b9e:	4b36      	ldr	r3, [pc, #216]	@ (8000c78 <get_frame+0x4a0>)
 8000ba0:	2204      	movs	r2, #4
 8000ba2:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
		} else {
			frame.data[frame.data_id] = '\0';
			frame.state = FIND_CRC;
		}

		return;
 8000ba6:	e064      	b.n	8000c72 <get_frame+0x49a>
			frame.data[frame.data_id] = '\0';
 8000ba8:	4b33      	ldr	r3, [pc, #204]	@ (8000c78 <get_frame+0x4a0>)
 8000baa:	f8b3 3116 	ldrh.w	r3, [r3, #278]	@ 0x116
 8000bae:	461a      	mov	r2, r3
 8000bb0:	4b31      	ldr	r3, [pc, #196]	@ (8000c78 <get_frame+0x4a0>)
 8000bb2:	4413      	add	r3, r2
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	729a      	strb	r2, [r3, #10]
			frame.state = FIND_CRC;
 8000bb8:	4b2f      	ldr	r3, [pc, #188]	@ (8000c78 <get_frame+0x4a0>)
 8000bba:	2205      	movs	r2, #5
 8000bbc:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
		return;
 8000bc0:	e057      	b.n	8000c72 <get_frame+0x49a>
	}

	case FIND_CRC: {
		if ((ch >= '0' && ch <= '9') || (ch >= 'A' && ch <= 'F')) {
 8000bc2:	79fb      	ldrb	r3, [r7, #7]
 8000bc4:	2b2f      	cmp	r3, #47	@ 0x2f
 8000bc6:	d902      	bls.n	8000bce <get_frame+0x3f6>
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
 8000bca:	2b39      	cmp	r3, #57	@ 0x39
 8000bcc:	d905      	bls.n	8000bda <get_frame+0x402>
 8000bce:	79fb      	ldrb	r3, [r7, #7]
 8000bd0:	2b40      	cmp	r3, #64	@ 0x40
 8000bd2:	d935      	bls.n	8000c40 <get_frame+0x468>
 8000bd4:	79fb      	ldrb	r3, [r7, #7]
 8000bd6:	2b46      	cmp	r3, #70	@ 0x46
 8000bd8:	d832      	bhi.n	8000c40 <get_frame+0x468>
			frame.crc_frame[frame.crc_id++] = ch;
 8000bda:	4b27      	ldr	r3, [pc, #156]	@ (8000c78 <get_frame+0x4a0>)
 8000bdc:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8000be0:	1c5a      	adds	r2, r3, #1
 8000be2:	b2d1      	uxtb	r1, r2
 8000be4:	4a24      	ldr	r2, [pc, #144]	@ (8000c78 <get_frame+0x4a0>)
 8000be6:	f882 1118 	strb.w	r1, [r2, #280]	@ 0x118
 8000bea:	461a      	mov	r2, r3
 8000bec:	4b22      	ldr	r3, [pc, #136]	@ (8000c78 <get_frame+0x4a0>)
 8000bee:	4413      	add	r3, r2
 8000bf0:	79fa      	ldrb	r2, [r7, #7]
 8000bf2:	f883 210b 	strb.w	r2, [r3, #267]	@ 0x10b
			if (frame.crc_id == 4) {
 8000bf6:	4b20      	ldr	r3, [pc, #128]	@ (8000c78 <get_frame+0x4a0>)
 8000bf8:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8000bfc:	2b04      	cmp	r3, #4
 8000bfe:	d124      	bne.n	8000c4a <get_frame+0x472>
				frame.crc_frame[4] = '\0';
 8000c00:	4b1d      	ldr	r3, [pc, #116]	@ (8000c78 <get_frame+0x4a0>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	f883 210f 	strb.w	r2, [r3, #271]	@ 0x10f
				if ((uint16_t)strtol((char *)frame.crc_frame, NULL, 16) == frame.crc_calculated) {
 8000c08:	2210      	movs	r2, #16
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	481b      	ldr	r0, [pc, #108]	@ (8000c7c <get_frame+0x4a4>)
 8000c0e:	f002 ff93 	bl	8003b38 <strtol>
 8000c12:	4603      	mov	r3, r0
 8000c14:	b29a      	uxth	r2, r3
 8000c16:	4b18      	ldr	r3, [pc, #96]	@ (8000c78 <get_frame+0x4a0>)
 8000c18:	f8b3 3110 	ldrh.w	r3, [r3, #272]	@ 0x110
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	d107      	bne.n	8000c30 <get_frame+0x458>
					USART_fsend("crc ok");
 8000c20:	4817      	ldr	r0, [pc, #92]	@ (8000c80 <get_frame+0x4a8>)
 8000c22:	f7ff fb39 	bl	8000298 <USART_fsend>
					frame.state = FIND_END;
 8000c26:	4b14      	ldr	r3, [pc, #80]	@ (8000c78 <get_frame+0x4a0>)
 8000c28:	2206      	movs	r2, #6
 8000c2a:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
					return;
 8000c2e:	e020      	b.n	8000c72 <get_frame+0x49a>
				}
				else {
					USART_fsend("crc blad");
 8000c30:	4814      	ldr	r0, [pc, #80]	@ (8000c84 <get_frame+0x4ac>)
 8000c32:	f7ff fb31 	bl	8000298 <USART_fsend>
					frame.state = IDLE;
 8000c36:	4b10      	ldr	r3, [pc, #64]	@ (8000c78 <get_frame+0x4a0>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
					return;
 8000c3e:	e018      	b.n	8000c72 <get_frame+0x49a>
				}
			}
		}
		//else if (ch == FRAME_START || ch == FRAME_END) frame.state = FIND_START;
		else frame.state = IDLE;
 8000c40:	4b0d      	ldr	r3, [pc, #52]	@ (8000c78 <get_frame+0x4a0>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
		return;
 8000c48:	e013      	b.n	8000c72 <get_frame+0x49a>
 8000c4a:	e012      	b.n	8000c72 <get_frame+0x49a>
	}

	case FIND_END: {
		if (ch == FRAME_END) {
 8000c4c:	79fb      	ldrb	r3, [r7, #7]
 8000c4e:	2b3b      	cmp	r3, #59	@ 0x3b
 8000c50:	d109      	bne.n	8000c66 <get_frame+0x48e>
			frame.complete = true;
 8000c52:	4b09      	ldr	r3, [pc, #36]	@ (8000c78 <get_frame+0x4a0>)
 8000c54:	2201      	movs	r2, #1
 8000c56:	f883 211f 	strb.w	r2, [r3, #287]	@ 0x11f
			USART_fsend("ramka ok");
 8000c5a:	480b      	ldr	r0, [pc, #44]	@ (8000c88 <get_frame+0x4b0>)
 8000c5c:	f7ff fb1c 	bl	8000298 <USART_fsend>
			process_frame();
 8000c60:	f7ff fc8e 	bl	8000580 <process_frame>
			return;
 8000c64:	e005      	b.n	8000c72 <get_frame+0x49a>
		}
		//else if (ch == FRAME_START) frame.state = FIND_START;
		else frame.state = IDLE;
 8000c66:	4b04      	ldr	r3, [pc, #16]	@ (8000c78 <get_frame+0x4a0>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
		return;
 8000c6e:	e000      	b.n	8000c72 <get_frame+0x49a>
			return;
 8000c70:	bf00      	nop
	}
	}
}
 8000c72:	3708      	adds	r7, #8
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	20000500 	.word	0x20000500
 8000c7c:	2000060b 	.word	0x2000060b
 8000c80:	080046b4 	.word	0x080046b4
 8000c84:	080046bc 	.word	0x080046bc
 8000c88:	080046c8 	.word	0x080046c8

08000c8c <handle_char>:

void handle_char() {
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0

//	is_handling = 1;

	int16_t ch;
	if ((ch = USART_getchar()) >= 0) {
 8000c92:	f7ff fc0f 	bl	80004b4 <USART_getchar>
 8000c96:	4603      	mov	r3, r0
 8000c98:	80fb      	strh	r3, [r7, #6]
 8000c9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	db04      	blt.n	8000cac <handle_char+0x20>
		//USART_fsend("  |%c|  ", ch);
		get_frame((uint8_t)ch);
 8000ca2:	88fb      	ldrh	r3, [r7, #6]
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f7ff fd96 	bl	80007d8 <get_frame>
	}

//	is_handling = 0;
}
 8000cac:	bf00      	nop
 8000cae:	3708      	adds	r7, #8
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}

08000cb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cb8:	f000 faa0 	bl	80011fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cbc:	f000 f824 	bl	8000d08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cc0:	f7ff fa4c 	bl	800015c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000cc4:	f000 fa04 	bl	80010d0 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000cc8:	f000 f922 	bl	8000f10 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &USART_BUF_RX[USART_RX_EMPTY], 1);
 8000ccc:	4b0a      	ldr	r3, [pc, #40]	@ (8000cf8 <main+0x44>)
 8000cce:	881b      	ldrh	r3, [r3, #0]
 8000cd0:	b29b      	uxth	r3, r3
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	4b09      	ldr	r3, [pc, #36]	@ (8000cfc <main+0x48>)
 8000cd6:	4413      	add	r3, r2
 8000cd8:	2201      	movs	r2, #1
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4808      	ldr	r0, [pc, #32]	@ (8000d00 <main+0x4c>)
 8000cde:	f002 f980 	bl	8002fe2 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // jeśli bufor nie jest pusty
	  if (USART_RX_EMPTY != USART_RX_BUSY) {
 8000ce2:	4b05      	ldr	r3, [pc, #20]	@ (8000cf8 <main+0x44>)
 8000ce4:	881b      	ldrh	r3, [r3, #0]
 8000ce6:	b29a      	uxth	r2, r3
 8000ce8:	4b06      	ldr	r3, [pc, #24]	@ (8000d04 <main+0x50>)
 8000cea:	881b      	ldrh	r3, [r3, #0]
 8000cec:	b29b      	uxth	r3, r3
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	d0f7      	beq.n	8000ce2 <main+0x2e>
		  handle_char();
 8000cf2:	f7ff ffcb 	bl	8000c8c <handle_char>
	  if (USART_RX_EMPTY != USART_RX_BUSY) {
 8000cf6:	e7f4      	b.n	8000ce2 <main+0x2e>
 8000cf8:	200000f8 	.word	0x200000f8
 8000cfc:	20000078 	.word	0x20000078
 8000d00:	2000066c 	.word	0x2000066c
 8000d04:	200000fa 	.word	0x200000fa

08000d08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b090      	sub	sp, #64	@ 0x40
 8000d0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d0e:	f107 0318 	add.w	r3, r7, #24
 8000d12:	2228      	movs	r2, #40	@ 0x28
 8000d14:	2100      	movs	r1, #0
 8000d16:	4618      	mov	r0, r3
 8000d18:	f002 ffb0 	bl	8003c7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d1c:	1d3b      	adds	r3, r7, #4
 8000d1e:	2200      	movs	r2, #0
 8000d20:	601a      	str	r2, [r3, #0]
 8000d22:	605a      	str	r2, [r3, #4]
 8000d24:	609a      	str	r2, [r3, #8]
 8000d26:	60da      	str	r2, [r3, #12]
 8000d28:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d32:	2310      	movs	r3, #16
 8000d34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d36:	2302      	movs	r3, #2
 8000d38:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000d3e:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000d42:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d44:	f107 0318 	add.w	r3, r7, #24
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f000 fe37 	bl	80019bc <HAL_RCC_OscConfig>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000d54:	f000 f81a 	bl	8000d8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d58:	230f      	movs	r3, #15
 8000d5a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d60:	2300      	movs	r3, #0
 8000d62:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d64:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d68:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d6e:	1d3b      	adds	r3, r7, #4
 8000d70:	2102      	movs	r1, #2
 8000d72:	4618      	mov	r0, r3
 8000d74:	f001 f8a4 	bl	8001ec0 <HAL_RCC_ClockConfig>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000d7e:	f000 f805 	bl	8000d8c <Error_Handler>
  }
}
 8000d82:	bf00      	nop
 8000d84:	3740      	adds	r7, #64	@ 0x40
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
	...

08000d8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	USART_fsend("problem");
 8000d90:	4803      	ldr	r0, [pc, #12]	@ (8000da0 <Error_Handler+0x14>)
 8000d92:	f7ff fa81 	bl	8000298 <USART_fsend>
  __ASM volatile ("cpsid i" : : : "memory");
 8000d96:	b672      	cpsid	i
}
 8000d98:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d9a:	bf00      	nop
 8000d9c:	e7fd      	b.n	8000d9a <Error_Handler+0xe>
 8000d9e:	bf00      	nop
 8000da0:	080046d4 	.word	0x080046d4

08000da4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b085      	sub	sp, #20
 8000da8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000daa:	4b15      	ldr	r3, [pc, #84]	@ (8000e00 <HAL_MspInit+0x5c>)
 8000dac:	699b      	ldr	r3, [r3, #24]
 8000dae:	4a14      	ldr	r2, [pc, #80]	@ (8000e00 <HAL_MspInit+0x5c>)
 8000db0:	f043 0301 	orr.w	r3, r3, #1
 8000db4:	6193      	str	r3, [r2, #24]
 8000db6:	4b12      	ldr	r3, [pc, #72]	@ (8000e00 <HAL_MspInit+0x5c>)
 8000db8:	699b      	ldr	r3, [r3, #24]
 8000dba:	f003 0301 	and.w	r3, r3, #1
 8000dbe:	60bb      	str	r3, [r7, #8]
 8000dc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dc2:	4b0f      	ldr	r3, [pc, #60]	@ (8000e00 <HAL_MspInit+0x5c>)
 8000dc4:	69db      	ldr	r3, [r3, #28]
 8000dc6:	4a0e      	ldr	r2, [pc, #56]	@ (8000e00 <HAL_MspInit+0x5c>)
 8000dc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dcc:	61d3      	str	r3, [r2, #28]
 8000dce:	4b0c      	ldr	r3, [pc, #48]	@ (8000e00 <HAL_MspInit+0x5c>)
 8000dd0:	69db      	ldr	r3, [r3, #28]
 8000dd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dd6:	607b      	str	r3, [r7, #4]
 8000dd8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000dda:	4b0a      	ldr	r3, [pc, #40]	@ (8000e04 <HAL_MspInit+0x60>)
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	60fb      	str	r3, [r7, #12]
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000de6:	60fb      	str	r3, [r7, #12]
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	4a04      	ldr	r2, [pc, #16]	@ (8000e04 <HAL_MspInit+0x60>)
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000df6:	bf00      	nop
 8000df8:	3714      	adds	r7, #20
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bc80      	pop	{r7}
 8000dfe:	4770      	bx	lr
 8000e00:	40021000 	.word	0x40021000
 8000e04:	40010000 	.word	0x40010000

08000e08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e0c:	bf00      	nop
 8000e0e:	e7fd      	b.n	8000e0c <NMI_Handler+0x4>

08000e10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e14:	bf00      	nop
 8000e16:	e7fd      	b.n	8000e14 <HardFault_Handler+0x4>

08000e18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e1c:	bf00      	nop
 8000e1e:	e7fd      	b.n	8000e1c <MemManage_Handler+0x4>

08000e20 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e24:	bf00      	nop
 8000e26:	e7fd      	b.n	8000e24 <BusFault_Handler+0x4>

08000e28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e2c:	bf00      	nop
 8000e2e:	e7fd      	b.n	8000e2c <UsageFault_Handler+0x4>

08000e30 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e34:	bf00      	nop
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bc80      	pop	{r7}
 8000e3a:	4770      	bx	lr

08000e3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e40:	bf00      	nop
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bc80      	pop	{r7}
 8000e46:	4770      	bx	lr

08000e48 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e4c:	bf00      	nop
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bc80      	pop	{r7}
 8000e52:	4770      	bx	lr

08000e54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e58:	f000 fa16 	bl	8001288 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e5c:	bf00      	nop
 8000e5e:	bd80      	pop	{r7, pc}

08000e60 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e64:	4802      	ldr	r0, [pc, #8]	@ (8000e70 <TIM2_IRQHandler+0x10>)
 8000e66:	f001 fa60 	bl	800232a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000e6a:	bf00      	nop
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	20000624 	.word	0x20000624

08000e74 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e78:	4802      	ldr	r0, [pc, #8]	@ (8000e84 <USART2_IRQHandler+0x10>)
 8000e7a:	f002 f8d7 	bl	800302c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e7e:	bf00      	nop
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	2000066c 	.word	0x2000066c

08000e88 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000e8c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000e90:	f000 fd72 	bl	8001978 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000e94:	bf00      	nop
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b086      	sub	sp, #24
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ea0:	4a14      	ldr	r2, [pc, #80]	@ (8000ef4 <_sbrk+0x5c>)
 8000ea2:	4b15      	ldr	r3, [pc, #84]	@ (8000ef8 <_sbrk+0x60>)
 8000ea4:	1ad3      	subs	r3, r2, r3
 8000ea6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000eac:	4b13      	ldr	r3, [pc, #76]	@ (8000efc <_sbrk+0x64>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d102      	bne.n	8000eba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000eb4:	4b11      	ldr	r3, [pc, #68]	@ (8000efc <_sbrk+0x64>)
 8000eb6:	4a12      	ldr	r2, [pc, #72]	@ (8000f00 <_sbrk+0x68>)
 8000eb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eba:	4b10      	ldr	r3, [pc, #64]	@ (8000efc <_sbrk+0x64>)
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4413      	add	r3, r2
 8000ec2:	693a      	ldr	r2, [r7, #16]
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	d207      	bcs.n	8000ed8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ec8:	f002 ff00 	bl	8003ccc <__errno>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	220c      	movs	r2, #12
 8000ed0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ed6:	e009      	b.n	8000eec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ed8:	4b08      	ldr	r3, [pc, #32]	@ (8000efc <_sbrk+0x64>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ede:	4b07      	ldr	r3, [pc, #28]	@ (8000efc <_sbrk+0x64>)
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4413      	add	r3, r2
 8000ee6:	4a05      	ldr	r2, [pc, #20]	@ (8000efc <_sbrk+0x64>)
 8000ee8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eea:	68fb      	ldr	r3, [r7, #12]
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	3718      	adds	r7, #24
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	20005000 	.word	0x20005000
 8000ef8:	00000400 	.word	0x00000400
 8000efc:	20000620 	.word	0x20000620
 8000f00:	20000800 	.word	0x20000800

08000f04 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f08:	bf00      	nop
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bc80      	pop	{r7}
 8000f0e:	4770      	bx	lr

08000f10 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b090      	sub	sp, #64	@ 0x40
 8000f14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f16:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	601a      	str	r2, [r3, #0]
 8000f1e:	605a      	str	r2, [r3, #4]
 8000f20:	609a      	str	r2, [r3, #8]
 8000f22:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000f24:	f107 031c 	add.w	r3, r7, #28
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	605a      	str	r2, [r3, #4]
 8000f2e:	609a      	str	r2, [r3, #8]
 8000f30:	60da      	str	r2, [r3, #12]
 8000f32:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000f34:	f107 030c 	add.w	r3, r7, #12
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]
 8000f3c:	605a      	str	r2, [r3, #4]
 8000f3e:	609a      	str	r2, [r3, #8]
 8000f40:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f42:	1d3b      	adds	r3, r7, #4
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f4a:	4b3e      	ldr	r3, [pc, #248]	@ (8001044 <MX_TIM2_Init+0x134>)
 8000f4c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f50:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31;
 8000f52:	4b3c      	ldr	r3, [pc, #240]	@ (8001044 <MX_TIM2_Init+0x134>)
 8000f54:	221f      	movs	r2, #31
 8000f56:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f58:	4b3a      	ldr	r3, [pc, #232]	@ (8001044 <MX_TIM2_Init+0x134>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000f5e:	4b39      	ldr	r3, [pc, #228]	@ (8001044 <MX_TIM2_Init+0x134>)
 8000f60:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f64:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f66:	4b37      	ldr	r3, [pc, #220]	@ (8001044 <MX_TIM2_Init+0x134>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f6c:	4b35      	ldr	r3, [pc, #212]	@ (8001044 <MX_TIM2_Init+0x134>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f72:	4834      	ldr	r0, [pc, #208]	@ (8001044 <MX_TIM2_Init+0x134>)
 8000f74:	f001 f932 	bl	80021dc <HAL_TIM_Base_Init>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000f7e:	f7ff ff05 	bl	8000d8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f82:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f86:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f88:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	482d      	ldr	r0, [pc, #180]	@ (8001044 <MX_TIM2_Init+0x134>)
 8000f90:	f001 fb57 	bl	8002642 <HAL_TIM_ConfigClockSource>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000f9a:	f7ff fef7 	bl	8000d8c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000f9e:	4829      	ldr	r0, [pc, #164]	@ (8001044 <MX_TIM2_Init+0x134>)
 8000fa0:	f001 f96b 	bl	800227a <HAL_TIM_IC_Init>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000faa:	f7ff feef 	bl	8000d8c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000fae:	2304      	movs	r3, #4
 8000fb0:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000fb2:	2350      	movs	r3, #80	@ 0x50
 8000fb4:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000fc2:	f107 031c 	add.w	r3, r7, #28
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	481e      	ldr	r0, [pc, #120]	@ (8001044 <MX_TIM2_Init+0x134>)
 8000fca:	f001 fc01 	bl	80027d0 <HAL_TIM_SlaveConfigSynchro>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <MX_TIM2_Init+0xc8>
  {
    Error_Handler();
 8000fd4:	f7ff feda 	bl	8000d8c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000fe8:	f107 030c 	add.w	r3, r7, #12
 8000fec:	2200      	movs	r2, #0
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4814      	ldr	r0, [pc, #80]	@ (8001044 <MX_TIM2_Init+0x134>)
 8000ff2:	f001 fa8a 	bl	800250a <HAL_TIM_IC_ConfigChannel>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8000ffc:	f7ff fec6 	bl	8000d8c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001000:	2302      	movs	r3, #2
 8001002:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001004:	2302      	movs	r3, #2
 8001006:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001008:	f107 030c 	add.w	r3, r7, #12
 800100c:	2204      	movs	r2, #4
 800100e:	4619      	mov	r1, r3
 8001010:	480c      	ldr	r0, [pc, #48]	@ (8001044 <MX_TIM2_Init+0x134>)
 8001012:	f001 fa7a 	bl	800250a <HAL_TIM_IC_ConfigChannel>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <MX_TIM2_Init+0x110>
  {
    Error_Handler();
 800101c:	f7ff feb6 	bl	8000d8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001020:	2300      	movs	r3, #0
 8001022:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001024:	2300      	movs	r3, #0
 8001026:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001028:	1d3b      	adds	r3, r7, #4
 800102a:	4619      	mov	r1, r3
 800102c:	4805      	ldr	r0, [pc, #20]	@ (8001044 <MX_TIM2_Init+0x134>)
 800102e:	f001 fee3 	bl	8002df8 <HAL_TIMEx_MasterConfigSynchronization>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <MX_TIM2_Init+0x12c>
  {
    Error_Handler();
 8001038:	f7ff fea8 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800103c:	bf00      	nop
 800103e:	3740      	adds	r7, #64	@ 0x40
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	20000624 	.word	0x20000624

08001048 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b088      	sub	sp, #32
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001050:	f107 0310 	add.w	r3, r7, #16
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	605a      	str	r2, [r3, #4]
 800105a:	609a      	str	r2, [r3, #8]
 800105c:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM2)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001066:	d12b      	bne.n	80010c0 <HAL_TIM_Base_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001068:	4b17      	ldr	r3, [pc, #92]	@ (80010c8 <HAL_TIM_Base_MspInit+0x80>)
 800106a:	69db      	ldr	r3, [r3, #28]
 800106c:	4a16      	ldr	r2, [pc, #88]	@ (80010c8 <HAL_TIM_Base_MspInit+0x80>)
 800106e:	f043 0301 	orr.w	r3, r3, #1
 8001072:	61d3      	str	r3, [r2, #28]
 8001074:	4b14      	ldr	r3, [pc, #80]	@ (80010c8 <HAL_TIM_Base_MspInit+0x80>)
 8001076:	69db      	ldr	r3, [r3, #28]
 8001078:	f003 0301 	and.w	r3, r3, #1
 800107c:	60fb      	str	r3, [r7, #12]
 800107e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001080:	4b11      	ldr	r3, [pc, #68]	@ (80010c8 <HAL_TIM_Base_MspInit+0x80>)
 8001082:	699b      	ldr	r3, [r3, #24]
 8001084:	4a10      	ldr	r2, [pc, #64]	@ (80010c8 <HAL_TIM_Base_MspInit+0x80>)
 8001086:	f043 0304 	orr.w	r3, r3, #4
 800108a:	6193      	str	r3, [r2, #24]
 800108c:	4b0e      	ldr	r3, [pc, #56]	@ (80010c8 <HAL_TIM_Base_MspInit+0x80>)
 800108e:	699b      	ldr	r3, [r3, #24]
 8001090:	f003 0304 	and.w	r3, r3, #4
 8001094:	60bb      	str	r3, [r7, #8]
 8001096:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001098:	2301      	movs	r3, #1
 800109a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800109c:	2300      	movs	r3, #0
 800109e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a0:	2300      	movs	r3, #0
 80010a2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a4:	f107 0310 	add.w	r3, r7, #16
 80010a8:	4619      	mov	r1, r3
 80010aa:	4808      	ldr	r0, [pc, #32]	@ (80010cc <HAL_TIM_Base_MspInit+0x84>)
 80010ac:	f000 fac8 	bl	8001640 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80010b0:	2200      	movs	r2, #0
 80010b2:	2100      	movs	r1, #0
 80010b4:	201c      	movs	r0, #28
 80010b6:	f000 f9da 	bl	800146e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80010ba:	201c      	movs	r0, #28
 80010bc:	f000 f9f3 	bl	80014a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80010c0:	bf00      	nop
 80010c2:	3720      	adds	r7, #32
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	40021000 	.word	0x40021000
 80010cc:	40010800 	.word	0x40010800

080010d0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010d4:	4b11      	ldr	r3, [pc, #68]	@ (800111c <MX_USART2_UART_Init+0x4c>)
 80010d6:	4a12      	ldr	r2, [pc, #72]	@ (8001120 <MX_USART2_UART_Init+0x50>)
 80010d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010da:	4b10      	ldr	r3, [pc, #64]	@ (800111c <MX_USART2_UART_Init+0x4c>)
 80010dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010e2:	4b0e      	ldr	r3, [pc, #56]	@ (800111c <MX_USART2_UART_Init+0x4c>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010e8:	4b0c      	ldr	r3, [pc, #48]	@ (800111c <MX_USART2_UART_Init+0x4c>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010ee:	4b0b      	ldr	r3, [pc, #44]	@ (800111c <MX_USART2_UART_Init+0x4c>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010f4:	4b09      	ldr	r3, [pc, #36]	@ (800111c <MX_USART2_UART_Init+0x4c>)
 80010f6:	220c      	movs	r2, #12
 80010f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010fa:	4b08      	ldr	r3, [pc, #32]	@ (800111c <MX_USART2_UART_Init+0x4c>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001100:	4b06      	ldr	r3, [pc, #24]	@ (800111c <MX_USART2_UART_Init+0x4c>)
 8001102:	2200      	movs	r2, #0
 8001104:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001106:	4805      	ldr	r0, [pc, #20]	@ (800111c <MX_USART2_UART_Init+0x4c>)
 8001108:	f001 fee6 	bl	8002ed8 <HAL_UART_Init>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001112:	f7ff fe3b 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001116:	bf00      	nop
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	2000066c 	.word	0x2000066c
 8001120:	40004400 	.word	0x40004400

08001124 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b088      	sub	sp, #32
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112c:	f107 0310 	add.w	r3, r7, #16
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a19      	ldr	r2, [pc, #100]	@ (80011a4 <HAL_UART_MspInit+0x80>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d12b      	bne.n	800119c <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001144:	4b18      	ldr	r3, [pc, #96]	@ (80011a8 <HAL_UART_MspInit+0x84>)
 8001146:	69db      	ldr	r3, [r3, #28]
 8001148:	4a17      	ldr	r2, [pc, #92]	@ (80011a8 <HAL_UART_MspInit+0x84>)
 800114a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800114e:	61d3      	str	r3, [r2, #28]
 8001150:	4b15      	ldr	r3, [pc, #84]	@ (80011a8 <HAL_UART_MspInit+0x84>)
 8001152:	69db      	ldr	r3, [r3, #28]
 8001154:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001158:	60fb      	str	r3, [r7, #12]
 800115a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800115c:	4b12      	ldr	r3, [pc, #72]	@ (80011a8 <HAL_UART_MspInit+0x84>)
 800115e:	699b      	ldr	r3, [r3, #24]
 8001160:	4a11      	ldr	r2, [pc, #68]	@ (80011a8 <HAL_UART_MspInit+0x84>)
 8001162:	f043 0304 	orr.w	r3, r3, #4
 8001166:	6193      	str	r3, [r2, #24]
 8001168:	4b0f      	ldr	r3, [pc, #60]	@ (80011a8 <HAL_UART_MspInit+0x84>)
 800116a:	699b      	ldr	r3, [r3, #24]
 800116c:	f003 0304 	and.w	r3, r3, #4
 8001170:	60bb      	str	r3, [r7, #8]
 8001172:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001174:	230c      	movs	r3, #12
 8001176:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001178:	2302      	movs	r3, #2
 800117a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117c:	2302      	movs	r3, #2
 800117e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001180:	f107 0310 	add.w	r3, r7, #16
 8001184:	4619      	mov	r1, r3
 8001186:	4809      	ldr	r0, [pc, #36]	@ (80011ac <HAL_UART_MspInit+0x88>)
 8001188:	f000 fa5a 	bl	8001640 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800118c:	2200      	movs	r2, #0
 800118e:	2100      	movs	r1, #0
 8001190:	2026      	movs	r0, #38	@ 0x26
 8001192:	f000 f96c 	bl	800146e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001196:	2026      	movs	r0, #38	@ 0x26
 8001198:	f000 f985 	bl	80014a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800119c:	bf00      	nop
 800119e:	3720      	adds	r7, #32
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	40004400 	.word	0x40004400
 80011a8:	40021000 	.word	0x40021000
 80011ac:	40010800 	.word	0x40010800

080011b0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011b0:	f7ff fea8 	bl	8000f04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011b4:	480b      	ldr	r0, [pc, #44]	@ (80011e4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80011b6:	490c      	ldr	r1, [pc, #48]	@ (80011e8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80011b8:	4a0c      	ldr	r2, [pc, #48]	@ (80011ec <LoopFillZerobss+0x16>)
  movs r3, #0
 80011ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011bc:	e002      	b.n	80011c4 <LoopCopyDataInit>

080011be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011c2:	3304      	adds	r3, #4

080011c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011c8:	d3f9      	bcc.n	80011be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011ca:	4a09      	ldr	r2, [pc, #36]	@ (80011f0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80011cc:	4c09      	ldr	r4, [pc, #36]	@ (80011f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011d0:	e001      	b.n	80011d6 <LoopFillZerobss>

080011d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011d4:	3204      	adds	r2, #4

080011d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011d8:	d3fb      	bcc.n	80011d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011da:	f002 fd7d 	bl	8003cd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011de:	f7ff fd69 	bl	8000cb4 <main>
  bx lr
 80011e2:	4770      	bx	lr
  ldr r0, =_sdata
 80011e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011e8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80011ec:	0800484c 	.word	0x0800484c
  ldr r2, =_sbss
 80011f0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80011f4:	20000800 	.word	0x20000800

080011f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011f8:	e7fe      	b.n	80011f8 <ADC1_2_IRQHandler>
	...

080011fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001200:	4b08      	ldr	r3, [pc, #32]	@ (8001224 <HAL_Init+0x28>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a07      	ldr	r2, [pc, #28]	@ (8001224 <HAL_Init+0x28>)
 8001206:	f043 0310 	orr.w	r3, r3, #16
 800120a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800120c:	2003      	movs	r0, #3
 800120e:	f000 f923 	bl	8001458 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001212:	2000      	movs	r0, #0
 8001214:	f000 f808 	bl	8001228 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001218:	f7ff fdc4 	bl	8000da4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800121c:	2300      	movs	r3, #0
}
 800121e:	4618      	mov	r0, r3
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40022000 	.word	0x40022000

08001228 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001230:	4b12      	ldr	r3, [pc, #72]	@ (800127c <HAL_InitTick+0x54>)
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	4b12      	ldr	r3, [pc, #72]	@ (8001280 <HAL_InitTick+0x58>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	4619      	mov	r1, r3
 800123a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800123e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001242:	fbb2 f3f3 	udiv	r3, r2, r3
 8001246:	4618      	mov	r0, r3
 8001248:	f000 f93b 	bl	80014c2 <HAL_SYSTICK_Config>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	e00e      	b.n	8001274 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2b0f      	cmp	r3, #15
 800125a:	d80a      	bhi.n	8001272 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800125c:	2200      	movs	r2, #0
 800125e:	6879      	ldr	r1, [r7, #4]
 8001260:	f04f 30ff 	mov.w	r0, #4294967295
 8001264:	f000 f903 	bl	800146e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001268:	4a06      	ldr	r2, [pc, #24]	@ (8001284 <HAL_InitTick+0x5c>)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800126e:	2300      	movs	r3, #0
 8001270:	e000      	b.n	8001274 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
}
 8001274:	4618      	mov	r0, r3
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	20000000 	.word	0x20000000
 8001280:	20000008 	.word	0x20000008
 8001284:	20000004 	.word	0x20000004

08001288 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800128c:	4b05      	ldr	r3, [pc, #20]	@ (80012a4 <HAL_IncTick+0x1c>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	461a      	mov	r2, r3
 8001292:	4b05      	ldr	r3, [pc, #20]	@ (80012a8 <HAL_IncTick+0x20>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4413      	add	r3, r2
 8001298:	4a03      	ldr	r2, [pc, #12]	@ (80012a8 <HAL_IncTick+0x20>)
 800129a:	6013      	str	r3, [r2, #0]
}
 800129c:	bf00      	nop
 800129e:	46bd      	mov	sp, r7
 80012a0:	bc80      	pop	{r7}
 80012a2:	4770      	bx	lr
 80012a4:	20000008 	.word	0x20000008
 80012a8:	200006b4 	.word	0x200006b4

080012ac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  return uwTick;
 80012b0:	4b02      	ldr	r3, [pc, #8]	@ (80012bc <HAL_GetTick+0x10>)
 80012b2:	681b      	ldr	r3, [r3, #0]
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bc80      	pop	{r7}
 80012ba:	4770      	bx	lr
 80012bc:	200006b4 	.word	0x200006b4

080012c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b085      	sub	sp, #20
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	f003 0307 	and.w	r3, r3, #7
 80012ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001304 <__NVIC_SetPriorityGrouping+0x44>)
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012d6:	68ba      	ldr	r2, [r7, #8]
 80012d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012dc:	4013      	ands	r3, r2
 80012de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012f2:	4a04      	ldr	r2, [pc, #16]	@ (8001304 <__NVIC_SetPriorityGrouping+0x44>)
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	60d3      	str	r3, [r2, #12]
}
 80012f8:	bf00      	nop
 80012fa:	3714      	adds	r7, #20
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bc80      	pop	{r7}
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	e000ed00 	.word	0xe000ed00

08001308 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800130c:	4b04      	ldr	r3, [pc, #16]	@ (8001320 <__NVIC_GetPriorityGrouping+0x18>)
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	0a1b      	lsrs	r3, r3, #8
 8001312:	f003 0307 	and.w	r3, r3, #7
}
 8001316:	4618      	mov	r0, r3
 8001318:	46bd      	mov	sp, r7
 800131a:	bc80      	pop	{r7}
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	e000ed00 	.word	0xe000ed00

08001324 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800132e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001332:	2b00      	cmp	r3, #0
 8001334:	db0b      	blt.n	800134e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001336:	79fb      	ldrb	r3, [r7, #7]
 8001338:	f003 021f 	and.w	r2, r3, #31
 800133c:	4906      	ldr	r1, [pc, #24]	@ (8001358 <__NVIC_EnableIRQ+0x34>)
 800133e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001342:	095b      	lsrs	r3, r3, #5
 8001344:	2001      	movs	r0, #1
 8001346:	fa00 f202 	lsl.w	r2, r0, r2
 800134a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800134e:	bf00      	nop
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	bc80      	pop	{r7}
 8001356:	4770      	bx	lr
 8001358:	e000e100 	.word	0xe000e100

0800135c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	4603      	mov	r3, r0
 8001364:	6039      	str	r1, [r7, #0]
 8001366:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001368:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136c:	2b00      	cmp	r3, #0
 800136e:	db0a      	blt.n	8001386 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	b2da      	uxtb	r2, r3
 8001374:	490c      	ldr	r1, [pc, #48]	@ (80013a8 <__NVIC_SetPriority+0x4c>)
 8001376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137a:	0112      	lsls	r2, r2, #4
 800137c:	b2d2      	uxtb	r2, r2
 800137e:	440b      	add	r3, r1
 8001380:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001384:	e00a      	b.n	800139c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	b2da      	uxtb	r2, r3
 800138a:	4908      	ldr	r1, [pc, #32]	@ (80013ac <__NVIC_SetPriority+0x50>)
 800138c:	79fb      	ldrb	r3, [r7, #7]
 800138e:	f003 030f 	and.w	r3, r3, #15
 8001392:	3b04      	subs	r3, #4
 8001394:	0112      	lsls	r2, r2, #4
 8001396:	b2d2      	uxtb	r2, r2
 8001398:	440b      	add	r3, r1
 800139a:	761a      	strb	r2, [r3, #24]
}
 800139c:	bf00      	nop
 800139e:	370c      	adds	r7, #12
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bc80      	pop	{r7}
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	e000e100 	.word	0xe000e100
 80013ac:	e000ed00 	.word	0xe000ed00

080013b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b089      	sub	sp, #36	@ 0x24
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	60f8      	str	r0, [r7, #12]
 80013b8:	60b9      	str	r1, [r7, #8]
 80013ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	f003 0307 	and.w	r3, r3, #7
 80013c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	f1c3 0307 	rsb	r3, r3, #7
 80013ca:	2b04      	cmp	r3, #4
 80013cc:	bf28      	it	cs
 80013ce:	2304      	movcs	r3, #4
 80013d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	3304      	adds	r3, #4
 80013d6:	2b06      	cmp	r3, #6
 80013d8:	d902      	bls.n	80013e0 <NVIC_EncodePriority+0x30>
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	3b03      	subs	r3, #3
 80013de:	e000      	b.n	80013e2 <NVIC_EncodePriority+0x32>
 80013e0:	2300      	movs	r3, #0
 80013e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e4:	f04f 32ff 	mov.w	r2, #4294967295
 80013e8:	69bb      	ldr	r3, [r7, #24]
 80013ea:	fa02 f303 	lsl.w	r3, r2, r3
 80013ee:	43da      	mvns	r2, r3
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	401a      	ands	r2, r3
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013f8:	f04f 31ff 	mov.w	r1, #4294967295
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001402:	43d9      	mvns	r1, r3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001408:	4313      	orrs	r3, r2
         );
}
 800140a:	4618      	mov	r0, r3
 800140c:	3724      	adds	r7, #36	@ 0x24
 800140e:	46bd      	mov	sp, r7
 8001410:	bc80      	pop	{r7}
 8001412:	4770      	bx	lr

08001414 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	3b01      	subs	r3, #1
 8001420:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001424:	d301      	bcc.n	800142a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001426:	2301      	movs	r3, #1
 8001428:	e00f      	b.n	800144a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800142a:	4a0a      	ldr	r2, [pc, #40]	@ (8001454 <SysTick_Config+0x40>)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	3b01      	subs	r3, #1
 8001430:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001432:	210f      	movs	r1, #15
 8001434:	f04f 30ff 	mov.w	r0, #4294967295
 8001438:	f7ff ff90 	bl	800135c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800143c:	4b05      	ldr	r3, [pc, #20]	@ (8001454 <SysTick_Config+0x40>)
 800143e:	2200      	movs	r2, #0
 8001440:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001442:	4b04      	ldr	r3, [pc, #16]	@ (8001454 <SysTick_Config+0x40>)
 8001444:	2207      	movs	r2, #7
 8001446:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001448:	2300      	movs	r3, #0
}
 800144a:	4618      	mov	r0, r3
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	e000e010 	.word	0xe000e010

08001458 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001460:	6878      	ldr	r0, [r7, #4]
 8001462:	f7ff ff2d 	bl	80012c0 <__NVIC_SetPriorityGrouping>
}
 8001466:	bf00      	nop
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}

0800146e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800146e:	b580      	push	{r7, lr}
 8001470:	b086      	sub	sp, #24
 8001472:	af00      	add	r7, sp, #0
 8001474:	4603      	mov	r3, r0
 8001476:	60b9      	str	r1, [r7, #8]
 8001478:	607a      	str	r2, [r7, #4]
 800147a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800147c:	2300      	movs	r3, #0
 800147e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001480:	f7ff ff42 	bl	8001308 <__NVIC_GetPriorityGrouping>
 8001484:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	68b9      	ldr	r1, [r7, #8]
 800148a:	6978      	ldr	r0, [r7, #20]
 800148c:	f7ff ff90 	bl	80013b0 <NVIC_EncodePriority>
 8001490:	4602      	mov	r2, r0
 8001492:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001496:	4611      	mov	r1, r2
 8001498:	4618      	mov	r0, r3
 800149a:	f7ff ff5f 	bl	800135c <__NVIC_SetPriority>
}
 800149e:	bf00      	nop
 80014a0:	3718      	adds	r7, #24
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b082      	sub	sp, #8
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	4603      	mov	r3, r0
 80014ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff ff35 	bl	8001324 <__NVIC_EnableIRQ>
}
 80014ba:	bf00      	nop
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b082      	sub	sp, #8
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f7ff ffa2 	bl	8001414 <SysTick_Config>
 80014d0:	4603      	mov	r3, r0
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}

080014da <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014da:	b480      	push	{r7}
 80014dc:	b085      	sub	sp, #20
 80014de:	af00      	add	r7, sp, #0
 80014e0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014e2:	2300      	movs	r3, #0
 80014e4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d008      	beq.n	8001504 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2204      	movs	r2, #4
 80014f6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2200      	movs	r2, #0
 80014fc:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001500:	2301      	movs	r3, #1
 8001502:	e020      	b.n	8001546 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f022 020e 	bic.w	r2, r2, #14
 8001512:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f022 0201 	bic.w	r2, r2, #1
 8001522:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800152c:	2101      	movs	r1, #1
 800152e:	fa01 f202 	lsl.w	r2, r1, r2
 8001532:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2201      	movs	r2, #1
 8001538:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2200      	movs	r2, #0
 8001540:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001544:	7bfb      	ldrb	r3, [r7, #15]
}
 8001546:	4618      	mov	r0, r3
 8001548:	3714      	adds	r7, #20
 800154a:	46bd      	mov	sp, r7
 800154c:	bc80      	pop	{r7}
 800154e:	4770      	bx	lr

08001550 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001558:	2300      	movs	r3, #0
 800155a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001562:	b2db      	uxtb	r3, r3
 8001564:	2b02      	cmp	r3, #2
 8001566:	d005      	beq.n	8001574 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2204      	movs	r2, #4
 800156c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	73fb      	strb	r3, [r7, #15]
 8001572:	e051      	b.n	8001618 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f022 020e 	bic.w	r2, r2, #14
 8001582:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f022 0201 	bic.w	r2, r2, #1
 8001592:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a22      	ldr	r2, [pc, #136]	@ (8001624 <HAL_DMA_Abort_IT+0xd4>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d029      	beq.n	80015f2 <HAL_DMA_Abort_IT+0xa2>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a21      	ldr	r2, [pc, #132]	@ (8001628 <HAL_DMA_Abort_IT+0xd8>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d022      	beq.n	80015ee <HAL_DMA_Abort_IT+0x9e>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a1f      	ldr	r2, [pc, #124]	@ (800162c <HAL_DMA_Abort_IT+0xdc>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d01a      	beq.n	80015e8 <HAL_DMA_Abort_IT+0x98>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a1e      	ldr	r2, [pc, #120]	@ (8001630 <HAL_DMA_Abort_IT+0xe0>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d012      	beq.n	80015e2 <HAL_DMA_Abort_IT+0x92>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a1c      	ldr	r2, [pc, #112]	@ (8001634 <HAL_DMA_Abort_IT+0xe4>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d00a      	beq.n	80015dc <HAL_DMA_Abort_IT+0x8c>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a1b      	ldr	r2, [pc, #108]	@ (8001638 <HAL_DMA_Abort_IT+0xe8>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d102      	bne.n	80015d6 <HAL_DMA_Abort_IT+0x86>
 80015d0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80015d4:	e00e      	b.n	80015f4 <HAL_DMA_Abort_IT+0xa4>
 80015d6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80015da:	e00b      	b.n	80015f4 <HAL_DMA_Abort_IT+0xa4>
 80015dc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80015e0:	e008      	b.n	80015f4 <HAL_DMA_Abort_IT+0xa4>
 80015e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015e6:	e005      	b.n	80015f4 <HAL_DMA_Abort_IT+0xa4>
 80015e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80015ec:	e002      	b.n	80015f4 <HAL_DMA_Abort_IT+0xa4>
 80015ee:	2310      	movs	r3, #16
 80015f0:	e000      	b.n	80015f4 <HAL_DMA_Abort_IT+0xa4>
 80015f2:	2301      	movs	r3, #1
 80015f4:	4a11      	ldr	r2, [pc, #68]	@ (800163c <HAL_DMA_Abort_IT+0xec>)
 80015f6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2201      	movs	r2, #1
 80015fc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2200      	movs	r2, #0
 8001604:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800160c:	2b00      	cmp	r3, #0
 800160e:	d003      	beq.n	8001618 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	4798      	blx	r3
    } 
  }
  return status;
 8001618:	7bfb      	ldrb	r3, [r7, #15]
}
 800161a:	4618      	mov	r0, r3
 800161c:	3710      	adds	r7, #16
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	40020008 	.word	0x40020008
 8001628:	4002001c 	.word	0x4002001c
 800162c:	40020030 	.word	0x40020030
 8001630:	40020044 	.word	0x40020044
 8001634:	40020058 	.word	0x40020058
 8001638:	4002006c 	.word	0x4002006c
 800163c:	40020000 	.word	0x40020000

08001640 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001640:	b480      	push	{r7}
 8001642:	b08b      	sub	sp, #44	@ 0x2c
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800164a:	2300      	movs	r3, #0
 800164c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800164e:	2300      	movs	r3, #0
 8001650:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001652:	e169      	b.n	8001928 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001654:	2201      	movs	r2, #1
 8001656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001658:	fa02 f303 	lsl.w	r3, r2, r3
 800165c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	69fa      	ldr	r2, [r7, #28]
 8001664:	4013      	ands	r3, r2
 8001666:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001668:	69ba      	ldr	r2, [r7, #24]
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	429a      	cmp	r2, r3
 800166e:	f040 8158 	bne.w	8001922 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	4a9a      	ldr	r2, [pc, #616]	@ (80018e0 <HAL_GPIO_Init+0x2a0>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d05e      	beq.n	800173a <HAL_GPIO_Init+0xfa>
 800167c:	4a98      	ldr	r2, [pc, #608]	@ (80018e0 <HAL_GPIO_Init+0x2a0>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d875      	bhi.n	800176e <HAL_GPIO_Init+0x12e>
 8001682:	4a98      	ldr	r2, [pc, #608]	@ (80018e4 <HAL_GPIO_Init+0x2a4>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d058      	beq.n	800173a <HAL_GPIO_Init+0xfa>
 8001688:	4a96      	ldr	r2, [pc, #600]	@ (80018e4 <HAL_GPIO_Init+0x2a4>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d86f      	bhi.n	800176e <HAL_GPIO_Init+0x12e>
 800168e:	4a96      	ldr	r2, [pc, #600]	@ (80018e8 <HAL_GPIO_Init+0x2a8>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d052      	beq.n	800173a <HAL_GPIO_Init+0xfa>
 8001694:	4a94      	ldr	r2, [pc, #592]	@ (80018e8 <HAL_GPIO_Init+0x2a8>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d869      	bhi.n	800176e <HAL_GPIO_Init+0x12e>
 800169a:	4a94      	ldr	r2, [pc, #592]	@ (80018ec <HAL_GPIO_Init+0x2ac>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d04c      	beq.n	800173a <HAL_GPIO_Init+0xfa>
 80016a0:	4a92      	ldr	r2, [pc, #584]	@ (80018ec <HAL_GPIO_Init+0x2ac>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d863      	bhi.n	800176e <HAL_GPIO_Init+0x12e>
 80016a6:	4a92      	ldr	r2, [pc, #584]	@ (80018f0 <HAL_GPIO_Init+0x2b0>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d046      	beq.n	800173a <HAL_GPIO_Init+0xfa>
 80016ac:	4a90      	ldr	r2, [pc, #576]	@ (80018f0 <HAL_GPIO_Init+0x2b0>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d85d      	bhi.n	800176e <HAL_GPIO_Init+0x12e>
 80016b2:	2b12      	cmp	r3, #18
 80016b4:	d82a      	bhi.n	800170c <HAL_GPIO_Init+0xcc>
 80016b6:	2b12      	cmp	r3, #18
 80016b8:	d859      	bhi.n	800176e <HAL_GPIO_Init+0x12e>
 80016ba:	a201      	add	r2, pc, #4	@ (adr r2, 80016c0 <HAL_GPIO_Init+0x80>)
 80016bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016c0:	0800173b 	.word	0x0800173b
 80016c4:	08001715 	.word	0x08001715
 80016c8:	08001727 	.word	0x08001727
 80016cc:	08001769 	.word	0x08001769
 80016d0:	0800176f 	.word	0x0800176f
 80016d4:	0800176f 	.word	0x0800176f
 80016d8:	0800176f 	.word	0x0800176f
 80016dc:	0800176f 	.word	0x0800176f
 80016e0:	0800176f 	.word	0x0800176f
 80016e4:	0800176f 	.word	0x0800176f
 80016e8:	0800176f 	.word	0x0800176f
 80016ec:	0800176f 	.word	0x0800176f
 80016f0:	0800176f 	.word	0x0800176f
 80016f4:	0800176f 	.word	0x0800176f
 80016f8:	0800176f 	.word	0x0800176f
 80016fc:	0800176f 	.word	0x0800176f
 8001700:	0800176f 	.word	0x0800176f
 8001704:	0800171d 	.word	0x0800171d
 8001708:	08001731 	.word	0x08001731
 800170c:	4a79      	ldr	r2, [pc, #484]	@ (80018f4 <HAL_GPIO_Init+0x2b4>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d013      	beq.n	800173a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001712:	e02c      	b.n	800176e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	623b      	str	r3, [r7, #32]
          break;
 800171a:	e029      	b.n	8001770 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	3304      	adds	r3, #4
 8001722:	623b      	str	r3, [r7, #32]
          break;
 8001724:	e024      	b.n	8001770 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	68db      	ldr	r3, [r3, #12]
 800172a:	3308      	adds	r3, #8
 800172c:	623b      	str	r3, [r7, #32]
          break;
 800172e:	e01f      	b.n	8001770 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	330c      	adds	r3, #12
 8001736:	623b      	str	r3, [r7, #32]
          break;
 8001738:	e01a      	b.n	8001770 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d102      	bne.n	8001748 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001742:	2304      	movs	r3, #4
 8001744:	623b      	str	r3, [r7, #32]
          break;
 8001746:	e013      	b.n	8001770 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	2b01      	cmp	r3, #1
 800174e:	d105      	bne.n	800175c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001750:	2308      	movs	r3, #8
 8001752:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	69fa      	ldr	r2, [r7, #28]
 8001758:	611a      	str	r2, [r3, #16]
          break;
 800175a:	e009      	b.n	8001770 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800175c:	2308      	movs	r3, #8
 800175e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	69fa      	ldr	r2, [r7, #28]
 8001764:	615a      	str	r2, [r3, #20]
          break;
 8001766:	e003      	b.n	8001770 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001768:	2300      	movs	r3, #0
 800176a:	623b      	str	r3, [r7, #32]
          break;
 800176c:	e000      	b.n	8001770 <HAL_GPIO_Init+0x130>
          break;
 800176e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001770:	69bb      	ldr	r3, [r7, #24]
 8001772:	2bff      	cmp	r3, #255	@ 0xff
 8001774:	d801      	bhi.n	800177a <HAL_GPIO_Init+0x13a>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	e001      	b.n	800177e <HAL_GPIO_Init+0x13e>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	3304      	adds	r3, #4
 800177e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001780:	69bb      	ldr	r3, [r7, #24]
 8001782:	2bff      	cmp	r3, #255	@ 0xff
 8001784:	d802      	bhi.n	800178c <HAL_GPIO_Init+0x14c>
 8001786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	e002      	b.n	8001792 <HAL_GPIO_Init+0x152>
 800178c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800178e:	3b08      	subs	r3, #8
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	210f      	movs	r1, #15
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	fa01 f303 	lsl.w	r3, r1, r3
 80017a0:	43db      	mvns	r3, r3
 80017a2:	401a      	ands	r2, r3
 80017a4:	6a39      	ldr	r1, [r7, #32]
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	fa01 f303 	lsl.w	r3, r1, r3
 80017ac:	431a      	orrs	r2, r3
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	f000 80b1 	beq.w	8001922 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80017c0:	4b4d      	ldr	r3, [pc, #308]	@ (80018f8 <HAL_GPIO_Init+0x2b8>)
 80017c2:	699b      	ldr	r3, [r3, #24]
 80017c4:	4a4c      	ldr	r2, [pc, #304]	@ (80018f8 <HAL_GPIO_Init+0x2b8>)
 80017c6:	f043 0301 	orr.w	r3, r3, #1
 80017ca:	6193      	str	r3, [r2, #24]
 80017cc:	4b4a      	ldr	r3, [pc, #296]	@ (80018f8 <HAL_GPIO_Init+0x2b8>)
 80017ce:	699b      	ldr	r3, [r3, #24]
 80017d0:	f003 0301 	and.w	r3, r3, #1
 80017d4:	60bb      	str	r3, [r7, #8]
 80017d6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80017d8:	4a48      	ldr	r2, [pc, #288]	@ (80018fc <HAL_GPIO_Init+0x2bc>)
 80017da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017dc:	089b      	lsrs	r3, r3, #2
 80017de:	3302      	adds	r3, #2
 80017e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017e4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80017e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017e8:	f003 0303 	and.w	r3, r3, #3
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	220f      	movs	r2, #15
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	43db      	mvns	r3, r3
 80017f6:	68fa      	ldr	r2, [r7, #12]
 80017f8:	4013      	ands	r3, r2
 80017fa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	4a40      	ldr	r2, [pc, #256]	@ (8001900 <HAL_GPIO_Init+0x2c0>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d013      	beq.n	800182c <HAL_GPIO_Init+0x1ec>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	4a3f      	ldr	r2, [pc, #252]	@ (8001904 <HAL_GPIO_Init+0x2c4>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d00d      	beq.n	8001828 <HAL_GPIO_Init+0x1e8>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	4a3e      	ldr	r2, [pc, #248]	@ (8001908 <HAL_GPIO_Init+0x2c8>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d007      	beq.n	8001824 <HAL_GPIO_Init+0x1e4>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	4a3d      	ldr	r2, [pc, #244]	@ (800190c <HAL_GPIO_Init+0x2cc>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d101      	bne.n	8001820 <HAL_GPIO_Init+0x1e0>
 800181c:	2303      	movs	r3, #3
 800181e:	e006      	b.n	800182e <HAL_GPIO_Init+0x1ee>
 8001820:	2304      	movs	r3, #4
 8001822:	e004      	b.n	800182e <HAL_GPIO_Init+0x1ee>
 8001824:	2302      	movs	r3, #2
 8001826:	e002      	b.n	800182e <HAL_GPIO_Init+0x1ee>
 8001828:	2301      	movs	r3, #1
 800182a:	e000      	b.n	800182e <HAL_GPIO_Init+0x1ee>
 800182c:	2300      	movs	r3, #0
 800182e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001830:	f002 0203 	and.w	r2, r2, #3
 8001834:	0092      	lsls	r2, r2, #2
 8001836:	4093      	lsls	r3, r2
 8001838:	68fa      	ldr	r2, [r7, #12]
 800183a:	4313      	orrs	r3, r2
 800183c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800183e:	492f      	ldr	r1, [pc, #188]	@ (80018fc <HAL_GPIO_Init+0x2bc>)
 8001840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001842:	089b      	lsrs	r3, r3, #2
 8001844:	3302      	adds	r3, #2
 8001846:	68fa      	ldr	r2, [r7, #12]
 8001848:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001854:	2b00      	cmp	r3, #0
 8001856:	d006      	beq.n	8001866 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001858:	4b2d      	ldr	r3, [pc, #180]	@ (8001910 <HAL_GPIO_Init+0x2d0>)
 800185a:	689a      	ldr	r2, [r3, #8]
 800185c:	492c      	ldr	r1, [pc, #176]	@ (8001910 <HAL_GPIO_Init+0x2d0>)
 800185e:	69bb      	ldr	r3, [r7, #24]
 8001860:	4313      	orrs	r3, r2
 8001862:	608b      	str	r3, [r1, #8]
 8001864:	e006      	b.n	8001874 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001866:	4b2a      	ldr	r3, [pc, #168]	@ (8001910 <HAL_GPIO_Init+0x2d0>)
 8001868:	689a      	ldr	r2, [r3, #8]
 800186a:	69bb      	ldr	r3, [r7, #24]
 800186c:	43db      	mvns	r3, r3
 800186e:	4928      	ldr	r1, [pc, #160]	@ (8001910 <HAL_GPIO_Init+0x2d0>)
 8001870:	4013      	ands	r3, r2
 8001872:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800187c:	2b00      	cmp	r3, #0
 800187e:	d006      	beq.n	800188e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001880:	4b23      	ldr	r3, [pc, #140]	@ (8001910 <HAL_GPIO_Init+0x2d0>)
 8001882:	68da      	ldr	r2, [r3, #12]
 8001884:	4922      	ldr	r1, [pc, #136]	@ (8001910 <HAL_GPIO_Init+0x2d0>)
 8001886:	69bb      	ldr	r3, [r7, #24]
 8001888:	4313      	orrs	r3, r2
 800188a:	60cb      	str	r3, [r1, #12]
 800188c:	e006      	b.n	800189c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800188e:	4b20      	ldr	r3, [pc, #128]	@ (8001910 <HAL_GPIO_Init+0x2d0>)
 8001890:	68da      	ldr	r2, [r3, #12]
 8001892:	69bb      	ldr	r3, [r7, #24]
 8001894:	43db      	mvns	r3, r3
 8001896:	491e      	ldr	r1, [pc, #120]	@ (8001910 <HAL_GPIO_Init+0x2d0>)
 8001898:	4013      	ands	r3, r2
 800189a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d006      	beq.n	80018b6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80018a8:	4b19      	ldr	r3, [pc, #100]	@ (8001910 <HAL_GPIO_Init+0x2d0>)
 80018aa:	685a      	ldr	r2, [r3, #4]
 80018ac:	4918      	ldr	r1, [pc, #96]	@ (8001910 <HAL_GPIO_Init+0x2d0>)
 80018ae:	69bb      	ldr	r3, [r7, #24]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	604b      	str	r3, [r1, #4]
 80018b4:	e006      	b.n	80018c4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80018b6:	4b16      	ldr	r3, [pc, #88]	@ (8001910 <HAL_GPIO_Init+0x2d0>)
 80018b8:	685a      	ldr	r2, [r3, #4]
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	43db      	mvns	r3, r3
 80018be:	4914      	ldr	r1, [pc, #80]	@ (8001910 <HAL_GPIO_Init+0x2d0>)
 80018c0:	4013      	ands	r3, r2
 80018c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d021      	beq.n	8001914 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80018d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001910 <HAL_GPIO_Init+0x2d0>)
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	490e      	ldr	r1, [pc, #56]	@ (8001910 <HAL_GPIO_Init+0x2d0>)
 80018d6:	69bb      	ldr	r3, [r7, #24]
 80018d8:	4313      	orrs	r3, r2
 80018da:	600b      	str	r3, [r1, #0]
 80018dc:	e021      	b.n	8001922 <HAL_GPIO_Init+0x2e2>
 80018de:	bf00      	nop
 80018e0:	10320000 	.word	0x10320000
 80018e4:	10310000 	.word	0x10310000
 80018e8:	10220000 	.word	0x10220000
 80018ec:	10210000 	.word	0x10210000
 80018f0:	10120000 	.word	0x10120000
 80018f4:	10110000 	.word	0x10110000
 80018f8:	40021000 	.word	0x40021000
 80018fc:	40010000 	.word	0x40010000
 8001900:	40010800 	.word	0x40010800
 8001904:	40010c00 	.word	0x40010c00
 8001908:	40011000 	.word	0x40011000
 800190c:	40011400 	.word	0x40011400
 8001910:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001914:	4b0b      	ldr	r3, [pc, #44]	@ (8001944 <HAL_GPIO_Init+0x304>)
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	69bb      	ldr	r3, [r7, #24]
 800191a:	43db      	mvns	r3, r3
 800191c:	4909      	ldr	r1, [pc, #36]	@ (8001944 <HAL_GPIO_Init+0x304>)
 800191e:	4013      	ands	r3, r2
 8001920:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001924:	3301      	adds	r3, #1
 8001926:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800192e:	fa22 f303 	lsr.w	r3, r2, r3
 8001932:	2b00      	cmp	r3, #0
 8001934:	f47f ae8e 	bne.w	8001654 <HAL_GPIO_Init+0x14>
  }
}
 8001938:	bf00      	nop
 800193a:	bf00      	nop
 800193c:	372c      	adds	r7, #44	@ 0x2c
 800193e:	46bd      	mov	sp, r7
 8001940:	bc80      	pop	{r7}
 8001942:	4770      	bx	lr
 8001944:	40010400 	.word	0x40010400

08001948 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	460b      	mov	r3, r1
 8001952:	807b      	strh	r3, [r7, #2]
 8001954:	4613      	mov	r3, r2
 8001956:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001958:	787b      	ldrb	r3, [r7, #1]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d003      	beq.n	8001966 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800195e:	887a      	ldrh	r2, [r7, #2]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001964:	e003      	b.n	800196e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001966:	887b      	ldrh	r3, [r7, #2]
 8001968:	041a      	lsls	r2, r3, #16
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	611a      	str	r2, [r3, #16]
}
 800196e:	bf00      	nop
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	bc80      	pop	{r7}
 8001976:	4770      	bx	lr

08001978 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	4603      	mov	r3, r0
 8001980:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001982:	4b08      	ldr	r3, [pc, #32]	@ (80019a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001984:	695a      	ldr	r2, [r3, #20]
 8001986:	88fb      	ldrh	r3, [r7, #6]
 8001988:	4013      	ands	r3, r2
 800198a:	2b00      	cmp	r3, #0
 800198c:	d006      	beq.n	800199c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800198e:	4a05      	ldr	r2, [pc, #20]	@ (80019a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001990:	88fb      	ldrh	r3, [r7, #6]
 8001992:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001994:	88fb      	ldrh	r3, [r7, #6]
 8001996:	4618      	mov	r0, r3
 8001998:	f000 f806 	bl	80019a8 <HAL_GPIO_EXTI_Callback>
  }
}
 800199c:	bf00      	nop
 800199e:	3708      	adds	r7, #8
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	40010400 	.word	0x40010400

080019a8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	4603      	mov	r3, r0
 80019b0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80019b2:	bf00      	nop
 80019b4:	370c      	adds	r7, #12
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bc80      	pop	{r7}
 80019ba:	4770      	bx	lr

080019bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b086      	sub	sp, #24
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d101      	bne.n	80019ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e272      	b.n	8001eb4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0301 	and.w	r3, r3, #1
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	f000 8087 	beq.w	8001aea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019dc:	4b92      	ldr	r3, [pc, #584]	@ (8001c28 <HAL_RCC_OscConfig+0x26c>)
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f003 030c 	and.w	r3, r3, #12
 80019e4:	2b04      	cmp	r3, #4
 80019e6:	d00c      	beq.n	8001a02 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019e8:	4b8f      	ldr	r3, [pc, #572]	@ (8001c28 <HAL_RCC_OscConfig+0x26c>)
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f003 030c 	and.w	r3, r3, #12
 80019f0:	2b08      	cmp	r3, #8
 80019f2:	d112      	bne.n	8001a1a <HAL_RCC_OscConfig+0x5e>
 80019f4:	4b8c      	ldr	r3, [pc, #560]	@ (8001c28 <HAL_RCC_OscConfig+0x26c>)
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a00:	d10b      	bne.n	8001a1a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a02:	4b89      	ldr	r3, [pc, #548]	@ (8001c28 <HAL_RCC_OscConfig+0x26c>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d06c      	beq.n	8001ae8 <HAL_RCC_OscConfig+0x12c>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d168      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e24c      	b.n	8001eb4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a22:	d106      	bne.n	8001a32 <HAL_RCC_OscConfig+0x76>
 8001a24:	4b80      	ldr	r3, [pc, #512]	@ (8001c28 <HAL_RCC_OscConfig+0x26c>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a7f      	ldr	r2, [pc, #508]	@ (8001c28 <HAL_RCC_OscConfig+0x26c>)
 8001a2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a2e:	6013      	str	r3, [r2, #0]
 8001a30:	e02e      	b.n	8001a90 <HAL_RCC_OscConfig+0xd4>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d10c      	bne.n	8001a54 <HAL_RCC_OscConfig+0x98>
 8001a3a:	4b7b      	ldr	r3, [pc, #492]	@ (8001c28 <HAL_RCC_OscConfig+0x26c>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a7a      	ldr	r2, [pc, #488]	@ (8001c28 <HAL_RCC_OscConfig+0x26c>)
 8001a40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a44:	6013      	str	r3, [r2, #0]
 8001a46:	4b78      	ldr	r3, [pc, #480]	@ (8001c28 <HAL_RCC_OscConfig+0x26c>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a77      	ldr	r2, [pc, #476]	@ (8001c28 <HAL_RCC_OscConfig+0x26c>)
 8001a4c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a50:	6013      	str	r3, [r2, #0]
 8001a52:	e01d      	b.n	8001a90 <HAL_RCC_OscConfig+0xd4>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a5c:	d10c      	bne.n	8001a78 <HAL_RCC_OscConfig+0xbc>
 8001a5e:	4b72      	ldr	r3, [pc, #456]	@ (8001c28 <HAL_RCC_OscConfig+0x26c>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a71      	ldr	r2, [pc, #452]	@ (8001c28 <HAL_RCC_OscConfig+0x26c>)
 8001a64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a68:	6013      	str	r3, [r2, #0]
 8001a6a:	4b6f      	ldr	r3, [pc, #444]	@ (8001c28 <HAL_RCC_OscConfig+0x26c>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a6e      	ldr	r2, [pc, #440]	@ (8001c28 <HAL_RCC_OscConfig+0x26c>)
 8001a70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a74:	6013      	str	r3, [r2, #0]
 8001a76:	e00b      	b.n	8001a90 <HAL_RCC_OscConfig+0xd4>
 8001a78:	4b6b      	ldr	r3, [pc, #428]	@ (8001c28 <HAL_RCC_OscConfig+0x26c>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a6a      	ldr	r2, [pc, #424]	@ (8001c28 <HAL_RCC_OscConfig+0x26c>)
 8001a7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a82:	6013      	str	r3, [r2, #0]
 8001a84:	4b68      	ldr	r3, [pc, #416]	@ (8001c28 <HAL_RCC_OscConfig+0x26c>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a67      	ldr	r2, [pc, #412]	@ (8001c28 <HAL_RCC_OscConfig+0x26c>)
 8001a8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a8e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d013      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a98:	f7ff fc08 	bl	80012ac <HAL_GetTick>
 8001a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a9e:	e008      	b.n	8001ab2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001aa0:	f7ff fc04 	bl	80012ac <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	2b64      	cmp	r3, #100	@ 0x64
 8001aac:	d901      	bls.n	8001ab2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e200      	b.n	8001eb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ab2:	4b5d      	ldr	r3, [pc, #372]	@ (8001c28 <HAL_RCC_OscConfig+0x26c>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d0f0      	beq.n	8001aa0 <HAL_RCC_OscConfig+0xe4>
 8001abe:	e014      	b.n	8001aea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac0:	f7ff fbf4 	bl	80012ac <HAL_GetTick>
 8001ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ac6:	e008      	b.n	8001ada <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ac8:	f7ff fbf0 	bl	80012ac <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	2b64      	cmp	r3, #100	@ 0x64
 8001ad4:	d901      	bls.n	8001ada <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	e1ec      	b.n	8001eb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ada:	4b53      	ldr	r3, [pc, #332]	@ (8001c28 <HAL_RCC_OscConfig+0x26c>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d1f0      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x10c>
 8001ae6:	e000      	b.n	8001aea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ae8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 0302 	and.w	r3, r3, #2
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d063      	beq.n	8001bbe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001af6:	4b4c      	ldr	r3, [pc, #304]	@ (8001c28 <HAL_RCC_OscConfig+0x26c>)
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f003 030c 	and.w	r3, r3, #12
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d00b      	beq.n	8001b1a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b02:	4b49      	ldr	r3, [pc, #292]	@ (8001c28 <HAL_RCC_OscConfig+0x26c>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f003 030c 	and.w	r3, r3, #12
 8001b0a:	2b08      	cmp	r3, #8
 8001b0c:	d11c      	bne.n	8001b48 <HAL_RCC_OscConfig+0x18c>
 8001b0e:	4b46      	ldr	r3, [pc, #280]	@ (8001c28 <HAL_RCC_OscConfig+0x26c>)
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d116      	bne.n	8001b48 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b1a:	4b43      	ldr	r3, [pc, #268]	@ (8001c28 <HAL_RCC_OscConfig+0x26c>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 0302 	and.w	r3, r3, #2
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d005      	beq.n	8001b32 <HAL_RCC_OscConfig+0x176>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	691b      	ldr	r3, [r3, #16]
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d001      	beq.n	8001b32 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e1c0      	b.n	8001eb4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b32:	4b3d      	ldr	r3, [pc, #244]	@ (8001c28 <HAL_RCC_OscConfig+0x26c>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	695b      	ldr	r3, [r3, #20]
 8001b3e:	00db      	lsls	r3, r3, #3
 8001b40:	4939      	ldr	r1, [pc, #228]	@ (8001c28 <HAL_RCC_OscConfig+0x26c>)
 8001b42:	4313      	orrs	r3, r2
 8001b44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b46:	e03a      	b.n	8001bbe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	691b      	ldr	r3, [r3, #16]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d020      	beq.n	8001b92 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b50:	4b36      	ldr	r3, [pc, #216]	@ (8001c2c <HAL_RCC_OscConfig+0x270>)
 8001b52:	2201      	movs	r2, #1
 8001b54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b56:	f7ff fba9 	bl	80012ac <HAL_GetTick>
 8001b5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b5c:	e008      	b.n	8001b70 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b5e:	f7ff fba5 	bl	80012ac <HAL_GetTick>
 8001b62:	4602      	mov	r2, r0
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	1ad3      	subs	r3, r2, r3
 8001b68:	2b02      	cmp	r3, #2
 8001b6a:	d901      	bls.n	8001b70 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b6c:	2303      	movs	r3, #3
 8001b6e:	e1a1      	b.n	8001eb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b70:	4b2d      	ldr	r3, [pc, #180]	@ (8001c28 <HAL_RCC_OscConfig+0x26c>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 0302 	and.w	r3, r3, #2
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d0f0      	beq.n	8001b5e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b7c:	4b2a      	ldr	r3, [pc, #168]	@ (8001c28 <HAL_RCC_OscConfig+0x26c>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	695b      	ldr	r3, [r3, #20]
 8001b88:	00db      	lsls	r3, r3, #3
 8001b8a:	4927      	ldr	r1, [pc, #156]	@ (8001c28 <HAL_RCC_OscConfig+0x26c>)
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	600b      	str	r3, [r1, #0]
 8001b90:	e015      	b.n	8001bbe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b92:	4b26      	ldr	r3, [pc, #152]	@ (8001c2c <HAL_RCC_OscConfig+0x270>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b98:	f7ff fb88 	bl	80012ac <HAL_GetTick>
 8001b9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b9e:	e008      	b.n	8001bb2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ba0:	f7ff fb84 	bl	80012ac <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d901      	bls.n	8001bb2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e180      	b.n	8001eb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bb2:	4b1d      	ldr	r3, [pc, #116]	@ (8001c28 <HAL_RCC_OscConfig+0x26c>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0302 	and.w	r3, r3, #2
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d1f0      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0308 	and.w	r3, r3, #8
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d03a      	beq.n	8001c40 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	699b      	ldr	r3, [r3, #24]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d019      	beq.n	8001c06 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bd2:	4b17      	ldr	r3, [pc, #92]	@ (8001c30 <HAL_RCC_OscConfig+0x274>)
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bd8:	f7ff fb68 	bl	80012ac <HAL_GetTick>
 8001bdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bde:	e008      	b.n	8001bf2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001be0:	f7ff fb64 	bl	80012ac <HAL_GetTick>
 8001be4:	4602      	mov	r2, r0
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d901      	bls.n	8001bf2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e160      	b.n	8001eb4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bf2:	4b0d      	ldr	r3, [pc, #52]	@ (8001c28 <HAL_RCC_OscConfig+0x26c>)
 8001bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bf6:	f003 0302 	and.w	r3, r3, #2
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d0f0      	beq.n	8001be0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001bfe:	2001      	movs	r0, #1
 8001c00:	f000 face 	bl	80021a0 <RCC_Delay>
 8001c04:	e01c      	b.n	8001c40 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c06:	4b0a      	ldr	r3, [pc, #40]	@ (8001c30 <HAL_RCC_OscConfig+0x274>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c0c:	f7ff fb4e 	bl	80012ac <HAL_GetTick>
 8001c10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c12:	e00f      	b.n	8001c34 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c14:	f7ff fb4a 	bl	80012ac <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d908      	bls.n	8001c34 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e146      	b.n	8001eb4 <HAL_RCC_OscConfig+0x4f8>
 8001c26:	bf00      	nop
 8001c28:	40021000 	.word	0x40021000
 8001c2c:	42420000 	.word	0x42420000
 8001c30:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c34:	4b92      	ldr	r3, [pc, #584]	@ (8001e80 <HAL_RCC_OscConfig+0x4c4>)
 8001c36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c38:	f003 0302 	and.w	r3, r3, #2
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d1e9      	bne.n	8001c14 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 0304 	and.w	r3, r3, #4
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	f000 80a6 	beq.w	8001d9a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c52:	4b8b      	ldr	r3, [pc, #556]	@ (8001e80 <HAL_RCC_OscConfig+0x4c4>)
 8001c54:	69db      	ldr	r3, [r3, #28]
 8001c56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d10d      	bne.n	8001c7a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c5e:	4b88      	ldr	r3, [pc, #544]	@ (8001e80 <HAL_RCC_OscConfig+0x4c4>)
 8001c60:	69db      	ldr	r3, [r3, #28]
 8001c62:	4a87      	ldr	r2, [pc, #540]	@ (8001e80 <HAL_RCC_OscConfig+0x4c4>)
 8001c64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c68:	61d3      	str	r3, [r2, #28]
 8001c6a:	4b85      	ldr	r3, [pc, #532]	@ (8001e80 <HAL_RCC_OscConfig+0x4c4>)
 8001c6c:	69db      	ldr	r3, [r3, #28]
 8001c6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c72:	60bb      	str	r3, [r7, #8]
 8001c74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c76:	2301      	movs	r3, #1
 8001c78:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c7a:	4b82      	ldr	r3, [pc, #520]	@ (8001e84 <HAL_RCC_OscConfig+0x4c8>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d118      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c86:	4b7f      	ldr	r3, [pc, #508]	@ (8001e84 <HAL_RCC_OscConfig+0x4c8>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a7e      	ldr	r2, [pc, #504]	@ (8001e84 <HAL_RCC_OscConfig+0x4c8>)
 8001c8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c92:	f7ff fb0b 	bl	80012ac <HAL_GetTick>
 8001c96:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c98:	e008      	b.n	8001cac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c9a:	f7ff fb07 	bl	80012ac <HAL_GetTick>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	2b64      	cmp	r3, #100	@ 0x64
 8001ca6:	d901      	bls.n	8001cac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ca8:	2303      	movs	r3, #3
 8001caa:	e103      	b.n	8001eb4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cac:	4b75      	ldr	r3, [pc, #468]	@ (8001e84 <HAL_RCC_OscConfig+0x4c8>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d0f0      	beq.n	8001c9a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d106      	bne.n	8001cce <HAL_RCC_OscConfig+0x312>
 8001cc0:	4b6f      	ldr	r3, [pc, #444]	@ (8001e80 <HAL_RCC_OscConfig+0x4c4>)
 8001cc2:	6a1b      	ldr	r3, [r3, #32]
 8001cc4:	4a6e      	ldr	r2, [pc, #440]	@ (8001e80 <HAL_RCC_OscConfig+0x4c4>)
 8001cc6:	f043 0301 	orr.w	r3, r3, #1
 8001cca:	6213      	str	r3, [r2, #32]
 8001ccc:	e02d      	b.n	8001d2a <HAL_RCC_OscConfig+0x36e>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	68db      	ldr	r3, [r3, #12]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d10c      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x334>
 8001cd6:	4b6a      	ldr	r3, [pc, #424]	@ (8001e80 <HAL_RCC_OscConfig+0x4c4>)
 8001cd8:	6a1b      	ldr	r3, [r3, #32]
 8001cda:	4a69      	ldr	r2, [pc, #420]	@ (8001e80 <HAL_RCC_OscConfig+0x4c4>)
 8001cdc:	f023 0301 	bic.w	r3, r3, #1
 8001ce0:	6213      	str	r3, [r2, #32]
 8001ce2:	4b67      	ldr	r3, [pc, #412]	@ (8001e80 <HAL_RCC_OscConfig+0x4c4>)
 8001ce4:	6a1b      	ldr	r3, [r3, #32]
 8001ce6:	4a66      	ldr	r2, [pc, #408]	@ (8001e80 <HAL_RCC_OscConfig+0x4c4>)
 8001ce8:	f023 0304 	bic.w	r3, r3, #4
 8001cec:	6213      	str	r3, [r2, #32]
 8001cee:	e01c      	b.n	8001d2a <HAL_RCC_OscConfig+0x36e>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	2b05      	cmp	r3, #5
 8001cf6:	d10c      	bne.n	8001d12 <HAL_RCC_OscConfig+0x356>
 8001cf8:	4b61      	ldr	r3, [pc, #388]	@ (8001e80 <HAL_RCC_OscConfig+0x4c4>)
 8001cfa:	6a1b      	ldr	r3, [r3, #32]
 8001cfc:	4a60      	ldr	r2, [pc, #384]	@ (8001e80 <HAL_RCC_OscConfig+0x4c4>)
 8001cfe:	f043 0304 	orr.w	r3, r3, #4
 8001d02:	6213      	str	r3, [r2, #32]
 8001d04:	4b5e      	ldr	r3, [pc, #376]	@ (8001e80 <HAL_RCC_OscConfig+0x4c4>)
 8001d06:	6a1b      	ldr	r3, [r3, #32]
 8001d08:	4a5d      	ldr	r2, [pc, #372]	@ (8001e80 <HAL_RCC_OscConfig+0x4c4>)
 8001d0a:	f043 0301 	orr.w	r3, r3, #1
 8001d0e:	6213      	str	r3, [r2, #32]
 8001d10:	e00b      	b.n	8001d2a <HAL_RCC_OscConfig+0x36e>
 8001d12:	4b5b      	ldr	r3, [pc, #364]	@ (8001e80 <HAL_RCC_OscConfig+0x4c4>)
 8001d14:	6a1b      	ldr	r3, [r3, #32]
 8001d16:	4a5a      	ldr	r2, [pc, #360]	@ (8001e80 <HAL_RCC_OscConfig+0x4c4>)
 8001d18:	f023 0301 	bic.w	r3, r3, #1
 8001d1c:	6213      	str	r3, [r2, #32]
 8001d1e:	4b58      	ldr	r3, [pc, #352]	@ (8001e80 <HAL_RCC_OscConfig+0x4c4>)
 8001d20:	6a1b      	ldr	r3, [r3, #32]
 8001d22:	4a57      	ldr	r2, [pc, #348]	@ (8001e80 <HAL_RCC_OscConfig+0x4c4>)
 8001d24:	f023 0304 	bic.w	r3, r3, #4
 8001d28:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	68db      	ldr	r3, [r3, #12]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d015      	beq.n	8001d5e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d32:	f7ff fabb 	bl	80012ac <HAL_GetTick>
 8001d36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d38:	e00a      	b.n	8001d50 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d3a:	f7ff fab7 	bl	80012ac <HAL_GetTick>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	1ad3      	subs	r3, r2, r3
 8001d44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d901      	bls.n	8001d50 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	e0b1      	b.n	8001eb4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d50:	4b4b      	ldr	r3, [pc, #300]	@ (8001e80 <HAL_RCC_OscConfig+0x4c4>)
 8001d52:	6a1b      	ldr	r3, [r3, #32]
 8001d54:	f003 0302 	and.w	r3, r3, #2
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d0ee      	beq.n	8001d3a <HAL_RCC_OscConfig+0x37e>
 8001d5c:	e014      	b.n	8001d88 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d5e:	f7ff faa5 	bl	80012ac <HAL_GetTick>
 8001d62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d64:	e00a      	b.n	8001d7c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d66:	f7ff faa1 	bl	80012ac <HAL_GetTick>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	1ad3      	subs	r3, r2, r3
 8001d70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d901      	bls.n	8001d7c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d78:	2303      	movs	r3, #3
 8001d7a:	e09b      	b.n	8001eb4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d7c:	4b40      	ldr	r3, [pc, #256]	@ (8001e80 <HAL_RCC_OscConfig+0x4c4>)
 8001d7e:	6a1b      	ldr	r3, [r3, #32]
 8001d80:	f003 0302 	and.w	r3, r3, #2
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d1ee      	bne.n	8001d66 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d88:	7dfb      	ldrb	r3, [r7, #23]
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d105      	bne.n	8001d9a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d8e:	4b3c      	ldr	r3, [pc, #240]	@ (8001e80 <HAL_RCC_OscConfig+0x4c4>)
 8001d90:	69db      	ldr	r3, [r3, #28]
 8001d92:	4a3b      	ldr	r2, [pc, #236]	@ (8001e80 <HAL_RCC_OscConfig+0x4c4>)
 8001d94:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d98:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	69db      	ldr	r3, [r3, #28]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	f000 8087 	beq.w	8001eb2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001da4:	4b36      	ldr	r3, [pc, #216]	@ (8001e80 <HAL_RCC_OscConfig+0x4c4>)
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f003 030c 	and.w	r3, r3, #12
 8001dac:	2b08      	cmp	r3, #8
 8001dae:	d061      	beq.n	8001e74 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	69db      	ldr	r3, [r3, #28]
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d146      	bne.n	8001e46 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001db8:	4b33      	ldr	r3, [pc, #204]	@ (8001e88 <HAL_RCC_OscConfig+0x4cc>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dbe:	f7ff fa75 	bl	80012ac <HAL_GetTick>
 8001dc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dc4:	e008      	b.n	8001dd8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dc6:	f7ff fa71 	bl	80012ac <HAL_GetTick>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d901      	bls.n	8001dd8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	e06d      	b.n	8001eb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dd8:	4b29      	ldr	r3, [pc, #164]	@ (8001e80 <HAL_RCC_OscConfig+0x4c4>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d1f0      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6a1b      	ldr	r3, [r3, #32]
 8001de8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001dec:	d108      	bne.n	8001e00 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001dee:	4b24      	ldr	r3, [pc, #144]	@ (8001e80 <HAL_RCC_OscConfig+0x4c4>)
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	4921      	ldr	r1, [pc, #132]	@ (8001e80 <HAL_RCC_OscConfig+0x4c4>)
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e00:	4b1f      	ldr	r3, [pc, #124]	@ (8001e80 <HAL_RCC_OscConfig+0x4c4>)
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6a19      	ldr	r1, [r3, #32]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e10:	430b      	orrs	r3, r1
 8001e12:	491b      	ldr	r1, [pc, #108]	@ (8001e80 <HAL_RCC_OscConfig+0x4c4>)
 8001e14:	4313      	orrs	r3, r2
 8001e16:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e18:	4b1b      	ldr	r3, [pc, #108]	@ (8001e88 <HAL_RCC_OscConfig+0x4cc>)
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e1e:	f7ff fa45 	bl	80012ac <HAL_GetTick>
 8001e22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e24:	e008      	b.n	8001e38 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e26:	f7ff fa41 	bl	80012ac <HAL_GetTick>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	2b02      	cmp	r3, #2
 8001e32:	d901      	bls.n	8001e38 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e34:	2303      	movs	r3, #3
 8001e36:	e03d      	b.n	8001eb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e38:	4b11      	ldr	r3, [pc, #68]	@ (8001e80 <HAL_RCC_OscConfig+0x4c4>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d0f0      	beq.n	8001e26 <HAL_RCC_OscConfig+0x46a>
 8001e44:	e035      	b.n	8001eb2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e46:	4b10      	ldr	r3, [pc, #64]	@ (8001e88 <HAL_RCC_OscConfig+0x4cc>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e4c:	f7ff fa2e 	bl	80012ac <HAL_GetTick>
 8001e50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e52:	e008      	b.n	8001e66 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e54:	f7ff fa2a 	bl	80012ac <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e026      	b.n	8001eb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e66:	4b06      	ldr	r3, [pc, #24]	@ (8001e80 <HAL_RCC_OscConfig+0x4c4>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d1f0      	bne.n	8001e54 <HAL_RCC_OscConfig+0x498>
 8001e72:	e01e      	b.n	8001eb2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	69db      	ldr	r3, [r3, #28]
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d107      	bne.n	8001e8c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e019      	b.n	8001eb4 <HAL_RCC_OscConfig+0x4f8>
 8001e80:	40021000 	.word	0x40021000
 8001e84:	40007000 	.word	0x40007000
 8001e88:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e8c:	4b0b      	ldr	r3, [pc, #44]	@ (8001ebc <HAL_RCC_OscConfig+0x500>)
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6a1b      	ldr	r3, [r3, #32]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d106      	bne.n	8001eae <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d001      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e000      	b.n	8001eb4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001eb2:	2300      	movs	r3, #0
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3718      	adds	r7, #24
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	40021000 	.word	0x40021000

08001ec0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b084      	sub	sp, #16
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d101      	bne.n	8001ed4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e0d0      	b.n	8002076 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ed4:	4b6a      	ldr	r3, [pc, #424]	@ (8002080 <HAL_RCC_ClockConfig+0x1c0>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0307 	and.w	r3, r3, #7
 8001edc:	683a      	ldr	r2, [r7, #0]
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d910      	bls.n	8001f04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ee2:	4b67      	ldr	r3, [pc, #412]	@ (8002080 <HAL_RCC_ClockConfig+0x1c0>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f023 0207 	bic.w	r2, r3, #7
 8001eea:	4965      	ldr	r1, [pc, #404]	@ (8002080 <HAL_RCC_ClockConfig+0x1c0>)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ef2:	4b63      	ldr	r3, [pc, #396]	@ (8002080 <HAL_RCC_ClockConfig+0x1c0>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0307 	and.w	r3, r3, #7
 8001efa:	683a      	ldr	r2, [r7, #0]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d001      	beq.n	8001f04 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e0b8      	b.n	8002076 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0302 	and.w	r3, r3, #2
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d020      	beq.n	8001f52 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0304 	and.w	r3, r3, #4
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d005      	beq.n	8001f28 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f1c:	4b59      	ldr	r3, [pc, #356]	@ (8002084 <HAL_RCC_ClockConfig+0x1c4>)
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	4a58      	ldr	r2, [pc, #352]	@ (8002084 <HAL_RCC_ClockConfig+0x1c4>)
 8001f22:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001f26:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 0308 	and.w	r3, r3, #8
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d005      	beq.n	8001f40 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f34:	4b53      	ldr	r3, [pc, #332]	@ (8002084 <HAL_RCC_ClockConfig+0x1c4>)
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	4a52      	ldr	r2, [pc, #328]	@ (8002084 <HAL_RCC_ClockConfig+0x1c4>)
 8001f3a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001f3e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f40:	4b50      	ldr	r3, [pc, #320]	@ (8002084 <HAL_RCC_ClockConfig+0x1c4>)
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	494d      	ldr	r1, [pc, #308]	@ (8002084 <HAL_RCC_ClockConfig+0x1c4>)
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0301 	and.w	r3, r3, #1
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d040      	beq.n	8001fe0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d107      	bne.n	8001f76 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f66:	4b47      	ldr	r3, [pc, #284]	@ (8002084 <HAL_RCC_ClockConfig+0x1c4>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d115      	bne.n	8001f9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e07f      	b.n	8002076 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d107      	bne.n	8001f8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f7e:	4b41      	ldr	r3, [pc, #260]	@ (8002084 <HAL_RCC_ClockConfig+0x1c4>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d109      	bne.n	8001f9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e073      	b.n	8002076 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f8e:	4b3d      	ldr	r3, [pc, #244]	@ (8002084 <HAL_RCC_ClockConfig+0x1c4>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0302 	and.w	r3, r3, #2
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d101      	bne.n	8001f9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e06b      	b.n	8002076 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f9e:	4b39      	ldr	r3, [pc, #228]	@ (8002084 <HAL_RCC_ClockConfig+0x1c4>)
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f023 0203 	bic.w	r2, r3, #3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	4936      	ldr	r1, [pc, #216]	@ (8002084 <HAL_RCC_ClockConfig+0x1c4>)
 8001fac:	4313      	orrs	r3, r2
 8001fae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fb0:	f7ff f97c 	bl	80012ac <HAL_GetTick>
 8001fb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fb6:	e00a      	b.n	8001fce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fb8:	f7ff f978 	bl	80012ac <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d901      	bls.n	8001fce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e053      	b.n	8002076 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fce:	4b2d      	ldr	r3, [pc, #180]	@ (8002084 <HAL_RCC_ClockConfig+0x1c4>)
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	f003 020c 	and.w	r2, r3, #12
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d1eb      	bne.n	8001fb8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fe0:	4b27      	ldr	r3, [pc, #156]	@ (8002080 <HAL_RCC_ClockConfig+0x1c0>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0307 	and.w	r3, r3, #7
 8001fe8:	683a      	ldr	r2, [r7, #0]
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d210      	bcs.n	8002010 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fee:	4b24      	ldr	r3, [pc, #144]	@ (8002080 <HAL_RCC_ClockConfig+0x1c0>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f023 0207 	bic.w	r2, r3, #7
 8001ff6:	4922      	ldr	r1, [pc, #136]	@ (8002080 <HAL_RCC_ClockConfig+0x1c0>)
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ffe:	4b20      	ldr	r3, [pc, #128]	@ (8002080 <HAL_RCC_ClockConfig+0x1c0>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0307 	and.w	r3, r3, #7
 8002006:	683a      	ldr	r2, [r7, #0]
 8002008:	429a      	cmp	r2, r3
 800200a:	d001      	beq.n	8002010 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e032      	b.n	8002076 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0304 	and.w	r3, r3, #4
 8002018:	2b00      	cmp	r3, #0
 800201a:	d008      	beq.n	800202e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800201c:	4b19      	ldr	r3, [pc, #100]	@ (8002084 <HAL_RCC_ClockConfig+0x1c4>)
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	4916      	ldr	r1, [pc, #88]	@ (8002084 <HAL_RCC_ClockConfig+0x1c4>)
 800202a:	4313      	orrs	r3, r2
 800202c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0308 	and.w	r3, r3, #8
 8002036:	2b00      	cmp	r3, #0
 8002038:	d009      	beq.n	800204e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800203a:	4b12      	ldr	r3, [pc, #72]	@ (8002084 <HAL_RCC_ClockConfig+0x1c4>)
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	691b      	ldr	r3, [r3, #16]
 8002046:	00db      	lsls	r3, r3, #3
 8002048:	490e      	ldr	r1, [pc, #56]	@ (8002084 <HAL_RCC_ClockConfig+0x1c4>)
 800204a:	4313      	orrs	r3, r2
 800204c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800204e:	f000 f821 	bl	8002094 <HAL_RCC_GetSysClockFreq>
 8002052:	4602      	mov	r2, r0
 8002054:	4b0b      	ldr	r3, [pc, #44]	@ (8002084 <HAL_RCC_ClockConfig+0x1c4>)
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	091b      	lsrs	r3, r3, #4
 800205a:	f003 030f 	and.w	r3, r3, #15
 800205e:	490a      	ldr	r1, [pc, #40]	@ (8002088 <HAL_RCC_ClockConfig+0x1c8>)
 8002060:	5ccb      	ldrb	r3, [r1, r3]
 8002062:	fa22 f303 	lsr.w	r3, r2, r3
 8002066:	4a09      	ldr	r2, [pc, #36]	@ (800208c <HAL_RCC_ClockConfig+0x1cc>)
 8002068:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800206a:	4b09      	ldr	r3, [pc, #36]	@ (8002090 <HAL_RCC_ClockConfig+0x1d0>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4618      	mov	r0, r3
 8002070:	f7ff f8da 	bl	8001228 <HAL_InitTick>

  return HAL_OK;
 8002074:	2300      	movs	r3, #0
}
 8002076:	4618      	mov	r0, r3
 8002078:	3710      	adds	r7, #16
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	40022000 	.word	0x40022000
 8002084:	40021000 	.word	0x40021000
 8002088:	080046dc 	.word	0x080046dc
 800208c:	20000000 	.word	0x20000000
 8002090:	20000004 	.word	0x20000004

08002094 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002094:	b480      	push	{r7}
 8002096:	b087      	sub	sp, #28
 8002098:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800209a:	2300      	movs	r3, #0
 800209c:	60fb      	str	r3, [r7, #12]
 800209e:	2300      	movs	r3, #0
 80020a0:	60bb      	str	r3, [r7, #8]
 80020a2:	2300      	movs	r3, #0
 80020a4:	617b      	str	r3, [r7, #20]
 80020a6:	2300      	movs	r3, #0
 80020a8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80020aa:	2300      	movs	r3, #0
 80020ac:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80020ae:	4b1e      	ldr	r3, [pc, #120]	@ (8002128 <HAL_RCC_GetSysClockFreq+0x94>)
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	f003 030c 	and.w	r3, r3, #12
 80020ba:	2b04      	cmp	r3, #4
 80020bc:	d002      	beq.n	80020c4 <HAL_RCC_GetSysClockFreq+0x30>
 80020be:	2b08      	cmp	r3, #8
 80020c0:	d003      	beq.n	80020ca <HAL_RCC_GetSysClockFreq+0x36>
 80020c2:	e027      	b.n	8002114 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020c4:	4b19      	ldr	r3, [pc, #100]	@ (800212c <HAL_RCC_GetSysClockFreq+0x98>)
 80020c6:	613b      	str	r3, [r7, #16]
      break;
 80020c8:	e027      	b.n	800211a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	0c9b      	lsrs	r3, r3, #18
 80020ce:	f003 030f 	and.w	r3, r3, #15
 80020d2:	4a17      	ldr	r2, [pc, #92]	@ (8002130 <HAL_RCC_GetSysClockFreq+0x9c>)
 80020d4:	5cd3      	ldrb	r3, [r2, r3]
 80020d6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d010      	beq.n	8002104 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80020e2:	4b11      	ldr	r3, [pc, #68]	@ (8002128 <HAL_RCC_GetSysClockFreq+0x94>)
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	0c5b      	lsrs	r3, r3, #17
 80020e8:	f003 0301 	and.w	r3, r3, #1
 80020ec:	4a11      	ldr	r2, [pc, #68]	@ (8002134 <HAL_RCC_GetSysClockFreq+0xa0>)
 80020ee:	5cd3      	ldrb	r3, [r2, r3]
 80020f0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a0d      	ldr	r2, [pc, #52]	@ (800212c <HAL_RCC_GetSysClockFreq+0x98>)
 80020f6:	fb03 f202 	mul.w	r2, r3, r2
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002100:	617b      	str	r3, [r7, #20]
 8002102:	e004      	b.n	800210e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	4a0c      	ldr	r2, [pc, #48]	@ (8002138 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002108:	fb02 f303 	mul.w	r3, r2, r3
 800210c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	613b      	str	r3, [r7, #16]
      break;
 8002112:	e002      	b.n	800211a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002114:	4b05      	ldr	r3, [pc, #20]	@ (800212c <HAL_RCC_GetSysClockFreq+0x98>)
 8002116:	613b      	str	r3, [r7, #16]
      break;
 8002118:	bf00      	nop
    }
  }
  return sysclockfreq;
 800211a:	693b      	ldr	r3, [r7, #16]
}
 800211c:	4618      	mov	r0, r3
 800211e:	371c      	adds	r7, #28
 8002120:	46bd      	mov	sp, r7
 8002122:	bc80      	pop	{r7}
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	40021000 	.word	0x40021000
 800212c:	007a1200 	.word	0x007a1200
 8002130:	080046f4 	.word	0x080046f4
 8002134:	08004704 	.word	0x08004704
 8002138:	003d0900 	.word	0x003d0900

0800213c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002140:	4b02      	ldr	r3, [pc, #8]	@ (800214c <HAL_RCC_GetHCLKFreq+0x10>)
 8002142:	681b      	ldr	r3, [r3, #0]
}
 8002144:	4618      	mov	r0, r3
 8002146:	46bd      	mov	sp, r7
 8002148:	bc80      	pop	{r7}
 800214a:	4770      	bx	lr
 800214c:	20000000 	.word	0x20000000

08002150 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002154:	f7ff fff2 	bl	800213c <HAL_RCC_GetHCLKFreq>
 8002158:	4602      	mov	r2, r0
 800215a:	4b05      	ldr	r3, [pc, #20]	@ (8002170 <HAL_RCC_GetPCLK1Freq+0x20>)
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	0a1b      	lsrs	r3, r3, #8
 8002160:	f003 0307 	and.w	r3, r3, #7
 8002164:	4903      	ldr	r1, [pc, #12]	@ (8002174 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002166:	5ccb      	ldrb	r3, [r1, r3]
 8002168:	fa22 f303 	lsr.w	r3, r2, r3
}
 800216c:	4618      	mov	r0, r3
 800216e:	bd80      	pop	{r7, pc}
 8002170:	40021000 	.word	0x40021000
 8002174:	080046ec 	.word	0x080046ec

08002178 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800217c:	f7ff ffde 	bl	800213c <HAL_RCC_GetHCLKFreq>
 8002180:	4602      	mov	r2, r0
 8002182:	4b05      	ldr	r3, [pc, #20]	@ (8002198 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	0adb      	lsrs	r3, r3, #11
 8002188:	f003 0307 	and.w	r3, r3, #7
 800218c:	4903      	ldr	r1, [pc, #12]	@ (800219c <HAL_RCC_GetPCLK2Freq+0x24>)
 800218e:	5ccb      	ldrb	r3, [r1, r3]
 8002190:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002194:	4618      	mov	r0, r3
 8002196:	bd80      	pop	{r7, pc}
 8002198:	40021000 	.word	0x40021000
 800219c:	080046ec 	.word	0x080046ec

080021a0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b085      	sub	sp, #20
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80021a8:	4b0a      	ldr	r3, [pc, #40]	@ (80021d4 <RCC_Delay+0x34>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a0a      	ldr	r2, [pc, #40]	@ (80021d8 <RCC_Delay+0x38>)
 80021ae:	fba2 2303 	umull	r2, r3, r2, r3
 80021b2:	0a5b      	lsrs	r3, r3, #9
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	fb02 f303 	mul.w	r3, r2, r3
 80021ba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80021bc:	bf00      	nop
  }
  while (Delay --);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	1e5a      	subs	r2, r3, #1
 80021c2:	60fa      	str	r2, [r7, #12]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d1f9      	bne.n	80021bc <RCC_Delay+0x1c>
}
 80021c8:	bf00      	nop
 80021ca:	bf00      	nop
 80021cc:	3714      	adds	r7, #20
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bc80      	pop	{r7}
 80021d2:	4770      	bx	lr
 80021d4:	20000000 	.word	0x20000000
 80021d8:	10624dd3 	.word	0x10624dd3

080021dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d101      	bne.n	80021ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e041      	b.n	8002272 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d106      	bne.n	8002208 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2200      	movs	r2, #0
 80021fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f7fe ff20 	bl	8001048 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2202      	movs	r2, #2
 800220c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	3304      	adds	r3, #4
 8002218:	4619      	mov	r1, r3
 800221a:	4610      	mov	r0, r2
 800221c:	f000 fb48 	bl	80028b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2201      	movs	r2, #1
 8002224:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2201      	movs	r2, #1
 800222c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2201      	movs	r2, #1
 8002234:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2201      	movs	r2, #1
 800223c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2201      	movs	r2, #1
 8002244:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2201      	movs	r2, #1
 800224c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2201      	movs	r2, #1
 8002254:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2201      	movs	r2, #1
 800225c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2201      	movs	r2, #1
 8002264:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2201      	movs	r2, #1
 800226c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002270:	2300      	movs	r3, #0
}
 8002272:	4618      	mov	r0, r3
 8002274:	3708      	adds	r7, #8
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}

0800227a <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800227a:	b580      	push	{r7, lr}
 800227c:	b082      	sub	sp, #8
 800227e:	af00      	add	r7, sp, #0
 8002280:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d101      	bne.n	800228c <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e041      	b.n	8002310 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002292:	b2db      	uxtb	r3, r3
 8002294:	2b00      	cmp	r3, #0
 8002296:	d106      	bne.n	80022a6 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2200      	movs	r2, #0
 800229c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f000 f839 	bl	8002318 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2202      	movs	r2, #2
 80022aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	3304      	adds	r3, #4
 80022b6:	4619      	mov	r1, r3
 80022b8:	4610      	mov	r0, r2
 80022ba:	f000 faf9 	bl	80028b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2201      	movs	r2, #1
 80022c2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2201      	movs	r2, #1
 80022ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2201      	movs	r2, #1
 80022d2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2201      	movs	r2, #1
 80022da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2201      	movs	r2, #1
 80022e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2201      	movs	r2, #1
 80022ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2201      	movs	r2, #1
 80022f2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2201      	movs	r2, #1
 80022fa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2201      	movs	r2, #1
 8002302:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2201      	movs	r2, #1
 800230a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800230e:	2300      	movs	r3, #0
}
 8002310:	4618      	mov	r0, r3
 8002312:	3708      	adds	r7, #8
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}

08002318 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002320:	bf00      	nop
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	bc80      	pop	{r7}
 8002328:	4770      	bx	lr

0800232a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800232a:	b580      	push	{r7, lr}
 800232c:	b084      	sub	sp, #16
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	691b      	ldr	r3, [r3, #16]
 8002340:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	f003 0302 	and.w	r3, r3, #2
 8002348:	2b00      	cmp	r3, #0
 800234a:	d020      	beq.n	800238e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f003 0302 	and.w	r3, r3, #2
 8002352:	2b00      	cmp	r3, #0
 8002354:	d01b      	beq.n	800238e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f06f 0202 	mvn.w	r2, #2
 800235e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2201      	movs	r2, #1
 8002364:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	699b      	ldr	r3, [r3, #24]
 800236c:	f003 0303 	and.w	r3, r3, #3
 8002370:	2b00      	cmp	r3, #0
 8002372:	d003      	beq.n	800237c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f000 fa7f 	bl	8002878 <HAL_TIM_IC_CaptureCallback>
 800237a:	e005      	b.n	8002388 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f000 fa72 	bl	8002866 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f000 fa81 	bl	800288a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2200      	movs	r2, #0
 800238c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	f003 0304 	and.w	r3, r3, #4
 8002394:	2b00      	cmp	r3, #0
 8002396:	d020      	beq.n	80023da <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	f003 0304 	and.w	r3, r3, #4
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d01b      	beq.n	80023da <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f06f 0204 	mvn.w	r2, #4
 80023aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2202      	movs	r2, #2
 80023b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	699b      	ldr	r3, [r3, #24]
 80023b8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d003      	beq.n	80023c8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f000 fa59 	bl	8002878 <HAL_TIM_IC_CaptureCallback>
 80023c6:	e005      	b.n	80023d4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f000 fa4c 	bl	8002866 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f000 fa5b 	bl	800288a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2200      	movs	r2, #0
 80023d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	f003 0308 	and.w	r3, r3, #8
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d020      	beq.n	8002426 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	f003 0308 	and.w	r3, r3, #8
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d01b      	beq.n	8002426 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f06f 0208 	mvn.w	r2, #8
 80023f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2204      	movs	r2, #4
 80023fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	69db      	ldr	r3, [r3, #28]
 8002404:	f003 0303 	and.w	r3, r3, #3
 8002408:	2b00      	cmp	r3, #0
 800240a:	d003      	beq.n	8002414 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	f000 fa33 	bl	8002878 <HAL_TIM_IC_CaptureCallback>
 8002412:	e005      	b.n	8002420 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f000 fa26 	bl	8002866 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f000 fa35 	bl	800288a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	f003 0310 	and.w	r3, r3, #16
 800242c:	2b00      	cmp	r3, #0
 800242e:	d020      	beq.n	8002472 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f003 0310 	and.w	r3, r3, #16
 8002436:	2b00      	cmp	r3, #0
 8002438:	d01b      	beq.n	8002472 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f06f 0210 	mvn.w	r2, #16
 8002442:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2208      	movs	r2, #8
 8002448:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	69db      	ldr	r3, [r3, #28]
 8002450:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002454:	2b00      	cmp	r3, #0
 8002456:	d003      	beq.n	8002460 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f000 fa0d 	bl	8002878 <HAL_TIM_IC_CaptureCallback>
 800245e:	e005      	b.n	800246c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f000 fa00 	bl	8002866 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f000 fa0f 	bl	800288a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2200      	movs	r2, #0
 8002470:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	f003 0301 	and.w	r3, r3, #1
 8002478:	2b00      	cmp	r3, #0
 800247a:	d00c      	beq.n	8002496 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	f003 0301 	and.w	r3, r3, #1
 8002482:	2b00      	cmp	r3, #0
 8002484:	d007      	beq.n	8002496 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f06f 0201 	mvn.w	r2, #1
 800248e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f000 f9df 	bl	8002854 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800249c:	2b00      	cmp	r3, #0
 800249e:	d00c      	beq.n	80024ba <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d007      	beq.n	80024ba <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80024b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f000 fd06 	bl	8002ec6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d00c      	beq.n	80024de <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d007      	beq.n	80024de <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80024d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f000 f9df 	bl	800289c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	f003 0320 	and.w	r3, r3, #32
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d00c      	beq.n	8002502 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f003 0320 	and.w	r3, r3, #32
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d007      	beq.n	8002502 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f06f 0220 	mvn.w	r2, #32
 80024fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f000 fcd9 	bl	8002eb4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002502:	bf00      	nop
 8002504:	3710      	adds	r7, #16
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}

0800250a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800250a:	b580      	push	{r7, lr}
 800250c:	b086      	sub	sp, #24
 800250e:	af00      	add	r7, sp, #0
 8002510:	60f8      	str	r0, [r7, #12]
 8002512:	60b9      	str	r1, [r7, #8]
 8002514:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002516:	2300      	movs	r3, #0
 8002518:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002520:	2b01      	cmp	r3, #1
 8002522:	d101      	bne.n	8002528 <HAL_TIM_IC_ConfigChannel+0x1e>
 8002524:	2302      	movs	r3, #2
 8002526:	e088      	b.n	800263a <HAL_TIM_IC_ConfigChannel+0x130>
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d11b      	bne.n	800256e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8002546:	f000 fab3 	bl	8002ab0 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	699a      	ldr	r2, [r3, #24]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f022 020c 	bic.w	r2, r2, #12
 8002558:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	6999      	ldr	r1, [r3, #24]
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	689a      	ldr	r2, [r3, #8]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	430a      	orrs	r2, r1
 800256a:	619a      	str	r2, [r3, #24]
 800256c:	e060      	b.n	8002630 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2b04      	cmp	r3, #4
 8002572:	d11c      	bne.n	80025ae <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8002584:	f000 fb1c 	bl	8002bc0 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	699a      	ldr	r2, [r3, #24]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002596:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	6999      	ldr	r1, [r3, #24]
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	021a      	lsls	r2, r3, #8
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	430a      	orrs	r2, r1
 80025aa:	619a      	str	r2, [r3, #24]
 80025ac:	e040      	b.n	8002630 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2b08      	cmp	r3, #8
 80025b2:	d11b      	bne.n	80025ec <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80025c4:	f000 fb67 	bl	8002c96 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	69da      	ldr	r2, [r3, #28]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f022 020c 	bic.w	r2, r2, #12
 80025d6:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	69d9      	ldr	r1, [r3, #28]
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	689a      	ldr	r2, [r3, #8]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	430a      	orrs	r2, r1
 80025e8:	61da      	str	r2, [r3, #28]
 80025ea:	e021      	b.n	8002630 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2b0c      	cmp	r3, #12
 80025f0:	d11c      	bne.n	800262c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8002602:	f000 fb83 	bl	8002d0c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	69da      	ldr	r2, [r3, #28]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002614:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	69d9      	ldr	r1, [r3, #28]
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	021a      	lsls	r2, r3, #8
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	430a      	orrs	r2, r1
 8002628:	61da      	str	r2, [r3, #28]
 800262a:	e001      	b.n	8002630 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2200      	movs	r2, #0
 8002634:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002638:	7dfb      	ldrb	r3, [r7, #23]
}
 800263a:	4618      	mov	r0, r3
 800263c:	3718      	adds	r7, #24
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}

08002642 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002642:	b580      	push	{r7, lr}
 8002644:	b084      	sub	sp, #16
 8002646:	af00      	add	r7, sp, #0
 8002648:	6078      	str	r0, [r7, #4]
 800264a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800264c:	2300      	movs	r3, #0
 800264e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002656:	2b01      	cmp	r3, #1
 8002658:	d101      	bne.n	800265e <HAL_TIM_ConfigClockSource+0x1c>
 800265a:	2302      	movs	r3, #2
 800265c:	e0b4      	b.n	80027c8 <HAL_TIM_ConfigClockSource+0x186>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2201      	movs	r2, #1
 8002662:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2202      	movs	r2, #2
 800266a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800267c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002684:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	68ba      	ldr	r2, [r7, #8]
 800268c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002696:	d03e      	beq.n	8002716 <HAL_TIM_ConfigClockSource+0xd4>
 8002698:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800269c:	f200 8087 	bhi.w	80027ae <HAL_TIM_ConfigClockSource+0x16c>
 80026a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80026a4:	f000 8086 	beq.w	80027b4 <HAL_TIM_ConfigClockSource+0x172>
 80026a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80026ac:	d87f      	bhi.n	80027ae <HAL_TIM_ConfigClockSource+0x16c>
 80026ae:	2b70      	cmp	r3, #112	@ 0x70
 80026b0:	d01a      	beq.n	80026e8 <HAL_TIM_ConfigClockSource+0xa6>
 80026b2:	2b70      	cmp	r3, #112	@ 0x70
 80026b4:	d87b      	bhi.n	80027ae <HAL_TIM_ConfigClockSource+0x16c>
 80026b6:	2b60      	cmp	r3, #96	@ 0x60
 80026b8:	d050      	beq.n	800275c <HAL_TIM_ConfigClockSource+0x11a>
 80026ba:	2b60      	cmp	r3, #96	@ 0x60
 80026bc:	d877      	bhi.n	80027ae <HAL_TIM_ConfigClockSource+0x16c>
 80026be:	2b50      	cmp	r3, #80	@ 0x50
 80026c0:	d03c      	beq.n	800273c <HAL_TIM_ConfigClockSource+0xfa>
 80026c2:	2b50      	cmp	r3, #80	@ 0x50
 80026c4:	d873      	bhi.n	80027ae <HAL_TIM_ConfigClockSource+0x16c>
 80026c6:	2b40      	cmp	r3, #64	@ 0x40
 80026c8:	d058      	beq.n	800277c <HAL_TIM_ConfigClockSource+0x13a>
 80026ca:	2b40      	cmp	r3, #64	@ 0x40
 80026cc:	d86f      	bhi.n	80027ae <HAL_TIM_ConfigClockSource+0x16c>
 80026ce:	2b30      	cmp	r3, #48	@ 0x30
 80026d0:	d064      	beq.n	800279c <HAL_TIM_ConfigClockSource+0x15a>
 80026d2:	2b30      	cmp	r3, #48	@ 0x30
 80026d4:	d86b      	bhi.n	80027ae <HAL_TIM_ConfigClockSource+0x16c>
 80026d6:	2b20      	cmp	r3, #32
 80026d8:	d060      	beq.n	800279c <HAL_TIM_ConfigClockSource+0x15a>
 80026da:	2b20      	cmp	r3, #32
 80026dc:	d867      	bhi.n	80027ae <HAL_TIM_ConfigClockSource+0x16c>
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d05c      	beq.n	800279c <HAL_TIM_ConfigClockSource+0x15a>
 80026e2:	2b10      	cmp	r3, #16
 80026e4:	d05a      	beq.n	800279c <HAL_TIM_ConfigClockSource+0x15a>
 80026e6:	e062      	b.n	80027ae <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80026f8:	f000 fb5e 	bl	8002db8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800270a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	68ba      	ldr	r2, [r7, #8]
 8002712:	609a      	str	r2, [r3, #8]
      break;
 8002714:	e04f      	b.n	80027b6 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002726:	f000 fb47 	bl	8002db8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	689a      	ldr	r2, [r3, #8]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002738:	609a      	str	r2, [r3, #8]
      break;
 800273a:	e03c      	b.n	80027b6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002748:	461a      	mov	r2, r3
 800274a:	f000 fa0b 	bl	8002b64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	2150      	movs	r1, #80	@ 0x50
 8002754:	4618      	mov	r0, r3
 8002756:	f000 fb15 	bl	8002d84 <TIM_ITRx_SetConfig>
      break;
 800275a:	e02c      	b.n	80027b6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002768:	461a      	mov	r2, r3
 800276a:	f000 fa65 	bl	8002c38 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	2160      	movs	r1, #96	@ 0x60
 8002774:	4618      	mov	r0, r3
 8002776:	f000 fb05 	bl	8002d84 <TIM_ITRx_SetConfig>
      break;
 800277a:	e01c      	b.n	80027b6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002788:	461a      	mov	r2, r3
 800278a:	f000 f9eb 	bl	8002b64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	2140      	movs	r1, #64	@ 0x40
 8002794:	4618      	mov	r0, r3
 8002796:	f000 faf5 	bl	8002d84 <TIM_ITRx_SetConfig>
      break;
 800279a:	e00c      	b.n	80027b6 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4619      	mov	r1, r3
 80027a6:	4610      	mov	r0, r2
 80027a8:	f000 faec 	bl	8002d84 <TIM_ITRx_SetConfig>
      break;
 80027ac:	e003      	b.n	80027b6 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	73fb      	strb	r3, [r7, #15]
      break;
 80027b2:	e000      	b.n	80027b6 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80027b4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2201      	movs	r2, #1
 80027ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80027c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3710      	adds	r7, #16
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d101      	bne.n	80027e8 <HAL_TIM_SlaveConfigSynchro+0x18>
 80027e4:	2302      	movs	r3, #2
 80027e6:	e031      	b.n	800284c <HAL_TIM_SlaveConfigSynchro+0x7c>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2201      	movs	r2, #1
 80027ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2202      	movs	r2, #2
 80027f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80027f8:	6839      	ldr	r1, [r7, #0]
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f000 f8c6 	bl	800298c <TIM_SlaveTimer_SetConfig>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d009      	beq.n	800281a <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2201      	movs	r2, #1
 800280a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2200      	movs	r2, #0
 8002812:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e018      	b.n	800284c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	68da      	ldr	r2, [r3, #12]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002828:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	68da      	ldr	r2, [r3, #12]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002838:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2201      	movs	r2, #1
 800283e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800284a:	2300      	movs	r3, #0
}
 800284c:	4618      	mov	r0, r3
 800284e:	3708      	adds	r7, #8
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}

08002854 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800285c:	bf00      	nop
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	bc80      	pop	{r7}
 8002864:	4770      	bx	lr

08002866 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002866:	b480      	push	{r7}
 8002868:	b083      	sub	sp, #12
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800286e:	bf00      	nop
 8002870:	370c      	adds	r7, #12
 8002872:	46bd      	mov	sp, r7
 8002874:	bc80      	pop	{r7}
 8002876:	4770      	bx	lr

08002878 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002880:	bf00      	nop
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	bc80      	pop	{r7}
 8002888:	4770      	bx	lr

0800288a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800288a:	b480      	push	{r7}
 800288c:	b083      	sub	sp, #12
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002892:	bf00      	nop
 8002894:	370c      	adds	r7, #12
 8002896:	46bd      	mov	sp, r7
 8002898:	bc80      	pop	{r7}
 800289a:	4770      	bx	lr

0800289c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80028a4:	bf00      	nop
 80028a6:	370c      	adds	r7, #12
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bc80      	pop	{r7}
 80028ac:	4770      	bx	lr
	...

080028b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b085      	sub	sp, #20
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	4a2f      	ldr	r2, [pc, #188]	@ (8002980 <TIM_Base_SetConfig+0xd0>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d00b      	beq.n	80028e0 <TIM_Base_SetConfig+0x30>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028ce:	d007      	beq.n	80028e0 <TIM_Base_SetConfig+0x30>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	4a2c      	ldr	r2, [pc, #176]	@ (8002984 <TIM_Base_SetConfig+0xd4>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d003      	beq.n	80028e0 <TIM_Base_SetConfig+0x30>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	4a2b      	ldr	r2, [pc, #172]	@ (8002988 <TIM_Base_SetConfig+0xd8>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d108      	bne.n	80028f2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	68fa      	ldr	r2, [r7, #12]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4a22      	ldr	r2, [pc, #136]	@ (8002980 <TIM_Base_SetConfig+0xd0>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d00b      	beq.n	8002912 <TIM_Base_SetConfig+0x62>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002900:	d007      	beq.n	8002912 <TIM_Base_SetConfig+0x62>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4a1f      	ldr	r2, [pc, #124]	@ (8002984 <TIM_Base_SetConfig+0xd4>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d003      	beq.n	8002912 <TIM_Base_SetConfig+0x62>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4a1e      	ldr	r2, [pc, #120]	@ (8002988 <TIM_Base_SetConfig+0xd8>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d108      	bne.n	8002924 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002918:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	68fa      	ldr	r2, [r7, #12]
 8002920:	4313      	orrs	r3, r2
 8002922:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	695b      	ldr	r3, [r3, #20]
 800292e:	4313      	orrs	r3, r2
 8002930:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	68fa      	ldr	r2, [r7, #12]
 8002936:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	689a      	ldr	r2, [r3, #8]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	4a0d      	ldr	r2, [pc, #52]	@ (8002980 <TIM_Base_SetConfig+0xd0>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d103      	bne.n	8002958 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	691a      	ldr	r2, [r3, #16]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	691b      	ldr	r3, [r3, #16]
 8002962:	f003 0301 	and.w	r3, r3, #1
 8002966:	2b00      	cmp	r3, #0
 8002968:	d005      	beq.n	8002976 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	691b      	ldr	r3, [r3, #16]
 800296e:	f023 0201 	bic.w	r2, r3, #1
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	611a      	str	r2, [r3, #16]
  }
}
 8002976:	bf00      	nop
 8002978:	3714      	adds	r7, #20
 800297a:	46bd      	mov	sp, r7
 800297c:	bc80      	pop	{r7}
 800297e:	4770      	bx	lr
 8002980:	40012c00 	.word	0x40012c00
 8002984:	40000400 	.word	0x40000400
 8002988:	40000800 	.word	0x40000800

0800298c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b086      	sub	sp, #24
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002996:	2300      	movs	r3, #0
 8002998:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029a8:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	693a      	ldr	r2, [r7, #16]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	f023 0307 	bic.w	r3, r3, #7
 80029ba:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	693a      	ldr	r2, [r7, #16]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	693a      	ldr	r2, [r7, #16]
 80029cc:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	2b70      	cmp	r3, #112	@ 0x70
 80029d4:	d01a      	beq.n	8002a0c <TIM_SlaveTimer_SetConfig+0x80>
 80029d6:	2b70      	cmp	r3, #112	@ 0x70
 80029d8:	d860      	bhi.n	8002a9c <TIM_SlaveTimer_SetConfig+0x110>
 80029da:	2b60      	cmp	r3, #96	@ 0x60
 80029dc:	d054      	beq.n	8002a88 <TIM_SlaveTimer_SetConfig+0xfc>
 80029de:	2b60      	cmp	r3, #96	@ 0x60
 80029e0:	d85c      	bhi.n	8002a9c <TIM_SlaveTimer_SetConfig+0x110>
 80029e2:	2b50      	cmp	r3, #80	@ 0x50
 80029e4:	d046      	beq.n	8002a74 <TIM_SlaveTimer_SetConfig+0xe8>
 80029e6:	2b50      	cmp	r3, #80	@ 0x50
 80029e8:	d858      	bhi.n	8002a9c <TIM_SlaveTimer_SetConfig+0x110>
 80029ea:	2b40      	cmp	r3, #64	@ 0x40
 80029ec:	d019      	beq.n	8002a22 <TIM_SlaveTimer_SetConfig+0x96>
 80029ee:	2b40      	cmp	r3, #64	@ 0x40
 80029f0:	d854      	bhi.n	8002a9c <TIM_SlaveTimer_SetConfig+0x110>
 80029f2:	2b30      	cmp	r3, #48	@ 0x30
 80029f4:	d055      	beq.n	8002aa2 <TIM_SlaveTimer_SetConfig+0x116>
 80029f6:	2b30      	cmp	r3, #48	@ 0x30
 80029f8:	d850      	bhi.n	8002a9c <TIM_SlaveTimer_SetConfig+0x110>
 80029fa:	2b20      	cmp	r3, #32
 80029fc:	d051      	beq.n	8002aa2 <TIM_SlaveTimer_SetConfig+0x116>
 80029fe:	2b20      	cmp	r3, #32
 8002a00:	d84c      	bhi.n	8002a9c <TIM_SlaveTimer_SetConfig+0x110>
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d04d      	beq.n	8002aa2 <TIM_SlaveTimer_SetConfig+0x116>
 8002a06:	2b10      	cmp	r3, #16
 8002a08:	d04b      	beq.n	8002aa2 <TIM_SlaveTimer_SetConfig+0x116>
 8002a0a:	e047      	b.n	8002a9c <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8002a1c:	f000 f9cc 	bl	8002db8 <TIM_ETR_SetConfig>
      break;
 8002a20:	e040      	b.n	8002aa4 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	2b05      	cmp	r3, #5
 8002a28:	d101      	bne.n	8002a2e <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e03b      	b.n	8002aa6 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	6a1b      	ldr	r3, [r3, #32]
 8002a34:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	6a1a      	ldr	r2, [r3, #32]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f022 0201 	bic.w	r2, r2, #1
 8002a44:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	699b      	ldr	r3, [r3, #24]
 8002a4c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002a54:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	691b      	ldr	r3, [r3, #16]
 8002a5a:	011b      	lsls	r3, r3, #4
 8002a5c:	68ba      	ldr	r2, [r7, #8]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	68ba      	ldr	r2, [r7, #8]
 8002a68:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	68fa      	ldr	r2, [r7, #12]
 8002a70:	621a      	str	r2, [r3, #32]
      break;
 8002a72:	e017      	b.n	8002aa4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a80:	461a      	mov	r2, r3
 8002a82:	f000 f86f 	bl	8002b64 <TIM_TI1_ConfigInputStage>
      break;
 8002a86:	e00d      	b.n	8002aa4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a94:	461a      	mov	r2, r3
 8002a96:	f000 f8cf 	bl	8002c38 <TIM_TI2_ConfigInputStage>
      break;
 8002a9a:	e003      	b.n	8002aa4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	75fb      	strb	r3, [r7, #23]
      break;
 8002aa0:	e000      	b.n	8002aa4 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8002aa2:	bf00      	nop
  }

  return status;
 8002aa4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3718      	adds	r7, #24
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
	...

08002ab0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b087      	sub	sp, #28
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	60b9      	str	r1, [r7, #8]
 8002aba:	607a      	str	r2, [r7, #4]
 8002abc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	6a1b      	ldr	r3, [r3, #32]
 8002ac2:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	6a1b      	ldr	r3, [r3, #32]
 8002ac8:	f023 0201 	bic.w	r2, r3, #1
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	699b      	ldr	r3, [r3, #24]
 8002ad4:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	4a1f      	ldr	r2, [pc, #124]	@ (8002b58 <TIM_TI1_SetConfig+0xa8>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d00b      	beq.n	8002af6 <TIM_TI1_SetConfig+0x46>
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ae4:	d007      	beq.n	8002af6 <TIM_TI1_SetConfig+0x46>
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	4a1c      	ldr	r2, [pc, #112]	@ (8002b5c <TIM_TI1_SetConfig+0xac>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d003      	beq.n	8002af6 <TIM_TI1_SetConfig+0x46>
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	4a1b      	ldr	r2, [pc, #108]	@ (8002b60 <TIM_TI1_SetConfig+0xb0>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d101      	bne.n	8002afa <TIM_TI1_SetConfig+0x4a>
 8002af6:	2301      	movs	r3, #1
 8002af8:	e000      	b.n	8002afc <TIM_TI1_SetConfig+0x4c>
 8002afa:	2300      	movs	r3, #0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d008      	beq.n	8002b12 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	f023 0303 	bic.w	r3, r3, #3
 8002b06:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002b08:	697a      	ldr	r2, [r7, #20]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	617b      	str	r3, [r7, #20]
 8002b10:	e003      	b.n	8002b1a <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	f043 0301 	orr.w	r3, r3, #1
 8002b18:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002b20:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	011b      	lsls	r3, r3, #4
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	697a      	ldr	r2, [r7, #20]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	f023 030a 	bic.w	r3, r3, #10
 8002b34:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	f003 030a 	and.w	r3, r3, #10
 8002b3c:	693a      	ldr	r2, [r7, #16]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	697a      	ldr	r2, [r7, #20]
 8002b46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	693a      	ldr	r2, [r7, #16]
 8002b4c:	621a      	str	r2, [r3, #32]
}
 8002b4e:	bf00      	nop
 8002b50:	371c      	adds	r7, #28
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bc80      	pop	{r7}
 8002b56:	4770      	bx	lr
 8002b58:	40012c00 	.word	0x40012c00
 8002b5c:	40000400 	.word	0x40000400
 8002b60:	40000800 	.word	0x40000800

08002b64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b087      	sub	sp, #28
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	60f8      	str	r0, [r7, #12]
 8002b6c:	60b9      	str	r1, [r7, #8]
 8002b6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	6a1b      	ldr	r3, [r3, #32]
 8002b74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	6a1b      	ldr	r3, [r3, #32]
 8002b7a:	f023 0201 	bic.w	r2, r3, #1
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	699b      	ldr	r3, [r3, #24]
 8002b86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002b8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	011b      	lsls	r3, r3, #4
 8002b94:	693a      	ldr	r2, [r7, #16]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	f023 030a 	bic.w	r3, r3, #10
 8002ba0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002ba2:	697a      	ldr	r2, [r7, #20]
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	693a      	ldr	r2, [r7, #16]
 8002bae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	697a      	ldr	r2, [r7, #20]
 8002bb4:	621a      	str	r2, [r3, #32]
}
 8002bb6:	bf00      	nop
 8002bb8:	371c      	adds	r7, #28
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bc80      	pop	{r7}
 8002bbe:	4770      	bx	lr

08002bc0 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b087      	sub	sp, #28
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	60f8      	str	r0, [r7, #12]
 8002bc8:	60b9      	str	r1, [r7, #8]
 8002bca:	607a      	str	r2, [r7, #4]
 8002bcc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	6a1b      	ldr	r3, [r3, #32]
 8002bd2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6a1b      	ldr	r3, [r3, #32]
 8002bd8:	f023 0210 	bic.w	r2, r3, #16
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	699b      	ldr	r3, [r3, #24]
 8002be4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002bec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	021b      	lsls	r3, r3, #8
 8002bf2:	693a      	ldr	r2, [r7, #16]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002bfe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	031b      	lsls	r3, r3, #12
 8002c04:	b29b      	uxth	r3, r3
 8002c06:	693a      	ldr	r2, [r7, #16]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002c12:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	011b      	lsls	r3, r3, #4
 8002c18:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8002c1c:	697a      	ldr	r2, [r7, #20]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	693a      	ldr	r2, [r7, #16]
 8002c26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	697a      	ldr	r2, [r7, #20]
 8002c2c:	621a      	str	r2, [r3, #32]
}
 8002c2e:	bf00      	nop
 8002c30:	371c      	adds	r7, #28
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bc80      	pop	{r7}
 8002c36:	4770      	bx	lr

08002c38 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b087      	sub	sp, #28
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	60f8      	str	r0, [r7, #12]
 8002c40:	60b9      	str	r1, [r7, #8]
 8002c42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6a1b      	ldr	r3, [r3, #32]
 8002c48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	6a1b      	ldr	r3, [r3, #32]
 8002c4e:	f023 0210 	bic.w	r2, r3, #16
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	699b      	ldr	r3, [r3, #24]
 8002c5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002c62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	031b      	lsls	r3, r3, #12
 8002c68:	693a      	ldr	r2, [r7, #16]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002c74:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	011b      	lsls	r3, r3, #4
 8002c7a:	697a      	ldr	r2, [r7, #20]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	693a      	ldr	r2, [r7, #16]
 8002c84:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	697a      	ldr	r2, [r7, #20]
 8002c8a:	621a      	str	r2, [r3, #32]
}
 8002c8c:	bf00      	nop
 8002c8e:	371c      	adds	r7, #28
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bc80      	pop	{r7}
 8002c94:	4770      	bx	lr

08002c96 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002c96:	b480      	push	{r7}
 8002c98:	b087      	sub	sp, #28
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	60f8      	str	r0, [r7, #12]
 8002c9e:	60b9      	str	r1, [r7, #8]
 8002ca0:	607a      	str	r2, [r7, #4]
 8002ca2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	6a1b      	ldr	r3, [r3, #32]
 8002ca8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6a1b      	ldr	r3, [r3, #32]
 8002cae:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	69db      	ldr	r3, [r3, #28]
 8002cba:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	f023 0303 	bic.w	r3, r3, #3
 8002cc2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8002cc4:	693a      	ldr	r2, [r7, #16]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002cd2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	011b      	lsls	r3, r3, #4
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	693a      	ldr	r2, [r7, #16]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002ce6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	021b      	lsls	r3, r3, #8
 8002cec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002cf0:	697a      	ldr	r2, [r7, #20]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	693a      	ldr	r2, [r7, #16]
 8002cfa:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	697a      	ldr	r2, [r7, #20]
 8002d00:	621a      	str	r2, [r3, #32]
}
 8002d02:	bf00      	nop
 8002d04:	371c      	adds	r7, #28
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bc80      	pop	{r7}
 8002d0a:	4770      	bx	lr

08002d0c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b087      	sub	sp, #28
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	60f8      	str	r0, [r7, #12]
 8002d14:	60b9      	str	r1, [r7, #8]
 8002d16:	607a      	str	r2, [r7, #4]
 8002d18:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	6a1b      	ldr	r3, [r3, #32]
 8002d1e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6a1b      	ldr	r3, [r3, #32]
 8002d24:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	69db      	ldr	r3, [r3, #28]
 8002d30:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d38:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	021b      	lsls	r3, r3, #8
 8002d3e:	693a      	ldr	r2, [r7, #16]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002d4a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	031b      	lsls	r3, r3, #12
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	693a      	ldr	r2, [r7, #16]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002d5e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	031b      	lsls	r3, r3, #12
 8002d64:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d68:	697a      	ldr	r2, [r7, #20]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	693a      	ldr	r2, [r7, #16]
 8002d72:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	697a      	ldr	r2, [r7, #20]
 8002d78:	621a      	str	r2, [r3, #32]
}
 8002d7a:	bf00      	nop
 8002d7c:	371c      	adds	r7, #28
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bc80      	pop	{r7}
 8002d82:	4770      	bx	lr

08002d84 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b085      	sub	sp, #20
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d9a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d9c:	683a      	ldr	r2, [r7, #0]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	f043 0307 	orr.w	r3, r3, #7
 8002da6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	68fa      	ldr	r2, [r7, #12]
 8002dac:	609a      	str	r2, [r3, #8]
}
 8002dae:	bf00      	nop
 8002db0:	3714      	adds	r7, #20
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bc80      	pop	{r7}
 8002db6:	4770      	bx	lr

08002db8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b087      	sub	sp, #28
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	60b9      	str	r1, [r7, #8]
 8002dc2:	607a      	str	r2, [r7, #4]
 8002dc4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002dd2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	021a      	lsls	r2, r3, #8
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	431a      	orrs	r2, r3
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	697a      	ldr	r2, [r7, #20]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	697a      	ldr	r2, [r7, #20]
 8002dea:	609a      	str	r2, [r3, #8]
}
 8002dec:	bf00      	nop
 8002dee:	371c      	adds	r7, #28
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bc80      	pop	{r7}
 8002df4:	4770      	bx	lr
	...

08002df8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b085      	sub	sp, #20
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d101      	bne.n	8002e10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e0c:	2302      	movs	r3, #2
 8002e0e:	e046      	b.n	8002e9e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2201      	movs	r2, #1
 8002e14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2202      	movs	r2, #2
 8002e1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e36:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	68fa      	ldr	r2, [r7, #12]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	68fa      	ldr	r2, [r7, #12]
 8002e48:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a16      	ldr	r2, [pc, #88]	@ (8002ea8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d00e      	beq.n	8002e72 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e5c:	d009      	beq.n	8002e72 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a12      	ldr	r2, [pc, #72]	@ (8002eac <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d004      	beq.n	8002e72 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a10      	ldr	r2, [pc, #64]	@ (8002eb0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d10c      	bne.n	8002e8c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002e78:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	68ba      	ldr	r2, [r7, #8]
 8002e80:	4313      	orrs	r3, r2
 8002e82:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	68ba      	ldr	r2, [r7, #8]
 8002e8a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002e9c:	2300      	movs	r3, #0
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3714      	adds	r7, #20
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bc80      	pop	{r7}
 8002ea6:	4770      	bx	lr
 8002ea8:	40012c00 	.word	0x40012c00
 8002eac:	40000400 	.word	0x40000400
 8002eb0:	40000800 	.word	0x40000800

08002eb4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ebc:	bf00      	nop
 8002ebe:	370c      	adds	r7, #12
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bc80      	pop	{r7}
 8002ec4:	4770      	bx	lr

08002ec6 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ec6:	b480      	push	{r7}
 8002ec8:	b083      	sub	sp, #12
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ece:	bf00      	nop
 8002ed0:	370c      	adds	r7, #12
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bc80      	pop	{r7}
 8002ed6:	4770      	bx	lr

08002ed8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d101      	bne.n	8002eea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e042      	b.n	8002f70 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d106      	bne.n	8002f04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f7fe f910 	bl	8001124 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2224      	movs	r2, #36	@ 0x24
 8002f08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	68da      	ldr	r2, [r3, #12]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002f1a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f000 fcff 	bl	8003920 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	691a      	ldr	r2, [r3, #16]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002f30:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	695a      	ldr	r2, [r3, #20]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002f40:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	68da      	ldr	r2, [r3, #12]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002f50:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2200      	movs	r2, #0
 8002f56:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2220      	movs	r2, #32
 8002f5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2220      	movs	r2, #32
 8002f64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002f6e:	2300      	movs	r3, #0
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3708      	adds	r7, #8
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b085      	sub	sp, #20
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	60b9      	str	r1, [r7, #8]
 8002f82:	4613      	mov	r3, r2
 8002f84:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	2b20      	cmp	r3, #32
 8002f90:	d121      	bne.n	8002fd6 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d002      	beq.n	8002f9e <HAL_UART_Transmit_IT+0x26>
 8002f98:	88fb      	ldrh	r3, [r7, #6]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d101      	bne.n	8002fa2 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e01a      	b.n	8002fd8 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	68ba      	ldr	r2, [r7, #8]
 8002fa6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	88fa      	ldrh	r2, [r7, #6]
 8002fac:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	88fa      	ldrh	r2, [r7, #6]
 8002fb2:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2221      	movs	r2, #33	@ 0x21
 8002fbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	68da      	ldr	r2, [r3, #12]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002fd0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	e000      	b.n	8002fd8 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8002fd6:	2302      	movs	r3, #2
  }
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3714      	adds	r7, #20
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bc80      	pop	{r7}
 8002fe0:	4770      	bx	lr

08002fe2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002fe2:	b580      	push	{r7, lr}
 8002fe4:	b084      	sub	sp, #16
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	60f8      	str	r0, [r7, #12]
 8002fea:	60b9      	str	r1, [r7, #8]
 8002fec:	4613      	mov	r3, r2
 8002fee:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	2b20      	cmp	r3, #32
 8002ffa:	d112      	bne.n	8003022 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d002      	beq.n	8003008 <HAL_UART_Receive_IT+0x26>
 8003002:	88fb      	ldrh	r3, [r7, #6]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d101      	bne.n	800300c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e00b      	b.n	8003024 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2200      	movs	r2, #0
 8003010:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003012:	88fb      	ldrh	r3, [r7, #6]
 8003014:	461a      	mov	r2, r3
 8003016:	68b9      	ldr	r1, [r7, #8]
 8003018:	68f8      	ldr	r0, [r7, #12]
 800301a:	f000 faad 	bl	8003578 <UART_Start_Receive_IT>
 800301e:	4603      	mov	r3, r0
 8003020:	e000      	b.n	8003024 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003022:	2302      	movs	r3, #2
  }
}
 8003024:	4618      	mov	r0, r3
 8003026:	3710      	adds	r7, #16
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b0ba      	sub	sp, #232	@ 0xe8
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	695b      	ldr	r3, [r3, #20]
 800304e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003052:	2300      	movs	r3, #0
 8003054:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003058:	2300      	movs	r3, #0
 800305a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800305e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003062:	f003 030f 	and.w	r3, r3, #15
 8003066:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800306a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800306e:	2b00      	cmp	r3, #0
 8003070:	d10f      	bne.n	8003092 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003072:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003076:	f003 0320 	and.w	r3, r3, #32
 800307a:	2b00      	cmp	r3, #0
 800307c:	d009      	beq.n	8003092 <HAL_UART_IRQHandler+0x66>
 800307e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003082:	f003 0320 	and.w	r3, r3, #32
 8003086:	2b00      	cmp	r3, #0
 8003088:	d003      	beq.n	8003092 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f000 fb8a 	bl	80037a4 <UART_Receive_IT>
      return;
 8003090:	e25b      	b.n	800354a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003092:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003096:	2b00      	cmp	r3, #0
 8003098:	f000 80de 	beq.w	8003258 <HAL_UART_IRQHandler+0x22c>
 800309c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80030a0:	f003 0301 	and.w	r3, r3, #1
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d106      	bne.n	80030b6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80030a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80030ac:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	f000 80d1 	beq.w	8003258 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80030b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030ba:	f003 0301 	and.w	r3, r3, #1
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d00b      	beq.n	80030da <HAL_UART_IRQHandler+0xae>
 80030c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80030c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d005      	beq.n	80030da <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030d2:	f043 0201 	orr.w	r2, r3, #1
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80030da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030de:	f003 0304 	and.w	r3, r3, #4
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d00b      	beq.n	80030fe <HAL_UART_IRQHandler+0xd2>
 80030e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80030ea:	f003 0301 	and.w	r3, r3, #1
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d005      	beq.n	80030fe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030f6:	f043 0202 	orr.w	r2, r3, #2
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80030fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003102:	f003 0302 	and.w	r3, r3, #2
 8003106:	2b00      	cmp	r3, #0
 8003108:	d00b      	beq.n	8003122 <HAL_UART_IRQHandler+0xf6>
 800310a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800310e:	f003 0301 	and.w	r3, r3, #1
 8003112:	2b00      	cmp	r3, #0
 8003114:	d005      	beq.n	8003122 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800311a:	f043 0204 	orr.w	r2, r3, #4
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003122:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003126:	f003 0308 	and.w	r3, r3, #8
 800312a:	2b00      	cmp	r3, #0
 800312c:	d011      	beq.n	8003152 <HAL_UART_IRQHandler+0x126>
 800312e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003132:	f003 0320 	and.w	r3, r3, #32
 8003136:	2b00      	cmp	r3, #0
 8003138:	d105      	bne.n	8003146 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800313a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800313e:	f003 0301 	and.w	r3, r3, #1
 8003142:	2b00      	cmp	r3, #0
 8003144:	d005      	beq.n	8003152 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800314a:	f043 0208 	orr.w	r2, r3, #8
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003156:	2b00      	cmp	r3, #0
 8003158:	f000 81f2 	beq.w	8003540 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800315c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003160:	f003 0320 	and.w	r3, r3, #32
 8003164:	2b00      	cmp	r3, #0
 8003166:	d008      	beq.n	800317a <HAL_UART_IRQHandler+0x14e>
 8003168:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800316c:	f003 0320 	and.w	r3, r3, #32
 8003170:	2b00      	cmp	r3, #0
 8003172:	d002      	beq.n	800317a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f000 fb15 	bl	80037a4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	695b      	ldr	r3, [r3, #20]
 8003180:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003184:	2b00      	cmp	r3, #0
 8003186:	bf14      	ite	ne
 8003188:	2301      	movne	r3, #1
 800318a:	2300      	moveq	r3, #0
 800318c:	b2db      	uxtb	r3, r3
 800318e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003196:	f003 0308 	and.w	r3, r3, #8
 800319a:	2b00      	cmp	r3, #0
 800319c:	d103      	bne.n	80031a6 <HAL_UART_IRQHandler+0x17a>
 800319e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d04f      	beq.n	8003246 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f000 fa1f 	bl	80035ea <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	695b      	ldr	r3, [r3, #20]
 80031b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d041      	beq.n	800323e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	3314      	adds	r3, #20
 80031c0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80031c8:	e853 3f00 	ldrex	r3, [r3]
 80031cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80031d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80031d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80031d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	3314      	adds	r3, #20
 80031e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80031e6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80031ea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80031f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80031f6:	e841 2300 	strex	r3, r2, [r1]
 80031fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80031fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d1d9      	bne.n	80031ba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800320a:	2b00      	cmp	r3, #0
 800320c:	d013      	beq.n	8003236 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003212:	4a7e      	ldr	r2, [pc, #504]	@ (800340c <HAL_UART_IRQHandler+0x3e0>)
 8003214:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800321a:	4618      	mov	r0, r3
 800321c:	f7fe f998 	bl	8001550 <HAL_DMA_Abort_IT>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d016      	beq.n	8003254 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800322a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003230:	4610      	mov	r0, r2
 8003232:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003234:	e00e      	b.n	8003254 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f000 f98a 	bl	8003550 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800323c:	e00a      	b.n	8003254 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f000 f986 	bl	8003550 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003244:	e006      	b.n	8003254 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f000 f982 	bl	8003550 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003252:	e175      	b.n	8003540 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003254:	bf00      	nop
    return;
 8003256:	e173      	b.n	8003540 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800325c:	2b01      	cmp	r3, #1
 800325e:	f040 814f 	bne.w	8003500 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003262:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003266:	f003 0310 	and.w	r3, r3, #16
 800326a:	2b00      	cmp	r3, #0
 800326c:	f000 8148 	beq.w	8003500 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003270:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003274:	f003 0310 	and.w	r3, r3, #16
 8003278:	2b00      	cmp	r3, #0
 800327a:	f000 8141 	beq.w	8003500 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800327e:	2300      	movs	r3, #0
 8003280:	60bb      	str	r3, [r7, #8]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	60bb      	str	r3, [r7, #8]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	60bb      	str	r3, [r7, #8]
 8003292:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	695b      	ldr	r3, [r3, #20]
 800329a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800329e:	2b00      	cmp	r3, #0
 80032a0:	f000 80b6 	beq.w	8003410 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80032b0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	f000 8145 	beq.w	8003544 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80032be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80032c2:	429a      	cmp	r2, r3
 80032c4:	f080 813e 	bcs.w	8003544 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80032ce:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032d4:	699b      	ldr	r3, [r3, #24]
 80032d6:	2b20      	cmp	r3, #32
 80032d8:	f000 8088 	beq.w	80033ec <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	330c      	adds	r3, #12
 80032e2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80032ea:	e853 3f00 	ldrex	r3, [r3]
 80032ee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80032f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80032f6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80032fa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	330c      	adds	r3, #12
 8003304:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003308:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800330c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003310:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003314:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003318:	e841 2300 	strex	r3, r2, [r1]
 800331c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003320:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003324:	2b00      	cmp	r3, #0
 8003326:	d1d9      	bne.n	80032dc <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	3314      	adds	r3, #20
 800332e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003330:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003332:	e853 3f00 	ldrex	r3, [r3]
 8003336:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003338:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800333a:	f023 0301 	bic.w	r3, r3, #1
 800333e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	3314      	adds	r3, #20
 8003348:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800334c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003350:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003352:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003354:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003358:	e841 2300 	strex	r3, r2, [r1]
 800335c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800335e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003360:	2b00      	cmp	r3, #0
 8003362:	d1e1      	bne.n	8003328 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	3314      	adds	r3, #20
 800336a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800336c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800336e:	e853 3f00 	ldrex	r3, [r3]
 8003372:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003374:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003376:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800337a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	3314      	adds	r3, #20
 8003384:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003388:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800338a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800338c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800338e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003390:	e841 2300 	strex	r3, r2, [r1]
 8003394:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003396:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003398:	2b00      	cmp	r3, #0
 800339a:	d1e3      	bne.n	8003364 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2220      	movs	r2, #32
 80033a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	330c      	adds	r3, #12
 80033b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80033b4:	e853 3f00 	ldrex	r3, [r3]
 80033b8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80033ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80033bc:	f023 0310 	bic.w	r3, r3, #16
 80033c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	330c      	adds	r3, #12
 80033ca:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80033ce:	65ba      	str	r2, [r7, #88]	@ 0x58
 80033d0:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033d2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80033d4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80033d6:	e841 2300 	strex	r3, r2, [r1]
 80033da:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80033dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d1e3      	bne.n	80033aa <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033e6:	4618      	mov	r0, r3
 80033e8:	f7fe f877 	bl	80014da <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2202      	movs	r2, #2
 80033f0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	b29b      	uxth	r3, r3
 8003400:	4619      	mov	r1, r3
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f000 f8ad 	bl	8003562 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003408:	e09c      	b.n	8003544 <HAL_UART_IRQHandler+0x518>
 800340a:	bf00      	nop
 800340c:	080036af 	.word	0x080036af
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003418:	b29b      	uxth	r3, r3
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003424:	b29b      	uxth	r3, r3
 8003426:	2b00      	cmp	r3, #0
 8003428:	f000 808e 	beq.w	8003548 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800342c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003430:	2b00      	cmp	r3, #0
 8003432:	f000 8089 	beq.w	8003548 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	330c      	adds	r3, #12
 800343c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800343e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003440:	e853 3f00 	ldrex	r3, [r3]
 8003444:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003446:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003448:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800344c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	330c      	adds	r3, #12
 8003456:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800345a:	647a      	str	r2, [r7, #68]	@ 0x44
 800345c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800345e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003460:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003462:	e841 2300 	strex	r3, r2, [r1]
 8003466:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003468:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800346a:	2b00      	cmp	r3, #0
 800346c:	d1e3      	bne.n	8003436 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	3314      	adds	r3, #20
 8003474:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003478:	e853 3f00 	ldrex	r3, [r3]
 800347c:	623b      	str	r3, [r7, #32]
   return(result);
 800347e:	6a3b      	ldr	r3, [r7, #32]
 8003480:	f023 0301 	bic.w	r3, r3, #1
 8003484:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	3314      	adds	r3, #20
 800348e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003492:	633a      	str	r2, [r7, #48]	@ 0x30
 8003494:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003496:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003498:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800349a:	e841 2300 	strex	r3, r2, [r1]
 800349e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80034a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d1e3      	bne.n	800346e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2220      	movs	r2, #32
 80034aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	330c      	adds	r3, #12
 80034ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	e853 3f00 	ldrex	r3, [r3]
 80034c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f023 0310 	bic.w	r3, r3, #16
 80034ca:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	330c      	adds	r3, #12
 80034d4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80034d8:	61fa      	str	r2, [r7, #28]
 80034da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034dc:	69b9      	ldr	r1, [r7, #24]
 80034de:	69fa      	ldr	r2, [r7, #28]
 80034e0:	e841 2300 	strex	r3, r2, [r1]
 80034e4:	617b      	str	r3, [r7, #20]
   return(result);
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d1e3      	bne.n	80034b4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2202      	movs	r2, #2
 80034f0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80034f2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80034f6:	4619      	mov	r1, r3
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f000 f832 	bl	8003562 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80034fe:	e023      	b.n	8003548 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003500:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003504:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003508:	2b00      	cmp	r3, #0
 800350a:	d009      	beq.n	8003520 <HAL_UART_IRQHandler+0x4f4>
 800350c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003510:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003514:	2b00      	cmp	r3, #0
 8003516:	d003      	beq.n	8003520 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f000 f8dc 	bl	80036d6 <UART_Transmit_IT>
    return;
 800351e:	e014      	b.n	800354a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003520:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003524:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003528:	2b00      	cmp	r3, #0
 800352a:	d00e      	beq.n	800354a <HAL_UART_IRQHandler+0x51e>
 800352c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003530:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003534:	2b00      	cmp	r3, #0
 8003536:	d008      	beq.n	800354a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f000 f91b 	bl	8003774 <UART_EndTransmit_IT>
    return;
 800353e:	e004      	b.n	800354a <HAL_UART_IRQHandler+0x51e>
    return;
 8003540:	bf00      	nop
 8003542:	e002      	b.n	800354a <HAL_UART_IRQHandler+0x51e>
      return;
 8003544:	bf00      	nop
 8003546:	e000      	b.n	800354a <HAL_UART_IRQHandler+0x51e>
      return;
 8003548:	bf00      	nop
  }
}
 800354a:	37e8      	adds	r7, #232	@ 0xe8
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}

08003550 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003558:	bf00      	nop
 800355a:	370c      	adds	r7, #12
 800355c:	46bd      	mov	sp, r7
 800355e:	bc80      	pop	{r7}
 8003560:	4770      	bx	lr

08003562 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003562:	b480      	push	{r7}
 8003564:	b083      	sub	sp, #12
 8003566:	af00      	add	r7, sp, #0
 8003568:	6078      	str	r0, [r7, #4]
 800356a:	460b      	mov	r3, r1
 800356c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800356e:	bf00      	nop
 8003570:	370c      	adds	r7, #12
 8003572:	46bd      	mov	sp, r7
 8003574:	bc80      	pop	{r7}
 8003576:	4770      	bx	lr

08003578 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003578:	b480      	push	{r7}
 800357a:	b085      	sub	sp, #20
 800357c:	af00      	add	r7, sp, #0
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	60b9      	str	r1, [r7, #8]
 8003582:	4613      	mov	r3, r2
 8003584:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	68ba      	ldr	r2, [r7, #8]
 800358a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	88fa      	ldrh	r2, [r7, #6]
 8003590:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	88fa      	ldrh	r2, [r7, #6]
 8003596:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2200      	movs	r2, #0
 800359c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2222      	movs	r2, #34	@ 0x22
 80035a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	691b      	ldr	r3, [r3, #16]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d007      	beq.n	80035be <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	68da      	ldr	r2, [r3, #12]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80035bc:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	695a      	ldr	r2, [r3, #20]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f042 0201 	orr.w	r2, r2, #1
 80035cc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	68da      	ldr	r2, [r3, #12]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f042 0220 	orr.w	r2, r2, #32
 80035dc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80035de:	2300      	movs	r3, #0
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3714      	adds	r7, #20
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bc80      	pop	{r7}
 80035e8:	4770      	bx	lr

080035ea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80035ea:	b480      	push	{r7}
 80035ec:	b095      	sub	sp, #84	@ 0x54
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	330c      	adds	r3, #12
 80035f8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035fc:	e853 3f00 	ldrex	r3, [r3]
 8003600:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003604:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003608:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	330c      	adds	r3, #12
 8003610:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003612:	643a      	str	r2, [r7, #64]	@ 0x40
 8003614:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003616:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003618:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800361a:	e841 2300 	strex	r3, r2, [r1]
 800361e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003622:	2b00      	cmp	r3, #0
 8003624:	d1e5      	bne.n	80035f2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	3314      	adds	r3, #20
 800362c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800362e:	6a3b      	ldr	r3, [r7, #32]
 8003630:	e853 3f00 	ldrex	r3, [r3]
 8003634:	61fb      	str	r3, [r7, #28]
   return(result);
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	f023 0301 	bic.w	r3, r3, #1
 800363c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	3314      	adds	r3, #20
 8003644:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003646:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003648:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800364a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800364c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800364e:	e841 2300 	strex	r3, r2, [r1]
 8003652:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003656:	2b00      	cmp	r3, #0
 8003658:	d1e5      	bne.n	8003626 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800365e:	2b01      	cmp	r3, #1
 8003660:	d119      	bne.n	8003696 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	330c      	adds	r3, #12
 8003668:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	e853 3f00 	ldrex	r3, [r3]
 8003670:	60bb      	str	r3, [r7, #8]
   return(result);
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	f023 0310 	bic.w	r3, r3, #16
 8003678:	647b      	str	r3, [r7, #68]	@ 0x44
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	330c      	adds	r3, #12
 8003680:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003682:	61ba      	str	r2, [r7, #24]
 8003684:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003686:	6979      	ldr	r1, [r7, #20]
 8003688:	69ba      	ldr	r2, [r7, #24]
 800368a:	e841 2300 	strex	r3, r2, [r1]
 800368e:	613b      	str	r3, [r7, #16]
   return(result);
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d1e5      	bne.n	8003662 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2220      	movs	r2, #32
 800369a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80036a4:	bf00      	nop
 80036a6:	3754      	adds	r7, #84	@ 0x54
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bc80      	pop	{r7}
 80036ac:	4770      	bx	lr

080036ae <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80036ae:	b580      	push	{r7, lr}
 80036b0:	b084      	sub	sp, #16
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2200      	movs	r2, #0
 80036c0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2200      	movs	r2, #0
 80036c6:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80036c8:	68f8      	ldr	r0, [r7, #12]
 80036ca:	f7ff ff41 	bl	8003550 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036ce:	bf00      	nop
 80036d0:	3710      	adds	r7, #16
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}

080036d6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80036d6:	b480      	push	{r7}
 80036d8:	b085      	sub	sp, #20
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	2b21      	cmp	r3, #33	@ 0x21
 80036e8:	d13e      	bne.n	8003768 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036f2:	d114      	bne.n	800371e <UART_Transmit_IT+0x48>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	691b      	ldr	r3, [r3, #16]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d110      	bne.n	800371e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6a1b      	ldr	r3, [r3, #32]
 8003700:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	881b      	ldrh	r3, [r3, #0]
 8003706:	461a      	mov	r2, r3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003710:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6a1b      	ldr	r3, [r3, #32]
 8003716:	1c9a      	adds	r2, r3, #2
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	621a      	str	r2, [r3, #32]
 800371c:	e008      	b.n	8003730 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6a1b      	ldr	r3, [r3, #32]
 8003722:	1c59      	adds	r1, r3, #1
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	6211      	str	r1, [r2, #32]
 8003728:	781a      	ldrb	r2, [r3, #0]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003734:	b29b      	uxth	r3, r3
 8003736:	3b01      	subs	r3, #1
 8003738:	b29b      	uxth	r3, r3
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	4619      	mov	r1, r3
 800373e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003740:	2b00      	cmp	r3, #0
 8003742:	d10f      	bne.n	8003764 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	68da      	ldr	r2, [r3, #12]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003752:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	68da      	ldr	r2, [r3, #12]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003762:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003764:	2300      	movs	r3, #0
 8003766:	e000      	b.n	800376a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003768:	2302      	movs	r3, #2
  }
}
 800376a:	4618      	mov	r0, r3
 800376c:	3714      	adds	r7, #20
 800376e:	46bd      	mov	sp, r7
 8003770:	bc80      	pop	{r7}
 8003772:	4770      	bx	lr

08003774 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b082      	sub	sp, #8
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	68da      	ldr	r2, [r3, #12]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800378a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2220      	movs	r2, #32
 8003790:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f7fc fe53 	bl	8000440 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800379a:	2300      	movs	r3, #0
}
 800379c:	4618      	mov	r0, r3
 800379e:	3708      	adds	r7, #8
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b08c      	sub	sp, #48	@ 0x30
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	2b22      	cmp	r3, #34	@ 0x22
 80037b6:	f040 80ae 	bne.w	8003916 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037c2:	d117      	bne.n	80037f4 <UART_Receive_IT+0x50>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	691b      	ldr	r3, [r3, #16]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d113      	bne.n	80037f4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80037cc:	2300      	movs	r3, #0
 80037ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037d4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	b29b      	uxth	r3, r3
 80037de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037e2:	b29a      	uxth	r2, r3
 80037e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037e6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037ec:	1c9a      	adds	r2, r3, #2
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	629a      	str	r2, [r3, #40]	@ 0x28
 80037f2:	e026      	b.n	8003842 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80037fa:	2300      	movs	r3, #0
 80037fc:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003806:	d007      	beq.n	8003818 <UART_Receive_IT+0x74>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d10a      	bne.n	8003826 <UART_Receive_IT+0x82>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	691b      	ldr	r3, [r3, #16]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d106      	bne.n	8003826 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	b2da      	uxtb	r2, r3
 8003820:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003822:	701a      	strb	r2, [r3, #0]
 8003824:	e008      	b.n	8003838 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	b2db      	uxtb	r3, r3
 800382e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003832:	b2da      	uxtb	r2, r3
 8003834:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003836:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800383c:	1c5a      	adds	r2, r3, #1
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003846:	b29b      	uxth	r3, r3
 8003848:	3b01      	subs	r3, #1
 800384a:	b29b      	uxth	r3, r3
 800384c:	687a      	ldr	r2, [r7, #4]
 800384e:	4619      	mov	r1, r3
 8003850:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003852:	2b00      	cmp	r3, #0
 8003854:	d15d      	bne.n	8003912 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	68da      	ldr	r2, [r3, #12]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f022 0220 	bic.w	r2, r2, #32
 8003864:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	68da      	ldr	r2, [r3, #12]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003874:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	695a      	ldr	r2, [r3, #20]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f022 0201 	bic.w	r2, r2, #1
 8003884:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2220      	movs	r2, #32
 800388a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003898:	2b01      	cmp	r3, #1
 800389a:	d135      	bne.n	8003908 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	330c      	adds	r3, #12
 80038a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	e853 3f00 	ldrex	r3, [r3]
 80038b0:	613b      	str	r3, [r7, #16]
   return(result);
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	f023 0310 	bic.w	r3, r3, #16
 80038b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	330c      	adds	r3, #12
 80038c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038c2:	623a      	str	r2, [r7, #32]
 80038c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038c6:	69f9      	ldr	r1, [r7, #28]
 80038c8:	6a3a      	ldr	r2, [r7, #32]
 80038ca:	e841 2300 	strex	r3, r2, [r1]
 80038ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80038d0:	69bb      	ldr	r3, [r7, #24]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d1e5      	bne.n	80038a2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0310 	and.w	r3, r3, #16
 80038e0:	2b10      	cmp	r3, #16
 80038e2:	d10a      	bne.n	80038fa <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80038e4:	2300      	movs	r3, #0
 80038e6:	60fb      	str	r3, [r7, #12]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	60fb      	str	r3, [r7, #12]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	60fb      	str	r3, [r7, #12]
 80038f8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80038fe:	4619      	mov	r1, r3
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f7ff fe2e 	bl	8003562 <HAL_UARTEx_RxEventCallback>
 8003906:	e002      	b.n	800390e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f7fc fd6d 	bl	80003e8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800390e:	2300      	movs	r3, #0
 8003910:	e002      	b.n	8003918 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003912:	2300      	movs	r3, #0
 8003914:	e000      	b.n	8003918 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003916:	2302      	movs	r3, #2
  }
}
 8003918:	4618      	mov	r0, r3
 800391a:	3730      	adds	r7, #48	@ 0x30
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}

08003920 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b084      	sub	sp, #16
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	691b      	ldr	r3, [r3, #16]
 800392e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	68da      	ldr	r2, [r3, #12]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	430a      	orrs	r2, r1
 800393c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	689a      	ldr	r2, [r3, #8]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	691b      	ldr	r3, [r3, #16]
 8003946:	431a      	orrs	r2, r3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	695b      	ldr	r3, [r3, #20]
 800394c:	4313      	orrs	r3, r2
 800394e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	68db      	ldr	r3, [r3, #12]
 8003956:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800395a:	f023 030c 	bic.w	r3, r3, #12
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	6812      	ldr	r2, [r2, #0]
 8003962:	68b9      	ldr	r1, [r7, #8]
 8003964:	430b      	orrs	r3, r1
 8003966:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	695b      	ldr	r3, [r3, #20]
 800396e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	699a      	ldr	r2, [r3, #24]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	430a      	orrs	r2, r1
 800397c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a2c      	ldr	r2, [pc, #176]	@ (8003a34 <UART_SetConfig+0x114>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d103      	bne.n	8003990 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003988:	f7fe fbf6 	bl	8002178 <HAL_RCC_GetPCLK2Freq>
 800398c:	60f8      	str	r0, [r7, #12]
 800398e:	e002      	b.n	8003996 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003990:	f7fe fbde 	bl	8002150 <HAL_RCC_GetPCLK1Freq>
 8003994:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003996:	68fa      	ldr	r2, [r7, #12]
 8003998:	4613      	mov	r3, r2
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	4413      	add	r3, r2
 800399e:	009a      	lsls	r2, r3, #2
 80039a0:	441a      	add	r2, r3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ac:	4a22      	ldr	r2, [pc, #136]	@ (8003a38 <UART_SetConfig+0x118>)
 80039ae:	fba2 2303 	umull	r2, r3, r2, r3
 80039b2:	095b      	lsrs	r3, r3, #5
 80039b4:	0119      	lsls	r1, r3, #4
 80039b6:	68fa      	ldr	r2, [r7, #12]
 80039b8:	4613      	mov	r3, r2
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	4413      	add	r3, r2
 80039be:	009a      	lsls	r2, r3, #2
 80039c0:	441a      	add	r2, r3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80039cc:	4b1a      	ldr	r3, [pc, #104]	@ (8003a38 <UART_SetConfig+0x118>)
 80039ce:	fba3 0302 	umull	r0, r3, r3, r2
 80039d2:	095b      	lsrs	r3, r3, #5
 80039d4:	2064      	movs	r0, #100	@ 0x64
 80039d6:	fb00 f303 	mul.w	r3, r0, r3
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	011b      	lsls	r3, r3, #4
 80039de:	3332      	adds	r3, #50	@ 0x32
 80039e0:	4a15      	ldr	r2, [pc, #84]	@ (8003a38 <UART_SetConfig+0x118>)
 80039e2:	fba2 2303 	umull	r2, r3, r2, r3
 80039e6:	095b      	lsrs	r3, r3, #5
 80039e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80039ec:	4419      	add	r1, r3
 80039ee:	68fa      	ldr	r2, [r7, #12]
 80039f0:	4613      	mov	r3, r2
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	4413      	add	r3, r2
 80039f6:	009a      	lsls	r2, r3, #2
 80039f8:	441a      	add	r2, r3
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a04:	4b0c      	ldr	r3, [pc, #48]	@ (8003a38 <UART_SetConfig+0x118>)
 8003a06:	fba3 0302 	umull	r0, r3, r3, r2
 8003a0a:	095b      	lsrs	r3, r3, #5
 8003a0c:	2064      	movs	r0, #100	@ 0x64
 8003a0e:	fb00 f303 	mul.w	r3, r0, r3
 8003a12:	1ad3      	subs	r3, r2, r3
 8003a14:	011b      	lsls	r3, r3, #4
 8003a16:	3332      	adds	r3, #50	@ 0x32
 8003a18:	4a07      	ldr	r2, [pc, #28]	@ (8003a38 <UART_SetConfig+0x118>)
 8003a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a1e:	095b      	lsrs	r3, r3, #5
 8003a20:	f003 020f 	and.w	r2, r3, #15
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	440a      	add	r2, r1
 8003a2a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003a2c:	bf00      	nop
 8003a2e:	3710      	adds	r7, #16
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	40013800 	.word	0x40013800
 8003a38:	51eb851f 	.word	0x51eb851f

08003a3c <atoi>:
 8003a3c:	220a      	movs	r2, #10
 8003a3e:	2100      	movs	r1, #0
 8003a40:	f000 b87a 	b.w	8003b38 <strtol>

08003a44 <_strtol_l.constprop.0>:
 8003a44:	2b24      	cmp	r3, #36	@ 0x24
 8003a46:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a4a:	4686      	mov	lr, r0
 8003a4c:	4690      	mov	r8, r2
 8003a4e:	d801      	bhi.n	8003a54 <_strtol_l.constprop.0+0x10>
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d106      	bne.n	8003a62 <_strtol_l.constprop.0+0x1e>
 8003a54:	f000 f93a 	bl	8003ccc <__errno>
 8003a58:	2316      	movs	r3, #22
 8003a5a:	6003      	str	r3, [r0, #0]
 8003a5c:	2000      	movs	r0, #0
 8003a5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a62:	460d      	mov	r5, r1
 8003a64:	4833      	ldr	r0, [pc, #204]	@ (8003b34 <_strtol_l.constprop.0+0xf0>)
 8003a66:	462a      	mov	r2, r5
 8003a68:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003a6c:	5d06      	ldrb	r6, [r0, r4]
 8003a6e:	f016 0608 	ands.w	r6, r6, #8
 8003a72:	d1f8      	bne.n	8003a66 <_strtol_l.constprop.0+0x22>
 8003a74:	2c2d      	cmp	r4, #45	@ 0x2d
 8003a76:	d12d      	bne.n	8003ad4 <_strtol_l.constprop.0+0x90>
 8003a78:	2601      	movs	r6, #1
 8003a7a:	782c      	ldrb	r4, [r5, #0]
 8003a7c:	1c95      	adds	r5, r2, #2
 8003a7e:	f033 0210 	bics.w	r2, r3, #16
 8003a82:	d109      	bne.n	8003a98 <_strtol_l.constprop.0+0x54>
 8003a84:	2c30      	cmp	r4, #48	@ 0x30
 8003a86:	d12a      	bne.n	8003ade <_strtol_l.constprop.0+0x9a>
 8003a88:	782a      	ldrb	r2, [r5, #0]
 8003a8a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8003a8e:	2a58      	cmp	r2, #88	@ 0x58
 8003a90:	d125      	bne.n	8003ade <_strtol_l.constprop.0+0x9a>
 8003a92:	2310      	movs	r3, #16
 8003a94:	786c      	ldrb	r4, [r5, #1]
 8003a96:	3502      	adds	r5, #2
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8003a9e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8003aa2:	fbbc f9f3 	udiv	r9, ip, r3
 8003aa6:	4610      	mov	r0, r2
 8003aa8:	fb03 ca19 	mls	sl, r3, r9, ip
 8003aac:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8003ab0:	2f09      	cmp	r7, #9
 8003ab2:	d81b      	bhi.n	8003aec <_strtol_l.constprop.0+0xa8>
 8003ab4:	463c      	mov	r4, r7
 8003ab6:	42a3      	cmp	r3, r4
 8003ab8:	dd27      	ble.n	8003b0a <_strtol_l.constprop.0+0xc6>
 8003aba:	1c57      	adds	r7, r2, #1
 8003abc:	d007      	beq.n	8003ace <_strtol_l.constprop.0+0x8a>
 8003abe:	4581      	cmp	r9, r0
 8003ac0:	d320      	bcc.n	8003b04 <_strtol_l.constprop.0+0xc0>
 8003ac2:	d101      	bne.n	8003ac8 <_strtol_l.constprop.0+0x84>
 8003ac4:	45a2      	cmp	sl, r4
 8003ac6:	db1d      	blt.n	8003b04 <_strtol_l.constprop.0+0xc0>
 8003ac8:	2201      	movs	r2, #1
 8003aca:	fb00 4003 	mla	r0, r0, r3, r4
 8003ace:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003ad2:	e7eb      	b.n	8003aac <_strtol_l.constprop.0+0x68>
 8003ad4:	2c2b      	cmp	r4, #43	@ 0x2b
 8003ad6:	bf04      	itt	eq
 8003ad8:	782c      	ldrbeq	r4, [r5, #0]
 8003ada:	1c95      	addeq	r5, r2, #2
 8003adc:	e7cf      	b.n	8003a7e <_strtol_l.constprop.0+0x3a>
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d1da      	bne.n	8003a98 <_strtol_l.constprop.0+0x54>
 8003ae2:	2c30      	cmp	r4, #48	@ 0x30
 8003ae4:	bf0c      	ite	eq
 8003ae6:	2308      	moveq	r3, #8
 8003ae8:	230a      	movne	r3, #10
 8003aea:	e7d5      	b.n	8003a98 <_strtol_l.constprop.0+0x54>
 8003aec:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8003af0:	2f19      	cmp	r7, #25
 8003af2:	d801      	bhi.n	8003af8 <_strtol_l.constprop.0+0xb4>
 8003af4:	3c37      	subs	r4, #55	@ 0x37
 8003af6:	e7de      	b.n	8003ab6 <_strtol_l.constprop.0+0x72>
 8003af8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8003afc:	2f19      	cmp	r7, #25
 8003afe:	d804      	bhi.n	8003b0a <_strtol_l.constprop.0+0xc6>
 8003b00:	3c57      	subs	r4, #87	@ 0x57
 8003b02:	e7d8      	b.n	8003ab6 <_strtol_l.constprop.0+0x72>
 8003b04:	f04f 32ff 	mov.w	r2, #4294967295
 8003b08:	e7e1      	b.n	8003ace <_strtol_l.constprop.0+0x8a>
 8003b0a:	1c53      	adds	r3, r2, #1
 8003b0c:	d108      	bne.n	8003b20 <_strtol_l.constprop.0+0xdc>
 8003b0e:	2322      	movs	r3, #34	@ 0x22
 8003b10:	4660      	mov	r0, ip
 8003b12:	f8ce 3000 	str.w	r3, [lr]
 8003b16:	f1b8 0f00 	cmp.w	r8, #0
 8003b1a:	d0a0      	beq.n	8003a5e <_strtol_l.constprop.0+0x1a>
 8003b1c:	1e69      	subs	r1, r5, #1
 8003b1e:	e006      	b.n	8003b2e <_strtol_l.constprop.0+0xea>
 8003b20:	b106      	cbz	r6, 8003b24 <_strtol_l.constprop.0+0xe0>
 8003b22:	4240      	negs	r0, r0
 8003b24:	f1b8 0f00 	cmp.w	r8, #0
 8003b28:	d099      	beq.n	8003a5e <_strtol_l.constprop.0+0x1a>
 8003b2a:	2a00      	cmp	r2, #0
 8003b2c:	d1f6      	bne.n	8003b1c <_strtol_l.constprop.0+0xd8>
 8003b2e:	f8c8 1000 	str.w	r1, [r8]
 8003b32:	e794      	b.n	8003a5e <_strtol_l.constprop.0+0x1a>
 8003b34:	08004707 	.word	0x08004707

08003b38 <strtol>:
 8003b38:	4613      	mov	r3, r2
 8003b3a:	460a      	mov	r2, r1
 8003b3c:	4601      	mov	r1, r0
 8003b3e:	4802      	ldr	r0, [pc, #8]	@ (8003b48 <strtol+0x10>)
 8003b40:	6800      	ldr	r0, [r0, #0]
 8003b42:	f7ff bf7f 	b.w	8003a44 <_strtol_l.constprop.0>
 8003b46:	bf00      	nop
 8003b48:	2000000c 	.word	0x2000000c

08003b4c <_strtoul_l.constprop.0>:
 8003b4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003b50:	4686      	mov	lr, r0
 8003b52:	460d      	mov	r5, r1
 8003b54:	4e33      	ldr	r6, [pc, #204]	@ (8003c24 <_strtoul_l.constprop.0+0xd8>)
 8003b56:	4628      	mov	r0, r5
 8003b58:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003b5c:	5d37      	ldrb	r7, [r6, r4]
 8003b5e:	f017 0708 	ands.w	r7, r7, #8
 8003b62:	d1f8      	bne.n	8003b56 <_strtoul_l.constprop.0+0xa>
 8003b64:	2c2d      	cmp	r4, #45	@ 0x2d
 8003b66:	d12f      	bne.n	8003bc8 <_strtoul_l.constprop.0+0x7c>
 8003b68:	2701      	movs	r7, #1
 8003b6a:	782c      	ldrb	r4, [r5, #0]
 8003b6c:	1c85      	adds	r5, r0, #2
 8003b6e:	f033 0010 	bics.w	r0, r3, #16
 8003b72:	d109      	bne.n	8003b88 <_strtoul_l.constprop.0+0x3c>
 8003b74:	2c30      	cmp	r4, #48	@ 0x30
 8003b76:	d12c      	bne.n	8003bd2 <_strtoul_l.constprop.0+0x86>
 8003b78:	7828      	ldrb	r0, [r5, #0]
 8003b7a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8003b7e:	2858      	cmp	r0, #88	@ 0x58
 8003b80:	d127      	bne.n	8003bd2 <_strtoul_l.constprop.0+0x86>
 8003b82:	2310      	movs	r3, #16
 8003b84:	786c      	ldrb	r4, [r5, #1]
 8003b86:	3502      	adds	r5, #2
 8003b88:	f04f 38ff 	mov.w	r8, #4294967295
 8003b8c:	fbb8 f8f3 	udiv	r8, r8, r3
 8003b90:	2600      	movs	r6, #0
 8003b92:	fb03 f908 	mul.w	r9, r3, r8
 8003b96:	4630      	mov	r0, r6
 8003b98:	ea6f 0909 	mvn.w	r9, r9
 8003b9c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8003ba0:	f1bc 0f09 	cmp.w	ip, #9
 8003ba4:	d81c      	bhi.n	8003be0 <_strtoul_l.constprop.0+0x94>
 8003ba6:	4664      	mov	r4, ip
 8003ba8:	42a3      	cmp	r3, r4
 8003baa:	dd2a      	ble.n	8003c02 <_strtoul_l.constprop.0+0xb6>
 8003bac:	f1b6 3fff 	cmp.w	r6, #4294967295
 8003bb0:	d007      	beq.n	8003bc2 <_strtoul_l.constprop.0+0x76>
 8003bb2:	4580      	cmp	r8, r0
 8003bb4:	d322      	bcc.n	8003bfc <_strtoul_l.constprop.0+0xb0>
 8003bb6:	d101      	bne.n	8003bbc <_strtoul_l.constprop.0+0x70>
 8003bb8:	45a1      	cmp	r9, r4
 8003bba:	db1f      	blt.n	8003bfc <_strtoul_l.constprop.0+0xb0>
 8003bbc:	2601      	movs	r6, #1
 8003bbe:	fb00 4003 	mla	r0, r0, r3, r4
 8003bc2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003bc6:	e7e9      	b.n	8003b9c <_strtoul_l.constprop.0+0x50>
 8003bc8:	2c2b      	cmp	r4, #43	@ 0x2b
 8003bca:	bf04      	itt	eq
 8003bcc:	782c      	ldrbeq	r4, [r5, #0]
 8003bce:	1c85      	addeq	r5, r0, #2
 8003bd0:	e7cd      	b.n	8003b6e <_strtoul_l.constprop.0+0x22>
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d1d8      	bne.n	8003b88 <_strtoul_l.constprop.0+0x3c>
 8003bd6:	2c30      	cmp	r4, #48	@ 0x30
 8003bd8:	bf0c      	ite	eq
 8003bda:	2308      	moveq	r3, #8
 8003bdc:	230a      	movne	r3, #10
 8003bde:	e7d3      	b.n	8003b88 <_strtoul_l.constprop.0+0x3c>
 8003be0:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8003be4:	f1bc 0f19 	cmp.w	ip, #25
 8003be8:	d801      	bhi.n	8003bee <_strtoul_l.constprop.0+0xa2>
 8003bea:	3c37      	subs	r4, #55	@ 0x37
 8003bec:	e7dc      	b.n	8003ba8 <_strtoul_l.constprop.0+0x5c>
 8003bee:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8003bf2:	f1bc 0f19 	cmp.w	ip, #25
 8003bf6:	d804      	bhi.n	8003c02 <_strtoul_l.constprop.0+0xb6>
 8003bf8:	3c57      	subs	r4, #87	@ 0x57
 8003bfa:	e7d5      	b.n	8003ba8 <_strtoul_l.constprop.0+0x5c>
 8003bfc:	f04f 36ff 	mov.w	r6, #4294967295
 8003c00:	e7df      	b.n	8003bc2 <_strtoul_l.constprop.0+0x76>
 8003c02:	1c73      	adds	r3, r6, #1
 8003c04:	d106      	bne.n	8003c14 <_strtoul_l.constprop.0+0xc8>
 8003c06:	2322      	movs	r3, #34	@ 0x22
 8003c08:	4630      	mov	r0, r6
 8003c0a:	f8ce 3000 	str.w	r3, [lr]
 8003c0e:	b932      	cbnz	r2, 8003c1e <_strtoul_l.constprop.0+0xd2>
 8003c10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003c14:	b107      	cbz	r7, 8003c18 <_strtoul_l.constprop.0+0xcc>
 8003c16:	4240      	negs	r0, r0
 8003c18:	2a00      	cmp	r2, #0
 8003c1a:	d0f9      	beq.n	8003c10 <_strtoul_l.constprop.0+0xc4>
 8003c1c:	b106      	cbz	r6, 8003c20 <_strtoul_l.constprop.0+0xd4>
 8003c1e:	1e69      	subs	r1, r5, #1
 8003c20:	6011      	str	r1, [r2, #0]
 8003c22:	e7f5      	b.n	8003c10 <_strtoul_l.constprop.0+0xc4>
 8003c24:	08004707 	.word	0x08004707

08003c28 <strtoul>:
 8003c28:	4613      	mov	r3, r2
 8003c2a:	460a      	mov	r2, r1
 8003c2c:	4601      	mov	r1, r0
 8003c2e:	4802      	ldr	r0, [pc, #8]	@ (8003c38 <strtoul+0x10>)
 8003c30:	6800      	ldr	r0, [r0, #0]
 8003c32:	f7ff bf8b 	b.w	8003b4c <_strtoul_l.constprop.0>
 8003c36:	bf00      	nop
 8003c38:	2000000c 	.word	0x2000000c

08003c3c <_vsiprintf_r>:
 8003c3c:	b500      	push	{lr}
 8003c3e:	b09b      	sub	sp, #108	@ 0x6c
 8003c40:	9100      	str	r1, [sp, #0]
 8003c42:	9104      	str	r1, [sp, #16]
 8003c44:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003c48:	9105      	str	r1, [sp, #20]
 8003c4a:	9102      	str	r1, [sp, #8]
 8003c4c:	4905      	ldr	r1, [pc, #20]	@ (8003c64 <_vsiprintf_r+0x28>)
 8003c4e:	9103      	str	r1, [sp, #12]
 8003c50:	4669      	mov	r1, sp
 8003c52:	f000 f9c7 	bl	8003fe4 <_svfiprintf_r>
 8003c56:	2200      	movs	r2, #0
 8003c58:	9b00      	ldr	r3, [sp, #0]
 8003c5a:	701a      	strb	r2, [r3, #0]
 8003c5c:	b01b      	add	sp, #108	@ 0x6c
 8003c5e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003c62:	bf00      	nop
 8003c64:	ffff0208 	.word	0xffff0208

08003c68 <vsiprintf>:
 8003c68:	4613      	mov	r3, r2
 8003c6a:	460a      	mov	r2, r1
 8003c6c:	4601      	mov	r1, r0
 8003c6e:	4802      	ldr	r0, [pc, #8]	@ (8003c78 <vsiprintf+0x10>)
 8003c70:	6800      	ldr	r0, [r0, #0]
 8003c72:	f7ff bfe3 	b.w	8003c3c <_vsiprintf_r>
 8003c76:	bf00      	nop
 8003c78:	2000000c 	.word	0x2000000c

08003c7c <memset>:
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	4402      	add	r2, r0
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d100      	bne.n	8003c86 <memset+0xa>
 8003c84:	4770      	bx	lr
 8003c86:	f803 1b01 	strb.w	r1, [r3], #1
 8003c8a:	e7f9      	b.n	8003c80 <memset+0x4>

08003c8c <strchr>:
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	b2c9      	uxtb	r1, r1
 8003c90:	4618      	mov	r0, r3
 8003c92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003c96:	b112      	cbz	r2, 8003c9e <strchr+0x12>
 8003c98:	428a      	cmp	r2, r1
 8003c9a:	d1f9      	bne.n	8003c90 <strchr+0x4>
 8003c9c:	4770      	bx	lr
 8003c9e:	2900      	cmp	r1, #0
 8003ca0:	bf18      	it	ne
 8003ca2:	2000      	movne	r0, #0
 8003ca4:	4770      	bx	lr

08003ca6 <strncmp>:
 8003ca6:	b510      	push	{r4, lr}
 8003ca8:	b16a      	cbz	r2, 8003cc6 <strncmp+0x20>
 8003caa:	3901      	subs	r1, #1
 8003cac:	1884      	adds	r4, r0, r2
 8003cae:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003cb2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d103      	bne.n	8003cc2 <strncmp+0x1c>
 8003cba:	42a0      	cmp	r0, r4
 8003cbc:	d001      	beq.n	8003cc2 <strncmp+0x1c>
 8003cbe:	2a00      	cmp	r2, #0
 8003cc0:	d1f5      	bne.n	8003cae <strncmp+0x8>
 8003cc2:	1ad0      	subs	r0, r2, r3
 8003cc4:	bd10      	pop	{r4, pc}
 8003cc6:	4610      	mov	r0, r2
 8003cc8:	e7fc      	b.n	8003cc4 <strncmp+0x1e>
	...

08003ccc <__errno>:
 8003ccc:	4b01      	ldr	r3, [pc, #4]	@ (8003cd4 <__errno+0x8>)
 8003cce:	6818      	ldr	r0, [r3, #0]
 8003cd0:	4770      	bx	lr
 8003cd2:	bf00      	nop
 8003cd4:	2000000c 	.word	0x2000000c

08003cd8 <__libc_init_array>:
 8003cd8:	b570      	push	{r4, r5, r6, lr}
 8003cda:	2600      	movs	r6, #0
 8003cdc:	4d0c      	ldr	r5, [pc, #48]	@ (8003d10 <__libc_init_array+0x38>)
 8003cde:	4c0d      	ldr	r4, [pc, #52]	@ (8003d14 <__libc_init_array+0x3c>)
 8003ce0:	1b64      	subs	r4, r4, r5
 8003ce2:	10a4      	asrs	r4, r4, #2
 8003ce4:	42a6      	cmp	r6, r4
 8003ce6:	d109      	bne.n	8003cfc <__libc_init_array+0x24>
 8003ce8:	f000 fc78 	bl	80045dc <_init>
 8003cec:	2600      	movs	r6, #0
 8003cee:	4d0a      	ldr	r5, [pc, #40]	@ (8003d18 <__libc_init_array+0x40>)
 8003cf0:	4c0a      	ldr	r4, [pc, #40]	@ (8003d1c <__libc_init_array+0x44>)
 8003cf2:	1b64      	subs	r4, r4, r5
 8003cf4:	10a4      	asrs	r4, r4, #2
 8003cf6:	42a6      	cmp	r6, r4
 8003cf8:	d105      	bne.n	8003d06 <__libc_init_array+0x2e>
 8003cfa:	bd70      	pop	{r4, r5, r6, pc}
 8003cfc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d00:	4798      	blx	r3
 8003d02:	3601      	adds	r6, #1
 8003d04:	e7ee      	b.n	8003ce4 <__libc_init_array+0xc>
 8003d06:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d0a:	4798      	blx	r3
 8003d0c:	3601      	adds	r6, #1
 8003d0e:	e7f2      	b.n	8003cf6 <__libc_init_array+0x1e>
 8003d10:	08004844 	.word	0x08004844
 8003d14:	08004844 	.word	0x08004844
 8003d18:	08004844 	.word	0x08004844
 8003d1c:	08004848 	.word	0x08004848

08003d20 <__retarget_lock_acquire_recursive>:
 8003d20:	4770      	bx	lr

08003d22 <__retarget_lock_release_recursive>:
 8003d22:	4770      	bx	lr

08003d24 <memcpy>:
 8003d24:	440a      	add	r2, r1
 8003d26:	4291      	cmp	r1, r2
 8003d28:	f100 33ff 	add.w	r3, r0, #4294967295
 8003d2c:	d100      	bne.n	8003d30 <memcpy+0xc>
 8003d2e:	4770      	bx	lr
 8003d30:	b510      	push	{r4, lr}
 8003d32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003d36:	4291      	cmp	r1, r2
 8003d38:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003d3c:	d1f9      	bne.n	8003d32 <memcpy+0xe>
 8003d3e:	bd10      	pop	{r4, pc}

08003d40 <_free_r>:
 8003d40:	b538      	push	{r3, r4, r5, lr}
 8003d42:	4605      	mov	r5, r0
 8003d44:	2900      	cmp	r1, #0
 8003d46:	d040      	beq.n	8003dca <_free_r+0x8a>
 8003d48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d4c:	1f0c      	subs	r4, r1, #4
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	bfb8      	it	lt
 8003d52:	18e4      	addlt	r4, r4, r3
 8003d54:	f000 f8de 	bl	8003f14 <__malloc_lock>
 8003d58:	4a1c      	ldr	r2, [pc, #112]	@ (8003dcc <_free_r+0x8c>)
 8003d5a:	6813      	ldr	r3, [r2, #0]
 8003d5c:	b933      	cbnz	r3, 8003d6c <_free_r+0x2c>
 8003d5e:	6063      	str	r3, [r4, #4]
 8003d60:	6014      	str	r4, [r2, #0]
 8003d62:	4628      	mov	r0, r5
 8003d64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d68:	f000 b8da 	b.w	8003f20 <__malloc_unlock>
 8003d6c:	42a3      	cmp	r3, r4
 8003d6e:	d908      	bls.n	8003d82 <_free_r+0x42>
 8003d70:	6820      	ldr	r0, [r4, #0]
 8003d72:	1821      	adds	r1, r4, r0
 8003d74:	428b      	cmp	r3, r1
 8003d76:	bf01      	itttt	eq
 8003d78:	6819      	ldreq	r1, [r3, #0]
 8003d7a:	685b      	ldreq	r3, [r3, #4]
 8003d7c:	1809      	addeq	r1, r1, r0
 8003d7e:	6021      	streq	r1, [r4, #0]
 8003d80:	e7ed      	b.n	8003d5e <_free_r+0x1e>
 8003d82:	461a      	mov	r2, r3
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	b10b      	cbz	r3, 8003d8c <_free_r+0x4c>
 8003d88:	42a3      	cmp	r3, r4
 8003d8a:	d9fa      	bls.n	8003d82 <_free_r+0x42>
 8003d8c:	6811      	ldr	r1, [r2, #0]
 8003d8e:	1850      	adds	r0, r2, r1
 8003d90:	42a0      	cmp	r0, r4
 8003d92:	d10b      	bne.n	8003dac <_free_r+0x6c>
 8003d94:	6820      	ldr	r0, [r4, #0]
 8003d96:	4401      	add	r1, r0
 8003d98:	1850      	adds	r0, r2, r1
 8003d9a:	4283      	cmp	r3, r0
 8003d9c:	6011      	str	r1, [r2, #0]
 8003d9e:	d1e0      	bne.n	8003d62 <_free_r+0x22>
 8003da0:	6818      	ldr	r0, [r3, #0]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	4408      	add	r0, r1
 8003da6:	6010      	str	r0, [r2, #0]
 8003da8:	6053      	str	r3, [r2, #4]
 8003daa:	e7da      	b.n	8003d62 <_free_r+0x22>
 8003dac:	d902      	bls.n	8003db4 <_free_r+0x74>
 8003dae:	230c      	movs	r3, #12
 8003db0:	602b      	str	r3, [r5, #0]
 8003db2:	e7d6      	b.n	8003d62 <_free_r+0x22>
 8003db4:	6820      	ldr	r0, [r4, #0]
 8003db6:	1821      	adds	r1, r4, r0
 8003db8:	428b      	cmp	r3, r1
 8003dba:	bf01      	itttt	eq
 8003dbc:	6819      	ldreq	r1, [r3, #0]
 8003dbe:	685b      	ldreq	r3, [r3, #4]
 8003dc0:	1809      	addeq	r1, r1, r0
 8003dc2:	6021      	streq	r1, [r4, #0]
 8003dc4:	6063      	str	r3, [r4, #4]
 8003dc6:	6054      	str	r4, [r2, #4]
 8003dc8:	e7cb      	b.n	8003d62 <_free_r+0x22>
 8003dca:	bd38      	pop	{r3, r4, r5, pc}
 8003dcc:	200007fc 	.word	0x200007fc

08003dd0 <sbrk_aligned>:
 8003dd0:	b570      	push	{r4, r5, r6, lr}
 8003dd2:	4e0f      	ldr	r6, [pc, #60]	@ (8003e10 <sbrk_aligned+0x40>)
 8003dd4:	460c      	mov	r4, r1
 8003dd6:	6831      	ldr	r1, [r6, #0]
 8003dd8:	4605      	mov	r5, r0
 8003dda:	b911      	cbnz	r1, 8003de2 <sbrk_aligned+0x12>
 8003ddc:	f000 fbaa 	bl	8004534 <_sbrk_r>
 8003de0:	6030      	str	r0, [r6, #0]
 8003de2:	4621      	mov	r1, r4
 8003de4:	4628      	mov	r0, r5
 8003de6:	f000 fba5 	bl	8004534 <_sbrk_r>
 8003dea:	1c43      	adds	r3, r0, #1
 8003dec:	d103      	bne.n	8003df6 <sbrk_aligned+0x26>
 8003dee:	f04f 34ff 	mov.w	r4, #4294967295
 8003df2:	4620      	mov	r0, r4
 8003df4:	bd70      	pop	{r4, r5, r6, pc}
 8003df6:	1cc4      	adds	r4, r0, #3
 8003df8:	f024 0403 	bic.w	r4, r4, #3
 8003dfc:	42a0      	cmp	r0, r4
 8003dfe:	d0f8      	beq.n	8003df2 <sbrk_aligned+0x22>
 8003e00:	1a21      	subs	r1, r4, r0
 8003e02:	4628      	mov	r0, r5
 8003e04:	f000 fb96 	bl	8004534 <_sbrk_r>
 8003e08:	3001      	adds	r0, #1
 8003e0a:	d1f2      	bne.n	8003df2 <sbrk_aligned+0x22>
 8003e0c:	e7ef      	b.n	8003dee <sbrk_aligned+0x1e>
 8003e0e:	bf00      	nop
 8003e10:	200007f8 	.word	0x200007f8

08003e14 <_malloc_r>:
 8003e14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e18:	1ccd      	adds	r5, r1, #3
 8003e1a:	f025 0503 	bic.w	r5, r5, #3
 8003e1e:	3508      	adds	r5, #8
 8003e20:	2d0c      	cmp	r5, #12
 8003e22:	bf38      	it	cc
 8003e24:	250c      	movcc	r5, #12
 8003e26:	2d00      	cmp	r5, #0
 8003e28:	4606      	mov	r6, r0
 8003e2a:	db01      	blt.n	8003e30 <_malloc_r+0x1c>
 8003e2c:	42a9      	cmp	r1, r5
 8003e2e:	d904      	bls.n	8003e3a <_malloc_r+0x26>
 8003e30:	230c      	movs	r3, #12
 8003e32:	6033      	str	r3, [r6, #0]
 8003e34:	2000      	movs	r0, #0
 8003e36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e3a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003f10 <_malloc_r+0xfc>
 8003e3e:	f000 f869 	bl	8003f14 <__malloc_lock>
 8003e42:	f8d8 3000 	ldr.w	r3, [r8]
 8003e46:	461c      	mov	r4, r3
 8003e48:	bb44      	cbnz	r4, 8003e9c <_malloc_r+0x88>
 8003e4a:	4629      	mov	r1, r5
 8003e4c:	4630      	mov	r0, r6
 8003e4e:	f7ff ffbf 	bl	8003dd0 <sbrk_aligned>
 8003e52:	1c43      	adds	r3, r0, #1
 8003e54:	4604      	mov	r4, r0
 8003e56:	d158      	bne.n	8003f0a <_malloc_r+0xf6>
 8003e58:	f8d8 4000 	ldr.w	r4, [r8]
 8003e5c:	4627      	mov	r7, r4
 8003e5e:	2f00      	cmp	r7, #0
 8003e60:	d143      	bne.n	8003eea <_malloc_r+0xd6>
 8003e62:	2c00      	cmp	r4, #0
 8003e64:	d04b      	beq.n	8003efe <_malloc_r+0xea>
 8003e66:	6823      	ldr	r3, [r4, #0]
 8003e68:	4639      	mov	r1, r7
 8003e6a:	4630      	mov	r0, r6
 8003e6c:	eb04 0903 	add.w	r9, r4, r3
 8003e70:	f000 fb60 	bl	8004534 <_sbrk_r>
 8003e74:	4581      	cmp	r9, r0
 8003e76:	d142      	bne.n	8003efe <_malloc_r+0xea>
 8003e78:	6821      	ldr	r1, [r4, #0]
 8003e7a:	4630      	mov	r0, r6
 8003e7c:	1a6d      	subs	r5, r5, r1
 8003e7e:	4629      	mov	r1, r5
 8003e80:	f7ff ffa6 	bl	8003dd0 <sbrk_aligned>
 8003e84:	3001      	adds	r0, #1
 8003e86:	d03a      	beq.n	8003efe <_malloc_r+0xea>
 8003e88:	6823      	ldr	r3, [r4, #0]
 8003e8a:	442b      	add	r3, r5
 8003e8c:	6023      	str	r3, [r4, #0]
 8003e8e:	f8d8 3000 	ldr.w	r3, [r8]
 8003e92:	685a      	ldr	r2, [r3, #4]
 8003e94:	bb62      	cbnz	r2, 8003ef0 <_malloc_r+0xdc>
 8003e96:	f8c8 7000 	str.w	r7, [r8]
 8003e9a:	e00f      	b.n	8003ebc <_malloc_r+0xa8>
 8003e9c:	6822      	ldr	r2, [r4, #0]
 8003e9e:	1b52      	subs	r2, r2, r5
 8003ea0:	d420      	bmi.n	8003ee4 <_malloc_r+0xd0>
 8003ea2:	2a0b      	cmp	r2, #11
 8003ea4:	d917      	bls.n	8003ed6 <_malloc_r+0xc2>
 8003ea6:	1961      	adds	r1, r4, r5
 8003ea8:	42a3      	cmp	r3, r4
 8003eaa:	6025      	str	r5, [r4, #0]
 8003eac:	bf18      	it	ne
 8003eae:	6059      	strne	r1, [r3, #4]
 8003eb0:	6863      	ldr	r3, [r4, #4]
 8003eb2:	bf08      	it	eq
 8003eb4:	f8c8 1000 	streq.w	r1, [r8]
 8003eb8:	5162      	str	r2, [r4, r5]
 8003eba:	604b      	str	r3, [r1, #4]
 8003ebc:	4630      	mov	r0, r6
 8003ebe:	f000 f82f 	bl	8003f20 <__malloc_unlock>
 8003ec2:	f104 000b 	add.w	r0, r4, #11
 8003ec6:	1d23      	adds	r3, r4, #4
 8003ec8:	f020 0007 	bic.w	r0, r0, #7
 8003ecc:	1ac2      	subs	r2, r0, r3
 8003ece:	bf1c      	itt	ne
 8003ed0:	1a1b      	subne	r3, r3, r0
 8003ed2:	50a3      	strne	r3, [r4, r2]
 8003ed4:	e7af      	b.n	8003e36 <_malloc_r+0x22>
 8003ed6:	6862      	ldr	r2, [r4, #4]
 8003ed8:	42a3      	cmp	r3, r4
 8003eda:	bf0c      	ite	eq
 8003edc:	f8c8 2000 	streq.w	r2, [r8]
 8003ee0:	605a      	strne	r2, [r3, #4]
 8003ee2:	e7eb      	b.n	8003ebc <_malloc_r+0xa8>
 8003ee4:	4623      	mov	r3, r4
 8003ee6:	6864      	ldr	r4, [r4, #4]
 8003ee8:	e7ae      	b.n	8003e48 <_malloc_r+0x34>
 8003eea:	463c      	mov	r4, r7
 8003eec:	687f      	ldr	r7, [r7, #4]
 8003eee:	e7b6      	b.n	8003e5e <_malloc_r+0x4a>
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	42a3      	cmp	r3, r4
 8003ef6:	d1fb      	bne.n	8003ef0 <_malloc_r+0xdc>
 8003ef8:	2300      	movs	r3, #0
 8003efa:	6053      	str	r3, [r2, #4]
 8003efc:	e7de      	b.n	8003ebc <_malloc_r+0xa8>
 8003efe:	230c      	movs	r3, #12
 8003f00:	4630      	mov	r0, r6
 8003f02:	6033      	str	r3, [r6, #0]
 8003f04:	f000 f80c 	bl	8003f20 <__malloc_unlock>
 8003f08:	e794      	b.n	8003e34 <_malloc_r+0x20>
 8003f0a:	6005      	str	r5, [r0, #0]
 8003f0c:	e7d6      	b.n	8003ebc <_malloc_r+0xa8>
 8003f0e:	bf00      	nop
 8003f10:	200007fc 	.word	0x200007fc

08003f14 <__malloc_lock>:
 8003f14:	4801      	ldr	r0, [pc, #4]	@ (8003f1c <__malloc_lock+0x8>)
 8003f16:	f7ff bf03 	b.w	8003d20 <__retarget_lock_acquire_recursive>
 8003f1a:	bf00      	nop
 8003f1c:	200007f4 	.word	0x200007f4

08003f20 <__malloc_unlock>:
 8003f20:	4801      	ldr	r0, [pc, #4]	@ (8003f28 <__malloc_unlock+0x8>)
 8003f22:	f7ff befe 	b.w	8003d22 <__retarget_lock_release_recursive>
 8003f26:	bf00      	nop
 8003f28:	200007f4 	.word	0x200007f4

08003f2c <__ssputs_r>:
 8003f2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f30:	461f      	mov	r7, r3
 8003f32:	688e      	ldr	r6, [r1, #8]
 8003f34:	4682      	mov	sl, r0
 8003f36:	42be      	cmp	r6, r7
 8003f38:	460c      	mov	r4, r1
 8003f3a:	4690      	mov	r8, r2
 8003f3c:	680b      	ldr	r3, [r1, #0]
 8003f3e:	d82d      	bhi.n	8003f9c <__ssputs_r+0x70>
 8003f40:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003f44:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003f48:	d026      	beq.n	8003f98 <__ssputs_r+0x6c>
 8003f4a:	6965      	ldr	r5, [r4, #20]
 8003f4c:	6909      	ldr	r1, [r1, #16]
 8003f4e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003f52:	eba3 0901 	sub.w	r9, r3, r1
 8003f56:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003f5a:	1c7b      	adds	r3, r7, #1
 8003f5c:	444b      	add	r3, r9
 8003f5e:	106d      	asrs	r5, r5, #1
 8003f60:	429d      	cmp	r5, r3
 8003f62:	bf38      	it	cc
 8003f64:	461d      	movcc	r5, r3
 8003f66:	0553      	lsls	r3, r2, #21
 8003f68:	d527      	bpl.n	8003fba <__ssputs_r+0x8e>
 8003f6a:	4629      	mov	r1, r5
 8003f6c:	f7ff ff52 	bl	8003e14 <_malloc_r>
 8003f70:	4606      	mov	r6, r0
 8003f72:	b360      	cbz	r0, 8003fce <__ssputs_r+0xa2>
 8003f74:	464a      	mov	r2, r9
 8003f76:	6921      	ldr	r1, [r4, #16]
 8003f78:	f7ff fed4 	bl	8003d24 <memcpy>
 8003f7c:	89a3      	ldrh	r3, [r4, #12]
 8003f7e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003f82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f86:	81a3      	strh	r3, [r4, #12]
 8003f88:	6126      	str	r6, [r4, #16]
 8003f8a:	444e      	add	r6, r9
 8003f8c:	6026      	str	r6, [r4, #0]
 8003f8e:	463e      	mov	r6, r7
 8003f90:	6165      	str	r5, [r4, #20]
 8003f92:	eba5 0509 	sub.w	r5, r5, r9
 8003f96:	60a5      	str	r5, [r4, #8]
 8003f98:	42be      	cmp	r6, r7
 8003f9a:	d900      	bls.n	8003f9e <__ssputs_r+0x72>
 8003f9c:	463e      	mov	r6, r7
 8003f9e:	4632      	mov	r2, r6
 8003fa0:	4641      	mov	r1, r8
 8003fa2:	6820      	ldr	r0, [r4, #0]
 8003fa4:	f000 faac 	bl	8004500 <memmove>
 8003fa8:	2000      	movs	r0, #0
 8003faa:	68a3      	ldr	r3, [r4, #8]
 8003fac:	1b9b      	subs	r3, r3, r6
 8003fae:	60a3      	str	r3, [r4, #8]
 8003fb0:	6823      	ldr	r3, [r4, #0]
 8003fb2:	4433      	add	r3, r6
 8003fb4:	6023      	str	r3, [r4, #0]
 8003fb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fba:	462a      	mov	r2, r5
 8003fbc:	f000 fad8 	bl	8004570 <_realloc_r>
 8003fc0:	4606      	mov	r6, r0
 8003fc2:	2800      	cmp	r0, #0
 8003fc4:	d1e0      	bne.n	8003f88 <__ssputs_r+0x5c>
 8003fc6:	4650      	mov	r0, sl
 8003fc8:	6921      	ldr	r1, [r4, #16]
 8003fca:	f7ff feb9 	bl	8003d40 <_free_r>
 8003fce:	230c      	movs	r3, #12
 8003fd0:	f8ca 3000 	str.w	r3, [sl]
 8003fd4:	89a3      	ldrh	r3, [r4, #12]
 8003fd6:	f04f 30ff 	mov.w	r0, #4294967295
 8003fda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003fde:	81a3      	strh	r3, [r4, #12]
 8003fe0:	e7e9      	b.n	8003fb6 <__ssputs_r+0x8a>
	...

08003fe4 <_svfiprintf_r>:
 8003fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fe8:	4698      	mov	r8, r3
 8003fea:	898b      	ldrh	r3, [r1, #12]
 8003fec:	4607      	mov	r7, r0
 8003fee:	061b      	lsls	r3, r3, #24
 8003ff0:	460d      	mov	r5, r1
 8003ff2:	4614      	mov	r4, r2
 8003ff4:	b09d      	sub	sp, #116	@ 0x74
 8003ff6:	d510      	bpl.n	800401a <_svfiprintf_r+0x36>
 8003ff8:	690b      	ldr	r3, [r1, #16]
 8003ffa:	b973      	cbnz	r3, 800401a <_svfiprintf_r+0x36>
 8003ffc:	2140      	movs	r1, #64	@ 0x40
 8003ffe:	f7ff ff09 	bl	8003e14 <_malloc_r>
 8004002:	6028      	str	r0, [r5, #0]
 8004004:	6128      	str	r0, [r5, #16]
 8004006:	b930      	cbnz	r0, 8004016 <_svfiprintf_r+0x32>
 8004008:	230c      	movs	r3, #12
 800400a:	603b      	str	r3, [r7, #0]
 800400c:	f04f 30ff 	mov.w	r0, #4294967295
 8004010:	b01d      	add	sp, #116	@ 0x74
 8004012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004016:	2340      	movs	r3, #64	@ 0x40
 8004018:	616b      	str	r3, [r5, #20]
 800401a:	2300      	movs	r3, #0
 800401c:	9309      	str	r3, [sp, #36]	@ 0x24
 800401e:	2320      	movs	r3, #32
 8004020:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004024:	2330      	movs	r3, #48	@ 0x30
 8004026:	f04f 0901 	mov.w	r9, #1
 800402a:	f8cd 800c 	str.w	r8, [sp, #12]
 800402e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80041c8 <_svfiprintf_r+0x1e4>
 8004032:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004036:	4623      	mov	r3, r4
 8004038:	469a      	mov	sl, r3
 800403a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800403e:	b10a      	cbz	r2, 8004044 <_svfiprintf_r+0x60>
 8004040:	2a25      	cmp	r2, #37	@ 0x25
 8004042:	d1f9      	bne.n	8004038 <_svfiprintf_r+0x54>
 8004044:	ebba 0b04 	subs.w	fp, sl, r4
 8004048:	d00b      	beq.n	8004062 <_svfiprintf_r+0x7e>
 800404a:	465b      	mov	r3, fp
 800404c:	4622      	mov	r2, r4
 800404e:	4629      	mov	r1, r5
 8004050:	4638      	mov	r0, r7
 8004052:	f7ff ff6b 	bl	8003f2c <__ssputs_r>
 8004056:	3001      	adds	r0, #1
 8004058:	f000 80a7 	beq.w	80041aa <_svfiprintf_r+0x1c6>
 800405c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800405e:	445a      	add	r2, fp
 8004060:	9209      	str	r2, [sp, #36]	@ 0x24
 8004062:	f89a 3000 	ldrb.w	r3, [sl]
 8004066:	2b00      	cmp	r3, #0
 8004068:	f000 809f 	beq.w	80041aa <_svfiprintf_r+0x1c6>
 800406c:	2300      	movs	r3, #0
 800406e:	f04f 32ff 	mov.w	r2, #4294967295
 8004072:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004076:	f10a 0a01 	add.w	sl, sl, #1
 800407a:	9304      	str	r3, [sp, #16]
 800407c:	9307      	str	r3, [sp, #28]
 800407e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004082:	931a      	str	r3, [sp, #104]	@ 0x68
 8004084:	4654      	mov	r4, sl
 8004086:	2205      	movs	r2, #5
 8004088:	f814 1b01 	ldrb.w	r1, [r4], #1
 800408c:	484e      	ldr	r0, [pc, #312]	@ (80041c8 <_svfiprintf_r+0x1e4>)
 800408e:	f000 fa61 	bl	8004554 <memchr>
 8004092:	9a04      	ldr	r2, [sp, #16]
 8004094:	b9d8      	cbnz	r0, 80040ce <_svfiprintf_r+0xea>
 8004096:	06d0      	lsls	r0, r2, #27
 8004098:	bf44      	itt	mi
 800409a:	2320      	movmi	r3, #32
 800409c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80040a0:	0711      	lsls	r1, r2, #28
 80040a2:	bf44      	itt	mi
 80040a4:	232b      	movmi	r3, #43	@ 0x2b
 80040a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80040aa:	f89a 3000 	ldrb.w	r3, [sl]
 80040ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80040b0:	d015      	beq.n	80040de <_svfiprintf_r+0xfa>
 80040b2:	4654      	mov	r4, sl
 80040b4:	2000      	movs	r0, #0
 80040b6:	f04f 0c0a 	mov.w	ip, #10
 80040ba:	9a07      	ldr	r2, [sp, #28]
 80040bc:	4621      	mov	r1, r4
 80040be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80040c2:	3b30      	subs	r3, #48	@ 0x30
 80040c4:	2b09      	cmp	r3, #9
 80040c6:	d94b      	bls.n	8004160 <_svfiprintf_r+0x17c>
 80040c8:	b1b0      	cbz	r0, 80040f8 <_svfiprintf_r+0x114>
 80040ca:	9207      	str	r2, [sp, #28]
 80040cc:	e014      	b.n	80040f8 <_svfiprintf_r+0x114>
 80040ce:	eba0 0308 	sub.w	r3, r0, r8
 80040d2:	fa09 f303 	lsl.w	r3, r9, r3
 80040d6:	4313      	orrs	r3, r2
 80040d8:	46a2      	mov	sl, r4
 80040da:	9304      	str	r3, [sp, #16]
 80040dc:	e7d2      	b.n	8004084 <_svfiprintf_r+0xa0>
 80040de:	9b03      	ldr	r3, [sp, #12]
 80040e0:	1d19      	adds	r1, r3, #4
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	9103      	str	r1, [sp, #12]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	bfbb      	ittet	lt
 80040ea:	425b      	neglt	r3, r3
 80040ec:	f042 0202 	orrlt.w	r2, r2, #2
 80040f0:	9307      	strge	r3, [sp, #28]
 80040f2:	9307      	strlt	r3, [sp, #28]
 80040f4:	bfb8      	it	lt
 80040f6:	9204      	strlt	r2, [sp, #16]
 80040f8:	7823      	ldrb	r3, [r4, #0]
 80040fa:	2b2e      	cmp	r3, #46	@ 0x2e
 80040fc:	d10a      	bne.n	8004114 <_svfiprintf_r+0x130>
 80040fe:	7863      	ldrb	r3, [r4, #1]
 8004100:	2b2a      	cmp	r3, #42	@ 0x2a
 8004102:	d132      	bne.n	800416a <_svfiprintf_r+0x186>
 8004104:	9b03      	ldr	r3, [sp, #12]
 8004106:	3402      	adds	r4, #2
 8004108:	1d1a      	adds	r2, r3, #4
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	9203      	str	r2, [sp, #12]
 800410e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004112:	9305      	str	r3, [sp, #20]
 8004114:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80041cc <_svfiprintf_r+0x1e8>
 8004118:	2203      	movs	r2, #3
 800411a:	4650      	mov	r0, sl
 800411c:	7821      	ldrb	r1, [r4, #0]
 800411e:	f000 fa19 	bl	8004554 <memchr>
 8004122:	b138      	cbz	r0, 8004134 <_svfiprintf_r+0x150>
 8004124:	2240      	movs	r2, #64	@ 0x40
 8004126:	9b04      	ldr	r3, [sp, #16]
 8004128:	eba0 000a 	sub.w	r0, r0, sl
 800412c:	4082      	lsls	r2, r0
 800412e:	4313      	orrs	r3, r2
 8004130:	3401      	adds	r4, #1
 8004132:	9304      	str	r3, [sp, #16]
 8004134:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004138:	2206      	movs	r2, #6
 800413a:	4825      	ldr	r0, [pc, #148]	@ (80041d0 <_svfiprintf_r+0x1ec>)
 800413c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004140:	f000 fa08 	bl	8004554 <memchr>
 8004144:	2800      	cmp	r0, #0
 8004146:	d036      	beq.n	80041b6 <_svfiprintf_r+0x1d2>
 8004148:	4b22      	ldr	r3, [pc, #136]	@ (80041d4 <_svfiprintf_r+0x1f0>)
 800414a:	bb1b      	cbnz	r3, 8004194 <_svfiprintf_r+0x1b0>
 800414c:	9b03      	ldr	r3, [sp, #12]
 800414e:	3307      	adds	r3, #7
 8004150:	f023 0307 	bic.w	r3, r3, #7
 8004154:	3308      	adds	r3, #8
 8004156:	9303      	str	r3, [sp, #12]
 8004158:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800415a:	4433      	add	r3, r6
 800415c:	9309      	str	r3, [sp, #36]	@ 0x24
 800415e:	e76a      	b.n	8004036 <_svfiprintf_r+0x52>
 8004160:	460c      	mov	r4, r1
 8004162:	2001      	movs	r0, #1
 8004164:	fb0c 3202 	mla	r2, ip, r2, r3
 8004168:	e7a8      	b.n	80040bc <_svfiprintf_r+0xd8>
 800416a:	2300      	movs	r3, #0
 800416c:	f04f 0c0a 	mov.w	ip, #10
 8004170:	4619      	mov	r1, r3
 8004172:	3401      	adds	r4, #1
 8004174:	9305      	str	r3, [sp, #20]
 8004176:	4620      	mov	r0, r4
 8004178:	f810 2b01 	ldrb.w	r2, [r0], #1
 800417c:	3a30      	subs	r2, #48	@ 0x30
 800417e:	2a09      	cmp	r2, #9
 8004180:	d903      	bls.n	800418a <_svfiprintf_r+0x1a6>
 8004182:	2b00      	cmp	r3, #0
 8004184:	d0c6      	beq.n	8004114 <_svfiprintf_r+0x130>
 8004186:	9105      	str	r1, [sp, #20]
 8004188:	e7c4      	b.n	8004114 <_svfiprintf_r+0x130>
 800418a:	4604      	mov	r4, r0
 800418c:	2301      	movs	r3, #1
 800418e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004192:	e7f0      	b.n	8004176 <_svfiprintf_r+0x192>
 8004194:	ab03      	add	r3, sp, #12
 8004196:	9300      	str	r3, [sp, #0]
 8004198:	462a      	mov	r2, r5
 800419a:	4638      	mov	r0, r7
 800419c:	4b0e      	ldr	r3, [pc, #56]	@ (80041d8 <_svfiprintf_r+0x1f4>)
 800419e:	a904      	add	r1, sp, #16
 80041a0:	f3af 8000 	nop.w
 80041a4:	1c42      	adds	r2, r0, #1
 80041a6:	4606      	mov	r6, r0
 80041a8:	d1d6      	bne.n	8004158 <_svfiprintf_r+0x174>
 80041aa:	89ab      	ldrh	r3, [r5, #12]
 80041ac:	065b      	lsls	r3, r3, #25
 80041ae:	f53f af2d 	bmi.w	800400c <_svfiprintf_r+0x28>
 80041b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80041b4:	e72c      	b.n	8004010 <_svfiprintf_r+0x2c>
 80041b6:	ab03      	add	r3, sp, #12
 80041b8:	9300      	str	r3, [sp, #0]
 80041ba:	462a      	mov	r2, r5
 80041bc:	4638      	mov	r0, r7
 80041be:	4b06      	ldr	r3, [pc, #24]	@ (80041d8 <_svfiprintf_r+0x1f4>)
 80041c0:	a904      	add	r1, sp, #16
 80041c2:	f000 f87d 	bl	80042c0 <_printf_i>
 80041c6:	e7ed      	b.n	80041a4 <_svfiprintf_r+0x1c0>
 80041c8:	08004807 	.word	0x08004807
 80041cc:	0800480d 	.word	0x0800480d
 80041d0:	08004811 	.word	0x08004811
 80041d4:	00000000 	.word	0x00000000
 80041d8:	08003f2d 	.word	0x08003f2d

080041dc <_printf_common>:
 80041dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041e0:	4616      	mov	r6, r2
 80041e2:	4698      	mov	r8, r3
 80041e4:	688a      	ldr	r2, [r1, #8]
 80041e6:	690b      	ldr	r3, [r1, #16]
 80041e8:	4607      	mov	r7, r0
 80041ea:	4293      	cmp	r3, r2
 80041ec:	bfb8      	it	lt
 80041ee:	4613      	movlt	r3, r2
 80041f0:	6033      	str	r3, [r6, #0]
 80041f2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80041f6:	460c      	mov	r4, r1
 80041f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80041fc:	b10a      	cbz	r2, 8004202 <_printf_common+0x26>
 80041fe:	3301      	adds	r3, #1
 8004200:	6033      	str	r3, [r6, #0]
 8004202:	6823      	ldr	r3, [r4, #0]
 8004204:	0699      	lsls	r1, r3, #26
 8004206:	bf42      	ittt	mi
 8004208:	6833      	ldrmi	r3, [r6, #0]
 800420a:	3302      	addmi	r3, #2
 800420c:	6033      	strmi	r3, [r6, #0]
 800420e:	6825      	ldr	r5, [r4, #0]
 8004210:	f015 0506 	ands.w	r5, r5, #6
 8004214:	d106      	bne.n	8004224 <_printf_common+0x48>
 8004216:	f104 0a19 	add.w	sl, r4, #25
 800421a:	68e3      	ldr	r3, [r4, #12]
 800421c:	6832      	ldr	r2, [r6, #0]
 800421e:	1a9b      	subs	r3, r3, r2
 8004220:	42ab      	cmp	r3, r5
 8004222:	dc2b      	bgt.n	800427c <_printf_common+0xa0>
 8004224:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004228:	6822      	ldr	r2, [r4, #0]
 800422a:	3b00      	subs	r3, #0
 800422c:	bf18      	it	ne
 800422e:	2301      	movne	r3, #1
 8004230:	0692      	lsls	r2, r2, #26
 8004232:	d430      	bmi.n	8004296 <_printf_common+0xba>
 8004234:	4641      	mov	r1, r8
 8004236:	4638      	mov	r0, r7
 8004238:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800423c:	47c8      	blx	r9
 800423e:	3001      	adds	r0, #1
 8004240:	d023      	beq.n	800428a <_printf_common+0xae>
 8004242:	6823      	ldr	r3, [r4, #0]
 8004244:	6922      	ldr	r2, [r4, #16]
 8004246:	f003 0306 	and.w	r3, r3, #6
 800424a:	2b04      	cmp	r3, #4
 800424c:	bf14      	ite	ne
 800424e:	2500      	movne	r5, #0
 8004250:	6833      	ldreq	r3, [r6, #0]
 8004252:	f04f 0600 	mov.w	r6, #0
 8004256:	bf08      	it	eq
 8004258:	68e5      	ldreq	r5, [r4, #12]
 800425a:	f104 041a 	add.w	r4, r4, #26
 800425e:	bf08      	it	eq
 8004260:	1aed      	subeq	r5, r5, r3
 8004262:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004266:	bf08      	it	eq
 8004268:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800426c:	4293      	cmp	r3, r2
 800426e:	bfc4      	itt	gt
 8004270:	1a9b      	subgt	r3, r3, r2
 8004272:	18ed      	addgt	r5, r5, r3
 8004274:	42b5      	cmp	r5, r6
 8004276:	d11a      	bne.n	80042ae <_printf_common+0xd2>
 8004278:	2000      	movs	r0, #0
 800427a:	e008      	b.n	800428e <_printf_common+0xb2>
 800427c:	2301      	movs	r3, #1
 800427e:	4652      	mov	r2, sl
 8004280:	4641      	mov	r1, r8
 8004282:	4638      	mov	r0, r7
 8004284:	47c8      	blx	r9
 8004286:	3001      	adds	r0, #1
 8004288:	d103      	bne.n	8004292 <_printf_common+0xb6>
 800428a:	f04f 30ff 	mov.w	r0, #4294967295
 800428e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004292:	3501      	adds	r5, #1
 8004294:	e7c1      	b.n	800421a <_printf_common+0x3e>
 8004296:	2030      	movs	r0, #48	@ 0x30
 8004298:	18e1      	adds	r1, r4, r3
 800429a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800429e:	1c5a      	adds	r2, r3, #1
 80042a0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80042a4:	4422      	add	r2, r4
 80042a6:	3302      	adds	r3, #2
 80042a8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80042ac:	e7c2      	b.n	8004234 <_printf_common+0x58>
 80042ae:	2301      	movs	r3, #1
 80042b0:	4622      	mov	r2, r4
 80042b2:	4641      	mov	r1, r8
 80042b4:	4638      	mov	r0, r7
 80042b6:	47c8      	blx	r9
 80042b8:	3001      	adds	r0, #1
 80042ba:	d0e6      	beq.n	800428a <_printf_common+0xae>
 80042bc:	3601      	adds	r6, #1
 80042be:	e7d9      	b.n	8004274 <_printf_common+0x98>

080042c0 <_printf_i>:
 80042c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80042c4:	7e0f      	ldrb	r7, [r1, #24]
 80042c6:	4691      	mov	r9, r2
 80042c8:	2f78      	cmp	r7, #120	@ 0x78
 80042ca:	4680      	mov	r8, r0
 80042cc:	460c      	mov	r4, r1
 80042ce:	469a      	mov	sl, r3
 80042d0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80042d2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80042d6:	d807      	bhi.n	80042e8 <_printf_i+0x28>
 80042d8:	2f62      	cmp	r7, #98	@ 0x62
 80042da:	d80a      	bhi.n	80042f2 <_printf_i+0x32>
 80042dc:	2f00      	cmp	r7, #0
 80042de:	f000 80d3 	beq.w	8004488 <_printf_i+0x1c8>
 80042e2:	2f58      	cmp	r7, #88	@ 0x58
 80042e4:	f000 80ba 	beq.w	800445c <_printf_i+0x19c>
 80042e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80042ec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80042f0:	e03a      	b.n	8004368 <_printf_i+0xa8>
 80042f2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80042f6:	2b15      	cmp	r3, #21
 80042f8:	d8f6      	bhi.n	80042e8 <_printf_i+0x28>
 80042fa:	a101      	add	r1, pc, #4	@ (adr r1, 8004300 <_printf_i+0x40>)
 80042fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004300:	08004359 	.word	0x08004359
 8004304:	0800436d 	.word	0x0800436d
 8004308:	080042e9 	.word	0x080042e9
 800430c:	080042e9 	.word	0x080042e9
 8004310:	080042e9 	.word	0x080042e9
 8004314:	080042e9 	.word	0x080042e9
 8004318:	0800436d 	.word	0x0800436d
 800431c:	080042e9 	.word	0x080042e9
 8004320:	080042e9 	.word	0x080042e9
 8004324:	080042e9 	.word	0x080042e9
 8004328:	080042e9 	.word	0x080042e9
 800432c:	0800446f 	.word	0x0800446f
 8004330:	08004397 	.word	0x08004397
 8004334:	08004429 	.word	0x08004429
 8004338:	080042e9 	.word	0x080042e9
 800433c:	080042e9 	.word	0x080042e9
 8004340:	08004491 	.word	0x08004491
 8004344:	080042e9 	.word	0x080042e9
 8004348:	08004397 	.word	0x08004397
 800434c:	080042e9 	.word	0x080042e9
 8004350:	080042e9 	.word	0x080042e9
 8004354:	08004431 	.word	0x08004431
 8004358:	6833      	ldr	r3, [r6, #0]
 800435a:	1d1a      	adds	r2, r3, #4
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	6032      	str	r2, [r6, #0]
 8004360:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004364:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004368:	2301      	movs	r3, #1
 800436a:	e09e      	b.n	80044aa <_printf_i+0x1ea>
 800436c:	6833      	ldr	r3, [r6, #0]
 800436e:	6820      	ldr	r0, [r4, #0]
 8004370:	1d19      	adds	r1, r3, #4
 8004372:	6031      	str	r1, [r6, #0]
 8004374:	0606      	lsls	r6, r0, #24
 8004376:	d501      	bpl.n	800437c <_printf_i+0xbc>
 8004378:	681d      	ldr	r5, [r3, #0]
 800437a:	e003      	b.n	8004384 <_printf_i+0xc4>
 800437c:	0645      	lsls	r5, r0, #25
 800437e:	d5fb      	bpl.n	8004378 <_printf_i+0xb8>
 8004380:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004384:	2d00      	cmp	r5, #0
 8004386:	da03      	bge.n	8004390 <_printf_i+0xd0>
 8004388:	232d      	movs	r3, #45	@ 0x2d
 800438a:	426d      	negs	r5, r5
 800438c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004390:	230a      	movs	r3, #10
 8004392:	4859      	ldr	r0, [pc, #356]	@ (80044f8 <_printf_i+0x238>)
 8004394:	e011      	b.n	80043ba <_printf_i+0xfa>
 8004396:	6821      	ldr	r1, [r4, #0]
 8004398:	6833      	ldr	r3, [r6, #0]
 800439a:	0608      	lsls	r0, r1, #24
 800439c:	f853 5b04 	ldr.w	r5, [r3], #4
 80043a0:	d402      	bmi.n	80043a8 <_printf_i+0xe8>
 80043a2:	0649      	lsls	r1, r1, #25
 80043a4:	bf48      	it	mi
 80043a6:	b2ad      	uxthmi	r5, r5
 80043a8:	2f6f      	cmp	r7, #111	@ 0x6f
 80043aa:	6033      	str	r3, [r6, #0]
 80043ac:	bf14      	ite	ne
 80043ae:	230a      	movne	r3, #10
 80043b0:	2308      	moveq	r3, #8
 80043b2:	4851      	ldr	r0, [pc, #324]	@ (80044f8 <_printf_i+0x238>)
 80043b4:	2100      	movs	r1, #0
 80043b6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80043ba:	6866      	ldr	r6, [r4, #4]
 80043bc:	2e00      	cmp	r6, #0
 80043be:	bfa8      	it	ge
 80043c0:	6821      	ldrge	r1, [r4, #0]
 80043c2:	60a6      	str	r6, [r4, #8]
 80043c4:	bfa4      	itt	ge
 80043c6:	f021 0104 	bicge.w	r1, r1, #4
 80043ca:	6021      	strge	r1, [r4, #0]
 80043cc:	b90d      	cbnz	r5, 80043d2 <_printf_i+0x112>
 80043ce:	2e00      	cmp	r6, #0
 80043d0:	d04b      	beq.n	800446a <_printf_i+0x1aa>
 80043d2:	4616      	mov	r6, r2
 80043d4:	fbb5 f1f3 	udiv	r1, r5, r3
 80043d8:	fb03 5711 	mls	r7, r3, r1, r5
 80043dc:	5dc7      	ldrb	r7, [r0, r7]
 80043de:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80043e2:	462f      	mov	r7, r5
 80043e4:	42bb      	cmp	r3, r7
 80043e6:	460d      	mov	r5, r1
 80043e8:	d9f4      	bls.n	80043d4 <_printf_i+0x114>
 80043ea:	2b08      	cmp	r3, #8
 80043ec:	d10b      	bne.n	8004406 <_printf_i+0x146>
 80043ee:	6823      	ldr	r3, [r4, #0]
 80043f0:	07df      	lsls	r7, r3, #31
 80043f2:	d508      	bpl.n	8004406 <_printf_i+0x146>
 80043f4:	6923      	ldr	r3, [r4, #16]
 80043f6:	6861      	ldr	r1, [r4, #4]
 80043f8:	4299      	cmp	r1, r3
 80043fa:	bfde      	ittt	le
 80043fc:	2330      	movle	r3, #48	@ 0x30
 80043fe:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004402:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004406:	1b92      	subs	r2, r2, r6
 8004408:	6122      	str	r2, [r4, #16]
 800440a:	464b      	mov	r3, r9
 800440c:	4621      	mov	r1, r4
 800440e:	4640      	mov	r0, r8
 8004410:	f8cd a000 	str.w	sl, [sp]
 8004414:	aa03      	add	r2, sp, #12
 8004416:	f7ff fee1 	bl	80041dc <_printf_common>
 800441a:	3001      	adds	r0, #1
 800441c:	d14a      	bne.n	80044b4 <_printf_i+0x1f4>
 800441e:	f04f 30ff 	mov.w	r0, #4294967295
 8004422:	b004      	add	sp, #16
 8004424:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004428:	6823      	ldr	r3, [r4, #0]
 800442a:	f043 0320 	orr.w	r3, r3, #32
 800442e:	6023      	str	r3, [r4, #0]
 8004430:	2778      	movs	r7, #120	@ 0x78
 8004432:	4832      	ldr	r0, [pc, #200]	@ (80044fc <_printf_i+0x23c>)
 8004434:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004438:	6823      	ldr	r3, [r4, #0]
 800443a:	6831      	ldr	r1, [r6, #0]
 800443c:	061f      	lsls	r7, r3, #24
 800443e:	f851 5b04 	ldr.w	r5, [r1], #4
 8004442:	d402      	bmi.n	800444a <_printf_i+0x18a>
 8004444:	065f      	lsls	r7, r3, #25
 8004446:	bf48      	it	mi
 8004448:	b2ad      	uxthmi	r5, r5
 800444a:	6031      	str	r1, [r6, #0]
 800444c:	07d9      	lsls	r1, r3, #31
 800444e:	bf44      	itt	mi
 8004450:	f043 0320 	orrmi.w	r3, r3, #32
 8004454:	6023      	strmi	r3, [r4, #0]
 8004456:	b11d      	cbz	r5, 8004460 <_printf_i+0x1a0>
 8004458:	2310      	movs	r3, #16
 800445a:	e7ab      	b.n	80043b4 <_printf_i+0xf4>
 800445c:	4826      	ldr	r0, [pc, #152]	@ (80044f8 <_printf_i+0x238>)
 800445e:	e7e9      	b.n	8004434 <_printf_i+0x174>
 8004460:	6823      	ldr	r3, [r4, #0]
 8004462:	f023 0320 	bic.w	r3, r3, #32
 8004466:	6023      	str	r3, [r4, #0]
 8004468:	e7f6      	b.n	8004458 <_printf_i+0x198>
 800446a:	4616      	mov	r6, r2
 800446c:	e7bd      	b.n	80043ea <_printf_i+0x12a>
 800446e:	6833      	ldr	r3, [r6, #0]
 8004470:	6825      	ldr	r5, [r4, #0]
 8004472:	1d18      	adds	r0, r3, #4
 8004474:	6961      	ldr	r1, [r4, #20]
 8004476:	6030      	str	r0, [r6, #0]
 8004478:	062e      	lsls	r6, r5, #24
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	d501      	bpl.n	8004482 <_printf_i+0x1c2>
 800447e:	6019      	str	r1, [r3, #0]
 8004480:	e002      	b.n	8004488 <_printf_i+0x1c8>
 8004482:	0668      	lsls	r0, r5, #25
 8004484:	d5fb      	bpl.n	800447e <_printf_i+0x1be>
 8004486:	8019      	strh	r1, [r3, #0]
 8004488:	2300      	movs	r3, #0
 800448a:	4616      	mov	r6, r2
 800448c:	6123      	str	r3, [r4, #16]
 800448e:	e7bc      	b.n	800440a <_printf_i+0x14a>
 8004490:	6833      	ldr	r3, [r6, #0]
 8004492:	2100      	movs	r1, #0
 8004494:	1d1a      	adds	r2, r3, #4
 8004496:	6032      	str	r2, [r6, #0]
 8004498:	681e      	ldr	r6, [r3, #0]
 800449a:	6862      	ldr	r2, [r4, #4]
 800449c:	4630      	mov	r0, r6
 800449e:	f000 f859 	bl	8004554 <memchr>
 80044a2:	b108      	cbz	r0, 80044a8 <_printf_i+0x1e8>
 80044a4:	1b80      	subs	r0, r0, r6
 80044a6:	6060      	str	r0, [r4, #4]
 80044a8:	6863      	ldr	r3, [r4, #4]
 80044aa:	6123      	str	r3, [r4, #16]
 80044ac:	2300      	movs	r3, #0
 80044ae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80044b2:	e7aa      	b.n	800440a <_printf_i+0x14a>
 80044b4:	4632      	mov	r2, r6
 80044b6:	4649      	mov	r1, r9
 80044b8:	4640      	mov	r0, r8
 80044ba:	6923      	ldr	r3, [r4, #16]
 80044bc:	47d0      	blx	sl
 80044be:	3001      	adds	r0, #1
 80044c0:	d0ad      	beq.n	800441e <_printf_i+0x15e>
 80044c2:	6823      	ldr	r3, [r4, #0]
 80044c4:	079b      	lsls	r3, r3, #30
 80044c6:	d413      	bmi.n	80044f0 <_printf_i+0x230>
 80044c8:	68e0      	ldr	r0, [r4, #12]
 80044ca:	9b03      	ldr	r3, [sp, #12]
 80044cc:	4298      	cmp	r0, r3
 80044ce:	bfb8      	it	lt
 80044d0:	4618      	movlt	r0, r3
 80044d2:	e7a6      	b.n	8004422 <_printf_i+0x162>
 80044d4:	2301      	movs	r3, #1
 80044d6:	4632      	mov	r2, r6
 80044d8:	4649      	mov	r1, r9
 80044da:	4640      	mov	r0, r8
 80044dc:	47d0      	blx	sl
 80044de:	3001      	adds	r0, #1
 80044e0:	d09d      	beq.n	800441e <_printf_i+0x15e>
 80044e2:	3501      	adds	r5, #1
 80044e4:	68e3      	ldr	r3, [r4, #12]
 80044e6:	9903      	ldr	r1, [sp, #12]
 80044e8:	1a5b      	subs	r3, r3, r1
 80044ea:	42ab      	cmp	r3, r5
 80044ec:	dcf2      	bgt.n	80044d4 <_printf_i+0x214>
 80044ee:	e7eb      	b.n	80044c8 <_printf_i+0x208>
 80044f0:	2500      	movs	r5, #0
 80044f2:	f104 0619 	add.w	r6, r4, #25
 80044f6:	e7f5      	b.n	80044e4 <_printf_i+0x224>
 80044f8:	08004818 	.word	0x08004818
 80044fc:	08004829 	.word	0x08004829

08004500 <memmove>:
 8004500:	4288      	cmp	r0, r1
 8004502:	b510      	push	{r4, lr}
 8004504:	eb01 0402 	add.w	r4, r1, r2
 8004508:	d902      	bls.n	8004510 <memmove+0x10>
 800450a:	4284      	cmp	r4, r0
 800450c:	4623      	mov	r3, r4
 800450e:	d807      	bhi.n	8004520 <memmove+0x20>
 8004510:	1e43      	subs	r3, r0, #1
 8004512:	42a1      	cmp	r1, r4
 8004514:	d008      	beq.n	8004528 <memmove+0x28>
 8004516:	f811 2b01 	ldrb.w	r2, [r1], #1
 800451a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800451e:	e7f8      	b.n	8004512 <memmove+0x12>
 8004520:	4601      	mov	r1, r0
 8004522:	4402      	add	r2, r0
 8004524:	428a      	cmp	r2, r1
 8004526:	d100      	bne.n	800452a <memmove+0x2a>
 8004528:	bd10      	pop	{r4, pc}
 800452a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800452e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004532:	e7f7      	b.n	8004524 <memmove+0x24>

08004534 <_sbrk_r>:
 8004534:	b538      	push	{r3, r4, r5, lr}
 8004536:	2300      	movs	r3, #0
 8004538:	4d05      	ldr	r5, [pc, #20]	@ (8004550 <_sbrk_r+0x1c>)
 800453a:	4604      	mov	r4, r0
 800453c:	4608      	mov	r0, r1
 800453e:	602b      	str	r3, [r5, #0]
 8004540:	f7fc fcaa 	bl	8000e98 <_sbrk>
 8004544:	1c43      	adds	r3, r0, #1
 8004546:	d102      	bne.n	800454e <_sbrk_r+0x1a>
 8004548:	682b      	ldr	r3, [r5, #0]
 800454a:	b103      	cbz	r3, 800454e <_sbrk_r+0x1a>
 800454c:	6023      	str	r3, [r4, #0]
 800454e:	bd38      	pop	{r3, r4, r5, pc}
 8004550:	200007f0 	.word	0x200007f0

08004554 <memchr>:
 8004554:	4603      	mov	r3, r0
 8004556:	b510      	push	{r4, lr}
 8004558:	b2c9      	uxtb	r1, r1
 800455a:	4402      	add	r2, r0
 800455c:	4293      	cmp	r3, r2
 800455e:	4618      	mov	r0, r3
 8004560:	d101      	bne.n	8004566 <memchr+0x12>
 8004562:	2000      	movs	r0, #0
 8004564:	e003      	b.n	800456e <memchr+0x1a>
 8004566:	7804      	ldrb	r4, [r0, #0]
 8004568:	3301      	adds	r3, #1
 800456a:	428c      	cmp	r4, r1
 800456c:	d1f6      	bne.n	800455c <memchr+0x8>
 800456e:	bd10      	pop	{r4, pc}

08004570 <_realloc_r>:
 8004570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004574:	4680      	mov	r8, r0
 8004576:	4615      	mov	r5, r2
 8004578:	460c      	mov	r4, r1
 800457a:	b921      	cbnz	r1, 8004586 <_realloc_r+0x16>
 800457c:	4611      	mov	r1, r2
 800457e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004582:	f7ff bc47 	b.w	8003e14 <_malloc_r>
 8004586:	b92a      	cbnz	r2, 8004594 <_realloc_r+0x24>
 8004588:	f7ff fbda 	bl	8003d40 <_free_r>
 800458c:	2400      	movs	r4, #0
 800458e:	4620      	mov	r0, r4
 8004590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004594:	f000 f81a 	bl	80045cc <_malloc_usable_size_r>
 8004598:	4285      	cmp	r5, r0
 800459a:	4606      	mov	r6, r0
 800459c:	d802      	bhi.n	80045a4 <_realloc_r+0x34>
 800459e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80045a2:	d8f4      	bhi.n	800458e <_realloc_r+0x1e>
 80045a4:	4629      	mov	r1, r5
 80045a6:	4640      	mov	r0, r8
 80045a8:	f7ff fc34 	bl	8003e14 <_malloc_r>
 80045ac:	4607      	mov	r7, r0
 80045ae:	2800      	cmp	r0, #0
 80045b0:	d0ec      	beq.n	800458c <_realloc_r+0x1c>
 80045b2:	42b5      	cmp	r5, r6
 80045b4:	462a      	mov	r2, r5
 80045b6:	4621      	mov	r1, r4
 80045b8:	bf28      	it	cs
 80045ba:	4632      	movcs	r2, r6
 80045bc:	f7ff fbb2 	bl	8003d24 <memcpy>
 80045c0:	4621      	mov	r1, r4
 80045c2:	4640      	mov	r0, r8
 80045c4:	f7ff fbbc 	bl	8003d40 <_free_r>
 80045c8:	463c      	mov	r4, r7
 80045ca:	e7e0      	b.n	800458e <_realloc_r+0x1e>

080045cc <_malloc_usable_size_r>:
 80045cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045d0:	1f18      	subs	r0, r3, #4
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	bfbc      	itt	lt
 80045d6:	580b      	ldrlt	r3, [r1, r0]
 80045d8:	18c0      	addlt	r0, r0, r3
 80045da:	4770      	bx	lr

080045dc <_init>:
 80045dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045de:	bf00      	nop
 80045e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045e2:	bc08      	pop	{r3}
 80045e4:	469e      	mov	lr, r3
 80045e6:	4770      	bx	lr

080045e8 <_fini>:
 80045e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045ea:	bf00      	nop
 80045ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045ee:	bc08      	pop	{r3}
 80045f0:	469e      	mov	lr, r3
 80045f2:	4770      	bx	lr
