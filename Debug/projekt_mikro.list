
projekt_mikro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005324  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000024c  08005430  08005430  00006430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800567c  0800567c  00007064  2**0
                  CONTENTS
  4 .ARM          00000008  0800567c  0800567c  0000667c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005684  08005684  00007064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005684  08005684  00006684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005688  08005688  00006688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  0800568c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013bc  20000064  080056f0  00007064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001420  080056f0  00007420  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dac9  00000000  00000000  0000708d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002493  00000000  00000000  00014b56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cf8  00000000  00000000  00016ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a30  00000000  00000000  00017ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018431  00000000  00000000  00018718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fd24  00000000  00000000  00030b49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b430  00000000  00000000  0004086d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cbc9d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b0c  00000000  00000000  000cbce0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000cf7ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000064 	.word	0x20000064
 8000128:	00000000 	.word	0x00000000
 800012c:	08005418 	.word	0x08005418

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000068 	.word	0x20000068
 8000148:	08005418 	.word	0x08005418

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <init_dht11>:
 *      Author: kubaw
 */
#include "dht11.h"
#include "main.h"

void init_dht11(dht11_t *dht, GPIO_TypeDef* port, uint16_t pin, TIM_HandleTypeDef *htim){
 800015c:	b480      	push	{r7}
 800015e:	b085      	sub	sp, #20
 8000160:	af00      	add	r7, sp, #0
 8000162:	60f8      	str	r0, [r7, #12]
 8000164:	60b9      	str	r1, [r7, #8]
 8000166:	603b      	str	r3, [r7, #0]
 8000168:	4613      	mov	r3, r2
 800016a:	80fb      	strh	r3, [r7, #6]
	dht->htim = htim;
 800016c:	68fb      	ldr	r3, [r7, #12]
 800016e:	683a      	ldr	r2, [r7, #0]
 8000170:	609a      	str	r2, [r3, #8]
	dht->port = port;
 8000172:	68fb      	ldr	r3, [r7, #12]
 8000174:	68ba      	ldr	r2, [r7, #8]
 8000176:	601a      	str	r2, [r3, #0]
	dht->pin = pin;
 8000178:	68fb      	ldr	r3, [r7, #12]
 800017a:	88fa      	ldrh	r2, [r7, #6]
 800017c:	809a      	strh	r2, [r3, #4]
	dht->empty = 0;
 800017e:	68fb      	ldr	r3, [r7, #12]
 8000180:	2200      	movs	r2, #0
 8000182:	f8a3 2bc4 	strh.w	r2, [r3, #3012]	@ 0xbc4
	dht->busy = 0;
 8000186:	68fb      	ldr	r3, [r7, #12]
 8000188:	2200      	movs	r2, #0
 800018a:	f8a3 2bc6 	strh.w	r2, [r3, #3014]	@ 0xbc6
	dht->count = 0;
 800018e:	68fb      	ldr	r3, [r7, #12]
 8000190:	2200      	movs	r2, #0
 8000192:	f8a3 2bc8 	strh.w	r2, [r3, #3016]	@ 0xbc8
}
 8000196:	bf00      	nop
 8000198:	3714      	adds	r7, #20
 800019a:	46bd      	mov	sp, r7
 800019c:	bc80      	pop	{r7}
 800019e:	4770      	bx	lr

080001a0 <add_to_dht11_buf>:

void add_to_dht11_buf(dht11_t *dht, uint8_t data[4]) {
 80001a0:	b490      	push	{r4, r7}
 80001a2:	b084      	sub	sp, #16
 80001a4:	af00      	add	r7, sp, #0
 80001a6:	6078      	str	r0, [r7, #4]
 80001a8:	6039      	str	r1, [r7, #0]
	for (uint8_t i = 0; i < 4; i++)
 80001aa:	2300      	movs	r3, #0
 80001ac:	73fb      	strb	r3, [r7, #15]
 80001ae:	e012      	b.n	80001d6 <add_to_dht11_buf+0x36>
		dht->buf[dht->empty][i] = data[i];
 80001b0:	7bfb      	ldrb	r3, [r7, #15]
 80001b2:	683a      	ldr	r2, [r7, #0]
 80001b4:	441a      	add	r2, r3
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	f8b3 3bc4 	ldrh.w	r3, [r3, #3012]	@ 0xbc4
 80001bc:	461c      	mov	r4, r3
 80001be:	7bfb      	ldrb	r3, [r7, #15]
 80001c0:	7810      	ldrb	r0, [r2, #0]
 80001c2:	6879      	ldr	r1, [r7, #4]
 80001c4:	00a2      	lsls	r2, r4, #2
 80001c6:	440a      	add	r2, r1
 80001c8:	4413      	add	r3, r2
 80001ca:	330c      	adds	r3, #12
 80001cc:	4602      	mov	r2, r0
 80001ce:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < 4; i++)
 80001d0:	7bfb      	ldrb	r3, [r7, #15]
 80001d2:	3301      	adds	r3, #1
 80001d4:	73fb      	strb	r3, [r7, #15]
 80001d6:	7bfb      	ldrb	r3, [r7, #15]
 80001d8:	2b03      	cmp	r3, #3
 80001da:	d9e9      	bls.n	80001b0 <add_to_dht11_buf+0x10>
	dht->empty = (dht->empty + 1) % DHT11_BUF_SIZE;
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	f8b3 3bc4 	ldrh.w	r3, [r3, #3012]	@ 0xbc4
 80001e2:	3301      	adds	r3, #1
 80001e4:	4a11      	ldr	r2, [pc, #68]	@ (800022c <add_to_dht11_buf+0x8c>)
 80001e6:	fb82 1203 	smull	r1, r2, r2, r3
 80001ea:	1111      	asrs	r1, r2, #4
 80001ec:	17da      	asrs	r2, r3, #31
 80001ee:	1a8a      	subs	r2, r1, r2
 80001f0:	f240 21ee 	movw	r1, #750	@ 0x2ee
 80001f4:	fb01 f202 	mul.w	r2, r1, r2
 80001f8:	1a9a      	subs	r2, r3, r2
 80001fa:	b292      	uxth	r2, r2
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	f8a3 2bc4 	strh.w	r2, [r3, #3012]	@ 0xbc4
	if (dht->count < DHT11_BUF_SIZE) dht->count++;
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	f8b3 3bc8 	ldrh.w	r3, [r3, #3016]	@ 0xbc8
 8000208:	f240 22ed 	movw	r2, #749	@ 0x2ed
 800020c:	4293      	cmp	r3, r2
 800020e:	d807      	bhi.n	8000220 <add_to_dht11_buf+0x80>
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	f8b3 3bc8 	ldrh.w	r3, [r3, #3016]	@ 0xbc8
 8000216:	3301      	adds	r3, #1
 8000218:	b29a      	uxth	r2, r3
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	f8a3 2bc8 	strh.w	r2, [r3, #3016]	@ 0xbc8
}
 8000220:	bf00      	nop
 8000222:	3710      	adds	r7, #16
 8000224:	46bd      	mov	sp, r7
 8000226:	bc90      	pop	{r4, r7}
 8000228:	4770      	bx	lr
 800022a:	bf00      	nop
 800022c:	057619f1 	.word	0x057619f1

08000230 <set_dht11_gpio_mode>:


void set_dht11_gpio_mode(dht11_t *dht, uint8_t mode) {
 8000230:	b580      	push	{r7, lr}
 8000232:	b086      	sub	sp, #24
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]
 8000238:	460b      	mov	r3, r1
 800023a:	70fb      	strb	r3, [r7, #3]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800023c:	f107 0308 	add.w	r3, r7, #8
 8000240:	2200      	movs	r2, #0
 8000242:	601a      	str	r2, [r3, #0]
 8000244:	605a      	str	r2, [r3, #4]
 8000246:	609a      	str	r2, [r3, #8]
 8000248:	60da      	str	r2, [r3, #12]

	if (mode == OUTPUT) {
 800024a:	78fb      	ldrb	r3, [r7, #3]
 800024c:	2b01      	cmp	r3, #1
 800024e:	d111      	bne.n	8000274 <set_dht11_gpio_mode+0x44>
		GPIO_InitStruct.Pin = dht->pin;
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	889b      	ldrh	r3, [r3, #4]
 8000254:	60bb      	str	r3, [r7, #8]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000256:	2301      	movs	r3, #1
 8000258:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800025a:	2300      	movs	r3, #0
 800025c:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800025e:	2303      	movs	r3, #3
 8000260:	617b      	str	r3, [r7, #20]
		HAL_GPIO_Init(dht->port, &GPIO_InitStruct);
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	f107 0208 	add.w	r2, r7, #8
 800026a:	4611      	mov	r1, r2
 800026c:	4618      	mov	r0, r3
 800026e:	f001 fc65 	bl	8001b3c <HAL_GPIO_Init>
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
		GPIO_InitStruct.Pull = GPIO_PULLUP;
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
		HAL_GPIO_Init(dht->port, &GPIO_InitStruct);
	}
}
 8000272:	e013      	b.n	800029c <set_dht11_gpio_mode+0x6c>
	} else if (mode == INPUT) {
 8000274:	78fb      	ldrb	r3, [r7, #3]
 8000276:	2b00      	cmp	r3, #0
 8000278:	d110      	bne.n	800029c <set_dht11_gpio_mode+0x6c>
		GPIO_InitStruct.Pin = dht->pin;
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	889b      	ldrh	r3, [r3, #4]
 800027e:	60bb      	str	r3, [r7, #8]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000280:	2300      	movs	r3, #0
 8000282:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000284:	2301      	movs	r3, #1
 8000286:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000288:	2303      	movs	r3, #3
 800028a:	617b      	str	r3, [r7, #20]
		HAL_GPIO_Init(dht->port, &GPIO_InitStruct);
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	f107 0208 	add.w	r2, r7, #8
 8000294:	4611      	mov	r1, r2
 8000296:	4618      	mov	r0, r3
 8000298:	f001 fc50 	bl	8001b3c <HAL_GPIO_Init>
}
 800029c:	bf00      	nop
 800029e:	3718      	adds	r7, #24
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}

080002a4 <readDHT11>:

uint8_t readDHT11(dht11_t *dht) {
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b086      	sub	sp, #24
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
	uint8_t data[5] = {0};
 80002ac:	2300      	movs	r3, #0
 80002ae:	60bb      	str	r3, [r7, #8]
 80002b0:	2300      	movs	r3, #0
 80002b2:	733b      	strb	r3, [r7, #12]
	uint16_t high_time;

	//start komunikacji
	set_dht11_gpio_mode(dht, OUTPUT);
 80002b4:	2101      	movs	r1, #1
 80002b6:	6878      	ldr	r0, [r7, #4]
 80002b8:	f7ff ffba 	bl	8000230 <set_dht11_gpio_mode>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002bc:	b672      	cpsid	i
}
 80002be:	bf00      	nop
	__disable_irq();

	HAL_GPIO_WritePin(dht->port, dht->pin, GPIO_PIN_RESET); // stan niski na 18ms
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	6818      	ldr	r0, [r3, #0]
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	889b      	ldrh	r3, [r3, #4]
 80002c8:	2200      	movs	r2, #0
 80002ca:	4619      	mov	r1, r3
 80002cc:	f001 fdd1 	bl	8001e72 <HAL_GPIO_WritePin>
	HAL_Delay(18);
 80002d0:	2012      	movs	r0, #18
 80002d2:	f001 fa4f 	bl	8001774 <HAL_Delay>
	HAL_GPIO_WritePin(dht->port, dht->pin, GPIO_PIN_SET);
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	6818      	ldr	r0, [r3, #0]
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	889b      	ldrh	r3, [r3, #4]
 80002de:	2201      	movs	r2, #1
 80002e0:	4619      	mov	r1, r3
 80002e2:	f001 fdc6 	bl	8001e72 <HAL_GPIO_WritePin>
	set_dht11_gpio_mode(dht, INPUT);
 80002e6:	2100      	movs	r1, #0
 80002e8:	6878      	ldr	r0, [r7, #4]
 80002ea:	f7ff ffa1 	bl	8000230 <set_dht11_gpio_mode>


    // Oczekiwanie na zbocze narastające sygnału (sygnał gotowości czujnika)
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET);
 80002ee:	bf00      	nop
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	681a      	ldr	r2, [r3, #0]
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	889b      	ldrh	r3, [r3, #4]
 80002f8:	4619      	mov	r1, r3
 80002fa:	4610      	mov	r0, r2
 80002fc:	f001 fda2 	bl	8001e44 <HAL_GPIO_ReadPin>
 8000300:	4603      	mov	r3, r0
 8000302:	2b01      	cmp	r3, #1
 8000304:	d0f4      	beq.n	80002f0 <readDHT11+0x4c>
    while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_RESET);  // oczekiwanie na zbocze narastające
 8000306:	bf00      	nop
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	681a      	ldr	r2, [r3, #0]
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	889b      	ldrh	r3, [r3, #4]
 8000310:	4619      	mov	r1, r3
 8000312:	4610      	mov	r0, r2
 8000314:	f001 fd96 	bl	8001e44 <HAL_GPIO_ReadPin>
 8000318:	4603      	mov	r3, r0
 800031a:	2b00      	cmp	r3, #0
 800031c:	d0f4      	beq.n	8000308 <readDHT11+0x64>
    while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET);    // oczekiwanie na zbocze opadające
 800031e:	bf00      	nop
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	681a      	ldr	r2, [r3, #0]
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	889b      	ldrh	r3, [r3, #4]
 8000328:	4619      	mov	r1, r3
 800032a:	4610      	mov	r0, r2
 800032c:	f001 fd8a 	bl	8001e44 <HAL_GPIO_ReadPin>
 8000330:	4603      	mov	r3, r0
 8000332:	2b01      	cmp	r3, #1
 8000334:	d0f4      	beq.n	8000320 <readDHT11+0x7c>

    // start PWM Input
    HAL_TIM_IC_Start(dht->htim, TIM_CHANNEL_1);
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	689b      	ldr	r3, [r3, #8]
 800033a:	2100      	movs	r1, #0
 800033c:	4618      	mov	r0, r3
 800033e:	f002 fbbf 	bl	8002ac0 <HAL_TIM_IC_Start>
    HAL_TIM_IC_Start(dht->htim, TIM_CHANNEL_2);
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	689b      	ldr	r3, [r3, #8]
 8000346:	2104      	movs	r1, #4
 8000348:	4618      	mov	r0, r3
 800034a:	f002 fbb9 	bl	8002ac0 <HAL_TIM_IC_Start>

    for (uint8_t i = 0; i < 40; i++) {
 800034e:	2300      	movs	r3, #0
 8000350:	757b      	strb	r3, [r7, #21]
 8000352:	e063      	b.n	800041c <readDHT11+0x178>
    	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_RESET); // oczekiwanie na zbocze narastajace czyli bit
 8000354:	bf00      	nop
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	681a      	ldr	r2, [r3, #0]
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	889b      	ldrh	r3, [r3, #4]
 800035e:	4619      	mov	r1, r3
 8000360:	4610      	mov	r0, r2
 8000362:	f001 fd6f 	bl	8001e44 <HAL_GPIO_ReadPin>
 8000366:	4603      	mov	r3, r0
 8000368:	2b00      	cmp	r3, #0
 800036a:	d0f4      	beq.n	8000356 <readDHT11+0xb2>

    	// Zresetowanie flag przechwytywania
    	__HAL_TIM_CLEAR_FLAG(dht->htim, TIM_FLAG_CC1 | TIM_FLAG_CC2);
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	689b      	ldr	r3, [r3, #8]
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	f06f 0206 	mvn.w	r2, #6
 8000376:	611a      	str	r2, [r3, #16]

    	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET);
 8000378:	bf00      	nop
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	681a      	ldr	r2, [r3, #0]
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	889b      	ldrh	r3, [r3, #4]
 8000382:	4619      	mov	r1, r3
 8000384:	4610      	mov	r0, r2
 8000386:	f001 fd5d 	bl	8001e44 <HAL_GPIO_ReadPin>
 800038a:	4603      	mov	r3, r0
 800038c:	2b01      	cmp	r3, #1
 800038e:	d0f4      	beq.n	800037a <readDHT11+0xd6>

    	uint16_t ccr1 = __HAL_TIM_GET_COMPARE(dht->htim, TIM_CHANNEL_1); // Zbocze narastające
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	689b      	ldr	r3, [r3, #8]
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000398:	827b      	strh	r3, [r7, #18]
    	uint16_t ccr2 = __HAL_TIM_GET_COMPARE(dht->htim, TIM_CHANNEL_2); // Zbocze opadające
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	689b      	ldr	r3, [r3, #8]
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80003a2:	823b      	strh	r3, [r7, #16]

    	if (ccr2 >= ccr1) high_time = ccr2 - ccr1;
 80003a4:	8a3a      	ldrh	r2, [r7, #16]
 80003a6:	8a7b      	ldrh	r3, [r7, #18]
 80003a8:	429a      	cmp	r2, r3
 80003aa:	d304      	bcc.n	80003b6 <readDHT11+0x112>
 80003ac:	8a3a      	ldrh	r2, [r7, #16]
 80003ae:	8a7b      	ldrh	r3, [r7, #18]
 80003b0:	1ad3      	subs	r3, r2, r3
 80003b2:	82fb      	strh	r3, [r7, #22]
 80003b4:	e00b      	b.n	80003ce <readDHT11+0x12a>
    	else high_time = (dht->htim->Init.Period - ccr1) + ccr2 + 1; //jesli timer zaczal liczyc od poczatku
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	689b      	ldr	r3, [r3, #8]
 80003ba:	68db      	ldr	r3, [r3, #12]
 80003bc:	b29a      	uxth	r2, r3
 80003be:	8a7b      	ldrh	r3, [r7, #18]
 80003c0:	1ad3      	subs	r3, r2, r3
 80003c2:	b29a      	uxth	r2, r3
 80003c4:	8a3b      	ldrh	r3, [r7, #16]
 80003c6:	4413      	add	r3, r2
 80003c8:	b29b      	uxth	r3, r3
 80003ca:	3301      	adds	r3, #1
 80003cc:	82fb      	strh	r3, [r7, #22]

    	data[i / 8] <<= 1;
 80003ce:	7d7b      	ldrb	r3, [r7, #21]
 80003d0:	08db      	lsrs	r3, r3, #3
 80003d2:	b2da      	uxtb	r2, r3
 80003d4:	4613      	mov	r3, r2
 80003d6:	3318      	adds	r3, #24
 80003d8:	443b      	add	r3, r7
 80003da:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80003de:	4611      	mov	r1, r2
 80003e0:	005b      	lsls	r3, r3, #1
 80003e2:	b2da      	uxtb	r2, r3
 80003e4:	f101 0318 	add.w	r3, r1, #24
 80003e8:	443b      	add	r3, r7
 80003ea:	f803 2c10 	strb.w	r2, [r3, #-16]
    	if (high_time > 50) data[i / 8] |= 1;
 80003ee:	8afb      	ldrh	r3, [r7, #22]
 80003f0:	2b32      	cmp	r3, #50	@ 0x32
 80003f2:	d910      	bls.n	8000416 <readDHT11+0x172>
 80003f4:	7d7b      	ldrb	r3, [r7, #21]
 80003f6:	08db      	lsrs	r3, r3, #3
 80003f8:	b2da      	uxtb	r2, r3
 80003fa:	4613      	mov	r3, r2
 80003fc:	3318      	adds	r3, #24
 80003fe:	443b      	add	r3, r7
 8000400:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000404:	4611      	mov	r1, r2
 8000406:	f043 0301 	orr.w	r3, r3, #1
 800040a:	b2da      	uxtb	r2, r3
 800040c:	f101 0318 	add.w	r3, r1, #24
 8000410:	443b      	add	r3, r7
 8000412:	f803 2c10 	strb.w	r2, [r3, #-16]
    for (uint8_t i = 0; i < 40; i++) {
 8000416:	7d7b      	ldrb	r3, [r7, #21]
 8000418:	3301      	adds	r3, #1
 800041a:	757b      	strb	r3, [r7, #21]
 800041c:	7d7b      	ldrb	r3, [r7, #21]
 800041e:	2b27      	cmp	r3, #39	@ 0x27
 8000420:	d998      	bls.n	8000354 <readDHT11+0xb0>
  __ASM volatile ("cpsie i" : : : "memory");
 8000422:	b662      	cpsie	i
}
 8000424:	bf00      	nop
    }

    __enable_irq();

    if (data[4] != (data[0] + data[1] + data[2] + data[3])) {
 8000426:	7b3b      	ldrb	r3, [r7, #12]
 8000428:	461a      	mov	r2, r3
 800042a:	7a3b      	ldrb	r3, [r7, #8]
 800042c:	4619      	mov	r1, r3
 800042e:	7a7b      	ldrb	r3, [r7, #9]
 8000430:	440b      	add	r3, r1
 8000432:	7ab9      	ldrb	r1, [r7, #10]
 8000434:	440b      	add	r3, r1
 8000436:	7af9      	ldrb	r1, [r7, #11]
 8000438:	440b      	add	r3, r1
 800043a:	429a      	cmp	r2, r3
 800043c:	d001      	beq.n	8000442 <readDHT11+0x19e>
    	return 1;
 800043e:	2301      	movs	r3, #1
 8000440:	e009      	b.n	8000456 <readDHT11+0x1b2>
    }

    USART_fsend("otrzymano dane");
 8000442:	4807      	ldr	r0, [pc, #28]	@ (8000460 <readDHT11+0x1bc>)
 8000444:	f000 f8ac 	bl	80005a0 <USART_fsend>

    add_to_dht11_buf(dht, data);
 8000448:	f107 0308 	add.w	r3, r7, #8
 800044c:	4619      	mov	r1, r3
 800044e:	6878      	ldr	r0, [r7, #4]
 8000450:	f7ff fea6 	bl	80001a0 <add_to_dht11_buf>
    return 0;
 8000454:	2300      	movs	r3, #0
}
 8000456:	4618      	mov	r0, r3
 8000458:	3718      	adds	r7, #24
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}
 800045e:	bf00      	nop
 8000460:	08005430 	.word	0x08005430

08000464 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b088      	sub	sp, #32
 8000468:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800046a:	f107 0310 	add.w	r3, r7, #16
 800046e:	2200      	movs	r2, #0
 8000470:	601a      	str	r2, [r3, #0]
 8000472:	605a      	str	r2, [r3, #4]
 8000474:	609a      	str	r2, [r3, #8]
 8000476:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000478:	4b2d      	ldr	r3, [pc, #180]	@ (8000530 <MX_GPIO_Init+0xcc>)
 800047a:	699b      	ldr	r3, [r3, #24]
 800047c:	4a2c      	ldr	r2, [pc, #176]	@ (8000530 <MX_GPIO_Init+0xcc>)
 800047e:	f043 0310 	orr.w	r3, r3, #16
 8000482:	6193      	str	r3, [r2, #24]
 8000484:	4b2a      	ldr	r3, [pc, #168]	@ (8000530 <MX_GPIO_Init+0xcc>)
 8000486:	699b      	ldr	r3, [r3, #24]
 8000488:	f003 0310 	and.w	r3, r3, #16
 800048c:	60fb      	str	r3, [r7, #12]
 800048e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000490:	4b27      	ldr	r3, [pc, #156]	@ (8000530 <MX_GPIO_Init+0xcc>)
 8000492:	699b      	ldr	r3, [r3, #24]
 8000494:	4a26      	ldr	r2, [pc, #152]	@ (8000530 <MX_GPIO_Init+0xcc>)
 8000496:	f043 0320 	orr.w	r3, r3, #32
 800049a:	6193      	str	r3, [r2, #24]
 800049c:	4b24      	ldr	r3, [pc, #144]	@ (8000530 <MX_GPIO_Init+0xcc>)
 800049e:	699b      	ldr	r3, [r3, #24]
 80004a0:	f003 0320 	and.w	r3, r3, #32
 80004a4:	60bb      	str	r3, [r7, #8]
 80004a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004a8:	4b21      	ldr	r3, [pc, #132]	@ (8000530 <MX_GPIO_Init+0xcc>)
 80004aa:	699b      	ldr	r3, [r3, #24]
 80004ac:	4a20      	ldr	r2, [pc, #128]	@ (8000530 <MX_GPIO_Init+0xcc>)
 80004ae:	f043 0304 	orr.w	r3, r3, #4
 80004b2:	6193      	str	r3, [r2, #24]
 80004b4:	4b1e      	ldr	r3, [pc, #120]	@ (8000530 <MX_GPIO_Init+0xcc>)
 80004b6:	699b      	ldr	r3, [r3, #24]
 80004b8:	f003 0304 	and.w	r3, r3, #4
 80004bc:	607b      	str	r3, [r7, #4]
 80004be:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004c0:	4b1b      	ldr	r3, [pc, #108]	@ (8000530 <MX_GPIO_Init+0xcc>)
 80004c2:	699b      	ldr	r3, [r3, #24]
 80004c4:	4a1a      	ldr	r2, [pc, #104]	@ (8000530 <MX_GPIO_Init+0xcc>)
 80004c6:	f043 0308 	orr.w	r3, r3, #8
 80004ca:	6193      	str	r3, [r2, #24]
 80004cc:	4b18      	ldr	r3, [pc, #96]	@ (8000530 <MX_GPIO_Init+0xcc>)
 80004ce:	699b      	ldr	r3, [r3, #24]
 80004d0:	f003 0308 	and.w	r3, r3, #8
 80004d4:	603b      	str	r3, [r7, #0]
 80004d6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80004d8:	2200      	movs	r2, #0
 80004da:	2120      	movs	r1, #32
 80004dc:	4815      	ldr	r0, [pc, #84]	@ (8000534 <MX_GPIO_Init+0xd0>)
 80004de:	f001 fcc8 	bl	8001e72 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80004e2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80004e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80004e8:	4b13      	ldr	r3, [pc, #76]	@ (8000538 <MX_GPIO_Init+0xd4>)
 80004ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ec:	2300      	movs	r3, #0
 80004ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80004f0:	f107 0310 	add.w	r3, r7, #16
 80004f4:	4619      	mov	r1, r3
 80004f6:	4811      	ldr	r0, [pc, #68]	@ (800053c <MX_GPIO_Init+0xd8>)
 80004f8:	f001 fb20 	bl	8001b3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80004fc:	2320      	movs	r3, #32
 80004fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000500:	2301      	movs	r3, #1
 8000502:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000504:	2300      	movs	r3, #0
 8000506:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000508:	2302      	movs	r3, #2
 800050a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800050c:	f107 0310 	add.w	r3, r7, #16
 8000510:	4619      	mov	r1, r3
 8000512:	4808      	ldr	r0, [pc, #32]	@ (8000534 <MX_GPIO_Init+0xd0>)
 8000514:	f001 fb12 	bl	8001b3c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000518:	2200      	movs	r2, #0
 800051a:	2100      	movs	r1, #0
 800051c:	2028      	movs	r0, #40	@ 0x28
 800051e:	f001 fa24 	bl	800196a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000522:	2028      	movs	r0, #40	@ 0x28
 8000524:	f001 fa3d 	bl	80019a2 <HAL_NVIC_EnableIRQ>

}
 8000528:	bf00      	nop
 800052a:	3720      	adds	r7, #32
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}
 8000530:	40021000 	.word	0x40021000
 8000534:	40010800 	.word	0x40010800
 8000538:	10110000 	.word	0x10110000
 800053c:	40011000 	.word	0x40011000

08000540 <calculate_crc_byte>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* === CRC === */
uint16_t calculate_crc_byte(uint16_t crc, uint8_t data) {
 8000540:	b480      	push	{r7}
 8000542:	b085      	sub	sp, #20
 8000544:	af00      	add	r7, sp, #0
 8000546:	4603      	mov	r3, r0
 8000548:	460a      	mov	r2, r1
 800054a:	80fb      	strh	r3, [r7, #6]
 800054c:	4613      	mov	r3, r2
 800054e:	717b      	strb	r3, [r7, #5]
	crc ^= (data << 8);
 8000550:	797b      	ldrb	r3, [r7, #5]
 8000552:	021b      	lsls	r3, r3, #8
 8000554:	b21a      	sxth	r2, r3
 8000556:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800055a:	4053      	eors	r3, r2
 800055c:	b21b      	sxth	r3, r3
 800055e:	80fb      	strh	r3, [r7, #6]
	for (uint8_t i = 0; i < 8; i++) {
 8000560:	2300      	movs	r3, #0
 8000562:	73fb      	strb	r3, [r7, #15]
 8000564:	e013      	b.n	800058e <calculate_crc_byte+0x4e>
		if (crc & 0x8000) crc = (crc << 1) ^ 0x1021;
 8000566:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800056a:	2b00      	cmp	r3, #0
 800056c:	da09      	bge.n	8000582 <calculate_crc_byte+0x42>
 800056e:	88fb      	ldrh	r3, [r7, #6]
 8000570:	005b      	lsls	r3, r3, #1
 8000572:	b21b      	sxth	r3, r3
 8000574:	f483 5381 	eor.w	r3, r3, #4128	@ 0x1020
 8000578:	f083 0301 	eor.w	r3, r3, #1
 800057c:	b21b      	sxth	r3, r3
 800057e:	80fb      	strh	r3, [r7, #6]
 8000580:	e002      	b.n	8000588 <calculate_crc_byte+0x48>
		else crc <<= 1;
 8000582:	88fb      	ldrh	r3, [r7, #6]
 8000584:	005b      	lsls	r3, r3, #1
 8000586:	80fb      	strh	r3, [r7, #6]
	for (uint8_t i = 0; i < 8; i++) {
 8000588:	7bfb      	ldrb	r3, [r7, #15]
 800058a:	3301      	adds	r3, #1
 800058c:	73fb      	strb	r3, [r7, #15]
 800058e:	7bfb      	ldrb	r3, [r7, #15]
 8000590:	2b07      	cmp	r3, #7
 8000592:	d9e8      	bls.n	8000566 <calculate_crc_byte+0x26>
	}
	return crc;
 8000594:	88fb      	ldrh	r3, [r7, #6]
}
 8000596:	4618      	mov	r0, r3
 8000598:	3714      	adds	r7, #20
 800059a:	46bd      	mov	sp, r7
 800059c:	bc80      	pop	{r7}
 800059e:	4770      	bx	lr

080005a0 <USART_fsend>:
    }

    return crc;
}

void USART_fsend(char* format, ...) {
 80005a0:	b40f      	push	{r0, r1, r2, r3}
 80005a2:	b580      	push	{r7, lr}
 80005a4:	b0c4      	sub	sp, #272	@ 0x110
 80005a6:	af00      	add	r7, sp, #0
	char tmp[256];
	va_list arglist;
	va_start(arglist, format);
 80005a8:	f507 728e 	add.w	r2, r7, #284	@ 0x11c
 80005ac:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80005b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80005b4:	601a      	str	r2, [r3, #0]
	vsprintf(tmp, format, arglist);
 80005b6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80005ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80005be:	f107 000c 	add.w	r0, r7, #12
 80005c2:	681a      	ldr	r2, [r3, #0]
 80005c4:	f8d7 1118 	ldr.w	r1, [r7, #280]	@ 0x118
 80005c8:	f004 fa6c 	bl	8004aa4 <vsiprintf>
	va_end(arglist);
	volatile int idx = USART_TX_EMPTY;
 80005cc:	4b44      	ldr	r3, [pc, #272]	@ (80006e0 <USART_fsend+0x140>)
 80005ce:	881b      	ldrh	r3, [r3, #0]
 80005d0:	b29b      	uxth	r3, r3
 80005d2:	461a      	mov	r2, r3
 80005d4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80005d8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80005dc:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < strlen(tmp); i++) {
 80005de:	2300      	movs	r3, #0
 80005e0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80005e4:	e025      	b.n	8000632 <USART_fsend+0x92>
		USART_BUF_TX[idx] = tmp[i];
 80005e6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80005ea:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80005f4:	f5a2 7182 	sub.w	r1, r2, #260	@ 0x104
 80005f8:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 80005fc:	440a      	add	r2, r1
 80005fe:	7811      	ldrb	r1, [r2, #0]
 8000600:	4a38      	ldr	r2, [pc, #224]	@ (80006e4 <USART_fsend+0x144>)
 8000602:	54d1      	strb	r1, [r2, r3]
		idx = (idx + 1) % USART_TXBUF_SIZE;
 8000604:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000608:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	3301      	adds	r3, #1
 8000610:	425a      	negs	r2, r3
 8000612:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000616:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800061a:	bf58      	it	pl
 800061c:	4253      	negpl	r3, r2
 800061e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000622:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000626:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < strlen(tmp); i++) {
 8000628:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800062c:	3301      	adds	r3, #1
 800062e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8000632:	f107 030c 	add.w	r3, r7, #12
 8000636:	4618      	mov	r0, r3
 8000638:	f7ff fd88 	bl	800014c <strlen>
 800063c:	4602      	mov	r2, r0
 800063e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000642:	429a      	cmp	r2, r3
 8000644:	d8cf      	bhi.n	80005e6 <USART_fsend+0x46>
  __ASM volatile ("cpsid i" : : : "memory");
 8000646:	b672      	cpsid	i
}
 8000648:	bf00      	nop
	}

	__disable_irq();
	if (USART_TX_EMPTY == USART_TX_BUSY && __HAL_UART_GET_FLAG(&huart2, UART_FLAG_TXE) == SET) {
 800064a:	4b25      	ldr	r3, [pc, #148]	@ (80006e0 <USART_fsend+0x140>)
 800064c:	881b      	ldrh	r3, [r3, #0]
 800064e:	b29a      	uxth	r2, r3
 8000650:	4b25      	ldr	r3, [pc, #148]	@ (80006e8 <USART_fsend+0x148>)
 8000652:	881b      	ldrh	r3, [r3, #0]
 8000654:	b29b      	uxth	r3, r3
 8000656:	429a      	cmp	r2, r3
 8000658:	d130      	bne.n	80006bc <USART_fsend+0x11c>
 800065a:	4b24      	ldr	r3, [pc, #144]	@ (80006ec <USART_fsend+0x14c>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000664:	2b80      	cmp	r3, #128	@ 0x80
 8000666:	d129      	bne.n	80006bc <USART_fsend+0x11c>
		USART_TX_EMPTY = idx;
 8000668:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800066c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	b29a      	uxth	r2, r3
 8000674:	4b1a      	ldr	r3, [pc, #104]	@ (80006e0 <USART_fsend+0x140>)
 8000676:	801a      	strh	r2, [r3, #0]
		uint8_t tmp = USART_BUF_TX[USART_TX_BUSY];
 8000678:	4b1b      	ldr	r3, [pc, #108]	@ (80006e8 <USART_fsend+0x148>)
 800067a:	881b      	ldrh	r3, [r3, #0]
 800067c:	b29b      	uxth	r3, r3
 800067e:	461a      	mov	r2, r3
 8000680:	4b18      	ldr	r3, [pc, #96]	@ (80006e4 <USART_fsend+0x144>)
 8000682:	5c9a      	ldrb	r2, [r3, r2]
 8000684:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000688:	f2a3 130d 	subw	r3, r3, #269	@ 0x10d
 800068c:	701a      	strb	r2, [r3, #0]
		USART_TX_BUSY++;
 800068e:	4b16      	ldr	r3, [pc, #88]	@ (80006e8 <USART_fsend+0x148>)
 8000690:	881b      	ldrh	r3, [r3, #0]
 8000692:	b29b      	uxth	r3, r3
 8000694:	3301      	adds	r3, #1
 8000696:	b29a      	uxth	r2, r3
 8000698:	4b13      	ldr	r3, [pc, #76]	@ (80006e8 <USART_fsend+0x148>)
 800069a:	801a      	strh	r2, [r3, #0]
		if (USART_TX_BUSY >= USART_TXBUF_SIZE) USART_TX_BUSY = 0;
 800069c:	4b12      	ldr	r3, [pc, #72]	@ (80006e8 <USART_fsend+0x148>)
 800069e:	881b      	ldrh	r3, [r3, #0]
 80006a0:	b29b      	uxth	r3, r3
 80006a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80006a6:	d302      	bcc.n	80006ae <USART_fsend+0x10e>
 80006a8:	4b0f      	ldr	r3, [pc, #60]	@ (80006e8 <USART_fsend+0x148>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart2, &tmp, 1);
 80006ae:	1cfb      	adds	r3, r7, #3
 80006b0:	2201      	movs	r2, #1
 80006b2:	4619      	mov	r1, r3
 80006b4:	480d      	ldr	r0, [pc, #52]	@ (80006ec <USART_fsend+0x14c>)
 80006b6:	f003 fbf5 	bl	8003ea4 <HAL_UART_Transmit_IT>
	if (USART_TX_EMPTY == USART_TX_BUSY && __HAL_UART_GET_FLAG(&huart2, UART_FLAG_TXE) == SET) {
 80006ba:	e007      	b.n	80006cc <USART_fsend+0x12c>
	}
	else USART_TX_EMPTY = idx;
 80006bc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80006c0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	b29a      	uxth	r2, r3
 80006c8:	4b05      	ldr	r3, [pc, #20]	@ (80006e0 <USART_fsend+0x140>)
 80006ca:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80006cc:	b662      	cpsie	i
}
 80006ce:	bf00      	nop
	__enable_irq();
}
 80006d0:	bf00      	nop
 80006d2:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 80006d6:	46bd      	mov	sp, r7
 80006d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80006dc:	b004      	add	sp, #16
 80006de:	4770      	bx	lr
 80006e0:	20000504 	.word	0x20000504
 80006e4:	20000104 	.word	0x20000104
 80006e8:	20000506 	.word	0x20000506
 80006ec:	2000128c 	.word	0x2000128c

080006f0 <HAL_UART_RxCpltCallback>:

/* === USART CALLBACK RECEIVE === */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
	if (huart == &huart2) {
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	4a10      	ldr	r2, [pc, #64]	@ (800073c <HAL_UART_RxCpltCallback+0x4c>)
 80006fc:	4293      	cmp	r3, r2
 80006fe:	d119      	bne.n	8000734 <HAL_UART_RxCpltCallback+0x44>
		USART_RX_EMPTY++;
 8000700:	4b0f      	ldr	r3, [pc, #60]	@ (8000740 <HAL_UART_RxCpltCallback+0x50>)
 8000702:	881b      	ldrh	r3, [r3, #0]
 8000704:	b29b      	uxth	r3, r3
 8000706:	3301      	adds	r3, #1
 8000708:	b29a      	uxth	r2, r3
 800070a:	4b0d      	ldr	r3, [pc, #52]	@ (8000740 <HAL_UART_RxCpltCallback+0x50>)
 800070c:	801a      	strh	r2, [r3, #0]
		if (USART_RX_EMPTY >= USART_RXBUF_SIZE) USART_RX_EMPTY = 0;
 800070e:	4b0c      	ldr	r3, [pc, #48]	@ (8000740 <HAL_UART_RxCpltCallback+0x50>)
 8000710:	881b      	ldrh	r3, [r3, #0]
 8000712:	b29b      	uxth	r3, r3
 8000714:	2b7f      	cmp	r3, #127	@ 0x7f
 8000716:	d902      	bls.n	800071e <HAL_UART_RxCpltCallback+0x2e>
 8000718:	4b09      	ldr	r3, [pc, #36]	@ (8000740 <HAL_UART_RxCpltCallback+0x50>)
 800071a:	2200      	movs	r2, #0
 800071c:	801a      	strh	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, &USART_BUF_RX[USART_RX_EMPTY], 1);
 800071e:	4b08      	ldr	r3, [pc, #32]	@ (8000740 <HAL_UART_RxCpltCallback+0x50>)
 8000720:	881b      	ldrh	r3, [r3, #0]
 8000722:	b29b      	uxth	r3, r3
 8000724:	461a      	mov	r2, r3
 8000726:	4b07      	ldr	r3, [pc, #28]	@ (8000744 <HAL_UART_RxCpltCallback+0x54>)
 8000728:	4413      	add	r3, r2
 800072a:	2201      	movs	r2, #1
 800072c:	4619      	mov	r1, r3
 800072e:	4803      	ldr	r0, [pc, #12]	@ (800073c <HAL_UART_RxCpltCallback+0x4c>)
 8000730:	f003 fbed 	bl	8003f0e <HAL_UART_Receive_IT>
	}
}
 8000734:	bf00      	nop
 8000736:	3708      	adds	r7, #8
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	2000128c 	.word	0x2000128c
 8000740:	20000100 	.word	0x20000100
 8000744:	20000080 	.word	0x20000080

08000748 <HAL_UART_TxCpltCallback>:

/* === USART TRANSMIT CALLBACK === */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000748:	b580      	push	{r7, lr}
 800074a:	b084      	sub	sp, #16
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
    if (huart == &huart2) {
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	4a16      	ldr	r2, [pc, #88]	@ (80007ac <HAL_UART_TxCpltCallback+0x64>)
 8000754:	4293      	cmp	r3, r2
 8000756:	d125      	bne.n	80007a4 <HAL_UART_TxCpltCallback+0x5c>
        // sprawdzenie, czy są dane do wysłania
        if (USART_TX_EMPTY != USART_TX_BUSY) {
 8000758:	4b15      	ldr	r3, [pc, #84]	@ (80007b0 <HAL_UART_TxCpltCallback+0x68>)
 800075a:	881b      	ldrh	r3, [r3, #0]
 800075c:	b29a      	uxth	r2, r3
 800075e:	4b15      	ldr	r3, [pc, #84]	@ (80007b4 <HAL_UART_TxCpltCallback+0x6c>)
 8000760:	881b      	ldrh	r3, [r3, #0]
 8000762:	b29b      	uxth	r3, r3
 8000764:	429a      	cmp	r2, r3
 8000766:	d01d      	beq.n	80007a4 <HAL_UART_TxCpltCallback+0x5c>
        	uint8_t tmp = USART_BUF_TX[USART_TX_BUSY];
 8000768:	4b12      	ldr	r3, [pc, #72]	@ (80007b4 <HAL_UART_TxCpltCallback+0x6c>)
 800076a:	881b      	ldrh	r3, [r3, #0]
 800076c:	b29b      	uxth	r3, r3
 800076e:	461a      	mov	r2, r3
 8000770:	4b11      	ldr	r3, [pc, #68]	@ (80007b8 <HAL_UART_TxCpltCallback+0x70>)
 8000772:	5c9b      	ldrb	r3, [r3, r2]
 8000774:	73fb      	strb	r3, [r7, #15]
        	USART_TX_BUSY++;
 8000776:	4b0f      	ldr	r3, [pc, #60]	@ (80007b4 <HAL_UART_TxCpltCallback+0x6c>)
 8000778:	881b      	ldrh	r3, [r3, #0]
 800077a:	b29b      	uxth	r3, r3
 800077c:	3301      	adds	r3, #1
 800077e:	b29a      	uxth	r2, r3
 8000780:	4b0c      	ldr	r3, [pc, #48]	@ (80007b4 <HAL_UART_TxCpltCallback+0x6c>)
 8000782:	801a      	strh	r2, [r3, #0]
        	if (USART_TX_BUSY >= USART_TXBUF_SIZE) USART_TX_BUSY = 0;
 8000784:	4b0b      	ldr	r3, [pc, #44]	@ (80007b4 <HAL_UART_TxCpltCallback+0x6c>)
 8000786:	881b      	ldrh	r3, [r3, #0]
 8000788:	b29b      	uxth	r3, r3
 800078a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800078e:	d302      	bcc.n	8000796 <HAL_UART_TxCpltCallback+0x4e>
 8000790:	4b08      	ldr	r3, [pc, #32]	@ (80007b4 <HAL_UART_TxCpltCallback+0x6c>)
 8000792:	2200      	movs	r2, #0
 8000794:	801a      	strh	r2, [r3, #0]
            HAL_UART_Transmit_IT(&huart2, &tmp, 1); // bajt wysłany, można wysłać następny
 8000796:	f107 030f 	add.w	r3, r7, #15
 800079a:	2201      	movs	r2, #1
 800079c:	4619      	mov	r1, r3
 800079e:	4803      	ldr	r0, [pc, #12]	@ (80007ac <HAL_UART_TxCpltCallback+0x64>)
 80007a0:	f003 fb80 	bl	8003ea4 <HAL_UART_Transmit_IT>
        }
    }
}
 80007a4:	bf00      	nop
 80007a6:	3710      	adds	r7, #16
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	2000128c 	.word	0x2000128c
 80007b0:	20000504 	.word	0x20000504
 80007b4:	20000506 	.word	0x20000506
 80007b8:	20000104 	.word	0x20000104

080007bc <USART_getchar>:

int16_t USART_getchar(){
 80007bc:	b480      	push	{r7}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0
	int16_t tmp;
	if (USART_RX_EMPTY != USART_RX_BUSY) {
 80007c2:	4b14      	ldr	r3, [pc, #80]	@ (8000814 <USART_getchar+0x58>)
 80007c4:	881b      	ldrh	r3, [r3, #0]
 80007c6:	b29a      	uxth	r2, r3
 80007c8:	4b13      	ldr	r3, [pc, #76]	@ (8000818 <USART_getchar+0x5c>)
 80007ca:	881b      	ldrh	r3, [r3, #0]
 80007cc:	b29b      	uxth	r3, r3
 80007ce:	429a      	cmp	r2, r3
 80007d0:	d018      	beq.n	8000804 <USART_getchar+0x48>
		 tmp = USART_BUF_RX[USART_RX_BUSY];
 80007d2:	4b11      	ldr	r3, [pc, #68]	@ (8000818 <USART_getchar+0x5c>)
 80007d4:	881b      	ldrh	r3, [r3, #0]
 80007d6:	b29b      	uxth	r3, r3
 80007d8:	461a      	mov	r2, r3
 80007da:	4b10      	ldr	r3, [pc, #64]	@ (800081c <USART_getchar+0x60>)
 80007dc:	5c9b      	ldrb	r3, [r3, r2]
 80007de:	80fb      	strh	r3, [r7, #6]
		 USART_RX_BUSY++;
 80007e0:	4b0d      	ldr	r3, [pc, #52]	@ (8000818 <USART_getchar+0x5c>)
 80007e2:	881b      	ldrh	r3, [r3, #0]
 80007e4:	b29b      	uxth	r3, r3
 80007e6:	3301      	adds	r3, #1
 80007e8:	b29a      	uxth	r2, r3
 80007ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000818 <USART_getchar+0x5c>)
 80007ec:	801a      	strh	r2, [r3, #0]
		 if (USART_RX_BUSY >= USART_RXBUF_SIZE) USART_RX_BUSY = 0;
 80007ee:	4b0a      	ldr	r3, [pc, #40]	@ (8000818 <USART_getchar+0x5c>)
 80007f0:	881b      	ldrh	r3, [r3, #0]
 80007f2:	b29b      	uxth	r3, r3
 80007f4:	2b7f      	cmp	r3, #127	@ 0x7f
 80007f6:	d902      	bls.n	80007fe <USART_getchar+0x42>
 80007f8:	4b07      	ldr	r3, [pc, #28]	@ (8000818 <USART_getchar+0x5c>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	801a      	strh	r2, [r3, #0]
		 return tmp;
 80007fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000802:	e001      	b.n	8000808 <USART_getchar+0x4c>
	} else return -1;
 8000804:	f04f 33ff 	mov.w	r3, #4294967295

}
 8000808:	4618      	mov	r0, r3
 800080a:	370c      	adds	r7, #12
 800080c:	46bd      	mov	sp, r7
 800080e:	bc80      	pop	{r7}
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	20000100 	.word	0x20000100
 8000818:	20000102 	.word	0x20000102
 800081c:	20000080 	.word	0x20000080

08000820 <validate_and_atoi>:

uint16_t validate_and_atoi(const char *str, size_t length) {
 8000820:	b480      	push	{r7}
 8000822:	b085      	sub	sp, #20
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
 8000828:	6039      	str	r1, [r7, #0]
    uint16_t result = 0;
 800082a:	2300      	movs	r3, #0
 800082c:	81fb      	strh	r3, [r7, #14]

    // sprawdzanie czy kazdy znak to cyfra
    for (size_t i = 0; i < length; i++) {
 800082e:	2300      	movs	r3, #0
 8000830:	60bb      	str	r3, [r7, #8]
 8000832:	e01e      	b.n	8000872 <validate_and_atoi+0x52>
        if (str[i] < '0' || str[i] > '9') {
 8000834:	687a      	ldr	r2, [r7, #4]
 8000836:	68bb      	ldr	r3, [r7, #8]
 8000838:	4413      	add	r3, r2
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	2b2f      	cmp	r3, #47	@ 0x2f
 800083e:	d905      	bls.n	800084c <validate_and_atoi+0x2c>
 8000840:	687a      	ldr	r2, [r7, #4]
 8000842:	68bb      	ldr	r3, [r7, #8]
 8000844:	4413      	add	r3, r2
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	2b39      	cmp	r3, #57	@ 0x39
 800084a:	d901      	bls.n	8000850 <validate_and_atoi+0x30>
            //USART_fsend("invalid char '%c' during atoi\n", str[i]);
            return 0; // kod bledu
 800084c:	2300      	movs	r3, #0
 800084e:	e015      	b.n	800087c <validate_and_atoi+0x5c>
        }
        result = (result * 10) + (str[i] - '0');
 8000850:	89fb      	ldrh	r3, [r7, #14]
 8000852:	461a      	mov	r2, r3
 8000854:	0092      	lsls	r2, r2, #2
 8000856:	4413      	add	r3, r2
 8000858:	005b      	lsls	r3, r3, #1
 800085a:	b29b      	uxth	r3, r3
 800085c:	6879      	ldr	r1, [r7, #4]
 800085e:	68ba      	ldr	r2, [r7, #8]
 8000860:	440a      	add	r2, r1
 8000862:	7812      	ldrb	r2, [r2, #0]
 8000864:	4413      	add	r3, r2
 8000866:	b29b      	uxth	r3, r3
 8000868:	3b30      	subs	r3, #48	@ 0x30
 800086a:	81fb      	strh	r3, [r7, #14]
    for (size_t i = 0; i < length; i++) {
 800086c:	68bb      	ldr	r3, [r7, #8]
 800086e:	3301      	adds	r3, #1
 8000870:	60bb      	str	r3, [r7, #8]
 8000872:	68ba      	ldr	r2, [r7, #8]
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	429a      	cmp	r2, r3
 8000878:	d3dc      	bcc.n	8000834 <validate_and_atoi+0x14>
    }

    return result;
 800087a:	89fb      	ldrh	r3, [r7, #14]
}
 800087c:	4618      	mov	r0, r3
 800087e:	3714      	adds	r7, #20
 8000880:	46bd      	mov	sp, r7
 8000882:	bc80      	pop	{r7}
 8000884:	4770      	bx	lr
	...

08000888 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM4) {
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a0a      	ldr	r2, [pc, #40]	@ (80008c0 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000896:	4293      	cmp	r3, r2
 8000898:	d10d      	bne.n	80008b6 <HAL_TIM_PeriodElapsedCallback+0x2e>
    	__HAL_TIM_SET_AUTORELOAD(&htim4, measurement_interval - 1);
 800089a:	4b0a      	ldr	r3, [pc, #40]	@ (80008c4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800089c:	681a      	ldr	r2, [r3, #0]
 800089e:	4b0a      	ldr	r3, [pc, #40]	@ (80008c8 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	3a01      	subs	r2, #1
 80008a4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80008a6:	4b07      	ldr	r3, [pc, #28]	@ (80008c4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	3b01      	subs	r3, #1
 80008ac:	4a06      	ldr	r2, [pc, #24]	@ (80008c8 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80008ae:	60d3      	str	r3, [r2, #12]
        // tutaj funkcja do czytania
    	DHT11_READ_FLAG = 1;
 80008b0:	4b06      	ldr	r3, [pc, #24]	@ (80008cc <HAL_TIM_PeriodElapsedCallback+0x44>)
 80008b2:	2201      	movs	r2, #1
 80008b4:	701a      	strb	r2, [r3, #0]
    }
}
 80008b6:	bf00      	nop
 80008b8:	370c      	adds	r7, #12
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bc80      	pop	{r7}
 80008be:	4770      	bx	lr
 80008c0:	40000800 	.word	0x40000800
 80008c4:	20000000 	.word	0x20000000
 80008c8:	20001244 	.word	0x20001244
 80008cc:	20000508 	.word	0x20000508

080008d0 <set_interval>:

void set_interval(uint32_t interval) {
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
	measurement_interval = interval; // Przypisz nowy interwał
 80008d8:	4a0c      	ldr	r2, [pc, #48]	@ (800090c <set_interval+0x3c>)
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	6013      	str	r3, [r2, #0]
	__HAL_TIM_SET_AUTORELOAD(&htim4, interval - 1);  // Ustawiamy okres
 80008de:	4b0c      	ldr	r3, [pc, #48]	@ (8000910 <set_interval+0x40>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	687a      	ldr	r2, [r7, #4]
 80008e4:	3a01      	subs	r2, #1
 80008e6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	3b01      	subs	r3, #1
 80008ec:	4a08      	ldr	r2, [pc, #32]	@ (8000910 <set_interval+0x40>)
 80008ee:	60d3      	str	r3, [r2, #12]
	HAL_TIM_Base_Stop_IT(&htim4);
 80008f0:	4807      	ldr	r0, [pc, #28]	@ (8000910 <set_interval+0x40>)
 80008f2:	f001 ffab 	bl	800284c <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Start_IT(&htim4);
 80008f6:	4806      	ldr	r0, [pc, #24]	@ (8000910 <set_interval+0x40>)
 80008f8:	f001 ff56 	bl	80027a8 <HAL_TIM_Base_Start_IT>

	USART_fsend("INTERVAL_OK");
 80008fc:	4805      	ldr	r0, [pc, #20]	@ (8000914 <set_interval+0x44>)
 80008fe:	f7ff fe4f 	bl	80005a0 <USART_fsend>
}
 8000902:	bf00      	nop
 8000904:	3708      	adds	r7, #8
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	20000000 	.word	0x20000000
 8000910:	20001244 	.word	0x20001244
 8000914:	08005440 	.word	0x08005440

08000918 <process_frame>:


void process_frame() {
 8000918:	b580      	push	{r7, lr}
 800091a:	b08c      	sub	sp, #48	@ 0x30
 800091c:	af00      	add	r7, sp, #0


	if (frame.length_int < 5 || frame.length_int > 256) {
 800091e:	4b74      	ldr	r3, [pc, #464]	@ (8000af0 <process_frame+0x1d8>)
 8000920:	f8b3 311a 	ldrh.w	r3, [r3, #282]	@ 0x11a
 8000924:	2b04      	cmp	r3, #4
 8000926:	f240 80db 	bls.w	8000ae0 <process_frame+0x1c8>
 800092a:	4b71      	ldr	r3, [pc, #452]	@ (8000af0 <process_frame+0x1d8>)
 800092c:	f8b3 311a 	ldrh.w	r3, [r3, #282]	@ 0x11a
 8000930:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000934:	f200 80d4 	bhi.w	8000ae0 <process_frame+0x1c8>
		//err01();
		return;
	}

	uint8_t length = frame.length_int - frame.masked_counter; // dla odkodowanej ramki dlugosc musi byc pomniejszona o ilosc zamaskowanych znakow
 8000938:	4b6d      	ldr	r3, [pc, #436]	@ (8000af0 <process_frame+0x1d8>)
 800093a:	f8b3 311a 	ldrh.w	r3, [r3, #282]	@ 0x11a
 800093e:	b2da      	uxtb	r2, r3
 8000940:	4b6b      	ldr	r3, [pc, #428]	@ (8000af0 <process_frame+0x1d8>)
 8000942:	f8b3 311c 	ldrh.w	r3, [r3, #284]	@ 0x11c
 8000946:	b2db      	uxtb	r3, r3
 8000948:	1ad3      	subs	r3, r2, r3
 800094a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

	if (strncmp((char *)frame.data, "READ", 4) == 0) {
 800094e:	2204      	movs	r2, #4
 8000950:	4968      	ldr	r1, [pc, #416]	@ (8000af4 <process_frame+0x1dc>)
 8000952:	4869      	ldr	r0, [pc, #420]	@ (8000af8 <process_frame+0x1e0>)
 8000954:	f004 f8c5 	bl	8004ae2 <strncmp>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d16b      	bne.n	8000a36 <process_frame+0x11e>

		char *start_ptr = (char *)&frame.data[4];
 800095e:	4b67      	ldr	r3, [pc, #412]	@ (8000afc <process_frame+0x1e4>)
 8000960:	61fb      	str	r3, [r7, #28]
		char *dash_ptr = strchr(start_ptr, '-');
 8000962:	212d      	movs	r1, #45	@ 0x2d
 8000964:	69f8      	ldr	r0, [r7, #28]
 8000966:	f004 f8af 	bl	8004ac8 <strchr>
 800096a:	61b8      	str	r0, [r7, #24]

		if (!dash_ptr) {
 800096c:	69bb      	ldr	r3, [r7, #24]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d103      	bne.n	800097a <process_frame+0x62>
			USART_fsend("brak myslnika");
 8000972:	4863      	ldr	r0, [pc, #396]	@ (8000b00 <process_frame+0x1e8>)
 8000974:	f7ff fe14 	bl	80005a0 <USART_fsend>
			//err03();
			return;
 8000978:	e0b7      	b.n	8000aea <process_frame+0x1d2>
		}

		char start_str[4] = {0}; //maks 750
 800097a:	2300      	movs	r3, #0
 800097c:	60bb      	str	r3, [r7, #8]
		char count_str[3] = {0}; //maks 21
 800097e:	4b61      	ldr	r3, [pc, #388]	@ (8000b04 <process_frame+0x1ec>)
 8000980:	881b      	ldrh	r3, [r3, #0]
 8000982:	80bb      	strh	r3, [r7, #4]
 8000984:	2300      	movs	r3, #0
 8000986:	71bb      	strb	r3, [r7, #6]

		size_t start_length = dash_ptr - (char *)frame.data - 4;
 8000988:	69bb      	ldr	r3, [r7, #24]
 800098a:	4a5b      	ldr	r2, [pc, #364]	@ (8000af8 <process_frame+0x1e0>)
 800098c:	1a9b      	subs	r3, r3, r2
 800098e:	3b04      	subs	r3, #4
 8000990:	617b      	str	r3, [r7, #20]
		if (start_length >= sizeof(start_str)) {
 8000992:	697b      	ldr	r3, [r7, #20]
 8000994:	2b03      	cmp	r3, #3
 8000996:	d903      	bls.n	80009a0 <process_frame+0x88>
		    USART_fsend("zly parametr");
 8000998:	485b      	ldr	r0, [pc, #364]	@ (8000b08 <process_frame+0x1f0>)
 800099a:	f7ff fe01 	bl	80005a0 <USART_fsend>
		    //err03();
		    return;
 800099e:	e0a4      	b.n	8000aea <process_frame+0x1d2>
		}
		memcpy(start_str, frame.data + 4, start_length);
 80009a0:	4956      	ldr	r1, [pc, #344]	@ (8000afc <process_frame+0x1e4>)
 80009a2:	f107 0308 	add.w	r3, r7, #8
 80009a6:	697a      	ldr	r2, [r7, #20]
 80009a8:	4618      	mov	r0, r3
 80009aa:	f004 f8d9 	bl	8004b60 <memcpy>

		size_t count_length = (uint8_t *)frame.data + length - ((uint8_t *)dash_ptr + 1);
 80009ae:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80009b2:	4a51      	ldr	r2, [pc, #324]	@ (8000af8 <process_frame+0x1e0>)
 80009b4:	441a      	add	r2, r3
 80009b6:	69bb      	ldr	r3, [r7, #24]
 80009b8:	3301      	adds	r3, #1
 80009ba:	1ad3      	subs	r3, r2, r3
 80009bc:	613b      	str	r3, [r7, #16]
		if (count_length >= sizeof(count_str)) {
 80009be:	693b      	ldr	r3, [r7, #16]
 80009c0:	2b02      	cmp	r3, #2
 80009c2:	d903      	bls.n	80009cc <process_frame+0xb4>
			USART_fsend("zly parametr");
 80009c4:	4850      	ldr	r0, [pc, #320]	@ (8000b08 <process_frame+0x1f0>)
 80009c6:	f7ff fdeb 	bl	80005a0 <USART_fsend>
			//err03();
			return;
 80009ca:	e08e      	b.n	8000aea <process_frame+0x1d2>
		}
		memcpy(count_str, dash_ptr + 1, count_length);
 80009cc:	69bb      	ldr	r3, [r7, #24]
 80009ce:	1c59      	adds	r1, r3, #1
 80009d0:	1d3b      	adds	r3, r7, #4
 80009d2:	693a      	ldr	r2, [r7, #16]
 80009d4:	4618      	mov	r0, r3
 80009d6:	f004 f8c3 	bl	8004b60 <memcpy>

		uint16_t start = validate_and_atoi(start_str, start_length);
 80009da:	f107 0308 	add.w	r3, r7, #8
 80009de:	6979      	ldr	r1, [r7, #20]
 80009e0:	4618      	mov	r0, r3
 80009e2:	f7ff ff1d 	bl	8000820 <validate_and_atoi>
 80009e6:	4603      	mov	r3, r0
 80009e8:	81fb      	strh	r3, [r7, #14]
		uint16_t count = validate_and_atoi(count_str, count_length);
 80009ea:	1d3b      	adds	r3, r7, #4
 80009ec:	6939      	ldr	r1, [r7, #16]
 80009ee:	4618      	mov	r0, r3
 80009f0:	f7ff ff16 	bl	8000820 <validate_and_atoi>
 80009f4:	4603      	mov	r3, r0
 80009f6:	81bb      	strh	r3, [r7, #12]

		if (start < 1 || start > DHT11_BUF_SIZE || count < 1 || count > 21 || (start + count - 1) > DHT11_BUF_SIZE) {
 80009f8:	89fb      	ldrh	r3, [r7, #14]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d010      	beq.n	8000a20 <process_frame+0x108>
 80009fe:	89fb      	ldrh	r3, [r7, #14]
 8000a00:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8000a04:	4293      	cmp	r3, r2
 8000a06:	d80b      	bhi.n	8000a20 <process_frame+0x108>
 8000a08:	89bb      	ldrh	r3, [r7, #12]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d008      	beq.n	8000a20 <process_frame+0x108>
 8000a0e:	89bb      	ldrh	r3, [r7, #12]
 8000a10:	2b15      	cmp	r3, #21
 8000a12:	d805      	bhi.n	8000a20 <process_frame+0x108>
 8000a14:	89fa      	ldrh	r2, [r7, #14]
 8000a16:	89bb      	ldrh	r3, [r7, #12]
 8000a18:	4413      	add	r3, r2
 8000a1a:	f5b3 7f3c 	cmp.w	r3, #752	@ 0x2f0
 8000a1e:	db03      	blt.n	8000a28 <process_frame+0x110>
			USART_fsend("zly parametr");
 8000a20:	4839      	ldr	r0, [pc, #228]	@ (8000b08 <process_frame+0x1f0>)
 8000a22:	f7ff fdbd 	bl	80005a0 <USART_fsend>
			//err03();
			return;
 8000a26:	e060      	b.n	8000aea <process_frame+0x1d2>
//			return;
//		}
//
//		read(start, count);

		USART_fsend("READ(%d - %d", start, count);
 8000a28:	89fb      	ldrh	r3, [r7, #14]
 8000a2a:	89ba      	ldrh	r2, [r7, #12]
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4837      	ldr	r0, [pc, #220]	@ (8000b0c <process_frame+0x1f4>)
 8000a30:	f7ff fdb6 	bl	80005a0 <USART_fsend>
		return;
 8000a34:	e059      	b.n	8000aea <process_frame+0x1d2>
//			USART_fsend("%d\n", parameter);
//			read(length);
//			return;
//		}
	}
	else if (strncmp((char *)frame.data, "COUNT_DATA", 10) == 0) {
 8000a36:	220a      	movs	r2, #10
 8000a38:	4935      	ldr	r1, [pc, #212]	@ (8000b10 <process_frame+0x1f8>)
 8000a3a:	482f      	ldr	r0, [pc, #188]	@ (8000af8 <process_frame+0x1e0>)
 8000a3c:	f004 f851 	bl	8004ae2 <strncmp>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d103      	bne.n	8000a4e <process_frame+0x136>
		if (length != 10) {
 8000a46:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000a4a:	2b0a      	cmp	r3, #10
 8000a4c:	e04d      	b.n	8000aea <process_frame+0x1d2>
//			count_data();
//			return;
//		}
	}

	else if (strncmp((char *)frame.data, "SET_INTERVAL", 12) == 0) {
 8000a4e:	220c      	movs	r2, #12
 8000a50:	4930      	ldr	r1, [pc, #192]	@ (8000b14 <process_frame+0x1fc>)
 8000a52:	4829      	ldr	r0, [pc, #164]	@ (8000af8 <process_frame+0x1e0>)
 8000a54:	f004 f845 	bl	8004ae2 <strncmp>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d133      	bne.n	8000ac6 <process_frame+0x1ae>
		if (length < 17 || length > 22) {
 8000a5e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000a62:	2b10      	cmp	r3, #16
 8000a64:	d93e      	bls.n	8000ae4 <process_frame+0x1cc>
 8000a66:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000a6a:	2b16      	cmp	r3, #22
 8000a6c:	d83a      	bhi.n	8000ae4 <process_frame+0x1cc>
			//USART_fsend("wrong command");
			//err02();
			return;
		}

	    char *numberStr = (char *)&frame.data[12];
 8000a6e:	4b2a      	ldr	r3, [pc, #168]	@ (8000b18 <process_frame+0x200>)
 8000a70:	62bb      	str	r3, [r7, #40]	@ 0x28
	    uint8_t numberLength = length - 12;
 8000a72:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000a76:	3b0c      	subs	r3, #12
 8000a78:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	    for (uint8_t i = 0; i < numberLength; i++) {
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000a82:	e011      	b.n	8000aa8 <process_frame+0x190>
	        if (!isdigit((unsigned char)numberStr[i])) {
 8000a84:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000a88:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000a8a:	4413      	add	r3, r2
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	3301      	adds	r3, #1
 8000a90:	4a22      	ldr	r2, [pc, #136]	@ (8000b1c <process_frame+0x204>)
 8000a92:	4413      	add	r3, r2
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	f003 0304 	and.w	r3, r3, #4
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d024      	beq.n	8000ae8 <process_frame+0x1d0>
	    for (uint8_t i = 0; i < numberLength; i++) {
 8000a9e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000aa2:	3301      	adds	r3, #1
 8000aa4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000aa8:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000aac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000ab0:	429a      	cmp	r2, r3
 8000ab2:	d3e7      	bcc.n	8000a84 <process_frame+0x16c>
	            //err03();
	            return;
	        }
	    }

	    int interval = atoi(numberStr);
 8000ab4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000ab6:	f003 ff57 	bl	8004968 <atoi>
 8000aba:	6238      	str	r0, [r7, #32]

	    if (interval < 2000 || interval > UINT32_MAX) {
//	    	err03();
//	    	return
	    }
	    set_interval(interval);
 8000abc:	6a3b      	ldr	r3, [r7, #32]
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f7ff ff06 	bl	80008d0 <set_interval>
	    return;
 8000ac4:	e011      	b.n	8000aea <process_frame+0x1d2>

	}

	else if (strncmp((char *)frame.data, "GET_INTERVAL", 12) == 0) {
 8000ac6:	220c      	movs	r2, #12
 8000ac8:	4915      	ldr	r1, [pc, #84]	@ (8000b20 <process_frame+0x208>)
 8000aca:	480b      	ldr	r0, [pc, #44]	@ (8000af8 <process_frame+0x1e0>)
 8000acc:	f004 f809 	bl	8004ae2 <strncmp>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d109      	bne.n	8000aea <process_frame+0x1d2>
		if (frame.length_int != 12) {
 8000ad6:	4b06      	ldr	r3, [pc, #24]	@ (8000af0 <process_frame+0x1d8>)
 8000ad8:	f8b3 311a 	ldrh.w	r3, [r3, #282]	@ 0x11a
 8000adc:	2b0c      	cmp	r3, #12
 8000ade:	e004      	b.n	8000aea <process_frame+0x1d2>
		return;
 8000ae0:	bf00      	nop
 8000ae2:	e002      	b.n	8000aea <process_frame+0x1d2>
			return;
 8000ae4:	bf00      	nop
 8000ae6:	e000      	b.n	8000aea <process_frame+0x1d2>
	            return;
 8000ae8:	bf00      	nop
//		else {
//			get_interval();
//			return
//		}
	}
}
 8000aea:	3730      	adds	r7, #48	@ 0x30
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	2000050c 	.word	0x2000050c
 8000af4:	0800544c 	.word	0x0800544c
 8000af8:	20000516 	.word	0x20000516
 8000afc:	2000051a 	.word	0x2000051a
 8000b00:	08005454 	.word	0x08005454
 8000b04:	080054b0 	.word	0x080054b0
 8000b08:	08005464 	.word	0x08005464
 8000b0c:	08005474 	.word	0x08005474
 8000b10:	08005484 	.word	0x08005484
 8000b14:	08005490 	.word	0x08005490
 8000b18:	20000522 	.word	0x20000522
 8000b1c:	08005546 	.word	0x08005546
 8000b20:	080054a0 	.word	0x080054a0

08000b24 <reset_frame>:

void reset_frame() {
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
	memset(&frame, 0, sizeof(Frame));
 8000b28:	f44f 7290 	mov.w	r2, #288	@ 0x120
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	4807      	ldr	r0, [pc, #28]	@ (8000b4c <reset_frame+0x28>)
 8000b30:	f003 ffc2 	bl	8004ab8 <memset>
	frame.state = IDLE;
 8000b34:	4b05      	ldr	r3, [pc, #20]	@ (8000b4c <reset_frame+0x28>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
	frame.crc_calculated = 0xFFFF;
 8000b3c:	4b03      	ldr	r3, [pc, #12]	@ (8000b4c <reset_frame+0x28>)
 8000b3e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b42:	f8a3 2110 	strh.w	r2, [r3, #272]	@ 0x110
}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	2000050c 	.word	0x2000050c

08000b50 <get_frame>:

void get_frame(uint8_t ch) {
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	4603      	mov	r3, r0
 8000b58:	71fb      	strb	r3, [r7, #7]

	if (ch == FRAME_START) {
 8000b5a:	79fb      	ldrb	r3, [r7, #7]
 8000b5c:	2b3a      	cmp	r3, #58	@ 0x3a
 8000b5e:	d106      	bne.n	8000b6e <get_frame+0x1e>
		reset_frame();
 8000b60:	f7ff ffe0 	bl	8000b24 <reset_frame>
		frame.state = FIND_SENDER;
 8000b64:	4bb5      	ldr	r3, [pc, #724]	@ (8000e3c <get_frame+0x2ec>)
 8000b66:	2201      	movs	r2, #1
 8000b68:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
		return;
 8000b6c:	e23d      	b.n	8000fea <get_frame+0x49a>
	}
	if (ch == '\0') {
 8000b6e:	79fb      	ldrb	r3, [r7, #7]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d104      	bne.n	8000b7e <get_frame+0x2e>
		frame.state = IDLE;
 8000b74:	4bb1      	ldr	r3, [pc, #708]	@ (8000e3c <get_frame+0x2ec>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
		return;
 8000b7c:	e235      	b.n	8000fea <get_frame+0x49a>
	}

	switch (frame.state) {
 8000b7e:	4baf      	ldr	r3, [pc, #700]	@ (8000e3c <get_frame+0x2ec>)
 8000b80:	f893 311e 	ldrb.w	r3, [r3, #286]	@ 0x11e
 8000b84:	2b07      	cmp	r3, #7
 8000b86:	f200 8230 	bhi.w	8000fea <get_frame+0x49a>
 8000b8a:	a201      	add	r2, pc, #4	@ (adr r2, 8000b90 <get_frame+0x40>)
 8000b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b90:	08000feb 	.word	0x08000feb
 8000b94:	08000bb1 	.word	0x08000bb1
 8000b98:	08000c3d 	.word	0x08000c3d
 8000b9c:	08000ccb 	.word	0x08000ccb
 8000ba0:	08000d4f 	.word	0x08000d4f
 8000ba4:	08000f3b 	.word	0x08000f3b
 8000ba8:	08000fc5 	.word	0x08000fc5
 8000bac:	08000e19 	.word	0x08000e19
	case IDLE: {
		return;
	}

	case FIND_SENDER: {
		if (ch >= 'A' && ch <= 'Z') {
 8000bb0:	79fb      	ldrb	r3, [r7, #7]
 8000bb2:	2b40      	cmp	r3, #64	@ 0x40
 8000bb4:	d93d      	bls.n	8000c32 <get_frame+0xe2>
 8000bb6:	79fb      	ldrb	r3, [r7, #7]
 8000bb8:	2b5a      	cmp	r3, #90	@ 0x5a
 8000bba:	d83a      	bhi.n	8000c32 <get_frame+0xe2>
			frame.sender[frame.sender_id] = ch;
 8000bbc:	4b9f      	ldr	r3, [pc, #636]	@ (8000e3c <get_frame+0x2ec>)
 8000bbe:	f893 3112 	ldrb.w	r3, [r3, #274]	@ 0x112
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	4a9d      	ldr	r2, [pc, #628]	@ (8000e3c <get_frame+0x2ec>)
 8000bc6:	79fb      	ldrb	r3, [r7, #7]
 8000bc8:	5453      	strb	r3, [r2, r1]
			frame.crc_calculated = calculate_crc_byte(frame.crc_calculated, ch);
 8000bca:	4b9c      	ldr	r3, [pc, #624]	@ (8000e3c <get_frame+0x2ec>)
 8000bcc:	f8b3 3110 	ldrh.w	r3, [r3, #272]	@ 0x110
 8000bd0:	79fa      	ldrb	r2, [r7, #7]
 8000bd2:	4611      	mov	r1, r2
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f7ff fcb3 	bl	8000540 <calculate_crc_byte>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	461a      	mov	r2, r3
 8000bde:	4b97      	ldr	r3, [pc, #604]	@ (8000e3c <get_frame+0x2ec>)
 8000be0:	f8a3 2110 	strh.w	r2, [r3, #272]	@ 0x110
			if (frame.sender_id == 1) {
 8000be4:	4b95      	ldr	r3, [pc, #596]	@ (8000e3c <get_frame+0x2ec>)
 8000be6:	f893 3112 	ldrb.w	r3, [r3, #274]	@ 0x112
 8000bea:	2b01      	cmp	r3, #1
 8000bec:	d117      	bne.n	8000c1e <get_frame+0xce>
				frame.sender[2] = '\0';
 8000bee:	4b93      	ldr	r3, [pc, #588]	@ (8000e3c <get_frame+0x2ec>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	709a      	strb	r2, [r3, #2]
				if (strncmp((char *)frame.sender, SENDER, 2) == 0){
 8000bf4:	2202      	movs	r2, #2
 8000bf6:	4992      	ldr	r1, [pc, #584]	@ (8000e40 <get_frame+0x2f0>)
 8000bf8:	4890      	ldr	r0, [pc, #576]	@ (8000e3c <get_frame+0x2ec>)
 8000bfa:	f003 ff72 	bl	8004ae2 <strncmp>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d107      	bne.n	8000c14 <get_frame+0xc4>
					USART_fsend("sender ok");
 8000c04:	488f      	ldr	r0, [pc, #572]	@ (8000e44 <get_frame+0x2f4>)
 8000c06:	f7ff fccb 	bl	80005a0 <USART_fsend>
					frame.state = FIND_RECEIVER;
 8000c0a:	4b8c      	ldr	r3, [pc, #560]	@ (8000e3c <get_frame+0x2ec>)
 8000c0c:	2202      	movs	r2, #2
 8000c0e:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
					return;
 8000c12:	e1ea      	b.n	8000fea <get_frame+0x49a>
				}
				else {
					frame.state = IDLE;
 8000c14:	4b89      	ldr	r3, [pc, #548]	@ (8000e3c <get_frame+0x2ec>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
					return;
 8000c1c:	e1e5      	b.n	8000fea <get_frame+0x49a>
				}
			}
			else frame.sender_id++;
 8000c1e:	4b87      	ldr	r3, [pc, #540]	@ (8000e3c <get_frame+0x2ec>)
 8000c20:	f893 3112 	ldrb.w	r3, [r3, #274]	@ 0x112
 8000c24:	3301      	adds	r3, #1
 8000c26:	b2da      	uxtb	r2, r3
 8000c28:	4b84      	ldr	r3, [pc, #528]	@ (8000e3c <get_frame+0x2ec>)
 8000c2a:	f883 2112 	strb.w	r2, [r3, #274]	@ 0x112
			if (frame.sender_id == 1) {
 8000c2e:	bf00      	nop
		}
		//else if (ch == FRAME_START || ch == FRAME_END) frame.state = FIND_START;
		else frame.state = IDLE;
		return;
 8000c30:	e1db      	b.n	8000fea <get_frame+0x49a>
		else frame.state = IDLE;
 8000c32:	4b82      	ldr	r3, [pc, #520]	@ (8000e3c <get_frame+0x2ec>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
		return;
 8000c3a:	e1d6      	b.n	8000fea <get_frame+0x49a>
	}

	case FIND_RECEIVER: {
		if (ch >= 'A' && ch <= 'Z') {
 8000c3c:	79fb      	ldrb	r3, [r7, #7]
 8000c3e:	2b40      	cmp	r3, #64	@ 0x40
 8000c40:	d93e      	bls.n	8000cc0 <get_frame+0x170>
 8000c42:	79fb      	ldrb	r3, [r7, #7]
 8000c44:	2b5a      	cmp	r3, #90	@ 0x5a
 8000c46:	d83b      	bhi.n	8000cc0 <get_frame+0x170>
			frame.receiver[frame.receiver_id] = ch;
 8000c48:	4b7c      	ldr	r3, [pc, #496]	@ (8000e3c <get_frame+0x2ec>)
 8000c4a:	f893 3113 	ldrb.w	r3, [r3, #275]	@ 0x113
 8000c4e:	461a      	mov	r2, r3
 8000c50:	4b7a      	ldr	r3, [pc, #488]	@ (8000e3c <get_frame+0x2ec>)
 8000c52:	4413      	add	r3, r2
 8000c54:	79fa      	ldrb	r2, [r7, #7]
 8000c56:	70da      	strb	r2, [r3, #3]
			frame.crc_calculated = calculate_crc_byte(frame.crc_calculated, ch);
 8000c58:	4b78      	ldr	r3, [pc, #480]	@ (8000e3c <get_frame+0x2ec>)
 8000c5a:	f8b3 3110 	ldrh.w	r3, [r3, #272]	@ 0x110
 8000c5e:	79fa      	ldrb	r2, [r7, #7]
 8000c60:	4611      	mov	r1, r2
 8000c62:	4618      	mov	r0, r3
 8000c64:	f7ff fc6c 	bl	8000540 <calculate_crc_byte>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	461a      	mov	r2, r3
 8000c6c:	4b73      	ldr	r3, [pc, #460]	@ (8000e3c <get_frame+0x2ec>)
 8000c6e:	f8a3 2110 	strh.w	r2, [r3, #272]	@ 0x110
			if (frame.receiver_id == 1) {
 8000c72:	4b72      	ldr	r3, [pc, #456]	@ (8000e3c <get_frame+0x2ec>)
 8000c74:	f893 3113 	ldrb.w	r3, [r3, #275]	@ 0x113
 8000c78:	2b01      	cmp	r3, #1
 8000c7a:	d117      	bne.n	8000cac <get_frame+0x15c>
				frame.receiver[2] = '\0';
 8000c7c:	4b6f      	ldr	r3, [pc, #444]	@ (8000e3c <get_frame+0x2ec>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	715a      	strb	r2, [r3, #5]
				if (strncmp((char *)frame.receiver, RECEIVER, 2) == 0) {
 8000c82:	2202      	movs	r2, #2
 8000c84:	4970      	ldr	r1, [pc, #448]	@ (8000e48 <get_frame+0x2f8>)
 8000c86:	4871      	ldr	r0, [pc, #452]	@ (8000e4c <get_frame+0x2fc>)
 8000c88:	f003 ff2b 	bl	8004ae2 <strncmp>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d107      	bne.n	8000ca2 <get_frame+0x152>
					USART_fsend("receiver ok");
 8000c92:	486f      	ldr	r0, [pc, #444]	@ (8000e50 <get_frame+0x300>)
 8000c94:	f7ff fc84 	bl	80005a0 <USART_fsend>
					frame.state = FIND_LENGTH;
 8000c98:	4b68      	ldr	r3, [pc, #416]	@ (8000e3c <get_frame+0x2ec>)
 8000c9a:	2203      	movs	r2, #3
 8000c9c:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
					return;
 8000ca0:	e1a3      	b.n	8000fea <get_frame+0x49a>
				}
				else {
					frame.state = IDLE;
 8000ca2:	4b66      	ldr	r3, [pc, #408]	@ (8000e3c <get_frame+0x2ec>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
					return;
 8000caa:	e19e      	b.n	8000fea <get_frame+0x49a>
				}
			}
			else frame.receiver_id++;
 8000cac:	4b63      	ldr	r3, [pc, #396]	@ (8000e3c <get_frame+0x2ec>)
 8000cae:	f893 3113 	ldrb.w	r3, [r3, #275]	@ 0x113
 8000cb2:	3301      	adds	r3, #1
 8000cb4:	b2da      	uxtb	r2, r3
 8000cb6:	4b61      	ldr	r3, [pc, #388]	@ (8000e3c <get_frame+0x2ec>)
 8000cb8:	f883 2113 	strb.w	r2, [r3, #275]	@ 0x113
			if (frame.receiver_id == 1) {
 8000cbc:	bf00      	nop
		}
		//else if (ch == FRAME_START || ch == FRAME_END) frame.state = FIND_START;
		else frame.state = IDLE;
		return;
 8000cbe:	e194      	b.n	8000fea <get_frame+0x49a>
		else frame.state = IDLE;
 8000cc0:	4b5e      	ldr	r3, [pc, #376]	@ (8000e3c <get_frame+0x2ec>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
		return;
 8000cc8:	e18f      	b.n	8000fea <get_frame+0x49a>
	}

	case FIND_LENGTH: {
		if (ch >= '0' && ch <= '9') {
 8000cca:	79fb      	ldrb	r3, [r7, #7]
 8000ccc:	2b2f      	cmp	r3, #47	@ 0x2f
 8000cce:	d939      	bls.n	8000d44 <get_frame+0x1f4>
 8000cd0:	79fb      	ldrb	r3, [r7, #7]
 8000cd2:	2b39      	cmp	r3, #57	@ 0x39
 8000cd4:	d836      	bhi.n	8000d44 <get_frame+0x1f4>
			frame.length[frame.length_id] = ch;
 8000cd6:	4b59      	ldr	r3, [pc, #356]	@ (8000e3c <get_frame+0x2ec>)
 8000cd8:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 8000cdc:	461a      	mov	r2, r3
 8000cde:	4b57      	ldr	r3, [pc, #348]	@ (8000e3c <get_frame+0x2ec>)
 8000ce0:	4413      	add	r3, r2
 8000ce2:	79fa      	ldrb	r2, [r7, #7]
 8000ce4:	719a      	strb	r2, [r3, #6]
			frame.crc_calculated = calculate_crc_byte(frame.crc_calculated, ch);
 8000ce6:	4b55      	ldr	r3, [pc, #340]	@ (8000e3c <get_frame+0x2ec>)
 8000ce8:	f8b3 3110 	ldrh.w	r3, [r3, #272]	@ 0x110
 8000cec:	79fa      	ldrb	r2, [r7, #7]
 8000cee:	4611      	mov	r1, r2
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff fc25 	bl	8000540 <calculate_crc_byte>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	4b50      	ldr	r3, [pc, #320]	@ (8000e3c <get_frame+0x2ec>)
 8000cfc:	f8a3 2110 	strh.w	r2, [r3, #272]	@ 0x110
			if (frame.length_id == 2) {
 8000d00:	4b4e      	ldr	r3, [pc, #312]	@ (8000e3c <get_frame+0x2ec>)
 8000d02:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 8000d06:	2b02      	cmp	r3, #2
 8000d08:	d112      	bne.n	8000d30 <get_frame+0x1e0>
				frame.length[3] = '\0';
 8000d0a:	4b4c      	ldr	r3, [pc, #304]	@ (8000e3c <get_frame+0x2ec>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	725a      	strb	r2, [r3, #9]
				frame.length_int = atoi((char *)frame.length);
 8000d10:	4850      	ldr	r0, [pc, #320]	@ (8000e54 <get_frame+0x304>)
 8000d12:	f003 fe29 	bl	8004968 <atoi>
 8000d16:	4603      	mov	r3, r0
 8000d18:	b29a      	uxth	r2, r3
 8000d1a:	4b48      	ldr	r3, [pc, #288]	@ (8000e3c <get_frame+0x2ec>)
 8000d1c:	f8a3 211a 	strh.w	r2, [r3, #282]	@ 0x11a
				USART_fsend("length ok");
 8000d20:	484d      	ldr	r0, [pc, #308]	@ (8000e58 <get_frame+0x308>)
 8000d22:	f7ff fc3d 	bl	80005a0 <USART_fsend>
				frame.state = FIND_DATA;
 8000d26:	4b45      	ldr	r3, [pc, #276]	@ (8000e3c <get_frame+0x2ec>)
 8000d28:	2204      	movs	r2, #4
 8000d2a:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
				return;
 8000d2e:	e15c      	b.n	8000fea <get_frame+0x49a>
			}
			else frame.length_id++;
 8000d30:	4b42      	ldr	r3, [pc, #264]	@ (8000e3c <get_frame+0x2ec>)
 8000d32:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 8000d36:	3301      	adds	r3, #1
 8000d38:	b2da      	uxtb	r2, r3
 8000d3a:	4b40      	ldr	r3, [pc, #256]	@ (8000e3c <get_frame+0x2ec>)
 8000d3c:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
			if (frame.length_id == 2) {
 8000d40:	bf00      	nop
		}
		//else if (ch == FRAME_START || ch == FRAME_END) frame.state = FIND_START;
		else frame.state = IDLE;
		return;
 8000d42:	e152      	b.n	8000fea <get_frame+0x49a>
		else frame.state = IDLE;
 8000d44:	4b3d      	ldr	r3, [pc, #244]	@ (8000e3c <get_frame+0x2ec>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
		return;
 8000d4c:	e14d      	b.n	8000fea <get_frame+0x49a>
	}

	case FIND_DATA: {

		if (frame.data_id + frame.masked_counter < frame.length_int) {
 8000d4e:	4b3b      	ldr	r3, [pc, #236]	@ (8000e3c <get_frame+0x2ec>)
 8000d50:	f8b3 3116 	ldrh.w	r3, [r3, #278]	@ 0x116
 8000d54:	461a      	mov	r2, r3
 8000d56:	4b39      	ldr	r3, [pc, #228]	@ (8000e3c <get_frame+0x2ec>)
 8000d58:	f8b3 311c 	ldrh.w	r3, [r3, #284]	@ 0x11c
 8000d5c:	4413      	add	r3, r2
 8000d5e:	4a37      	ldr	r2, [pc, #220]	@ (8000e3c <get_frame+0x2ec>)
 8000d60:	f8b2 211a 	ldrh.w	r2, [r2, #282]	@ 0x11a
 8000d64:	4293      	cmp	r3, r2
 8000d66:	da52      	bge.n	8000e0e <get_frame+0x2be>

			if (ch == FRAME_START || ch == FRAME_END) {
 8000d68:	79fb      	ldrb	r3, [r7, #7]
 8000d6a:	2b3a      	cmp	r3, #58	@ 0x3a
 8000d6c:	d002      	beq.n	8000d74 <get_frame+0x224>
 8000d6e:	79fb      	ldrb	r3, [r7, #7]
 8000d70:	2b3b      	cmp	r3, #59	@ 0x3b
 8000d72:	d104      	bne.n	8000d7e <get_frame+0x22e>
				frame.state = IDLE;
 8000d74:	4b31      	ldr	r3, [pc, #196]	@ (8000e3c <get_frame+0x2ec>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
				return;
 8000d7c:	e135      	b.n	8000fea <get_frame+0x49a>
			}

			frame.crc_calculated = calculate_crc_byte(frame.crc_calculated, ch);
 8000d7e:	4b2f      	ldr	r3, [pc, #188]	@ (8000e3c <get_frame+0x2ec>)
 8000d80:	f8b3 3110 	ldrh.w	r3, [r3, #272]	@ 0x110
 8000d84:	79fa      	ldrb	r2, [r7, #7]
 8000d86:	4611      	mov	r1, r2
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f7ff fbd9 	bl	8000540 <calculate_crc_byte>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	461a      	mov	r2, r3
 8000d92:	4b2a      	ldr	r3, [pc, #168]	@ (8000e3c <get_frame+0x2ec>)
 8000d94:	f8a3 2110 	strh.w	r2, [r3, #272]	@ 0x110

			if (ch == MASK) {
 8000d98:	79fb      	ldrb	r3, [r7, #7]
 8000d9a:	2b2f      	cmp	r3, #47	@ 0x2f
 8000d9c:	d10c      	bne.n	8000db8 <get_frame+0x268>
				frame.masked_counter++;
 8000d9e:	4b27      	ldr	r3, [pc, #156]	@ (8000e3c <get_frame+0x2ec>)
 8000da0:	f8b3 311c 	ldrh.w	r3, [r3, #284]	@ 0x11c
 8000da4:	3301      	adds	r3, #1
 8000da6:	b29a      	uxth	r2, r3
 8000da8:	4b24      	ldr	r3, [pc, #144]	@ (8000e3c <get_frame+0x2ec>)
 8000daa:	f8a3 211c 	strh.w	r2, [r3, #284]	@ 0x11c
				frame.state = FIND_MASKED;
 8000dae:	4b23      	ldr	r3, [pc, #140]	@ (8000e3c <get_frame+0x2ec>)
 8000db0:	2207      	movs	r2, #7
 8000db2:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
				return;
 8000db6:	e118      	b.n	8000fea <get_frame+0x49a>
			}

			frame.data[frame.data_id++] = ch;
 8000db8:	4b20      	ldr	r3, [pc, #128]	@ (8000e3c <get_frame+0x2ec>)
 8000dba:	f8b3 3116 	ldrh.w	r3, [r3, #278]	@ 0x116
 8000dbe:	1c5a      	adds	r2, r3, #1
 8000dc0:	b291      	uxth	r1, r2
 8000dc2:	4a1e      	ldr	r2, [pc, #120]	@ (8000e3c <get_frame+0x2ec>)
 8000dc4:	f8a2 1116 	strh.w	r1, [r2, #278]	@ 0x116
 8000dc8:	461a      	mov	r2, r3
 8000dca:	4b1c      	ldr	r3, [pc, #112]	@ (8000e3c <get_frame+0x2ec>)
 8000dcc:	4413      	add	r3, r2
 8000dce:	79fa      	ldrb	r2, [r7, #7]
 8000dd0:	729a      	strb	r2, [r3, #10]

			if (frame.data_id + frame.masked_counter == frame.length_int) {
 8000dd2:	4b1a      	ldr	r3, [pc, #104]	@ (8000e3c <get_frame+0x2ec>)
 8000dd4:	f8b3 3116 	ldrh.w	r3, [r3, #278]	@ 0x116
 8000dd8:	461a      	mov	r2, r3
 8000dda:	4b18      	ldr	r3, [pc, #96]	@ (8000e3c <get_frame+0x2ec>)
 8000ddc:	f8b3 311c 	ldrh.w	r3, [r3, #284]	@ 0x11c
 8000de0:	4413      	add	r3, r2
 8000de2:	4a16      	ldr	r2, [pc, #88]	@ (8000e3c <get_frame+0x2ec>)
 8000de4:	f8b2 211a 	ldrh.w	r2, [r2, #282]	@ 0x11a
 8000de8:	4293      	cmp	r3, r2
 8000dea:	f040 80fd 	bne.w	8000fe8 <get_frame+0x498>
				frame.data[frame.data_id] = '\0';
 8000dee:	4b13      	ldr	r3, [pc, #76]	@ (8000e3c <get_frame+0x2ec>)
 8000df0:	f8b3 3116 	ldrh.w	r3, [r3, #278]	@ 0x116
 8000df4:	461a      	mov	r2, r3
 8000df6:	4b11      	ldr	r3, [pc, #68]	@ (8000e3c <get_frame+0x2ec>)
 8000df8:	4413      	add	r3, r2
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	729a      	strb	r2, [r3, #10]
				USART_fsend("data ok");
 8000dfe:	4817      	ldr	r0, [pc, #92]	@ (8000e5c <get_frame+0x30c>)
 8000e00:	f7ff fbce 	bl	80005a0 <USART_fsend>
				frame.state = FIND_CRC;
 8000e04:	4b0d      	ldr	r3, [pc, #52]	@ (8000e3c <get_frame+0x2ec>)
 8000e06:	2205      	movs	r2, #5
 8000e08:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
			}

			return;
 8000e0c:	e0ec      	b.n	8000fe8 <get_frame+0x498>
		}


		else {
			frame.state = IDLE;
 8000e0e:	4b0b      	ldr	r3, [pc, #44]	@ (8000e3c <get_frame+0x2ec>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
			return;
 8000e16:	e0e8      	b.n	8000fea <get_frame+0x49a>
		}
	}

	case FIND_MASKED: {

		if (frame.data_id + frame.masked_counter >= frame.length_int) {
 8000e18:	4b08      	ldr	r3, [pc, #32]	@ (8000e3c <get_frame+0x2ec>)
 8000e1a:	f8b3 3116 	ldrh.w	r3, [r3, #278]	@ 0x116
 8000e1e:	461a      	mov	r2, r3
 8000e20:	4b06      	ldr	r3, [pc, #24]	@ (8000e3c <get_frame+0x2ec>)
 8000e22:	f8b3 311c 	ldrh.w	r3, [r3, #284]	@ 0x11c
 8000e26:	4413      	add	r3, r2
 8000e28:	4a04      	ldr	r2, [pc, #16]	@ (8000e3c <get_frame+0x2ec>)
 8000e2a:	f8b2 211a 	ldrh.w	r2, [r2, #282]	@ 0x11a
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	db16      	blt.n	8000e60 <get_frame+0x310>
			frame.state = IDLE;
 8000e32:	4b02      	ldr	r3, [pc, #8]	@ (8000e3c <get_frame+0x2ec>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
			return;
 8000e3a:	e0d6      	b.n	8000fea <get_frame+0x49a>
 8000e3c:	2000050c 	.word	0x2000050c
 8000e40:	080054b4 	.word	0x080054b4
 8000e44:	080054b8 	.word	0x080054b8
 8000e48:	080054c4 	.word	0x080054c4
 8000e4c:	2000050f 	.word	0x2000050f
 8000e50:	080054c8 	.word	0x080054c8
 8000e54:	20000512 	.word	0x20000512
 8000e58:	080054d4 	.word	0x080054d4
 8000e5c:	080054e0 	.word	0x080054e0
		}

		switch(ch) {
 8000e60:	79fb      	ldrb	r3, [r7, #7]
 8000e62:	2b2f      	cmp	r3, #47	@ 0x2f
 8000e64:	d029      	beq.n	8000eba <get_frame+0x36a>
 8000e66:	2b2f      	cmp	r3, #47	@ 0x2f
 8000e68:	dc39      	bgt.n	8000ede <get_frame+0x38e>
 8000e6a:	2b2c      	cmp	r3, #44	@ 0x2c
 8000e6c:	d013      	beq.n	8000e96 <get_frame+0x346>
 8000e6e:	2b2e      	cmp	r3, #46	@ 0x2e
 8000e70:	d135      	bne.n	8000ede <get_frame+0x38e>
		case MASKED_START: {
			frame.data[frame.data_id++] = FRAME_START;
 8000e72:	4b5f      	ldr	r3, [pc, #380]	@ (8000ff0 <get_frame+0x4a0>)
 8000e74:	f8b3 3116 	ldrh.w	r3, [r3, #278]	@ 0x116
 8000e78:	1c5a      	adds	r2, r3, #1
 8000e7a:	b291      	uxth	r1, r2
 8000e7c:	4a5c      	ldr	r2, [pc, #368]	@ (8000ff0 <get_frame+0x4a0>)
 8000e7e:	f8a2 1116 	strh.w	r1, [r2, #278]	@ 0x116
 8000e82:	461a      	mov	r2, r3
 8000e84:	4b5a      	ldr	r3, [pc, #360]	@ (8000ff0 <get_frame+0x4a0>)
 8000e86:	4413      	add	r3, r2
 8000e88:	223a      	movs	r2, #58	@ 0x3a
 8000e8a:	729a      	strb	r2, [r3, #10]
			frame.state = FIND_DATA;
 8000e8c:	4b58      	ldr	r3, [pc, #352]	@ (8000ff0 <get_frame+0x4a0>)
 8000e8e:	2204      	movs	r2, #4
 8000e90:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
			break;
 8000e94:	e028      	b.n	8000ee8 <get_frame+0x398>
		}
		case MASKED_END: {
			frame.data[frame.data_id++] = FRAME_END;
 8000e96:	4b56      	ldr	r3, [pc, #344]	@ (8000ff0 <get_frame+0x4a0>)
 8000e98:	f8b3 3116 	ldrh.w	r3, [r3, #278]	@ 0x116
 8000e9c:	1c5a      	adds	r2, r3, #1
 8000e9e:	b291      	uxth	r1, r2
 8000ea0:	4a53      	ldr	r2, [pc, #332]	@ (8000ff0 <get_frame+0x4a0>)
 8000ea2:	f8a2 1116 	strh.w	r1, [r2, #278]	@ 0x116
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	4b51      	ldr	r3, [pc, #324]	@ (8000ff0 <get_frame+0x4a0>)
 8000eaa:	4413      	add	r3, r2
 8000eac:	223b      	movs	r2, #59	@ 0x3b
 8000eae:	729a      	strb	r2, [r3, #10]
			frame.state = FIND_DATA;
 8000eb0:	4b4f      	ldr	r3, [pc, #316]	@ (8000ff0 <get_frame+0x4a0>)
 8000eb2:	2204      	movs	r2, #4
 8000eb4:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
			break;
 8000eb8:	e016      	b.n	8000ee8 <get_frame+0x398>
		}
		case MASK: {
			frame.data[frame.data_id++] = MASK;
 8000eba:	4b4d      	ldr	r3, [pc, #308]	@ (8000ff0 <get_frame+0x4a0>)
 8000ebc:	f8b3 3116 	ldrh.w	r3, [r3, #278]	@ 0x116
 8000ec0:	1c5a      	adds	r2, r3, #1
 8000ec2:	b291      	uxth	r1, r2
 8000ec4:	4a4a      	ldr	r2, [pc, #296]	@ (8000ff0 <get_frame+0x4a0>)
 8000ec6:	f8a2 1116 	strh.w	r1, [r2, #278]	@ 0x116
 8000eca:	461a      	mov	r2, r3
 8000ecc:	4b48      	ldr	r3, [pc, #288]	@ (8000ff0 <get_frame+0x4a0>)
 8000ece:	4413      	add	r3, r2
 8000ed0:	222f      	movs	r2, #47	@ 0x2f
 8000ed2:	729a      	strb	r2, [r3, #10]
			frame.state = FIND_DATA;
 8000ed4:	4b46      	ldr	r3, [pc, #280]	@ (8000ff0 <get_frame+0x4a0>)
 8000ed6:	2204      	movs	r2, #4
 8000ed8:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
			break;
 8000edc:	e004      	b.n	8000ee8 <get_frame+0x398>
		}
		default: { // błąd, powrót do początku
			frame.state = IDLE;
 8000ede:	4b44      	ldr	r3, [pc, #272]	@ (8000ff0 <get_frame+0x4a0>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
			return;
 8000ee6:	e080      	b.n	8000fea <get_frame+0x49a>
		}
		}

		frame.crc_calculated = calculate_crc_byte(frame.crc_calculated, ch);
 8000ee8:	4b41      	ldr	r3, [pc, #260]	@ (8000ff0 <get_frame+0x4a0>)
 8000eea:	f8b3 3110 	ldrh.w	r3, [r3, #272]	@ 0x110
 8000eee:	79fa      	ldrb	r2, [r7, #7]
 8000ef0:	4611      	mov	r1, r2
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f7ff fb24 	bl	8000540 <calculate_crc_byte>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	461a      	mov	r2, r3
 8000efc:	4b3c      	ldr	r3, [pc, #240]	@ (8000ff0 <get_frame+0x4a0>)
 8000efe:	f8a3 2110 	strh.w	r2, [r3, #272]	@ 0x110

		if (frame.data_id < frame.length_int - 1) {
 8000f02:	4b3b      	ldr	r3, [pc, #236]	@ (8000ff0 <get_frame+0x4a0>)
 8000f04:	f8b3 3116 	ldrh.w	r3, [r3, #278]	@ 0x116
 8000f08:	461a      	mov	r2, r3
 8000f0a:	4b39      	ldr	r3, [pc, #228]	@ (8000ff0 <get_frame+0x4a0>)
 8000f0c:	f8b3 311a 	ldrh.w	r3, [r3, #282]	@ 0x11a
 8000f10:	3b01      	subs	r3, #1
 8000f12:	429a      	cmp	r2, r3
 8000f14:	da04      	bge.n	8000f20 <get_frame+0x3d0>
			frame.state = FIND_DATA;
 8000f16:	4b36      	ldr	r3, [pc, #216]	@ (8000ff0 <get_frame+0x4a0>)
 8000f18:	2204      	movs	r2, #4
 8000f1a:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
		} else {
			frame.data[frame.data_id] = '\0';
			frame.state = FIND_CRC;
		}

		return;
 8000f1e:	e064      	b.n	8000fea <get_frame+0x49a>
			frame.data[frame.data_id] = '\0';
 8000f20:	4b33      	ldr	r3, [pc, #204]	@ (8000ff0 <get_frame+0x4a0>)
 8000f22:	f8b3 3116 	ldrh.w	r3, [r3, #278]	@ 0x116
 8000f26:	461a      	mov	r2, r3
 8000f28:	4b31      	ldr	r3, [pc, #196]	@ (8000ff0 <get_frame+0x4a0>)
 8000f2a:	4413      	add	r3, r2
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	729a      	strb	r2, [r3, #10]
			frame.state = FIND_CRC;
 8000f30:	4b2f      	ldr	r3, [pc, #188]	@ (8000ff0 <get_frame+0x4a0>)
 8000f32:	2205      	movs	r2, #5
 8000f34:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
		return;
 8000f38:	e057      	b.n	8000fea <get_frame+0x49a>
	}

	case FIND_CRC: {
		if ((ch >= '0' && ch <= '9') || (ch >= 'A' && ch <= 'F')) {
 8000f3a:	79fb      	ldrb	r3, [r7, #7]
 8000f3c:	2b2f      	cmp	r3, #47	@ 0x2f
 8000f3e:	d902      	bls.n	8000f46 <get_frame+0x3f6>
 8000f40:	79fb      	ldrb	r3, [r7, #7]
 8000f42:	2b39      	cmp	r3, #57	@ 0x39
 8000f44:	d905      	bls.n	8000f52 <get_frame+0x402>
 8000f46:	79fb      	ldrb	r3, [r7, #7]
 8000f48:	2b40      	cmp	r3, #64	@ 0x40
 8000f4a:	d935      	bls.n	8000fb8 <get_frame+0x468>
 8000f4c:	79fb      	ldrb	r3, [r7, #7]
 8000f4e:	2b46      	cmp	r3, #70	@ 0x46
 8000f50:	d832      	bhi.n	8000fb8 <get_frame+0x468>
			frame.crc_frame[frame.crc_id++] = ch;
 8000f52:	4b27      	ldr	r3, [pc, #156]	@ (8000ff0 <get_frame+0x4a0>)
 8000f54:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8000f58:	1c5a      	adds	r2, r3, #1
 8000f5a:	b2d1      	uxtb	r1, r2
 8000f5c:	4a24      	ldr	r2, [pc, #144]	@ (8000ff0 <get_frame+0x4a0>)
 8000f5e:	f882 1118 	strb.w	r1, [r2, #280]	@ 0x118
 8000f62:	461a      	mov	r2, r3
 8000f64:	4b22      	ldr	r3, [pc, #136]	@ (8000ff0 <get_frame+0x4a0>)
 8000f66:	4413      	add	r3, r2
 8000f68:	79fa      	ldrb	r2, [r7, #7]
 8000f6a:	f883 210b 	strb.w	r2, [r3, #267]	@ 0x10b
			if (frame.crc_id == 4) {
 8000f6e:	4b20      	ldr	r3, [pc, #128]	@ (8000ff0 <get_frame+0x4a0>)
 8000f70:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8000f74:	2b04      	cmp	r3, #4
 8000f76:	d124      	bne.n	8000fc2 <get_frame+0x472>
				frame.crc_frame[4] = '\0';
 8000f78:	4b1d      	ldr	r3, [pc, #116]	@ (8000ff0 <get_frame+0x4a0>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	f883 210f 	strb.w	r2, [r3, #271]	@ 0x10f
				if ((uint16_t)strtol((char *)frame.crc_frame, NULL, 16) == frame.crc_calculated) {
 8000f80:	2210      	movs	r2, #16
 8000f82:	2100      	movs	r1, #0
 8000f84:	481b      	ldr	r0, [pc, #108]	@ (8000ff4 <get_frame+0x4a4>)
 8000f86:	f003 fd6d 	bl	8004a64 <strtol>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	b29a      	uxth	r2, r3
 8000f8e:	4b18      	ldr	r3, [pc, #96]	@ (8000ff0 <get_frame+0x4a0>)
 8000f90:	f8b3 3110 	ldrh.w	r3, [r3, #272]	@ 0x110
 8000f94:	429a      	cmp	r2, r3
 8000f96:	d107      	bne.n	8000fa8 <get_frame+0x458>
					USART_fsend("crc ok");
 8000f98:	4817      	ldr	r0, [pc, #92]	@ (8000ff8 <get_frame+0x4a8>)
 8000f9a:	f7ff fb01 	bl	80005a0 <USART_fsend>
					frame.state = FIND_END;
 8000f9e:	4b14      	ldr	r3, [pc, #80]	@ (8000ff0 <get_frame+0x4a0>)
 8000fa0:	2206      	movs	r2, #6
 8000fa2:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
					return;
 8000fa6:	e020      	b.n	8000fea <get_frame+0x49a>
				}
				else {
					USART_fsend("crc blad");
 8000fa8:	4814      	ldr	r0, [pc, #80]	@ (8000ffc <get_frame+0x4ac>)
 8000faa:	f7ff faf9 	bl	80005a0 <USART_fsend>
					frame.state = IDLE;
 8000fae:	4b10      	ldr	r3, [pc, #64]	@ (8000ff0 <get_frame+0x4a0>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
					return;
 8000fb6:	e018      	b.n	8000fea <get_frame+0x49a>
				}
			}
		}
		//else if (ch == FRAME_START || ch == FRAME_END) frame.state = FIND_START;
		else frame.state = IDLE;
 8000fb8:	4b0d      	ldr	r3, [pc, #52]	@ (8000ff0 <get_frame+0x4a0>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
		return;
 8000fc0:	e013      	b.n	8000fea <get_frame+0x49a>
 8000fc2:	e012      	b.n	8000fea <get_frame+0x49a>
	}

	case FIND_END: {
		if (ch == FRAME_END) {
 8000fc4:	79fb      	ldrb	r3, [r7, #7]
 8000fc6:	2b3b      	cmp	r3, #59	@ 0x3b
 8000fc8:	d109      	bne.n	8000fde <get_frame+0x48e>
			frame.complete = true;
 8000fca:	4b09      	ldr	r3, [pc, #36]	@ (8000ff0 <get_frame+0x4a0>)
 8000fcc:	2201      	movs	r2, #1
 8000fce:	f883 211f 	strb.w	r2, [r3, #287]	@ 0x11f
			USART_fsend("ramka ok");
 8000fd2:	480b      	ldr	r0, [pc, #44]	@ (8001000 <get_frame+0x4b0>)
 8000fd4:	f7ff fae4 	bl	80005a0 <USART_fsend>
			process_frame();
 8000fd8:	f7ff fc9e 	bl	8000918 <process_frame>
			return;
 8000fdc:	e005      	b.n	8000fea <get_frame+0x49a>
		}
		//else if (ch == FRAME_START) frame.state = FIND_START;
		else frame.state = IDLE;
 8000fde:	4b04      	ldr	r3, [pc, #16]	@ (8000ff0 <get_frame+0x4a0>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
		return;
 8000fe6:	e000      	b.n	8000fea <get_frame+0x49a>
			return;
 8000fe8:	bf00      	nop
	}
	}
}
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	2000050c 	.word	0x2000050c
 8000ff4:	20000617 	.word	0x20000617
 8000ff8:	080054e8 	.word	0x080054e8
 8000ffc:	080054f0 	.word	0x080054f0
 8001000:	080054fc 	.word	0x080054fc

08001004 <handle_char>:

void handle_char() {
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0

//	is_handling = 1;

	int16_t ch;
	if ((ch = USART_getchar()) >= 0) {
 800100a:	f7ff fbd7 	bl	80007bc <USART_getchar>
 800100e:	4603      	mov	r3, r0
 8001010:	80fb      	strh	r3, [r7, #6]
 8001012:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001016:	2b00      	cmp	r3, #0
 8001018:	db0a      	blt.n	8001030 <handle_char+0x2c>
		USART_fsend("%c", ch);
 800101a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800101e:	4619      	mov	r1, r3
 8001020:	4805      	ldr	r0, [pc, #20]	@ (8001038 <handle_char+0x34>)
 8001022:	f7ff fabd 	bl	80005a0 <USART_fsend>
		get_frame((uint8_t)ch);
 8001026:	88fb      	ldrh	r3, [r7, #6]
 8001028:	b2db      	uxtb	r3, r3
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff fd90 	bl	8000b50 <get_frame>
	}

//	is_handling = 0;
}
 8001030:	bf00      	nop
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	08005508 	.word	0x08005508

0800103c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001040:	f000 fb36 	bl	80016b0 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001044:	f000 f840 	bl	80010c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001048:	f7ff fa0c 	bl	8000464 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800104c:	f000 fa9a 	bl	8001584 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001050:	f000 f93e 	bl	80012d0 <MX_TIM2_Init>
  MX_TIM4_Init();
 8001054:	f000 f9dc 	bl	8001410 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  init_dht11(pDHT, GPIOA, GPIO_PIN_0, &htim2);
 8001058:	4b14      	ldr	r3, [pc, #80]	@ (80010ac <main+0x70>)
 800105a:	6818      	ldr	r0, [r3, #0]
 800105c:	4b14      	ldr	r3, [pc, #80]	@ (80010b0 <main+0x74>)
 800105e:	2201      	movs	r2, #1
 8001060:	4914      	ldr	r1, [pc, #80]	@ (80010b4 <main+0x78>)
 8001062:	f7ff f87b 	bl	800015c <init_dht11>

  // Rozpocznij przechwytywanie na timerze/
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8001066:	2100      	movs	r1, #0
 8001068:	4811      	ldr	r0, [pc, #68]	@ (80010b0 <main+0x74>)
 800106a:	f001 fde9 	bl	8002c40 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 800106e:	2104      	movs	r1, #4
 8001070:	480f      	ldr	r0, [pc, #60]	@ (80010b0 <main+0x74>)
 8001072:	f001 fde5 	bl	8002c40 <HAL_TIM_IC_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (DHT11_READ_FLAG) {
 8001076:	4b10      	ldr	r3, [pc, #64]	@ (80010b8 <main+0x7c>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	b2db      	uxtb	r3, r3
 800107c:	2b00      	cmp	r3, #0
 800107e:	d007      	beq.n	8001090 <main+0x54>
		  DHT11_READ_FLAG = 0;
 8001080:	4b0d      	ldr	r3, [pc, #52]	@ (80010b8 <main+0x7c>)
 8001082:	2200      	movs	r2, #0
 8001084:	701a      	strb	r2, [r3, #0]
		  readDHT11(pDHT);
 8001086:	4b09      	ldr	r3, [pc, #36]	@ (80010ac <main+0x70>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4618      	mov	r0, r3
 800108c:	f7ff f90a 	bl	80002a4 <readDHT11>
	  }
	  USART_fsend("haloo");
 8001090:	480a      	ldr	r0, [pc, #40]	@ (80010bc <main+0x80>)
 8001092:	f7ff fa85 	bl	80005a0 <USART_fsend>
	  // jeśli bufor nie jest pusty
	  if (USART_RX_EMPTY != USART_RX_BUSY) {
 8001096:	4b0a      	ldr	r3, [pc, #40]	@ (80010c0 <main+0x84>)
 8001098:	881b      	ldrh	r3, [r3, #0]
 800109a:	b29a      	uxth	r2, r3
 800109c:	4b09      	ldr	r3, [pc, #36]	@ (80010c4 <main+0x88>)
 800109e:	881b      	ldrh	r3, [r3, #0]
 80010a0:	b29b      	uxth	r3, r3
 80010a2:	429a      	cmp	r2, r3
 80010a4:	d0e7      	beq.n	8001076 <main+0x3a>
		  handle_char();
 80010a6:	f7ff ffad 	bl	8001004 <handle_char>
	  if (DHT11_READ_FLAG) {
 80010aa:	e7e4      	b.n	8001076 <main+0x3a>
 80010ac:	20000004 	.word	0x20000004
 80010b0:	200011fc 	.word	0x200011fc
 80010b4:	40010800 	.word	0x40010800
 80010b8:	20000508 	.word	0x20000508
 80010bc:	0800550c 	.word	0x0800550c
 80010c0:	20000100 	.word	0x20000100
 80010c4:	20000102 	.word	0x20000102

080010c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b090      	sub	sp, #64	@ 0x40
 80010cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ce:	f107 0318 	add.w	r3, r7, #24
 80010d2:	2228      	movs	r2, #40	@ 0x28
 80010d4:	2100      	movs	r1, #0
 80010d6:	4618      	mov	r0, r3
 80010d8:	f003 fcee 	bl	8004ab8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010dc:	1d3b      	adds	r3, r7, #4
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
 80010e2:	605a      	str	r2, [r3, #4]
 80010e4:	609a      	str	r2, [r3, #8]
 80010e6:	60da      	str	r2, [r3, #12]
 80010e8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010ea:	2302      	movs	r3, #2
 80010ec:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010ee:	2301      	movs	r3, #1
 80010f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010f2:	2310      	movs	r3, #16
 80010f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010f6:	2302      	movs	r3, #2
 80010f8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80010fa:	2300      	movs	r3, #0
 80010fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80010fe:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8001102:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001104:	f107 0318 	add.w	r3, r7, #24
 8001108:	4618      	mov	r0, r3
 800110a:	f000 feed 	bl	8001ee8 <HAL_RCC_OscConfig>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001114:	f000 f81a 	bl	800114c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001118:	230f      	movs	r3, #15
 800111a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800111c:	2302      	movs	r3, #2
 800111e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001120:	2300      	movs	r3, #0
 8001122:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001124:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001128:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800112a:	2300      	movs	r3, #0
 800112c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800112e:	1d3b      	adds	r3, r7, #4
 8001130:	2102      	movs	r1, #2
 8001132:	4618      	mov	r0, r3
 8001134:	f001 f95a 	bl	80023ec <HAL_RCC_ClockConfig>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800113e:	f000 f805 	bl	800114c <Error_Handler>
  }
}
 8001142:	bf00      	nop
 8001144:	3740      	adds	r7, #64	@ 0x40
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
	...

0800114c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	USART_fsend("problem");
 8001150:	4803      	ldr	r0, [pc, #12]	@ (8001160 <Error_Handler+0x14>)
 8001152:	f7ff fa25 	bl	80005a0 <USART_fsend>
  __ASM volatile ("cpsid i" : : : "memory");
 8001156:	b672      	cpsid	i
}
 8001158:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800115a:	bf00      	nop
 800115c:	e7fd      	b.n	800115a <Error_Handler+0xe>
 800115e:	bf00      	nop
 8001160:	08005514 	.word	0x08005514

08001164 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001164:	b480      	push	{r7}
 8001166:	b085      	sub	sp, #20
 8001168:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800116a:	4b15      	ldr	r3, [pc, #84]	@ (80011c0 <HAL_MspInit+0x5c>)
 800116c:	699b      	ldr	r3, [r3, #24]
 800116e:	4a14      	ldr	r2, [pc, #80]	@ (80011c0 <HAL_MspInit+0x5c>)
 8001170:	f043 0301 	orr.w	r3, r3, #1
 8001174:	6193      	str	r3, [r2, #24]
 8001176:	4b12      	ldr	r3, [pc, #72]	@ (80011c0 <HAL_MspInit+0x5c>)
 8001178:	699b      	ldr	r3, [r3, #24]
 800117a:	f003 0301 	and.w	r3, r3, #1
 800117e:	60bb      	str	r3, [r7, #8]
 8001180:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001182:	4b0f      	ldr	r3, [pc, #60]	@ (80011c0 <HAL_MspInit+0x5c>)
 8001184:	69db      	ldr	r3, [r3, #28]
 8001186:	4a0e      	ldr	r2, [pc, #56]	@ (80011c0 <HAL_MspInit+0x5c>)
 8001188:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800118c:	61d3      	str	r3, [r2, #28]
 800118e:	4b0c      	ldr	r3, [pc, #48]	@ (80011c0 <HAL_MspInit+0x5c>)
 8001190:	69db      	ldr	r3, [r3, #28]
 8001192:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001196:	607b      	str	r3, [r7, #4]
 8001198:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800119a:	4b0a      	ldr	r3, [pc, #40]	@ (80011c4 <HAL_MspInit+0x60>)
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	60fb      	str	r3, [r7, #12]
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80011ae:	60fb      	str	r3, [r7, #12]
 80011b0:	4a04      	ldr	r2, [pc, #16]	@ (80011c4 <HAL_MspInit+0x60>)
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011b6:	bf00      	nop
 80011b8:	3714      	adds	r7, #20
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bc80      	pop	{r7}
 80011be:	4770      	bx	lr
 80011c0:	40021000 	.word	0x40021000
 80011c4:	40010000 	.word	0x40010000

080011c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011cc:	bf00      	nop
 80011ce:	e7fd      	b.n	80011cc <NMI_Handler+0x4>

080011d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011d4:	bf00      	nop
 80011d6:	e7fd      	b.n	80011d4 <HardFault_Handler+0x4>

080011d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011dc:	bf00      	nop
 80011de:	e7fd      	b.n	80011dc <MemManage_Handler+0x4>

080011e0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011e4:	bf00      	nop
 80011e6:	e7fd      	b.n	80011e4 <BusFault_Handler+0x4>

080011e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011ec:	bf00      	nop
 80011ee:	e7fd      	b.n	80011ec <UsageFault_Handler+0x4>

080011f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011f4:	bf00      	nop
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bc80      	pop	{r7}
 80011fa:	4770      	bx	lr

080011fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001200:	bf00      	nop
 8001202:	46bd      	mov	sp, r7
 8001204:	bc80      	pop	{r7}
 8001206:	4770      	bx	lr

08001208 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800120c:	bf00      	nop
 800120e:	46bd      	mov	sp, r7
 8001210:	bc80      	pop	{r7}
 8001212:	4770      	bx	lr

08001214 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001218:	f000 fa90 	bl	800173c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800121c:	bf00      	nop
 800121e:	bd80      	pop	{r7, pc}

08001220 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001224:	4802      	ldr	r0, [pc, #8]	@ (8001230 <TIM4_IRQHandler+0x10>)
 8001226:	f001 fe17 	bl	8002e58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	20001244 	.word	0x20001244

08001234 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001238:	4802      	ldr	r0, [pc, #8]	@ (8001244 <USART2_IRQHandler+0x10>)
 800123a:	f002 fe8d 	bl	8003f58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	2000128c 	.word	0x2000128c

08001248 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800124c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001250:	f000 fe28 	bl	8001ea4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001254:	bf00      	nop
 8001256:	bd80      	pop	{r7, pc}

08001258 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b086      	sub	sp, #24
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001260:	4a14      	ldr	r2, [pc, #80]	@ (80012b4 <_sbrk+0x5c>)
 8001262:	4b15      	ldr	r3, [pc, #84]	@ (80012b8 <_sbrk+0x60>)
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800126c:	4b13      	ldr	r3, [pc, #76]	@ (80012bc <_sbrk+0x64>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d102      	bne.n	800127a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001274:	4b11      	ldr	r3, [pc, #68]	@ (80012bc <_sbrk+0x64>)
 8001276:	4a12      	ldr	r2, [pc, #72]	@ (80012c0 <_sbrk+0x68>)
 8001278:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800127a:	4b10      	ldr	r3, [pc, #64]	@ (80012bc <_sbrk+0x64>)
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4413      	add	r3, r2
 8001282:	693a      	ldr	r2, [r7, #16]
 8001284:	429a      	cmp	r2, r3
 8001286:	d207      	bcs.n	8001298 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001288:	f003 fc3e 	bl	8004b08 <__errno>
 800128c:	4603      	mov	r3, r0
 800128e:	220c      	movs	r2, #12
 8001290:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001292:	f04f 33ff 	mov.w	r3, #4294967295
 8001296:	e009      	b.n	80012ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001298:	4b08      	ldr	r3, [pc, #32]	@ (80012bc <_sbrk+0x64>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800129e:	4b07      	ldr	r3, [pc, #28]	@ (80012bc <_sbrk+0x64>)
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4413      	add	r3, r2
 80012a6:	4a05      	ldr	r2, [pc, #20]	@ (80012bc <_sbrk+0x64>)
 80012a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012aa:	68fb      	ldr	r3, [r7, #12]
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3718      	adds	r7, #24
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	20005000 	.word	0x20005000
 80012b8:	00000400 	.word	0x00000400
 80012bc:	200011f8 	.word	0x200011f8
 80012c0:	20001420 	.word	0x20001420

080012c4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012c8:	bf00      	nop
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bc80      	pop	{r7}
 80012ce:	4770      	bx	lr

080012d0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b090      	sub	sp, #64	@ 0x40
 80012d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012d6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80012da:	2200      	movs	r2, #0
 80012dc:	601a      	str	r2, [r3, #0]
 80012de:	605a      	str	r2, [r3, #4]
 80012e0:	609a      	str	r2, [r3, #8]
 80012e2:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80012e4:	f107 031c 	add.w	r3, r7, #28
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	605a      	str	r2, [r3, #4]
 80012ee:	609a      	str	r2, [r3, #8]
 80012f0:	60da      	str	r2, [r3, #12]
 80012f2:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80012f4:	f107 030c 	add.w	r3, r7, #12
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	609a      	str	r2, [r3, #8]
 8001300:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001302:	1d3b      	adds	r3, r7, #4
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 800130a:	2100      	movs	r1, #0
 800130c:	483f      	ldr	r0, [pc, #252]	@ (800140c <MX_TIM2_Init+0x13c>)
 800130e:	f001 fb1b 	bl	8002948 <HAL_TIM_PWM_Stop>

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001312:	4b3e      	ldr	r3, [pc, #248]	@ (800140c <MX_TIM2_Init+0x13c>)
 8001314:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001318:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 800131a:	4b3c      	ldr	r3, [pc, #240]	@ (800140c <MX_TIM2_Init+0x13c>)
 800131c:	223f      	movs	r2, #63	@ 0x3f
 800131e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001320:	4b3a      	ldr	r3, [pc, #232]	@ (800140c <MX_TIM2_Init+0x13c>)
 8001322:	2200      	movs	r2, #0
 8001324:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001326:	4b39      	ldr	r3, [pc, #228]	@ (800140c <MX_TIM2_Init+0x13c>)
 8001328:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800132c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800132e:	4b37      	ldr	r3, [pc, #220]	@ (800140c <MX_TIM2_Init+0x13c>)
 8001330:	2200      	movs	r2, #0
 8001332:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001334:	4b35      	ldr	r3, [pc, #212]	@ (800140c <MX_TIM2_Init+0x13c>)
 8001336:	2200      	movs	r2, #0
 8001338:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800133a:	4834      	ldr	r0, [pc, #208]	@ (800140c <MX_TIM2_Init+0x13c>)
 800133c:	f001 f9e4 	bl	8002708 <HAL_TIM_Base_Init>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001346:	f7ff ff01 	bl	800114c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800134a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800134e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001350:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001354:	4619      	mov	r1, r3
 8001356:	482d      	ldr	r0, [pc, #180]	@ (800140c <MX_TIM2_Init+0x13c>)
 8001358:	f001 ff66 	bl	8003228 <HAL_TIM_ConfigClockSource>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001362:	f7ff fef3 	bl	800114c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001366:	4829      	ldr	r0, [pc, #164]	@ (800140c <MX_TIM2_Init+0x13c>)
 8001368:	f001 fb52 	bl	8002a10 <HAL_TIM_IC_Init>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_TIM2_Init+0xa6>
  {
    Error_Handler();
 8001372:	f7ff feeb 	bl	800114c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001376:	2304      	movs	r3, #4
 8001378:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 800137a:	2350      	movs	r3, #80	@ 0x50
 800137c:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800137e:	2300      	movs	r3, #0
 8001380:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001382:	2300      	movs	r3, #0
 8001384:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 8001386:	2300      	movs	r3, #0
 8001388:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 800138a:	f107 031c 	add.w	r3, r7, #28
 800138e:	4619      	mov	r1, r3
 8001390:	481e      	ldr	r0, [pc, #120]	@ (800140c <MX_TIM2_Init+0x13c>)
 8001392:	f002 f810 	bl	80033b6 <HAL_TIM_SlaveConfigSynchro>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 800139c:	f7ff fed6 	bl	800114c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80013a0:	2300      	movs	r3, #0
 80013a2:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80013a4:	2301      	movs	r3, #1
 80013a6:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80013a8:	2300      	movs	r3, #0
 80013aa:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 80013ac:	2300      	movs	r3, #0
 80013ae:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80013b0:	f107 030c 	add.w	r3, r7, #12
 80013b4:	2200      	movs	r2, #0
 80013b6:	4619      	mov	r1, r3
 80013b8:	4814      	ldr	r0, [pc, #80]	@ (800140c <MX_TIM2_Init+0x13c>)
 80013ba:	f001 fe99 	bl	80030f0 <HAL_TIM_IC_ConfigChannel>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_TIM2_Init+0xf8>
  {
    Error_Handler();
 80013c4:	f7ff fec2 	bl	800114c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80013c8:	2302      	movs	r3, #2
 80013ca:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80013cc:	2302      	movs	r3, #2
 80013ce:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80013d0:	f107 030c 	add.w	r3, r7, #12
 80013d4:	2204      	movs	r2, #4
 80013d6:	4619      	mov	r1, r3
 80013d8:	480c      	ldr	r0, [pc, #48]	@ (800140c <MX_TIM2_Init+0x13c>)
 80013da:	f001 fe89 	bl	80030f0 <HAL_TIM_IC_ConfigChannel>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_TIM2_Init+0x118>
  {
    Error_Handler();
 80013e4:	f7ff feb2 	bl	800114c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013e8:	2300      	movs	r3, #0
 80013ea:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013ec:	2300      	movs	r3, #0
 80013ee:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013f0:	1d3b      	adds	r3, r7, #4
 80013f2:	4619      	mov	r1, r3
 80013f4:	4805      	ldr	r0, [pc, #20]	@ (800140c <MX_TIM2_Init+0x13c>)
 80013f6:	f002 fc95 	bl	8003d24 <HAL_TIMEx_MasterConfigSynchronization>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_TIM2_Init+0x134>
  {
    Error_Handler();
 8001400:	f7ff fea4 	bl	800114c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001404:	bf00      	nop
 8001406:	3740      	adds	r7, #64	@ 0x40
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	200011fc 	.word	0x200011fc

08001410 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b08a      	sub	sp, #40	@ 0x28
 8001414:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001416:	f107 0320 	add.w	r3, r7, #32
 800141a:	2200      	movs	r2, #0
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001420:	1d3b      	adds	r3, r7, #4
 8001422:	2200      	movs	r2, #0
 8001424:	601a      	str	r2, [r3, #0]
 8001426:	605a      	str	r2, [r3, #4]
 8001428:	609a      	str	r2, [r3, #8]
 800142a:	60da      	str	r2, [r3, #12]
 800142c:	611a      	str	r2, [r3, #16]
 800142e:	615a      	str	r2, [r3, #20]
 8001430:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001432:	4b21      	ldr	r3, [pc, #132]	@ (80014b8 <MX_TIM4_Init+0xa8>)
 8001434:	4a21      	ldr	r2, [pc, #132]	@ (80014bc <MX_TIM4_Init+0xac>)
 8001436:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 63999;
 8001438:	4b1f      	ldr	r3, [pc, #124]	@ (80014b8 <MX_TIM4_Init+0xa8>)
 800143a:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 800143e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001440:	4b1d      	ldr	r3, [pc, #116]	@ (80014b8 <MX_TIM4_Init+0xa8>)
 8001442:	2200      	movs	r2, #0
 8001444:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 5000;
 8001446:	4b1c      	ldr	r3, [pc, #112]	@ (80014b8 <MX_TIM4_Init+0xa8>)
 8001448:	f241 3288 	movw	r2, #5000	@ 0x1388
 800144c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800144e:	4b1a      	ldr	r3, [pc, #104]	@ (80014b8 <MX_TIM4_Init+0xa8>)
 8001450:	2200      	movs	r2, #0
 8001452:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001454:	4b18      	ldr	r3, [pc, #96]	@ (80014b8 <MX_TIM4_Init+0xa8>)
 8001456:	2200      	movs	r2, #0
 8001458:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 800145a:	4817      	ldr	r0, [pc, #92]	@ (80014b8 <MX_TIM4_Init+0xa8>)
 800145c:	f001 fa24 	bl	80028a8 <HAL_TIM_OC_Init>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8001466:	f7ff fe71 	bl	800114c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800146a:	2300      	movs	r3, #0
 800146c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800146e:	2300      	movs	r3, #0
 8001470:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001472:	f107 0320 	add.w	r3, r7, #32
 8001476:	4619      	mov	r1, r3
 8001478:	480f      	ldr	r0, [pc, #60]	@ (80014b8 <MX_TIM4_Init+0xa8>)
 800147a:	f002 fc53 	bl	8003d24 <HAL_TIMEx_MasterConfigSynchronization>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8001484:	f7ff fe62 	bl	800114c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001488:	2300      	movs	r3, #0
 800148a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800148c:	2300      	movs	r3, #0
 800148e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001490:	2300      	movs	r3, #0
 8001492:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001494:	2300      	movs	r3, #0
 8001496:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001498:	1d3b      	adds	r3, r7, #4
 800149a:	2200      	movs	r2, #0
 800149c:	4619      	mov	r1, r3
 800149e:	4806      	ldr	r0, [pc, #24]	@ (80014b8 <MX_TIM4_Init+0xa8>)
 80014a0:	f001 fdca 	bl	8003038 <HAL_TIM_OC_ConfigChannel>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80014aa:	f7ff fe4f 	bl	800114c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80014ae:	bf00      	nop
 80014b0:	3728      	adds	r7, #40	@ 0x28
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	20001244 	.word	0x20001244
 80014bc:	40000800 	.word	0x40000800

080014c0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b088      	sub	sp, #32
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c8:	f107 0310 	add.w	r3, r7, #16
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	605a      	str	r2, [r3, #4]
 80014d2:	609a      	str	r2, [r3, #8]
 80014d4:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM2)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80014de:	d123      	bne.n	8001528 <HAL_TIM_Base_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014e0:	4b13      	ldr	r3, [pc, #76]	@ (8001530 <HAL_TIM_Base_MspInit+0x70>)
 80014e2:	69db      	ldr	r3, [r3, #28]
 80014e4:	4a12      	ldr	r2, [pc, #72]	@ (8001530 <HAL_TIM_Base_MspInit+0x70>)
 80014e6:	f043 0301 	orr.w	r3, r3, #1
 80014ea:	61d3      	str	r3, [r2, #28]
 80014ec:	4b10      	ldr	r3, [pc, #64]	@ (8001530 <HAL_TIM_Base_MspInit+0x70>)
 80014ee:	69db      	ldr	r3, [r3, #28]
 80014f0:	f003 0301 	and.w	r3, r3, #1
 80014f4:	60fb      	str	r3, [r7, #12]
 80014f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f8:	4b0d      	ldr	r3, [pc, #52]	@ (8001530 <HAL_TIM_Base_MspInit+0x70>)
 80014fa:	699b      	ldr	r3, [r3, #24]
 80014fc:	4a0c      	ldr	r2, [pc, #48]	@ (8001530 <HAL_TIM_Base_MspInit+0x70>)
 80014fe:	f043 0304 	orr.w	r3, r3, #4
 8001502:	6193      	str	r3, [r2, #24]
 8001504:	4b0a      	ldr	r3, [pc, #40]	@ (8001530 <HAL_TIM_Base_MspInit+0x70>)
 8001506:	699b      	ldr	r3, [r3, #24]
 8001508:	f003 0304 	and.w	r3, r3, #4
 800150c:	60bb      	str	r3, [r7, #8]
 800150e:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001510:	2301      	movs	r3, #1
 8001512:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001514:	2300      	movs	r3, #0
 8001516:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001518:	2300      	movs	r3, #0
 800151a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800151c:	f107 0310 	add.w	r3, r7, #16
 8001520:	4619      	mov	r1, r3
 8001522:	4804      	ldr	r0, [pc, #16]	@ (8001534 <HAL_TIM_Base_MspInit+0x74>)
 8001524:	f000 fb0a 	bl	8001b3c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001528:	bf00      	nop
 800152a:	3720      	adds	r7, #32
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	40021000 	.word	0x40021000
 8001534:	40010800 	.word	0x40010800

08001538 <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* tim_ocHandle)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]

  if(tim_ocHandle->Instance==TIM4)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a0d      	ldr	r2, [pc, #52]	@ (800157c <HAL_TIM_OC_MspInit+0x44>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d113      	bne.n	8001572 <HAL_TIM_OC_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800154a:	4b0d      	ldr	r3, [pc, #52]	@ (8001580 <HAL_TIM_OC_MspInit+0x48>)
 800154c:	69db      	ldr	r3, [r3, #28]
 800154e:	4a0c      	ldr	r2, [pc, #48]	@ (8001580 <HAL_TIM_OC_MspInit+0x48>)
 8001550:	f043 0304 	orr.w	r3, r3, #4
 8001554:	61d3      	str	r3, [r2, #28]
 8001556:	4b0a      	ldr	r3, [pc, #40]	@ (8001580 <HAL_TIM_OC_MspInit+0x48>)
 8001558:	69db      	ldr	r3, [r3, #28]
 800155a:	f003 0304 	and.w	r3, r3, #4
 800155e:	60fb      	str	r3, [r7, #12]
 8001560:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001562:	2200      	movs	r2, #0
 8001564:	2100      	movs	r1, #0
 8001566:	201e      	movs	r0, #30
 8001568:	f000 f9ff 	bl	800196a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800156c:	201e      	movs	r0, #30
 800156e:	f000 fa18 	bl	80019a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001572:	bf00      	nop
 8001574:	3710      	adds	r7, #16
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	40000800 	.word	0x40000800
 8001580:	40021000 	.word	0x40021000

08001584 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001588:	4b11      	ldr	r3, [pc, #68]	@ (80015d0 <MX_USART2_UART_Init+0x4c>)
 800158a:	4a12      	ldr	r2, [pc, #72]	@ (80015d4 <MX_USART2_UART_Init+0x50>)
 800158c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800158e:	4b10      	ldr	r3, [pc, #64]	@ (80015d0 <MX_USART2_UART_Init+0x4c>)
 8001590:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001594:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001596:	4b0e      	ldr	r3, [pc, #56]	@ (80015d0 <MX_USART2_UART_Init+0x4c>)
 8001598:	2200      	movs	r2, #0
 800159a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800159c:	4b0c      	ldr	r3, [pc, #48]	@ (80015d0 <MX_USART2_UART_Init+0x4c>)
 800159e:	2200      	movs	r2, #0
 80015a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015a2:	4b0b      	ldr	r3, [pc, #44]	@ (80015d0 <MX_USART2_UART_Init+0x4c>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015a8:	4b09      	ldr	r3, [pc, #36]	@ (80015d0 <MX_USART2_UART_Init+0x4c>)
 80015aa:	220c      	movs	r2, #12
 80015ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ae:	4b08      	ldr	r3, [pc, #32]	@ (80015d0 <MX_USART2_UART_Init+0x4c>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015b4:	4b06      	ldr	r3, [pc, #24]	@ (80015d0 <MX_USART2_UART_Init+0x4c>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015ba:	4805      	ldr	r0, [pc, #20]	@ (80015d0 <MX_USART2_UART_Init+0x4c>)
 80015bc:	f002 fc22 	bl	8003e04 <HAL_UART_Init>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80015c6:	f7ff fdc1 	bl	800114c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015ca:	bf00      	nop
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	2000128c 	.word	0x2000128c
 80015d4:	40004400 	.word	0x40004400

080015d8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b088      	sub	sp, #32
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e0:	f107 0310 	add.w	r3, r7, #16
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]
 80015e8:	605a      	str	r2, [r3, #4]
 80015ea:	609a      	str	r2, [r3, #8]
 80015ec:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a19      	ldr	r2, [pc, #100]	@ (8001658 <HAL_UART_MspInit+0x80>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d12b      	bne.n	8001650 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015f8:	4b18      	ldr	r3, [pc, #96]	@ (800165c <HAL_UART_MspInit+0x84>)
 80015fa:	69db      	ldr	r3, [r3, #28]
 80015fc:	4a17      	ldr	r2, [pc, #92]	@ (800165c <HAL_UART_MspInit+0x84>)
 80015fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001602:	61d3      	str	r3, [r2, #28]
 8001604:	4b15      	ldr	r3, [pc, #84]	@ (800165c <HAL_UART_MspInit+0x84>)
 8001606:	69db      	ldr	r3, [r3, #28]
 8001608:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800160c:	60fb      	str	r3, [r7, #12]
 800160e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001610:	4b12      	ldr	r3, [pc, #72]	@ (800165c <HAL_UART_MspInit+0x84>)
 8001612:	699b      	ldr	r3, [r3, #24]
 8001614:	4a11      	ldr	r2, [pc, #68]	@ (800165c <HAL_UART_MspInit+0x84>)
 8001616:	f043 0304 	orr.w	r3, r3, #4
 800161a:	6193      	str	r3, [r2, #24]
 800161c:	4b0f      	ldr	r3, [pc, #60]	@ (800165c <HAL_UART_MspInit+0x84>)
 800161e:	699b      	ldr	r3, [r3, #24]
 8001620:	f003 0304 	and.w	r3, r3, #4
 8001624:	60bb      	str	r3, [r7, #8]
 8001626:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001628:	230c      	movs	r3, #12
 800162a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162c:	2302      	movs	r3, #2
 800162e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001630:	2302      	movs	r3, #2
 8001632:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001634:	f107 0310 	add.w	r3, r7, #16
 8001638:	4619      	mov	r1, r3
 800163a:	4809      	ldr	r0, [pc, #36]	@ (8001660 <HAL_UART_MspInit+0x88>)
 800163c:	f000 fa7e 	bl	8001b3c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001640:	2200      	movs	r2, #0
 8001642:	2100      	movs	r1, #0
 8001644:	2026      	movs	r0, #38	@ 0x26
 8001646:	f000 f990 	bl	800196a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800164a:	2026      	movs	r0, #38	@ 0x26
 800164c:	f000 f9a9 	bl	80019a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001650:	bf00      	nop
 8001652:	3720      	adds	r7, #32
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	40004400 	.word	0x40004400
 800165c:	40021000 	.word	0x40021000
 8001660:	40010800 	.word	0x40010800

08001664 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001664:	f7ff fe2e 	bl	80012c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001668:	480b      	ldr	r0, [pc, #44]	@ (8001698 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800166a:	490c      	ldr	r1, [pc, #48]	@ (800169c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800166c:	4a0c      	ldr	r2, [pc, #48]	@ (80016a0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800166e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001670:	e002      	b.n	8001678 <LoopCopyDataInit>

08001672 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001672:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001674:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001676:	3304      	adds	r3, #4

08001678 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001678:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800167a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800167c:	d3f9      	bcc.n	8001672 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800167e:	4a09      	ldr	r2, [pc, #36]	@ (80016a4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001680:	4c09      	ldr	r4, [pc, #36]	@ (80016a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001682:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001684:	e001      	b.n	800168a <LoopFillZerobss>

08001686 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001686:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001688:	3204      	adds	r2, #4

0800168a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800168a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800168c:	d3fb      	bcc.n	8001686 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800168e:	f003 fa41 	bl	8004b14 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001692:	f7ff fcd3 	bl	800103c <main>
  bx lr
 8001696:	4770      	bx	lr
  ldr r0, =_sdata
 8001698:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800169c:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80016a0:	0800568c 	.word	0x0800568c
  ldr r2, =_sbss
 80016a4:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80016a8:	20001420 	.word	0x20001420

080016ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016ac:	e7fe      	b.n	80016ac <ADC1_2_IRQHandler>
	...

080016b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016b4:	4b08      	ldr	r3, [pc, #32]	@ (80016d8 <HAL_Init+0x28>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a07      	ldr	r2, [pc, #28]	@ (80016d8 <HAL_Init+0x28>)
 80016ba:	f043 0310 	orr.w	r3, r3, #16
 80016be:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016c0:	2003      	movs	r0, #3
 80016c2:	f000 f947 	bl	8001954 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016c6:	2000      	movs	r0, #0
 80016c8:	f000 f808 	bl	80016dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016cc:	f7ff fd4a 	bl	8001164 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016d0:	2300      	movs	r3, #0
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	40022000 	.word	0x40022000

080016dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016e4:	4b12      	ldr	r3, [pc, #72]	@ (8001730 <HAL_InitTick+0x54>)
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	4b12      	ldr	r3, [pc, #72]	@ (8001734 <HAL_InitTick+0x58>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	4619      	mov	r1, r3
 80016ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80016f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80016fa:	4618      	mov	r0, r3
 80016fc:	f000 f95f 	bl	80019be <HAL_SYSTICK_Config>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e00e      	b.n	8001728 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2b0f      	cmp	r3, #15
 800170e:	d80a      	bhi.n	8001726 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001710:	2200      	movs	r2, #0
 8001712:	6879      	ldr	r1, [r7, #4]
 8001714:	f04f 30ff 	mov.w	r0, #4294967295
 8001718:	f000 f927 	bl	800196a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800171c:	4a06      	ldr	r2, [pc, #24]	@ (8001738 <HAL_InitTick+0x5c>)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001722:	2300      	movs	r3, #0
 8001724:	e000      	b.n	8001728 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
}
 8001728:	4618      	mov	r0, r3
 800172a:	3708      	adds	r7, #8
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	20000008 	.word	0x20000008
 8001734:	20000010 	.word	0x20000010
 8001738:	2000000c 	.word	0x2000000c

0800173c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001740:	4b05      	ldr	r3, [pc, #20]	@ (8001758 <HAL_IncTick+0x1c>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	461a      	mov	r2, r3
 8001746:	4b05      	ldr	r3, [pc, #20]	@ (800175c <HAL_IncTick+0x20>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4413      	add	r3, r2
 800174c:	4a03      	ldr	r2, [pc, #12]	@ (800175c <HAL_IncTick+0x20>)
 800174e:	6013      	str	r3, [r2, #0]
}
 8001750:	bf00      	nop
 8001752:	46bd      	mov	sp, r7
 8001754:	bc80      	pop	{r7}
 8001756:	4770      	bx	lr
 8001758:	20000010 	.word	0x20000010
 800175c:	200012d4 	.word	0x200012d4

08001760 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  return uwTick;
 8001764:	4b02      	ldr	r3, [pc, #8]	@ (8001770 <HAL_GetTick+0x10>)
 8001766:	681b      	ldr	r3, [r3, #0]
}
 8001768:	4618      	mov	r0, r3
 800176a:	46bd      	mov	sp, r7
 800176c:	bc80      	pop	{r7}
 800176e:	4770      	bx	lr
 8001770:	200012d4 	.word	0x200012d4

08001774 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800177c:	f7ff fff0 	bl	8001760 <HAL_GetTick>
 8001780:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800178c:	d005      	beq.n	800179a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800178e:	4b0a      	ldr	r3, [pc, #40]	@ (80017b8 <HAL_Delay+0x44>)
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	461a      	mov	r2, r3
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	4413      	add	r3, r2
 8001798:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800179a:	bf00      	nop
 800179c:	f7ff ffe0 	bl	8001760 <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	68fa      	ldr	r2, [r7, #12]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d8f7      	bhi.n	800179c <HAL_Delay+0x28>
  {
  }
}
 80017ac:	bf00      	nop
 80017ae:	bf00      	nop
 80017b0:	3710      	adds	r7, #16
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	20000010 	.word	0x20000010

080017bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017bc:	b480      	push	{r7}
 80017be:	b085      	sub	sp, #20
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f003 0307 	and.w	r3, r3, #7
 80017ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001800 <__NVIC_SetPriorityGrouping+0x44>)
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017d2:	68ba      	ldr	r2, [r7, #8]
 80017d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80017d8:	4013      	ands	r3, r2
 80017da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80017e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017ee:	4a04      	ldr	r2, [pc, #16]	@ (8001800 <__NVIC_SetPriorityGrouping+0x44>)
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	60d3      	str	r3, [r2, #12]
}
 80017f4:	bf00      	nop
 80017f6:	3714      	adds	r7, #20
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bc80      	pop	{r7}
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	e000ed00 	.word	0xe000ed00

08001804 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001808:	4b04      	ldr	r3, [pc, #16]	@ (800181c <__NVIC_GetPriorityGrouping+0x18>)
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	0a1b      	lsrs	r3, r3, #8
 800180e:	f003 0307 	and.w	r3, r3, #7
}
 8001812:	4618      	mov	r0, r3
 8001814:	46bd      	mov	sp, r7
 8001816:	bc80      	pop	{r7}
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	e000ed00 	.word	0xe000ed00

08001820 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	4603      	mov	r3, r0
 8001828:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800182a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182e:	2b00      	cmp	r3, #0
 8001830:	db0b      	blt.n	800184a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001832:	79fb      	ldrb	r3, [r7, #7]
 8001834:	f003 021f 	and.w	r2, r3, #31
 8001838:	4906      	ldr	r1, [pc, #24]	@ (8001854 <__NVIC_EnableIRQ+0x34>)
 800183a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183e:	095b      	lsrs	r3, r3, #5
 8001840:	2001      	movs	r0, #1
 8001842:	fa00 f202 	lsl.w	r2, r0, r2
 8001846:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800184a:	bf00      	nop
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	bc80      	pop	{r7}
 8001852:	4770      	bx	lr
 8001854:	e000e100 	.word	0xe000e100

08001858 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	4603      	mov	r3, r0
 8001860:	6039      	str	r1, [r7, #0]
 8001862:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001864:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001868:	2b00      	cmp	r3, #0
 800186a:	db0a      	blt.n	8001882 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	b2da      	uxtb	r2, r3
 8001870:	490c      	ldr	r1, [pc, #48]	@ (80018a4 <__NVIC_SetPriority+0x4c>)
 8001872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001876:	0112      	lsls	r2, r2, #4
 8001878:	b2d2      	uxtb	r2, r2
 800187a:	440b      	add	r3, r1
 800187c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001880:	e00a      	b.n	8001898 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	b2da      	uxtb	r2, r3
 8001886:	4908      	ldr	r1, [pc, #32]	@ (80018a8 <__NVIC_SetPriority+0x50>)
 8001888:	79fb      	ldrb	r3, [r7, #7]
 800188a:	f003 030f 	and.w	r3, r3, #15
 800188e:	3b04      	subs	r3, #4
 8001890:	0112      	lsls	r2, r2, #4
 8001892:	b2d2      	uxtb	r2, r2
 8001894:	440b      	add	r3, r1
 8001896:	761a      	strb	r2, [r3, #24]
}
 8001898:	bf00      	nop
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	bc80      	pop	{r7}
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	e000e100 	.word	0xe000e100
 80018a8:	e000ed00 	.word	0xe000ed00

080018ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b089      	sub	sp, #36	@ 0x24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	f003 0307 	and.w	r3, r3, #7
 80018be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	f1c3 0307 	rsb	r3, r3, #7
 80018c6:	2b04      	cmp	r3, #4
 80018c8:	bf28      	it	cs
 80018ca:	2304      	movcs	r3, #4
 80018cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	3304      	adds	r3, #4
 80018d2:	2b06      	cmp	r3, #6
 80018d4:	d902      	bls.n	80018dc <NVIC_EncodePriority+0x30>
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	3b03      	subs	r3, #3
 80018da:	e000      	b.n	80018de <NVIC_EncodePriority+0x32>
 80018dc:	2300      	movs	r3, #0
 80018de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e0:	f04f 32ff 	mov.w	r2, #4294967295
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ea:	43da      	mvns	r2, r3
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	401a      	ands	r2, r3
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018f4:	f04f 31ff 	mov.w	r1, #4294967295
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	fa01 f303 	lsl.w	r3, r1, r3
 80018fe:	43d9      	mvns	r1, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001904:	4313      	orrs	r3, r2
         );
}
 8001906:	4618      	mov	r0, r3
 8001908:	3724      	adds	r7, #36	@ 0x24
 800190a:	46bd      	mov	sp, r7
 800190c:	bc80      	pop	{r7}
 800190e:	4770      	bx	lr

08001910 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	3b01      	subs	r3, #1
 800191c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001920:	d301      	bcc.n	8001926 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001922:	2301      	movs	r3, #1
 8001924:	e00f      	b.n	8001946 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001926:	4a0a      	ldr	r2, [pc, #40]	@ (8001950 <SysTick_Config+0x40>)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	3b01      	subs	r3, #1
 800192c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800192e:	210f      	movs	r1, #15
 8001930:	f04f 30ff 	mov.w	r0, #4294967295
 8001934:	f7ff ff90 	bl	8001858 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001938:	4b05      	ldr	r3, [pc, #20]	@ (8001950 <SysTick_Config+0x40>)
 800193a:	2200      	movs	r2, #0
 800193c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800193e:	4b04      	ldr	r3, [pc, #16]	@ (8001950 <SysTick_Config+0x40>)
 8001940:	2207      	movs	r2, #7
 8001942:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001944:	2300      	movs	r3, #0
}
 8001946:	4618      	mov	r0, r3
 8001948:	3708      	adds	r7, #8
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	e000e010 	.word	0xe000e010

08001954 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f7ff ff2d 	bl	80017bc <__NVIC_SetPriorityGrouping>
}
 8001962:	bf00      	nop
 8001964:	3708      	adds	r7, #8
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}

0800196a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800196a:	b580      	push	{r7, lr}
 800196c:	b086      	sub	sp, #24
 800196e:	af00      	add	r7, sp, #0
 8001970:	4603      	mov	r3, r0
 8001972:	60b9      	str	r1, [r7, #8]
 8001974:	607a      	str	r2, [r7, #4]
 8001976:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001978:	2300      	movs	r3, #0
 800197a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800197c:	f7ff ff42 	bl	8001804 <__NVIC_GetPriorityGrouping>
 8001980:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	68b9      	ldr	r1, [r7, #8]
 8001986:	6978      	ldr	r0, [r7, #20]
 8001988:	f7ff ff90 	bl	80018ac <NVIC_EncodePriority>
 800198c:	4602      	mov	r2, r0
 800198e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001992:	4611      	mov	r1, r2
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff ff5f 	bl	8001858 <__NVIC_SetPriority>
}
 800199a:	bf00      	nop
 800199c:	3718      	adds	r7, #24
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b082      	sub	sp, #8
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	4603      	mov	r3, r0
 80019aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7ff ff35 	bl	8001820 <__NVIC_EnableIRQ>
}
 80019b6:	bf00      	nop
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}

080019be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019be:	b580      	push	{r7, lr}
 80019c0:	b082      	sub	sp, #8
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f7ff ffa2 	bl	8001910 <SysTick_Config>
 80019cc:	4603      	mov	r3, r0
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}

080019d6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80019d6:	b480      	push	{r7}
 80019d8:	b085      	sub	sp, #20
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019de:	2300      	movs	r3, #0
 80019e0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d008      	beq.n	8001a00 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2204      	movs	r2, #4
 80019f2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2200      	movs	r2, #0
 80019f8:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e020      	b.n	8001a42 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f022 020e 	bic.w	r2, r2, #14
 8001a0e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f022 0201 	bic.w	r2, r2, #1
 8001a1e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a28:	2101      	movs	r1, #1
 8001a2a:	fa01 f202 	lsl.w	r2, r1, r2
 8001a2e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2201      	movs	r2, #1
 8001a34:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3714      	adds	r7, #20
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bc80      	pop	{r7}
 8001a4a:	4770      	bx	lr

08001a4c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a54:	2300      	movs	r3, #0
 8001a56:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d005      	beq.n	8001a70 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2204      	movs	r2, #4
 8001a68:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	73fb      	strb	r3, [r7, #15]
 8001a6e:	e051      	b.n	8001b14 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f022 020e 	bic.w	r2, r2, #14
 8001a7e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f022 0201 	bic.w	r2, r2, #1
 8001a8e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a22      	ldr	r2, [pc, #136]	@ (8001b20 <HAL_DMA_Abort_IT+0xd4>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d029      	beq.n	8001aee <HAL_DMA_Abort_IT+0xa2>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a21      	ldr	r2, [pc, #132]	@ (8001b24 <HAL_DMA_Abort_IT+0xd8>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d022      	beq.n	8001aea <HAL_DMA_Abort_IT+0x9e>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a1f      	ldr	r2, [pc, #124]	@ (8001b28 <HAL_DMA_Abort_IT+0xdc>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d01a      	beq.n	8001ae4 <HAL_DMA_Abort_IT+0x98>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a1e      	ldr	r2, [pc, #120]	@ (8001b2c <HAL_DMA_Abort_IT+0xe0>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d012      	beq.n	8001ade <HAL_DMA_Abort_IT+0x92>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a1c      	ldr	r2, [pc, #112]	@ (8001b30 <HAL_DMA_Abort_IT+0xe4>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d00a      	beq.n	8001ad8 <HAL_DMA_Abort_IT+0x8c>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a1b      	ldr	r2, [pc, #108]	@ (8001b34 <HAL_DMA_Abort_IT+0xe8>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d102      	bne.n	8001ad2 <HAL_DMA_Abort_IT+0x86>
 8001acc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001ad0:	e00e      	b.n	8001af0 <HAL_DMA_Abort_IT+0xa4>
 8001ad2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001ad6:	e00b      	b.n	8001af0 <HAL_DMA_Abort_IT+0xa4>
 8001ad8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001adc:	e008      	b.n	8001af0 <HAL_DMA_Abort_IT+0xa4>
 8001ade:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ae2:	e005      	b.n	8001af0 <HAL_DMA_Abort_IT+0xa4>
 8001ae4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ae8:	e002      	b.n	8001af0 <HAL_DMA_Abort_IT+0xa4>
 8001aea:	2310      	movs	r3, #16
 8001aec:	e000      	b.n	8001af0 <HAL_DMA_Abort_IT+0xa4>
 8001aee:	2301      	movs	r3, #1
 8001af0:	4a11      	ldr	r2, [pc, #68]	@ (8001b38 <HAL_DMA_Abort_IT+0xec>)
 8001af2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2201      	movs	r2, #1
 8001af8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2200      	movs	r2, #0
 8001b00:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d003      	beq.n	8001b14 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	4798      	blx	r3
    } 
  }
  return status;
 8001b14:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3710      	adds	r7, #16
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	40020008 	.word	0x40020008
 8001b24:	4002001c 	.word	0x4002001c
 8001b28:	40020030 	.word	0x40020030
 8001b2c:	40020044 	.word	0x40020044
 8001b30:	40020058 	.word	0x40020058
 8001b34:	4002006c 	.word	0x4002006c
 8001b38:	40020000 	.word	0x40020000

08001b3c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b08b      	sub	sp, #44	@ 0x2c
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b46:	2300      	movs	r3, #0
 8001b48:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b4e:	e169      	b.n	8001e24 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b50:	2201      	movs	r2, #1
 8001b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	69fa      	ldr	r2, [r7, #28]
 8001b60:	4013      	ands	r3, r2
 8001b62:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	f040 8158 	bne.w	8001e1e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	4a9a      	ldr	r2, [pc, #616]	@ (8001ddc <HAL_GPIO_Init+0x2a0>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d05e      	beq.n	8001c36 <HAL_GPIO_Init+0xfa>
 8001b78:	4a98      	ldr	r2, [pc, #608]	@ (8001ddc <HAL_GPIO_Init+0x2a0>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d875      	bhi.n	8001c6a <HAL_GPIO_Init+0x12e>
 8001b7e:	4a98      	ldr	r2, [pc, #608]	@ (8001de0 <HAL_GPIO_Init+0x2a4>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d058      	beq.n	8001c36 <HAL_GPIO_Init+0xfa>
 8001b84:	4a96      	ldr	r2, [pc, #600]	@ (8001de0 <HAL_GPIO_Init+0x2a4>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d86f      	bhi.n	8001c6a <HAL_GPIO_Init+0x12e>
 8001b8a:	4a96      	ldr	r2, [pc, #600]	@ (8001de4 <HAL_GPIO_Init+0x2a8>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d052      	beq.n	8001c36 <HAL_GPIO_Init+0xfa>
 8001b90:	4a94      	ldr	r2, [pc, #592]	@ (8001de4 <HAL_GPIO_Init+0x2a8>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d869      	bhi.n	8001c6a <HAL_GPIO_Init+0x12e>
 8001b96:	4a94      	ldr	r2, [pc, #592]	@ (8001de8 <HAL_GPIO_Init+0x2ac>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d04c      	beq.n	8001c36 <HAL_GPIO_Init+0xfa>
 8001b9c:	4a92      	ldr	r2, [pc, #584]	@ (8001de8 <HAL_GPIO_Init+0x2ac>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d863      	bhi.n	8001c6a <HAL_GPIO_Init+0x12e>
 8001ba2:	4a92      	ldr	r2, [pc, #584]	@ (8001dec <HAL_GPIO_Init+0x2b0>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d046      	beq.n	8001c36 <HAL_GPIO_Init+0xfa>
 8001ba8:	4a90      	ldr	r2, [pc, #576]	@ (8001dec <HAL_GPIO_Init+0x2b0>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d85d      	bhi.n	8001c6a <HAL_GPIO_Init+0x12e>
 8001bae:	2b12      	cmp	r3, #18
 8001bb0:	d82a      	bhi.n	8001c08 <HAL_GPIO_Init+0xcc>
 8001bb2:	2b12      	cmp	r3, #18
 8001bb4:	d859      	bhi.n	8001c6a <HAL_GPIO_Init+0x12e>
 8001bb6:	a201      	add	r2, pc, #4	@ (adr r2, 8001bbc <HAL_GPIO_Init+0x80>)
 8001bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bbc:	08001c37 	.word	0x08001c37
 8001bc0:	08001c11 	.word	0x08001c11
 8001bc4:	08001c23 	.word	0x08001c23
 8001bc8:	08001c65 	.word	0x08001c65
 8001bcc:	08001c6b 	.word	0x08001c6b
 8001bd0:	08001c6b 	.word	0x08001c6b
 8001bd4:	08001c6b 	.word	0x08001c6b
 8001bd8:	08001c6b 	.word	0x08001c6b
 8001bdc:	08001c6b 	.word	0x08001c6b
 8001be0:	08001c6b 	.word	0x08001c6b
 8001be4:	08001c6b 	.word	0x08001c6b
 8001be8:	08001c6b 	.word	0x08001c6b
 8001bec:	08001c6b 	.word	0x08001c6b
 8001bf0:	08001c6b 	.word	0x08001c6b
 8001bf4:	08001c6b 	.word	0x08001c6b
 8001bf8:	08001c6b 	.word	0x08001c6b
 8001bfc:	08001c6b 	.word	0x08001c6b
 8001c00:	08001c19 	.word	0x08001c19
 8001c04:	08001c2d 	.word	0x08001c2d
 8001c08:	4a79      	ldr	r2, [pc, #484]	@ (8001df0 <HAL_GPIO_Init+0x2b4>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d013      	beq.n	8001c36 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c0e:	e02c      	b.n	8001c6a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	623b      	str	r3, [r7, #32]
          break;
 8001c16:	e029      	b.n	8001c6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	3304      	adds	r3, #4
 8001c1e:	623b      	str	r3, [r7, #32]
          break;
 8001c20:	e024      	b.n	8001c6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	68db      	ldr	r3, [r3, #12]
 8001c26:	3308      	adds	r3, #8
 8001c28:	623b      	str	r3, [r7, #32]
          break;
 8001c2a:	e01f      	b.n	8001c6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	330c      	adds	r3, #12
 8001c32:	623b      	str	r3, [r7, #32]
          break;
 8001c34:	e01a      	b.n	8001c6c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d102      	bne.n	8001c44 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c3e:	2304      	movs	r3, #4
 8001c40:	623b      	str	r3, [r7, #32]
          break;
 8001c42:	e013      	b.n	8001c6c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d105      	bne.n	8001c58 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c4c:	2308      	movs	r3, #8
 8001c4e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	69fa      	ldr	r2, [r7, #28]
 8001c54:	611a      	str	r2, [r3, #16]
          break;
 8001c56:	e009      	b.n	8001c6c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c58:	2308      	movs	r3, #8
 8001c5a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	69fa      	ldr	r2, [r7, #28]
 8001c60:	615a      	str	r2, [r3, #20]
          break;
 8001c62:	e003      	b.n	8001c6c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c64:	2300      	movs	r3, #0
 8001c66:	623b      	str	r3, [r7, #32]
          break;
 8001c68:	e000      	b.n	8001c6c <HAL_GPIO_Init+0x130>
          break;
 8001c6a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c6c:	69bb      	ldr	r3, [r7, #24]
 8001c6e:	2bff      	cmp	r3, #255	@ 0xff
 8001c70:	d801      	bhi.n	8001c76 <HAL_GPIO_Init+0x13a>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	e001      	b.n	8001c7a <HAL_GPIO_Init+0x13e>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	3304      	adds	r3, #4
 8001c7a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	2bff      	cmp	r3, #255	@ 0xff
 8001c80:	d802      	bhi.n	8001c88 <HAL_GPIO_Init+0x14c>
 8001c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	e002      	b.n	8001c8e <HAL_GPIO_Init+0x152>
 8001c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c8a:	3b08      	subs	r3, #8
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	210f      	movs	r1, #15
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	fa01 f303 	lsl.w	r3, r1, r3
 8001c9c:	43db      	mvns	r3, r3
 8001c9e:	401a      	ands	r2, r3
 8001ca0:	6a39      	ldr	r1, [r7, #32]
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ca8:	431a      	orrs	r2, r3
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	f000 80b1 	beq.w	8001e1e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001cbc:	4b4d      	ldr	r3, [pc, #308]	@ (8001df4 <HAL_GPIO_Init+0x2b8>)
 8001cbe:	699b      	ldr	r3, [r3, #24]
 8001cc0:	4a4c      	ldr	r2, [pc, #304]	@ (8001df4 <HAL_GPIO_Init+0x2b8>)
 8001cc2:	f043 0301 	orr.w	r3, r3, #1
 8001cc6:	6193      	str	r3, [r2, #24]
 8001cc8:	4b4a      	ldr	r3, [pc, #296]	@ (8001df4 <HAL_GPIO_Init+0x2b8>)
 8001cca:	699b      	ldr	r3, [r3, #24]
 8001ccc:	f003 0301 	and.w	r3, r3, #1
 8001cd0:	60bb      	str	r3, [r7, #8]
 8001cd2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001cd4:	4a48      	ldr	r2, [pc, #288]	@ (8001df8 <HAL_GPIO_Init+0x2bc>)
 8001cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cd8:	089b      	lsrs	r3, r3, #2
 8001cda:	3302      	adds	r3, #2
 8001cdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ce0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ce4:	f003 0303 	and.w	r3, r3, #3
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	220f      	movs	r2, #15
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	43db      	mvns	r3, r3
 8001cf2:	68fa      	ldr	r2, [r7, #12]
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	4a40      	ldr	r2, [pc, #256]	@ (8001dfc <HAL_GPIO_Init+0x2c0>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d013      	beq.n	8001d28 <HAL_GPIO_Init+0x1ec>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	4a3f      	ldr	r2, [pc, #252]	@ (8001e00 <HAL_GPIO_Init+0x2c4>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d00d      	beq.n	8001d24 <HAL_GPIO_Init+0x1e8>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	4a3e      	ldr	r2, [pc, #248]	@ (8001e04 <HAL_GPIO_Init+0x2c8>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d007      	beq.n	8001d20 <HAL_GPIO_Init+0x1e4>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	4a3d      	ldr	r2, [pc, #244]	@ (8001e08 <HAL_GPIO_Init+0x2cc>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d101      	bne.n	8001d1c <HAL_GPIO_Init+0x1e0>
 8001d18:	2303      	movs	r3, #3
 8001d1a:	e006      	b.n	8001d2a <HAL_GPIO_Init+0x1ee>
 8001d1c:	2304      	movs	r3, #4
 8001d1e:	e004      	b.n	8001d2a <HAL_GPIO_Init+0x1ee>
 8001d20:	2302      	movs	r3, #2
 8001d22:	e002      	b.n	8001d2a <HAL_GPIO_Init+0x1ee>
 8001d24:	2301      	movs	r3, #1
 8001d26:	e000      	b.n	8001d2a <HAL_GPIO_Init+0x1ee>
 8001d28:	2300      	movs	r3, #0
 8001d2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d2c:	f002 0203 	and.w	r2, r2, #3
 8001d30:	0092      	lsls	r2, r2, #2
 8001d32:	4093      	lsls	r3, r2
 8001d34:	68fa      	ldr	r2, [r7, #12]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d3a:	492f      	ldr	r1, [pc, #188]	@ (8001df8 <HAL_GPIO_Init+0x2bc>)
 8001d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d3e:	089b      	lsrs	r3, r3, #2
 8001d40:	3302      	adds	r3, #2
 8001d42:	68fa      	ldr	r2, [r7, #12]
 8001d44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d006      	beq.n	8001d62 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d54:	4b2d      	ldr	r3, [pc, #180]	@ (8001e0c <HAL_GPIO_Init+0x2d0>)
 8001d56:	689a      	ldr	r2, [r3, #8]
 8001d58:	492c      	ldr	r1, [pc, #176]	@ (8001e0c <HAL_GPIO_Init+0x2d0>)
 8001d5a:	69bb      	ldr	r3, [r7, #24]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	608b      	str	r3, [r1, #8]
 8001d60:	e006      	b.n	8001d70 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d62:	4b2a      	ldr	r3, [pc, #168]	@ (8001e0c <HAL_GPIO_Init+0x2d0>)
 8001d64:	689a      	ldr	r2, [r3, #8]
 8001d66:	69bb      	ldr	r3, [r7, #24]
 8001d68:	43db      	mvns	r3, r3
 8001d6a:	4928      	ldr	r1, [pc, #160]	@ (8001e0c <HAL_GPIO_Init+0x2d0>)
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d006      	beq.n	8001d8a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d7c:	4b23      	ldr	r3, [pc, #140]	@ (8001e0c <HAL_GPIO_Init+0x2d0>)
 8001d7e:	68da      	ldr	r2, [r3, #12]
 8001d80:	4922      	ldr	r1, [pc, #136]	@ (8001e0c <HAL_GPIO_Init+0x2d0>)
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	60cb      	str	r3, [r1, #12]
 8001d88:	e006      	b.n	8001d98 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d8a:	4b20      	ldr	r3, [pc, #128]	@ (8001e0c <HAL_GPIO_Init+0x2d0>)
 8001d8c:	68da      	ldr	r2, [r3, #12]
 8001d8e:	69bb      	ldr	r3, [r7, #24]
 8001d90:	43db      	mvns	r3, r3
 8001d92:	491e      	ldr	r1, [pc, #120]	@ (8001e0c <HAL_GPIO_Init+0x2d0>)
 8001d94:	4013      	ands	r3, r2
 8001d96:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d006      	beq.n	8001db2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001da4:	4b19      	ldr	r3, [pc, #100]	@ (8001e0c <HAL_GPIO_Init+0x2d0>)
 8001da6:	685a      	ldr	r2, [r3, #4]
 8001da8:	4918      	ldr	r1, [pc, #96]	@ (8001e0c <HAL_GPIO_Init+0x2d0>)
 8001daa:	69bb      	ldr	r3, [r7, #24]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	604b      	str	r3, [r1, #4]
 8001db0:	e006      	b.n	8001dc0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001db2:	4b16      	ldr	r3, [pc, #88]	@ (8001e0c <HAL_GPIO_Init+0x2d0>)
 8001db4:	685a      	ldr	r2, [r3, #4]
 8001db6:	69bb      	ldr	r3, [r7, #24]
 8001db8:	43db      	mvns	r3, r3
 8001dba:	4914      	ldr	r1, [pc, #80]	@ (8001e0c <HAL_GPIO_Init+0x2d0>)
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d021      	beq.n	8001e10 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001dcc:	4b0f      	ldr	r3, [pc, #60]	@ (8001e0c <HAL_GPIO_Init+0x2d0>)
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	490e      	ldr	r1, [pc, #56]	@ (8001e0c <HAL_GPIO_Init+0x2d0>)
 8001dd2:	69bb      	ldr	r3, [r7, #24]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	600b      	str	r3, [r1, #0]
 8001dd8:	e021      	b.n	8001e1e <HAL_GPIO_Init+0x2e2>
 8001dda:	bf00      	nop
 8001ddc:	10320000 	.word	0x10320000
 8001de0:	10310000 	.word	0x10310000
 8001de4:	10220000 	.word	0x10220000
 8001de8:	10210000 	.word	0x10210000
 8001dec:	10120000 	.word	0x10120000
 8001df0:	10110000 	.word	0x10110000
 8001df4:	40021000 	.word	0x40021000
 8001df8:	40010000 	.word	0x40010000
 8001dfc:	40010800 	.word	0x40010800
 8001e00:	40010c00 	.word	0x40010c00
 8001e04:	40011000 	.word	0x40011000
 8001e08:	40011400 	.word	0x40011400
 8001e0c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e10:	4b0b      	ldr	r3, [pc, #44]	@ (8001e40 <HAL_GPIO_Init+0x304>)
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	69bb      	ldr	r3, [r7, #24]
 8001e16:	43db      	mvns	r3, r3
 8001e18:	4909      	ldr	r1, [pc, #36]	@ (8001e40 <HAL_GPIO_Init+0x304>)
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e20:	3301      	adds	r3, #1
 8001e22:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e2a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	f47f ae8e 	bne.w	8001b50 <HAL_GPIO_Init+0x14>
  }
}
 8001e34:	bf00      	nop
 8001e36:	bf00      	nop
 8001e38:	372c      	adds	r7, #44	@ 0x2c
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bc80      	pop	{r7}
 8001e3e:	4770      	bx	lr
 8001e40:	40010400 	.word	0x40010400

08001e44 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b085      	sub	sp, #20
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	689a      	ldr	r2, [r3, #8]
 8001e54:	887b      	ldrh	r3, [r7, #2]
 8001e56:	4013      	ands	r3, r2
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d002      	beq.n	8001e62 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	73fb      	strb	r3, [r7, #15]
 8001e60:	e001      	b.n	8001e66 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e62:	2300      	movs	r3, #0
 8001e64:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e66:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3714      	adds	r7, #20
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bc80      	pop	{r7}
 8001e70:	4770      	bx	lr

08001e72 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e72:	b480      	push	{r7}
 8001e74:	b083      	sub	sp, #12
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
 8001e7a:	460b      	mov	r3, r1
 8001e7c:	807b      	strh	r3, [r7, #2]
 8001e7e:	4613      	mov	r3, r2
 8001e80:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e82:	787b      	ldrb	r3, [r7, #1]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d003      	beq.n	8001e90 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e88:	887a      	ldrh	r2, [r7, #2]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e8e:	e003      	b.n	8001e98 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e90:	887b      	ldrh	r3, [r7, #2]
 8001e92:	041a      	lsls	r2, r3, #16
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	611a      	str	r2, [r3, #16]
}
 8001e98:	bf00      	nop
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bc80      	pop	{r7}
 8001ea0:	4770      	bx	lr
	...

08001ea4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	4603      	mov	r3, r0
 8001eac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001eae:	4b08      	ldr	r3, [pc, #32]	@ (8001ed0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001eb0:	695a      	ldr	r2, [r3, #20]
 8001eb2:	88fb      	ldrh	r3, [r7, #6]
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d006      	beq.n	8001ec8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001eba:	4a05      	ldr	r2, [pc, #20]	@ (8001ed0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ebc:	88fb      	ldrh	r3, [r7, #6]
 8001ebe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ec0:	88fb      	ldrh	r3, [r7, #6]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f000 f806 	bl	8001ed4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001ec8:	bf00      	nop
 8001eca:	3708      	adds	r7, #8
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	40010400 	.word	0x40010400

08001ed4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	4603      	mov	r3, r0
 8001edc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001ede:	bf00      	nop
 8001ee0:	370c      	adds	r7, #12
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bc80      	pop	{r7}
 8001ee6:	4770      	bx	lr

08001ee8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b086      	sub	sp, #24
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d101      	bne.n	8001efa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e272      	b.n	80023e0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0301 	and.w	r3, r3, #1
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	f000 8087 	beq.w	8002016 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f08:	4b92      	ldr	r3, [pc, #584]	@ (8002154 <HAL_RCC_OscConfig+0x26c>)
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f003 030c 	and.w	r3, r3, #12
 8001f10:	2b04      	cmp	r3, #4
 8001f12:	d00c      	beq.n	8001f2e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f14:	4b8f      	ldr	r3, [pc, #572]	@ (8002154 <HAL_RCC_OscConfig+0x26c>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f003 030c 	and.w	r3, r3, #12
 8001f1c:	2b08      	cmp	r3, #8
 8001f1e:	d112      	bne.n	8001f46 <HAL_RCC_OscConfig+0x5e>
 8001f20:	4b8c      	ldr	r3, [pc, #560]	@ (8002154 <HAL_RCC_OscConfig+0x26c>)
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f2c:	d10b      	bne.n	8001f46 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f2e:	4b89      	ldr	r3, [pc, #548]	@ (8002154 <HAL_RCC_OscConfig+0x26c>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d06c      	beq.n	8002014 <HAL_RCC_OscConfig+0x12c>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d168      	bne.n	8002014 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e24c      	b.n	80023e0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f4e:	d106      	bne.n	8001f5e <HAL_RCC_OscConfig+0x76>
 8001f50:	4b80      	ldr	r3, [pc, #512]	@ (8002154 <HAL_RCC_OscConfig+0x26c>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a7f      	ldr	r2, [pc, #508]	@ (8002154 <HAL_RCC_OscConfig+0x26c>)
 8001f56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f5a:	6013      	str	r3, [r2, #0]
 8001f5c:	e02e      	b.n	8001fbc <HAL_RCC_OscConfig+0xd4>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d10c      	bne.n	8001f80 <HAL_RCC_OscConfig+0x98>
 8001f66:	4b7b      	ldr	r3, [pc, #492]	@ (8002154 <HAL_RCC_OscConfig+0x26c>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a7a      	ldr	r2, [pc, #488]	@ (8002154 <HAL_RCC_OscConfig+0x26c>)
 8001f6c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f70:	6013      	str	r3, [r2, #0]
 8001f72:	4b78      	ldr	r3, [pc, #480]	@ (8002154 <HAL_RCC_OscConfig+0x26c>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a77      	ldr	r2, [pc, #476]	@ (8002154 <HAL_RCC_OscConfig+0x26c>)
 8001f78:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f7c:	6013      	str	r3, [r2, #0]
 8001f7e:	e01d      	b.n	8001fbc <HAL_RCC_OscConfig+0xd4>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f88:	d10c      	bne.n	8001fa4 <HAL_RCC_OscConfig+0xbc>
 8001f8a:	4b72      	ldr	r3, [pc, #456]	@ (8002154 <HAL_RCC_OscConfig+0x26c>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a71      	ldr	r2, [pc, #452]	@ (8002154 <HAL_RCC_OscConfig+0x26c>)
 8001f90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f94:	6013      	str	r3, [r2, #0]
 8001f96:	4b6f      	ldr	r3, [pc, #444]	@ (8002154 <HAL_RCC_OscConfig+0x26c>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a6e      	ldr	r2, [pc, #440]	@ (8002154 <HAL_RCC_OscConfig+0x26c>)
 8001f9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fa0:	6013      	str	r3, [r2, #0]
 8001fa2:	e00b      	b.n	8001fbc <HAL_RCC_OscConfig+0xd4>
 8001fa4:	4b6b      	ldr	r3, [pc, #428]	@ (8002154 <HAL_RCC_OscConfig+0x26c>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a6a      	ldr	r2, [pc, #424]	@ (8002154 <HAL_RCC_OscConfig+0x26c>)
 8001faa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fae:	6013      	str	r3, [r2, #0]
 8001fb0:	4b68      	ldr	r3, [pc, #416]	@ (8002154 <HAL_RCC_OscConfig+0x26c>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a67      	ldr	r2, [pc, #412]	@ (8002154 <HAL_RCC_OscConfig+0x26c>)
 8001fb6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001fba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d013      	beq.n	8001fec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc4:	f7ff fbcc 	bl	8001760 <HAL_GetTick>
 8001fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fca:	e008      	b.n	8001fde <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fcc:	f7ff fbc8 	bl	8001760 <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	2b64      	cmp	r3, #100	@ 0x64
 8001fd8:	d901      	bls.n	8001fde <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e200      	b.n	80023e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fde:	4b5d      	ldr	r3, [pc, #372]	@ (8002154 <HAL_RCC_OscConfig+0x26c>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d0f0      	beq.n	8001fcc <HAL_RCC_OscConfig+0xe4>
 8001fea:	e014      	b.n	8002016 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fec:	f7ff fbb8 	bl	8001760 <HAL_GetTick>
 8001ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ff2:	e008      	b.n	8002006 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ff4:	f7ff fbb4 	bl	8001760 <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	2b64      	cmp	r3, #100	@ 0x64
 8002000:	d901      	bls.n	8002006 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e1ec      	b.n	80023e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002006:	4b53      	ldr	r3, [pc, #332]	@ (8002154 <HAL_RCC_OscConfig+0x26c>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d1f0      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x10c>
 8002012:	e000      	b.n	8002016 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002014:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	2b00      	cmp	r3, #0
 8002020:	d063      	beq.n	80020ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002022:	4b4c      	ldr	r3, [pc, #304]	@ (8002154 <HAL_RCC_OscConfig+0x26c>)
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f003 030c 	and.w	r3, r3, #12
 800202a:	2b00      	cmp	r3, #0
 800202c:	d00b      	beq.n	8002046 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800202e:	4b49      	ldr	r3, [pc, #292]	@ (8002154 <HAL_RCC_OscConfig+0x26c>)
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f003 030c 	and.w	r3, r3, #12
 8002036:	2b08      	cmp	r3, #8
 8002038:	d11c      	bne.n	8002074 <HAL_RCC_OscConfig+0x18c>
 800203a:	4b46      	ldr	r3, [pc, #280]	@ (8002154 <HAL_RCC_OscConfig+0x26c>)
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d116      	bne.n	8002074 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002046:	4b43      	ldr	r3, [pc, #268]	@ (8002154 <HAL_RCC_OscConfig+0x26c>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0302 	and.w	r3, r3, #2
 800204e:	2b00      	cmp	r3, #0
 8002050:	d005      	beq.n	800205e <HAL_RCC_OscConfig+0x176>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	691b      	ldr	r3, [r3, #16]
 8002056:	2b01      	cmp	r3, #1
 8002058:	d001      	beq.n	800205e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e1c0      	b.n	80023e0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800205e:	4b3d      	ldr	r3, [pc, #244]	@ (8002154 <HAL_RCC_OscConfig+0x26c>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	695b      	ldr	r3, [r3, #20]
 800206a:	00db      	lsls	r3, r3, #3
 800206c:	4939      	ldr	r1, [pc, #228]	@ (8002154 <HAL_RCC_OscConfig+0x26c>)
 800206e:	4313      	orrs	r3, r2
 8002070:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002072:	e03a      	b.n	80020ea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	691b      	ldr	r3, [r3, #16]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d020      	beq.n	80020be <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800207c:	4b36      	ldr	r3, [pc, #216]	@ (8002158 <HAL_RCC_OscConfig+0x270>)
 800207e:	2201      	movs	r2, #1
 8002080:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002082:	f7ff fb6d 	bl	8001760 <HAL_GetTick>
 8002086:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002088:	e008      	b.n	800209c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800208a:	f7ff fb69 	bl	8001760 <HAL_GetTick>
 800208e:	4602      	mov	r2, r0
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	2b02      	cmp	r3, #2
 8002096:	d901      	bls.n	800209c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002098:	2303      	movs	r3, #3
 800209a:	e1a1      	b.n	80023e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800209c:	4b2d      	ldr	r3, [pc, #180]	@ (8002154 <HAL_RCC_OscConfig+0x26c>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0302 	and.w	r3, r3, #2
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d0f0      	beq.n	800208a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020a8:	4b2a      	ldr	r3, [pc, #168]	@ (8002154 <HAL_RCC_OscConfig+0x26c>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	695b      	ldr	r3, [r3, #20]
 80020b4:	00db      	lsls	r3, r3, #3
 80020b6:	4927      	ldr	r1, [pc, #156]	@ (8002154 <HAL_RCC_OscConfig+0x26c>)
 80020b8:	4313      	orrs	r3, r2
 80020ba:	600b      	str	r3, [r1, #0]
 80020bc:	e015      	b.n	80020ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020be:	4b26      	ldr	r3, [pc, #152]	@ (8002158 <HAL_RCC_OscConfig+0x270>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c4:	f7ff fb4c 	bl	8001760 <HAL_GetTick>
 80020c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020ca:	e008      	b.n	80020de <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020cc:	f7ff fb48 	bl	8001760 <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d901      	bls.n	80020de <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e180      	b.n	80023e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020de:	4b1d      	ldr	r3, [pc, #116]	@ (8002154 <HAL_RCC_OscConfig+0x26c>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d1f0      	bne.n	80020cc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0308 	and.w	r3, r3, #8
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d03a      	beq.n	800216c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	699b      	ldr	r3, [r3, #24]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d019      	beq.n	8002132 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020fe:	4b17      	ldr	r3, [pc, #92]	@ (800215c <HAL_RCC_OscConfig+0x274>)
 8002100:	2201      	movs	r2, #1
 8002102:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002104:	f7ff fb2c 	bl	8001760 <HAL_GetTick>
 8002108:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800210a:	e008      	b.n	800211e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800210c:	f7ff fb28 	bl	8001760 <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	2b02      	cmp	r3, #2
 8002118:	d901      	bls.n	800211e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e160      	b.n	80023e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800211e:	4b0d      	ldr	r3, [pc, #52]	@ (8002154 <HAL_RCC_OscConfig+0x26c>)
 8002120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002122:	f003 0302 	and.w	r3, r3, #2
 8002126:	2b00      	cmp	r3, #0
 8002128:	d0f0      	beq.n	800210c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800212a:	2001      	movs	r0, #1
 800212c:	f000 face 	bl	80026cc <RCC_Delay>
 8002130:	e01c      	b.n	800216c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002132:	4b0a      	ldr	r3, [pc, #40]	@ (800215c <HAL_RCC_OscConfig+0x274>)
 8002134:	2200      	movs	r2, #0
 8002136:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002138:	f7ff fb12 	bl	8001760 <HAL_GetTick>
 800213c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800213e:	e00f      	b.n	8002160 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002140:	f7ff fb0e 	bl	8001760 <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	2b02      	cmp	r3, #2
 800214c:	d908      	bls.n	8002160 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	e146      	b.n	80023e0 <HAL_RCC_OscConfig+0x4f8>
 8002152:	bf00      	nop
 8002154:	40021000 	.word	0x40021000
 8002158:	42420000 	.word	0x42420000
 800215c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002160:	4b92      	ldr	r3, [pc, #584]	@ (80023ac <HAL_RCC_OscConfig+0x4c4>)
 8002162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002164:	f003 0302 	and.w	r3, r3, #2
 8002168:	2b00      	cmp	r3, #0
 800216a:	d1e9      	bne.n	8002140 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0304 	and.w	r3, r3, #4
 8002174:	2b00      	cmp	r3, #0
 8002176:	f000 80a6 	beq.w	80022c6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800217a:	2300      	movs	r3, #0
 800217c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800217e:	4b8b      	ldr	r3, [pc, #556]	@ (80023ac <HAL_RCC_OscConfig+0x4c4>)
 8002180:	69db      	ldr	r3, [r3, #28]
 8002182:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d10d      	bne.n	80021a6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800218a:	4b88      	ldr	r3, [pc, #544]	@ (80023ac <HAL_RCC_OscConfig+0x4c4>)
 800218c:	69db      	ldr	r3, [r3, #28]
 800218e:	4a87      	ldr	r2, [pc, #540]	@ (80023ac <HAL_RCC_OscConfig+0x4c4>)
 8002190:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002194:	61d3      	str	r3, [r2, #28]
 8002196:	4b85      	ldr	r3, [pc, #532]	@ (80023ac <HAL_RCC_OscConfig+0x4c4>)
 8002198:	69db      	ldr	r3, [r3, #28]
 800219a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800219e:	60bb      	str	r3, [r7, #8]
 80021a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021a2:	2301      	movs	r3, #1
 80021a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021a6:	4b82      	ldr	r3, [pc, #520]	@ (80023b0 <HAL_RCC_OscConfig+0x4c8>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d118      	bne.n	80021e4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021b2:	4b7f      	ldr	r3, [pc, #508]	@ (80023b0 <HAL_RCC_OscConfig+0x4c8>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a7e      	ldr	r2, [pc, #504]	@ (80023b0 <HAL_RCC_OscConfig+0x4c8>)
 80021b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021be:	f7ff facf 	bl	8001760 <HAL_GetTick>
 80021c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021c4:	e008      	b.n	80021d8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021c6:	f7ff facb 	bl	8001760 <HAL_GetTick>
 80021ca:	4602      	mov	r2, r0
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	1ad3      	subs	r3, r2, r3
 80021d0:	2b64      	cmp	r3, #100	@ 0x64
 80021d2:	d901      	bls.n	80021d8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80021d4:	2303      	movs	r3, #3
 80021d6:	e103      	b.n	80023e0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021d8:	4b75      	ldr	r3, [pc, #468]	@ (80023b0 <HAL_RCC_OscConfig+0x4c8>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d0f0      	beq.n	80021c6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d106      	bne.n	80021fa <HAL_RCC_OscConfig+0x312>
 80021ec:	4b6f      	ldr	r3, [pc, #444]	@ (80023ac <HAL_RCC_OscConfig+0x4c4>)
 80021ee:	6a1b      	ldr	r3, [r3, #32]
 80021f0:	4a6e      	ldr	r2, [pc, #440]	@ (80023ac <HAL_RCC_OscConfig+0x4c4>)
 80021f2:	f043 0301 	orr.w	r3, r3, #1
 80021f6:	6213      	str	r3, [r2, #32]
 80021f8:	e02d      	b.n	8002256 <HAL_RCC_OscConfig+0x36e>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	68db      	ldr	r3, [r3, #12]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d10c      	bne.n	800221c <HAL_RCC_OscConfig+0x334>
 8002202:	4b6a      	ldr	r3, [pc, #424]	@ (80023ac <HAL_RCC_OscConfig+0x4c4>)
 8002204:	6a1b      	ldr	r3, [r3, #32]
 8002206:	4a69      	ldr	r2, [pc, #420]	@ (80023ac <HAL_RCC_OscConfig+0x4c4>)
 8002208:	f023 0301 	bic.w	r3, r3, #1
 800220c:	6213      	str	r3, [r2, #32]
 800220e:	4b67      	ldr	r3, [pc, #412]	@ (80023ac <HAL_RCC_OscConfig+0x4c4>)
 8002210:	6a1b      	ldr	r3, [r3, #32]
 8002212:	4a66      	ldr	r2, [pc, #408]	@ (80023ac <HAL_RCC_OscConfig+0x4c4>)
 8002214:	f023 0304 	bic.w	r3, r3, #4
 8002218:	6213      	str	r3, [r2, #32]
 800221a:	e01c      	b.n	8002256 <HAL_RCC_OscConfig+0x36e>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	2b05      	cmp	r3, #5
 8002222:	d10c      	bne.n	800223e <HAL_RCC_OscConfig+0x356>
 8002224:	4b61      	ldr	r3, [pc, #388]	@ (80023ac <HAL_RCC_OscConfig+0x4c4>)
 8002226:	6a1b      	ldr	r3, [r3, #32]
 8002228:	4a60      	ldr	r2, [pc, #384]	@ (80023ac <HAL_RCC_OscConfig+0x4c4>)
 800222a:	f043 0304 	orr.w	r3, r3, #4
 800222e:	6213      	str	r3, [r2, #32]
 8002230:	4b5e      	ldr	r3, [pc, #376]	@ (80023ac <HAL_RCC_OscConfig+0x4c4>)
 8002232:	6a1b      	ldr	r3, [r3, #32]
 8002234:	4a5d      	ldr	r2, [pc, #372]	@ (80023ac <HAL_RCC_OscConfig+0x4c4>)
 8002236:	f043 0301 	orr.w	r3, r3, #1
 800223a:	6213      	str	r3, [r2, #32]
 800223c:	e00b      	b.n	8002256 <HAL_RCC_OscConfig+0x36e>
 800223e:	4b5b      	ldr	r3, [pc, #364]	@ (80023ac <HAL_RCC_OscConfig+0x4c4>)
 8002240:	6a1b      	ldr	r3, [r3, #32]
 8002242:	4a5a      	ldr	r2, [pc, #360]	@ (80023ac <HAL_RCC_OscConfig+0x4c4>)
 8002244:	f023 0301 	bic.w	r3, r3, #1
 8002248:	6213      	str	r3, [r2, #32]
 800224a:	4b58      	ldr	r3, [pc, #352]	@ (80023ac <HAL_RCC_OscConfig+0x4c4>)
 800224c:	6a1b      	ldr	r3, [r3, #32]
 800224e:	4a57      	ldr	r2, [pc, #348]	@ (80023ac <HAL_RCC_OscConfig+0x4c4>)
 8002250:	f023 0304 	bic.w	r3, r3, #4
 8002254:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	68db      	ldr	r3, [r3, #12]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d015      	beq.n	800228a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800225e:	f7ff fa7f 	bl	8001760 <HAL_GetTick>
 8002262:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002264:	e00a      	b.n	800227c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002266:	f7ff fa7b 	bl	8001760 <HAL_GetTick>
 800226a:	4602      	mov	r2, r0
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002274:	4293      	cmp	r3, r2
 8002276:	d901      	bls.n	800227c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002278:	2303      	movs	r3, #3
 800227a:	e0b1      	b.n	80023e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800227c:	4b4b      	ldr	r3, [pc, #300]	@ (80023ac <HAL_RCC_OscConfig+0x4c4>)
 800227e:	6a1b      	ldr	r3, [r3, #32]
 8002280:	f003 0302 	and.w	r3, r3, #2
 8002284:	2b00      	cmp	r3, #0
 8002286:	d0ee      	beq.n	8002266 <HAL_RCC_OscConfig+0x37e>
 8002288:	e014      	b.n	80022b4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800228a:	f7ff fa69 	bl	8001760 <HAL_GetTick>
 800228e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002290:	e00a      	b.n	80022a8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002292:	f7ff fa65 	bl	8001760 <HAL_GetTick>
 8002296:	4602      	mov	r2, r0
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d901      	bls.n	80022a8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80022a4:	2303      	movs	r3, #3
 80022a6:	e09b      	b.n	80023e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022a8:	4b40      	ldr	r3, [pc, #256]	@ (80023ac <HAL_RCC_OscConfig+0x4c4>)
 80022aa:	6a1b      	ldr	r3, [r3, #32]
 80022ac:	f003 0302 	and.w	r3, r3, #2
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d1ee      	bne.n	8002292 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80022b4:	7dfb      	ldrb	r3, [r7, #23]
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d105      	bne.n	80022c6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022ba:	4b3c      	ldr	r3, [pc, #240]	@ (80023ac <HAL_RCC_OscConfig+0x4c4>)
 80022bc:	69db      	ldr	r3, [r3, #28]
 80022be:	4a3b      	ldr	r2, [pc, #236]	@ (80023ac <HAL_RCC_OscConfig+0x4c4>)
 80022c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022c4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	69db      	ldr	r3, [r3, #28]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	f000 8087 	beq.w	80023de <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022d0:	4b36      	ldr	r3, [pc, #216]	@ (80023ac <HAL_RCC_OscConfig+0x4c4>)
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f003 030c 	and.w	r3, r3, #12
 80022d8:	2b08      	cmp	r3, #8
 80022da:	d061      	beq.n	80023a0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	69db      	ldr	r3, [r3, #28]
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	d146      	bne.n	8002372 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022e4:	4b33      	ldr	r3, [pc, #204]	@ (80023b4 <HAL_RCC_OscConfig+0x4cc>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ea:	f7ff fa39 	bl	8001760 <HAL_GetTick>
 80022ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022f0:	e008      	b.n	8002304 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022f2:	f7ff fa35 	bl	8001760 <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d901      	bls.n	8002304 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002300:	2303      	movs	r3, #3
 8002302:	e06d      	b.n	80023e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002304:	4b29      	ldr	r3, [pc, #164]	@ (80023ac <HAL_RCC_OscConfig+0x4c4>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d1f0      	bne.n	80022f2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6a1b      	ldr	r3, [r3, #32]
 8002314:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002318:	d108      	bne.n	800232c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800231a:	4b24      	ldr	r3, [pc, #144]	@ (80023ac <HAL_RCC_OscConfig+0x4c4>)
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	4921      	ldr	r1, [pc, #132]	@ (80023ac <HAL_RCC_OscConfig+0x4c4>)
 8002328:	4313      	orrs	r3, r2
 800232a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800232c:	4b1f      	ldr	r3, [pc, #124]	@ (80023ac <HAL_RCC_OscConfig+0x4c4>)
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6a19      	ldr	r1, [r3, #32]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800233c:	430b      	orrs	r3, r1
 800233e:	491b      	ldr	r1, [pc, #108]	@ (80023ac <HAL_RCC_OscConfig+0x4c4>)
 8002340:	4313      	orrs	r3, r2
 8002342:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002344:	4b1b      	ldr	r3, [pc, #108]	@ (80023b4 <HAL_RCC_OscConfig+0x4cc>)
 8002346:	2201      	movs	r2, #1
 8002348:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800234a:	f7ff fa09 	bl	8001760 <HAL_GetTick>
 800234e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002350:	e008      	b.n	8002364 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002352:	f7ff fa05 	bl	8001760 <HAL_GetTick>
 8002356:	4602      	mov	r2, r0
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	2b02      	cmp	r3, #2
 800235e:	d901      	bls.n	8002364 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002360:	2303      	movs	r3, #3
 8002362:	e03d      	b.n	80023e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002364:	4b11      	ldr	r3, [pc, #68]	@ (80023ac <HAL_RCC_OscConfig+0x4c4>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d0f0      	beq.n	8002352 <HAL_RCC_OscConfig+0x46a>
 8002370:	e035      	b.n	80023de <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002372:	4b10      	ldr	r3, [pc, #64]	@ (80023b4 <HAL_RCC_OscConfig+0x4cc>)
 8002374:	2200      	movs	r2, #0
 8002376:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002378:	f7ff f9f2 	bl	8001760 <HAL_GetTick>
 800237c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800237e:	e008      	b.n	8002392 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002380:	f7ff f9ee 	bl	8001760 <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	2b02      	cmp	r3, #2
 800238c:	d901      	bls.n	8002392 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e026      	b.n	80023e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002392:	4b06      	ldr	r3, [pc, #24]	@ (80023ac <HAL_RCC_OscConfig+0x4c4>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d1f0      	bne.n	8002380 <HAL_RCC_OscConfig+0x498>
 800239e:	e01e      	b.n	80023de <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	69db      	ldr	r3, [r3, #28]
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d107      	bne.n	80023b8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e019      	b.n	80023e0 <HAL_RCC_OscConfig+0x4f8>
 80023ac:	40021000 	.word	0x40021000
 80023b0:	40007000 	.word	0x40007000
 80023b4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80023b8:	4b0b      	ldr	r3, [pc, #44]	@ (80023e8 <HAL_RCC_OscConfig+0x500>)
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6a1b      	ldr	r3, [r3, #32]
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d106      	bne.n	80023da <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d001      	beq.n	80023de <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e000      	b.n	80023e0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80023de:	2300      	movs	r3, #0
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3718      	adds	r7, #24
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	40021000 	.word	0x40021000

080023ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b084      	sub	sp, #16
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d101      	bne.n	8002400 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e0d0      	b.n	80025a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002400:	4b6a      	ldr	r3, [pc, #424]	@ (80025ac <HAL_RCC_ClockConfig+0x1c0>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0307 	and.w	r3, r3, #7
 8002408:	683a      	ldr	r2, [r7, #0]
 800240a:	429a      	cmp	r2, r3
 800240c:	d910      	bls.n	8002430 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800240e:	4b67      	ldr	r3, [pc, #412]	@ (80025ac <HAL_RCC_ClockConfig+0x1c0>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f023 0207 	bic.w	r2, r3, #7
 8002416:	4965      	ldr	r1, [pc, #404]	@ (80025ac <HAL_RCC_ClockConfig+0x1c0>)
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	4313      	orrs	r3, r2
 800241c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800241e:	4b63      	ldr	r3, [pc, #396]	@ (80025ac <HAL_RCC_ClockConfig+0x1c0>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0307 	and.w	r3, r3, #7
 8002426:	683a      	ldr	r2, [r7, #0]
 8002428:	429a      	cmp	r2, r3
 800242a:	d001      	beq.n	8002430 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e0b8      	b.n	80025a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0302 	and.w	r3, r3, #2
 8002438:	2b00      	cmp	r3, #0
 800243a:	d020      	beq.n	800247e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0304 	and.w	r3, r3, #4
 8002444:	2b00      	cmp	r3, #0
 8002446:	d005      	beq.n	8002454 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002448:	4b59      	ldr	r3, [pc, #356]	@ (80025b0 <HAL_RCC_ClockConfig+0x1c4>)
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	4a58      	ldr	r2, [pc, #352]	@ (80025b0 <HAL_RCC_ClockConfig+0x1c4>)
 800244e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002452:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 0308 	and.w	r3, r3, #8
 800245c:	2b00      	cmp	r3, #0
 800245e:	d005      	beq.n	800246c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002460:	4b53      	ldr	r3, [pc, #332]	@ (80025b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	4a52      	ldr	r2, [pc, #328]	@ (80025b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002466:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800246a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800246c:	4b50      	ldr	r3, [pc, #320]	@ (80025b0 <HAL_RCC_ClockConfig+0x1c4>)
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	494d      	ldr	r1, [pc, #308]	@ (80025b0 <HAL_RCC_ClockConfig+0x1c4>)
 800247a:	4313      	orrs	r3, r2
 800247c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0301 	and.w	r3, r3, #1
 8002486:	2b00      	cmp	r3, #0
 8002488:	d040      	beq.n	800250c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	2b01      	cmp	r3, #1
 8002490:	d107      	bne.n	80024a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002492:	4b47      	ldr	r3, [pc, #284]	@ (80025b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d115      	bne.n	80024ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e07f      	b.n	80025a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d107      	bne.n	80024ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024aa:	4b41      	ldr	r3, [pc, #260]	@ (80025b0 <HAL_RCC_ClockConfig+0x1c4>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d109      	bne.n	80024ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e073      	b.n	80025a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024ba:	4b3d      	ldr	r3, [pc, #244]	@ (80025b0 <HAL_RCC_ClockConfig+0x1c4>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0302 	and.w	r3, r3, #2
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d101      	bne.n	80024ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e06b      	b.n	80025a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024ca:	4b39      	ldr	r3, [pc, #228]	@ (80025b0 <HAL_RCC_ClockConfig+0x1c4>)
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f023 0203 	bic.w	r2, r3, #3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	4936      	ldr	r1, [pc, #216]	@ (80025b0 <HAL_RCC_ClockConfig+0x1c4>)
 80024d8:	4313      	orrs	r3, r2
 80024da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024dc:	f7ff f940 	bl	8001760 <HAL_GetTick>
 80024e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024e2:	e00a      	b.n	80024fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024e4:	f7ff f93c 	bl	8001760 <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e053      	b.n	80025a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024fa:	4b2d      	ldr	r3, [pc, #180]	@ (80025b0 <HAL_RCC_ClockConfig+0x1c4>)
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f003 020c 	and.w	r2, r3, #12
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	429a      	cmp	r2, r3
 800250a:	d1eb      	bne.n	80024e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800250c:	4b27      	ldr	r3, [pc, #156]	@ (80025ac <HAL_RCC_ClockConfig+0x1c0>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0307 	and.w	r3, r3, #7
 8002514:	683a      	ldr	r2, [r7, #0]
 8002516:	429a      	cmp	r2, r3
 8002518:	d210      	bcs.n	800253c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800251a:	4b24      	ldr	r3, [pc, #144]	@ (80025ac <HAL_RCC_ClockConfig+0x1c0>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f023 0207 	bic.w	r2, r3, #7
 8002522:	4922      	ldr	r1, [pc, #136]	@ (80025ac <HAL_RCC_ClockConfig+0x1c0>)
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	4313      	orrs	r3, r2
 8002528:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800252a:	4b20      	ldr	r3, [pc, #128]	@ (80025ac <HAL_RCC_ClockConfig+0x1c0>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0307 	and.w	r3, r3, #7
 8002532:	683a      	ldr	r2, [r7, #0]
 8002534:	429a      	cmp	r2, r3
 8002536:	d001      	beq.n	800253c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e032      	b.n	80025a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0304 	and.w	r3, r3, #4
 8002544:	2b00      	cmp	r3, #0
 8002546:	d008      	beq.n	800255a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002548:	4b19      	ldr	r3, [pc, #100]	@ (80025b0 <HAL_RCC_ClockConfig+0x1c4>)
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	4916      	ldr	r1, [pc, #88]	@ (80025b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002556:	4313      	orrs	r3, r2
 8002558:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0308 	and.w	r3, r3, #8
 8002562:	2b00      	cmp	r3, #0
 8002564:	d009      	beq.n	800257a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002566:	4b12      	ldr	r3, [pc, #72]	@ (80025b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	691b      	ldr	r3, [r3, #16]
 8002572:	00db      	lsls	r3, r3, #3
 8002574:	490e      	ldr	r1, [pc, #56]	@ (80025b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002576:	4313      	orrs	r3, r2
 8002578:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800257a:	f000 f821 	bl	80025c0 <HAL_RCC_GetSysClockFreq>
 800257e:	4602      	mov	r2, r0
 8002580:	4b0b      	ldr	r3, [pc, #44]	@ (80025b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	091b      	lsrs	r3, r3, #4
 8002586:	f003 030f 	and.w	r3, r3, #15
 800258a:	490a      	ldr	r1, [pc, #40]	@ (80025b4 <HAL_RCC_ClockConfig+0x1c8>)
 800258c:	5ccb      	ldrb	r3, [r1, r3]
 800258e:	fa22 f303 	lsr.w	r3, r2, r3
 8002592:	4a09      	ldr	r2, [pc, #36]	@ (80025b8 <HAL_RCC_ClockConfig+0x1cc>)
 8002594:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002596:	4b09      	ldr	r3, [pc, #36]	@ (80025bc <HAL_RCC_ClockConfig+0x1d0>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4618      	mov	r0, r3
 800259c:	f7ff f89e 	bl	80016dc <HAL_InitTick>

  return HAL_OK;
 80025a0:	2300      	movs	r3, #0
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3710      	adds	r7, #16
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	40022000 	.word	0x40022000
 80025b0:	40021000 	.word	0x40021000
 80025b4:	0800551c 	.word	0x0800551c
 80025b8:	20000008 	.word	0x20000008
 80025bc:	2000000c 	.word	0x2000000c

080025c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b087      	sub	sp, #28
 80025c4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80025c6:	2300      	movs	r3, #0
 80025c8:	60fb      	str	r3, [r7, #12]
 80025ca:	2300      	movs	r3, #0
 80025cc:	60bb      	str	r3, [r7, #8]
 80025ce:	2300      	movs	r3, #0
 80025d0:	617b      	str	r3, [r7, #20]
 80025d2:	2300      	movs	r3, #0
 80025d4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80025d6:	2300      	movs	r3, #0
 80025d8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80025da:	4b1e      	ldr	r3, [pc, #120]	@ (8002654 <HAL_RCC_GetSysClockFreq+0x94>)
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	f003 030c 	and.w	r3, r3, #12
 80025e6:	2b04      	cmp	r3, #4
 80025e8:	d002      	beq.n	80025f0 <HAL_RCC_GetSysClockFreq+0x30>
 80025ea:	2b08      	cmp	r3, #8
 80025ec:	d003      	beq.n	80025f6 <HAL_RCC_GetSysClockFreq+0x36>
 80025ee:	e027      	b.n	8002640 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025f0:	4b19      	ldr	r3, [pc, #100]	@ (8002658 <HAL_RCC_GetSysClockFreq+0x98>)
 80025f2:	613b      	str	r3, [r7, #16]
      break;
 80025f4:	e027      	b.n	8002646 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	0c9b      	lsrs	r3, r3, #18
 80025fa:	f003 030f 	and.w	r3, r3, #15
 80025fe:	4a17      	ldr	r2, [pc, #92]	@ (800265c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002600:	5cd3      	ldrb	r3, [r2, r3]
 8002602:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d010      	beq.n	8002630 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800260e:	4b11      	ldr	r3, [pc, #68]	@ (8002654 <HAL_RCC_GetSysClockFreq+0x94>)
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	0c5b      	lsrs	r3, r3, #17
 8002614:	f003 0301 	and.w	r3, r3, #1
 8002618:	4a11      	ldr	r2, [pc, #68]	@ (8002660 <HAL_RCC_GetSysClockFreq+0xa0>)
 800261a:	5cd3      	ldrb	r3, [r2, r3]
 800261c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a0d      	ldr	r2, [pc, #52]	@ (8002658 <HAL_RCC_GetSysClockFreq+0x98>)
 8002622:	fb03 f202 	mul.w	r2, r3, r2
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	fbb2 f3f3 	udiv	r3, r2, r3
 800262c:	617b      	str	r3, [r7, #20]
 800262e:	e004      	b.n	800263a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	4a0c      	ldr	r2, [pc, #48]	@ (8002664 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002634:	fb02 f303 	mul.w	r3, r2, r3
 8002638:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	613b      	str	r3, [r7, #16]
      break;
 800263e:	e002      	b.n	8002646 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002640:	4b05      	ldr	r3, [pc, #20]	@ (8002658 <HAL_RCC_GetSysClockFreq+0x98>)
 8002642:	613b      	str	r3, [r7, #16]
      break;
 8002644:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002646:	693b      	ldr	r3, [r7, #16]
}
 8002648:	4618      	mov	r0, r3
 800264a:	371c      	adds	r7, #28
 800264c:	46bd      	mov	sp, r7
 800264e:	bc80      	pop	{r7}
 8002650:	4770      	bx	lr
 8002652:	bf00      	nop
 8002654:	40021000 	.word	0x40021000
 8002658:	007a1200 	.word	0x007a1200
 800265c:	08005534 	.word	0x08005534
 8002660:	08005544 	.word	0x08005544
 8002664:	003d0900 	.word	0x003d0900

08002668 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002668:	b480      	push	{r7}
 800266a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800266c:	4b02      	ldr	r3, [pc, #8]	@ (8002678 <HAL_RCC_GetHCLKFreq+0x10>)
 800266e:	681b      	ldr	r3, [r3, #0]
}
 8002670:	4618      	mov	r0, r3
 8002672:	46bd      	mov	sp, r7
 8002674:	bc80      	pop	{r7}
 8002676:	4770      	bx	lr
 8002678:	20000008 	.word	0x20000008

0800267c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002680:	f7ff fff2 	bl	8002668 <HAL_RCC_GetHCLKFreq>
 8002684:	4602      	mov	r2, r0
 8002686:	4b05      	ldr	r3, [pc, #20]	@ (800269c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	0a1b      	lsrs	r3, r3, #8
 800268c:	f003 0307 	and.w	r3, r3, #7
 8002690:	4903      	ldr	r1, [pc, #12]	@ (80026a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002692:	5ccb      	ldrb	r3, [r1, r3]
 8002694:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002698:	4618      	mov	r0, r3
 800269a:	bd80      	pop	{r7, pc}
 800269c:	40021000 	.word	0x40021000
 80026a0:	0800552c 	.word	0x0800552c

080026a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80026a8:	f7ff ffde 	bl	8002668 <HAL_RCC_GetHCLKFreq>
 80026ac:	4602      	mov	r2, r0
 80026ae:	4b05      	ldr	r3, [pc, #20]	@ (80026c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	0adb      	lsrs	r3, r3, #11
 80026b4:	f003 0307 	and.w	r3, r3, #7
 80026b8:	4903      	ldr	r1, [pc, #12]	@ (80026c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026ba:	5ccb      	ldrb	r3, [r1, r3]
 80026bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	40021000 	.word	0x40021000
 80026c8:	0800552c 	.word	0x0800552c

080026cc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b085      	sub	sp, #20
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80026d4:	4b0a      	ldr	r3, [pc, #40]	@ (8002700 <RCC_Delay+0x34>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a0a      	ldr	r2, [pc, #40]	@ (8002704 <RCC_Delay+0x38>)
 80026da:	fba2 2303 	umull	r2, r3, r2, r3
 80026de:	0a5b      	lsrs	r3, r3, #9
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	fb02 f303 	mul.w	r3, r2, r3
 80026e6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80026e8:	bf00      	nop
  }
  while (Delay --);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	1e5a      	subs	r2, r3, #1
 80026ee:	60fa      	str	r2, [r7, #12]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d1f9      	bne.n	80026e8 <RCC_Delay+0x1c>
}
 80026f4:	bf00      	nop
 80026f6:	bf00      	nop
 80026f8:	3714      	adds	r7, #20
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bc80      	pop	{r7}
 80026fe:	4770      	bx	lr
 8002700:	20000008 	.word	0x20000008
 8002704:	10624dd3 	.word	0x10624dd3

08002708 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d101      	bne.n	800271a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e041      	b.n	800279e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002720:	b2db      	uxtb	r3, r3
 8002722:	2b00      	cmp	r3, #0
 8002724:	d106      	bne.n	8002734 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2200      	movs	r2, #0
 800272a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f7fe fec6 	bl	80014c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2202      	movs	r2, #2
 8002738:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	3304      	adds	r3, #4
 8002744:	4619      	mov	r1, r3
 8002746:	4610      	mov	r0, r2
 8002748:	f000 fe9c 	bl	8003484 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2201      	movs	r2, #1
 8002750:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2201      	movs	r2, #1
 8002758:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2201      	movs	r2, #1
 8002760:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2201      	movs	r2, #1
 8002768:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2201      	movs	r2, #1
 8002770:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2201      	movs	r2, #1
 8002778:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2201      	movs	r2, #1
 8002780:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2201      	movs	r2, #1
 8002788:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2201      	movs	r2, #1
 8002790:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2201      	movs	r2, #1
 8002798:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800279c:	2300      	movs	r3, #0
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3708      	adds	r7, #8
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
	...

080027a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b085      	sub	sp, #20
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d001      	beq.n	80027c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e03a      	b.n	8002836 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2202      	movs	r2, #2
 80027c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	68da      	ldr	r2, [r3, #12]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f042 0201 	orr.w	r2, r2, #1
 80027d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a18      	ldr	r2, [pc, #96]	@ (8002840 <HAL_TIM_Base_Start_IT+0x98>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d00e      	beq.n	8002800 <HAL_TIM_Base_Start_IT+0x58>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027ea:	d009      	beq.n	8002800 <HAL_TIM_Base_Start_IT+0x58>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a14      	ldr	r2, [pc, #80]	@ (8002844 <HAL_TIM_Base_Start_IT+0x9c>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d004      	beq.n	8002800 <HAL_TIM_Base_Start_IT+0x58>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a13      	ldr	r2, [pc, #76]	@ (8002848 <HAL_TIM_Base_Start_IT+0xa0>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d111      	bne.n	8002824 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	f003 0307 	and.w	r3, r3, #7
 800280a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2b06      	cmp	r3, #6
 8002810:	d010      	beq.n	8002834 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f042 0201 	orr.w	r2, r2, #1
 8002820:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002822:	e007      	b.n	8002834 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f042 0201 	orr.w	r2, r2, #1
 8002832:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	3714      	adds	r7, #20
 800283a:	46bd      	mov	sp, r7
 800283c:	bc80      	pop	{r7}
 800283e:	4770      	bx	lr
 8002840:	40012c00 	.word	0x40012c00
 8002844:	40000400 	.word	0x40000400
 8002848:	40000800 	.word	0x40000800

0800284c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	68da      	ldr	r2, [r3, #12]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f022 0201 	bic.w	r2, r2, #1
 8002862:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	6a1a      	ldr	r2, [r3, #32]
 800286a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800286e:	4013      	ands	r3, r2
 8002870:	2b00      	cmp	r3, #0
 8002872:	d10f      	bne.n	8002894 <HAL_TIM_Base_Stop_IT+0x48>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	6a1a      	ldr	r2, [r3, #32]
 800287a:	f240 4344 	movw	r3, #1092	@ 0x444
 800287e:	4013      	ands	r3, r2
 8002880:	2b00      	cmp	r3, #0
 8002882:	d107      	bne.n	8002894 <HAL_TIM_Base_Stop_IT+0x48>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f022 0201 	bic.w	r2, r2, #1
 8002892:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800289c:	2300      	movs	r3, #0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	370c      	adds	r7, #12
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bc80      	pop	{r7}
 80028a6:	4770      	bx	lr

080028a8 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d101      	bne.n	80028ba <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e041      	b.n	800293e <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d106      	bne.n	80028d4 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f7fe fe32 	bl	8001538 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2202      	movs	r2, #2
 80028d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	3304      	adds	r3, #4
 80028e4:	4619      	mov	r1, r3
 80028e6:	4610      	mov	r0, r2
 80028e8:	f000 fdcc 	bl	8003484 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800293c:	2300      	movs	r3, #0
}
 800293e:	4618      	mov	r0, r3
 8002940:	3708      	adds	r7, #8
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
	...

08002948 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	2200      	movs	r2, #0
 8002958:	6839      	ldr	r1, [r7, #0]
 800295a:	4618      	mov	r0, r3
 800295c:	f001 f9bd 	bl	8003cda <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a29      	ldr	r2, [pc, #164]	@ (8002a0c <HAL_TIM_PWM_Stop+0xc4>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d117      	bne.n	800299a <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	6a1a      	ldr	r2, [r3, #32]
 8002970:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002974:	4013      	ands	r3, r2
 8002976:	2b00      	cmp	r3, #0
 8002978:	d10f      	bne.n	800299a <HAL_TIM_PWM_Stop+0x52>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	6a1a      	ldr	r2, [r3, #32]
 8002980:	f240 4344 	movw	r3, #1092	@ 0x444
 8002984:	4013      	ands	r3, r2
 8002986:	2b00      	cmp	r3, #0
 8002988:	d107      	bne.n	800299a <HAL_TIM_PWM_Stop+0x52>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002998:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	6a1a      	ldr	r2, [r3, #32]
 80029a0:	f241 1311 	movw	r3, #4369	@ 0x1111
 80029a4:	4013      	ands	r3, r2
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d10f      	bne.n	80029ca <HAL_TIM_PWM_Stop+0x82>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	6a1a      	ldr	r2, [r3, #32]
 80029b0:	f240 4344 	movw	r3, #1092	@ 0x444
 80029b4:	4013      	ands	r3, r2
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d107      	bne.n	80029ca <HAL_TIM_PWM_Stop+0x82>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f022 0201 	bic.w	r2, r2, #1
 80029c8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d104      	bne.n	80029da <HAL_TIM_PWM_Stop+0x92>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80029d8:	e013      	b.n	8002a02 <HAL_TIM_PWM_Stop+0xba>
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	2b04      	cmp	r3, #4
 80029de:	d104      	bne.n	80029ea <HAL_TIM_PWM_Stop+0xa2>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2201      	movs	r2, #1
 80029e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80029e8:	e00b      	b.n	8002a02 <HAL_TIM_PWM_Stop+0xba>
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	2b08      	cmp	r3, #8
 80029ee:	d104      	bne.n	80029fa <HAL_TIM_PWM_Stop+0xb2>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80029f8:	e003      	b.n	8002a02 <HAL_TIM_PWM_Stop+0xba>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2201      	movs	r2, #1
 80029fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8002a02:	2300      	movs	r3, #0
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3708      	adds	r7, #8
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	40012c00 	.word	0x40012c00

08002a10 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d101      	bne.n	8002a22 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e041      	b.n	8002aa6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d106      	bne.n	8002a3c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f000 f839 	bl	8002aae <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2202      	movs	r2, #2
 8002a40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	3304      	adds	r3, #4
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	4610      	mov	r0, r2
 8002a50:	f000 fd18 	bl	8003484 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2201      	movs	r2, #1
 8002a98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002aa4:	2300      	movs	r3, #0
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3708      	adds	r7, #8
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}

08002aae <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002aae:	b480      	push	{r7}
 8002ab0:	b083      	sub	sp, #12
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002ab6:	bf00      	nop
 8002ab8:	370c      	adds	r7, #12
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bc80      	pop	{r7}
 8002abe:	4770      	bx	lr

08002ac0 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b084      	sub	sp, #16
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d104      	bne.n	8002ada <HAL_TIM_IC_Start+0x1a>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	e013      	b.n	8002b02 <HAL_TIM_IC_Start+0x42>
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	2b04      	cmp	r3, #4
 8002ade:	d104      	bne.n	8002aea <HAL_TIM_IC_Start+0x2a>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	e00b      	b.n	8002b02 <HAL_TIM_IC_Start+0x42>
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	2b08      	cmp	r3, #8
 8002aee:	d104      	bne.n	8002afa <HAL_TIM_IC_Start+0x3a>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	e003      	b.n	8002b02 <HAL_TIM_IC_Start+0x42>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d104      	bne.n	8002b14 <HAL_TIM_IC_Start+0x54>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	e013      	b.n	8002b3c <HAL_TIM_IC_Start+0x7c>
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	2b04      	cmp	r3, #4
 8002b18:	d104      	bne.n	8002b24 <HAL_TIM_IC_Start+0x64>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	e00b      	b.n	8002b3c <HAL_TIM_IC_Start+0x7c>
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	2b08      	cmp	r3, #8
 8002b28:	d104      	bne.n	8002b34 <HAL_TIM_IC_Start+0x74>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	e003      	b.n	8002b3c <HAL_TIM_IC_Start+0x7c>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002b3e:	7bfb      	ldrb	r3, [r7, #15]
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d102      	bne.n	8002b4a <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002b44:	7bbb      	ldrb	r3, [r7, #14]
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d001      	beq.n	8002b4e <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e06d      	b.n	8002c2a <HAL_TIM_IC_Start+0x16a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d104      	bne.n	8002b5e <HAL_TIM_IC_Start+0x9e>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2202      	movs	r2, #2
 8002b58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b5c:	e013      	b.n	8002b86 <HAL_TIM_IC_Start+0xc6>
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	2b04      	cmp	r3, #4
 8002b62:	d104      	bne.n	8002b6e <HAL_TIM_IC_Start+0xae>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2202      	movs	r2, #2
 8002b68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002b6c:	e00b      	b.n	8002b86 <HAL_TIM_IC_Start+0xc6>
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	2b08      	cmp	r3, #8
 8002b72:	d104      	bne.n	8002b7e <HAL_TIM_IC_Start+0xbe>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2202      	movs	r2, #2
 8002b78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002b7c:	e003      	b.n	8002b86 <HAL_TIM_IC_Start+0xc6>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2202      	movs	r2, #2
 8002b82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d104      	bne.n	8002b96 <HAL_TIM_IC_Start+0xd6>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2202      	movs	r2, #2
 8002b90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002b94:	e013      	b.n	8002bbe <HAL_TIM_IC_Start+0xfe>
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	2b04      	cmp	r3, #4
 8002b9a:	d104      	bne.n	8002ba6 <HAL_TIM_IC_Start+0xe6>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2202      	movs	r2, #2
 8002ba0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002ba4:	e00b      	b.n	8002bbe <HAL_TIM_IC_Start+0xfe>
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	2b08      	cmp	r3, #8
 8002baa:	d104      	bne.n	8002bb6 <HAL_TIM_IC_Start+0xf6>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2202      	movs	r2, #2
 8002bb0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002bb4:	e003      	b.n	8002bbe <HAL_TIM_IC_Start+0xfe>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2202      	movs	r2, #2
 8002bba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	6839      	ldr	r1, [r7, #0]
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f001 f887 	bl	8003cda <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a18      	ldr	r2, [pc, #96]	@ (8002c34 <HAL_TIM_IC_Start+0x174>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d00e      	beq.n	8002bf4 <HAL_TIM_IC_Start+0x134>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bde:	d009      	beq.n	8002bf4 <HAL_TIM_IC_Start+0x134>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a14      	ldr	r2, [pc, #80]	@ (8002c38 <HAL_TIM_IC_Start+0x178>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d004      	beq.n	8002bf4 <HAL_TIM_IC_Start+0x134>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a13      	ldr	r2, [pc, #76]	@ (8002c3c <HAL_TIM_IC_Start+0x17c>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d111      	bne.n	8002c18 <HAL_TIM_IC_Start+0x158>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	f003 0307 	and.w	r3, r3, #7
 8002bfe:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	2b06      	cmp	r3, #6
 8002c04:	d010      	beq.n	8002c28 <HAL_TIM_IC_Start+0x168>
    {
      __HAL_TIM_ENABLE(htim);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f042 0201 	orr.w	r2, r2, #1
 8002c14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c16:	e007      	b.n	8002c28 <HAL_TIM_IC_Start+0x168>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f042 0201 	orr.w	r2, r2, #1
 8002c26:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c28:	2300      	movs	r3, #0
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3710      	adds	r7, #16
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	40012c00 	.word	0x40012c00
 8002c38:	40000400 	.word	0x40000400
 8002c3c:	40000800 	.word	0x40000800

08002c40 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d104      	bne.n	8002c5e <HAL_TIM_IC_Start_IT+0x1e>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	e013      	b.n	8002c86 <HAL_TIM_IC_Start_IT+0x46>
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	2b04      	cmp	r3, #4
 8002c62:	d104      	bne.n	8002c6e <HAL_TIM_IC_Start_IT+0x2e>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	e00b      	b.n	8002c86 <HAL_TIM_IC_Start_IT+0x46>
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	2b08      	cmp	r3, #8
 8002c72:	d104      	bne.n	8002c7e <HAL_TIM_IC_Start_IT+0x3e>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	e003      	b.n	8002c86 <HAL_TIM_IC_Start_IT+0x46>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d104      	bne.n	8002c98 <HAL_TIM_IC_Start_IT+0x58>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	e013      	b.n	8002cc0 <HAL_TIM_IC_Start_IT+0x80>
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	2b04      	cmp	r3, #4
 8002c9c:	d104      	bne.n	8002ca8 <HAL_TIM_IC_Start_IT+0x68>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	e00b      	b.n	8002cc0 <HAL_TIM_IC_Start_IT+0x80>
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	2b08      	cmp	r3, #8
 8002cac:	d104      	bne.n	8002cb8 <HAL_TIM_IC_Start_IT+0x78>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	e003      	b.n	8002cc0 <HAL_TIM_IC_Start_IT+0x80>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002cc2:	7bbb      	ldrb	r3, [r7, #14]
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d102      	bne.n	8002cce <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002cc8:	7b7b      	ldrb	r3, [r7, #13]
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d001      	beq.n	8002cd2 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e0b8      	b.n	8002e44 <HAL_TIM_IC_Start_IT+0x204>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d104      	bne.n	8002ce2 <HAL_TIM_IC_Start_IT+0xa2>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2202      	movs	r2, #2
 8002cdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ce0:	e013      	b.n	8002d0a <HAL_TIM_IC_Start_IT+0xca>
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	2b04      	cmp	r3, #4
 8002ce6:	d104      	bne.n	8002cf2 <HAL_TIM_IC_Start_IT+0xb2>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2202      	movs	r2, #2
 8002cec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002cf0:	e00b      	b.n	8002d0a <HAL_TIM_IC_Start_IT+0xca>
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	2b08      	cmp	r3, #8
 8002cf6:	d104      	bne.n	8002d02 <HAL_TIM_IC_Start_IT+0xc2>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2202      	movs	r2, #2
 8002cfc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002d00:	e003      	b.n	8002d0a <HAL_TIM_IC_Start_IT+0xca>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2202      	movs	r2, #2
 8002d06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d104      	bne.n	8002d1a <HAL_TIM_IC_Start_IT+0xda>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2202      	movs	r2, #2
 8002d14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002d18:	e013      	b.n	8002d42 <HAL_TIM_IC_Start_IT+0x102>
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	2b04      	cmp	r3, #4
 8002d1e:	d104      	bne.n	8002d2a <HAL_TIM_IC_Start_IT+0xea>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2202      	movs	r2, #2
 8002d24:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002d28:	e00b      	b.n	8002d42 <HAL_TIM_IC_Start_IT+0x102>
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	2b08      	cmp	r3, #8
 8002d2e:	d104      	bne.n	8002d3a <HAL_TIM_IC_Start_IT+0xfa>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2202      	movs	r2, #2
 8002d34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002d38:	e003      	b.n	8002d42 <HAL_TIM_IC_Start_IT+0x102>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2202      	movs	r2, #2
 8002d3e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	2b0c      	cmp	r3, #12
 8002d46:	d841      	bhi.n	8002dcc <HAL_TIM_IC_Start_IT+0x18c>
 8002d48:	a201      	add	r2, pc, #4	@ (adr r2, 8002d50 <HAL_TIM_IC_Start_IT+0x110>)
 8002d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d4e:	bf00      	nop
 8002d50:	08002d85 	.word	0x08002d85
 8002d54:	08002dcd 	.word	0x08002dcd
 8002d58:	08002dcd 	.word	0x08002dcd
 8002d5c:	08002dcd 	.word	0x08002dcd
 8002d60:	08002d97 	.word	0x08002d97
 8002d64:	08002dcd 	.word	0x08002dcd
 8002d68:	08002dcd 	.word	0x08002dcd
 8002d6c:	08002dcd 	.word	0x08002dcd
 8002d70:	08002da9 	.word	0x08002da9
 8002d74:	08002dcd 	.word	0x08002dcd
 8002d78:	08002dcd 	.word	0x08002dcd
 8002d7c:	08002dcd 	.word	0x08002dcd
 8002d80:	08002dbb 	.word	0x08002dbb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	68da      	ldr	r2, [r3, #12]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f042 0202 	orr.w	r2, r2, #2
 8002d92:	60da      	str	r2, [r3, #12]
      break;
 8002d94:	e01d      	b.n	8002dd2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	68da      	ldr	r2, [r3, #12]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f042 0204 	orr.w	r2, r2, #4
 8002da4:	60da      	str	r2, [r3, #12]
      break;
 8002da6:	e014      	b.n	8002dd2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	68da      	ldr	r2, [r3, #12]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f042 0208 	orr.w	r2, r2, #8
 8002db6:	60da      	str	r2, [r3, #12]
      break;
 8002db8:	e00b      	b.n	8002dd2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	68da      	ldr	r2, [r3, #12]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f042 0210 	orr.w	r2, r2, #16
 8002dc8:	60da      	str	r2, [r3, #12]
      break;
 8002dca:	e002      	b.n	8002dd2 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	73fb      	strb	r3, [r7, #15]
      break;
 8002dd0:	bf00      	nop
  }

  if (status == HAL_OK)
 8002dd2:	7bfb      	ldrb	r3, [r7, #15]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d134      	bne.n	8002e42 <HAL_TIM_IC_Start_IT+0x202>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2201      	movs	r2, #1
 8002dde:	6839      	ldr	r1, [r7, #0]
 8002de0:	4618      	mov	r0, r3
 8002de2:	f000 ff7a 	bl	8003cda <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a18      	ldr	r2, [pc, #96]	@ (8002e4c <HAL_TIM_IC_Start_IT+0x20c>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d00e      	beq.n	8002e0e <HAL_TIM_IC_Start_IT+0x1ce>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002df8:	d009      	beq.n	8002e0e <HAL_TIM_IC_Start_IT+0x1ce>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a14      	ldr	r2, [pc, #80]	@ (8002e50 <HAL_TIM_IC_Start_IT+0x210>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d004      	beq.n	8002e0e <HAL_TIM_IC_Start_IT+0x1ce>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a12      	ldr	r2, [pc, #72]	@ (8002e54 <HAL_TIM_IC_Start_IT+0x214>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d111      	bne.n	8002e32 <HAL_TIM_IC_Start_IT+0x1f2>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	f003 0307 	and.w	r3, r3, #7
 8002e18:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	2b06      	cmp	r3, #6
 8002e1e:	d010      	beq.n	8002e42 <HAL_TIM_IC_Start_IT+0x202>
      {
        __HAL_TIM_ENABLE(htim);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f042 0201 	orr.w	r2, r2, #1
 8002e2e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e30:	e007      	b.n	8002e42 <HAL_TIM_IC_Start_IT+0x202>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f042 0201 	orr.w	r2, r2, #1
 8002e40:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002e42:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3710      	adds	r7, #16
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	40012c00 	.word	0x40012c00
 8002e50:	40000400 	.word	0x40000400
 8002e54:	40000800 	.word	0x40000800

08002e58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	691b      	ldr	r3, [r3, #16]
 8002e6e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	f003 0302 	and.w	r3, r3, #2
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d020      	beq.n	8002ebc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	f003 0302 	and.w	r3, r3, #2
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d01b      	beq.n	8002ebc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f06f 0202 	mvn.w	r2, #2
 8002e8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2201      	movs	r2, #1
 8002e92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	699b      	ldr	r3, [r3, #24]
 8002e9a:	f003 0303 	and.w	r3, r3, #3
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d003      	beq.n	8002eaa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f000 fad2 	bl	800344c <HAL_TIM_IC_CaptureCallback>
 8002ea8:	e005      	b.n	8002eb6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f000 fac5 	bl	800343a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f000 fad4 	bl	800345e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	f003 0304 	and.w	r3, r3, #4
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d020      	beq.n	8002f08 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	f003 0304 	and.w	r3, r3, #4
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d01b      	beq.n	8002f08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f06f 0204 	mvn.w	r2, #4
 8002ed8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2202      	movs	r2, #2
 8002ede:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	699b      	ldr	r3, [r3, #24]
 8002ee6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d003      	beq.n	8002ef6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f000 faac 	bl	800344c <HAL_TIM_IC_CaptureCallback>
 8002ef4:	e005      	b.n	8002f02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f000 fa9f 	bl	800343a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	f000 faae 	bl	800345e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	f003 0308 	and.w	r3, r3, #8
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d020      	beq.n	8002f54 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	f003 0308 	and.w	r3, r3, #8
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d01b      	beq.n	8002f54 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f06f 0208 	mvn.w	r2, #8
 8002f24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2204      	movs	r2, #4
 8002f2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	69db      	ldr	r3, [r3, #28]
 8002f32:	f003 0303 	and.w	r3, r3, #3
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d003      	beq.n	8002f42 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f000 fa86 	bl	800344c <HAL_TIM_IC_CaptureCallback>
 8002f40:	e005      	b.n	8002f4e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f000 fa79 	bl	800343a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f000 fa88 	bl	800345e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	f003 0310 	and.w	r3, r3, #16
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d020      	beq.n	8002fa0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	f003 0310 	and.w	r3, r3, #16
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d01b      	beq.n	8002fa0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f06f 0210 	mvn.w	r2, #16
 8002f70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2208      	movs	r2, #8
 8002f76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	69db      	ldr	r3, [r3, #28]
 8002f7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d003      	beq.n	8002f8e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f000 fa60 	bl	800344c <HAL_TIM_IC_CaptureCallback>
 8002f8c:	e005      	b.n	8002f9a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f000 fa53 	bl	800343a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f000 fa62 	bl	800345e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	f003 0301 	and.w	r3, r3, #1
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d00c      	beq.n	8002fc4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	f003 0301 	and.w	r3, r3, #1
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d007      	beq.n	8002fc4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f06f 0201 	mvn.w	r2, #1
 8002fbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f7fd fc62 	bl	8000888 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d00c      	beq.n	8002fe8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d007      	beq.n	8002fe8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002fe0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f000 ff05 	bl	8003df2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d00c      	beq.n	800300c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d007      	beq.n	800300c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003004:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f000 fa32 	bl	8003470 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	f003 0320 	and.w	r3, r3, #32
 8003012:	2b00      	cmp	r3, #0
 8003014:	d00c      	beq.n	8003030 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	f003 0320 	and.w	r3, r3, #32
 800301c:	2b00      	cmp	r3, #0
 800301e:	d007      	beq.n	8003030 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f06f 0220 	mvn.w	r2, #32
 8003028:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f000 fed8 	bl	8003de0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003030:	bf00      	nop
 8003032:	3710      	adds	r7, #16
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}

08003038 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b086      	sub	sp, #24
 800303c:	af00      	add	r7, sp, #0
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	60b9      	str	r1, [r7, #8]
 8003042:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003044:	2300      	movs	r3, #0
 8003046:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800304e:	2b01      	cmp	r3, #1
 8003050:	d101      	bne.n	8003056 <HAL_TIM_OC_ConfigChannel+0x1e>
 8003052:	2302      	movs	r3, #2
 8003054:	e048      	b.n	80030e8 <HAL_TIM_OC_ConfigChannel+0xb0>
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2201      	movs	r2, #1
 800305a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2b0c      	cmp	r3, #12
 8003062:	d839      	bhi.n	80030d8 <HAL_TIM_OC_ConfigChannel+0xa0>
 8003064:	a201      	add	r2, pc, #4	@ (adr r2, 800306c <HAL_TIM_OC_ConfigChannel+0x34>)
 8003066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800306a:	bf00      	nop
 800306c:	080030a1 	.word	0x080030a1
 8003070:	080030d9 	.word	0x080030d9
 8003074:	080030d9 	.word	0x080030d9
 8003078:	080030d9 	.word	0x080030d9
 800307c:	080030af 	.word	0x080030af
 8003080:	080030d9 	.word	0x080030d9
 8003084:	080030d9 	.word	0x080030d9
 8003088:	080030d9 	.word	0x080030d9
 800308c:	080030bd 	.word	0x080030bd
 8003090:	080030d9 	.word	0x080030d9
 8003094:	080030d9 	.word	0x080030d9
 8003098:	080030d9 	.word	0x080030d9
 800309c:	080030cb 	.word	0x080030cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	68b9      	ldr	r1, [r7, #8]
 80030a6:	4618      	mov	r0, r3
 80030a8:	f000 fa5a 	bl	8003560 <TIM_OC1_SetConfig>
      break;
 80030ac:	e017      	b.n	80030de <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	68b9      	ldr	r1, [r7, #8]
 80030b4:	4618      	mov	r0, r3
 80030b6:	f000 fab9 	bl	800362c <TIM_OC2_SetConfig>
      break;
 80030ba:	e010      	b.n	80030de <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	68b9      	ldr	r1, [r7, #8]
 80030c2:	4618      	mov	r0, r3
 80030c4:	f000 fb1c 	bl	8003700 <TIM_OC3_SetConfig>
      break;
 80030c8:	e009      	b.n	80030de <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	68b9      	ldr	r1, [r7, #8]
 80030d0:	4618      	mov	r0, r3
 80030d2:	f000 fb7f 	bl	80037d4 <TIM_OC4_SetConfig>
      break;
 80030d6:	e002      	b.n	80030de <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	75fb      	strb	r3, [r7, #23]
      break;
 80030dc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80030e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3718      	adds	r7, #24
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}

080030f0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b086      	sub	sp, #24
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	60f8      	str	r0, [r7, #12]
 80030f8:	60b9      	str	r1, [r7, #8]
 80030fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030fc:	2300      	movs	r3, #0
 80030fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003106:	2b01      	cmp	r3, #1
 8003108:	d101      	bne.n	800310e <HAL_TIM_IC_ConfigChannel+0x1e>
 800310a:	2302      	movs	r3, #2
 800310c:	e088      	b.n	8003220 <HAL_TIM_IC_ConfigChannel+0x130>
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2201      	movs	r2, #1
 8003112:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d11b      	bne.n	8003154 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800312c:	f000 fc32 	bl	8003994 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	699a      	ldr	r2, [r3, #24]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f022 020c 	bic.w	r2, r2, #12
 800313e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	6999      	ldr	r1, [r3, #24]
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	689a      	ldr	r2, [r3, #8]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	430a      	orrs	r2, r1
 8003150:	619a      	str	r2, [r3, #24]
 8003152:	e060      	b.n	8003216 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2b04      	cmp	r3, #4
 8003158:	d11c      	bne.n	8003194 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800316a:	f000 fc9b 	bl	8003aa4 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	699a      	ldr	r2, [r3, #24]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800317c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	6999      	ldr	r1, [r3, #24]
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	021a      	lsls	r2, r3, #8
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	430a      	orrs	r2, r1
 8003190:	619a      	str	r2, [r3, #24]
 8003192:	e040      	b.n	8003216 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2b08      	cmp	r3, #8
 8003198:	d11b      	bne.n	80031d2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80031aa:	f000 fce6 	bl	8003b7a <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	69da      	ldr	r2, [r3, #28]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f022 020c 	bic.w	r2, r2, #12
 80031bc:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	69d9      	ldr	r1, [r3, #28]
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	689a      	ldr	r2, [r3, #8]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	430a      	orrs	r2, r1
 80031ce:	61da      	str	r2, [r3, #28]
 80031d0:	e021      	b.n	8003216 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2b0c      	cmp	r3, #12
 80031d6:	d11c      	bne.n	8003212 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80031e8:	f000 fd02 	bl	8003bf0 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	69da      	ldr	r2, [r3, #28]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80031fa:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	69d9      	ldr	r1, [r3, #28]
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	021a      	lsls	r2, r3, #8
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	430a      	orrs	r2, r1
 800320e:	61da      	str	r2, [r3, #28]
 8003210:	e001      	b.n	8003216 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2200      	movs	r2, #0
 800321a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800321e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003220:	4618      	mov	r0, r3
 8003222:	3718      	adds	r7, #24
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}

08003228 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003232:	2300      	movs	r3, #0
 8003234:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800323c:	2b01      	cmp	r3, #1
 800323e:	d101      	bne.n	8003244 <HAL_TIM_ConfigClockSource+0x1c>
 8003240:	2302      	movs	r3, #2
 8003242:	e0b4      	b.n	80033ae <HAL_TIM_ConfigClockSource+0x186>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2202      	movs	r2, #2
 8003250:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003262:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800326a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	68ba      	ldr	r2, [r7, #8]
 8003272:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800327c:	d03e      	beq.n	80032fc <HAL_TIM_ConfigClockSource+0xd4>
 800327e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003282:	f200 8087 	bhi.w	8003394 <HAL_TIM_ConfigClockSource+0x16c>
 8003286:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800328a:	f000 8086 	beq.w	800339a <HAL_TIM_ConfigClockSource+0x172>
 800328e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003292:	d87f      	bhi.n	8003394 <HAL_TIM_ConfigClockSource+0x16c>
 8003294:	2b70      	cmp	r3, #112	@ 0x70
 8003296:	d01a      	beq.n	80032ce <HAL_TIM_ConfigClockSource+0xa6>
 8003298:	2b70      	cmp	r3, #112	@ 0x70
 800329a:	d87b      	bhi.n	8003394 <HAL_TIM_ConfigClockSource+0x16c>
 800329c:	2b60      	cmp	r3, #96	@ 0x60
 800329e:	d050      	beq.n	8003342 <HAL_TIM_ConfigClockSource+0x11a>
 80032a0:	2b60      	cmp	r3, #96	@ 0x60
 80032a2:	d877      	bhi.n	8003394 <HAL_TIM_ConfigClockSource+0x16c>
 80032a4:	2b50      	cmp	r3, #80	@ 0x50
 80032a6:	d03c      	beq.n	8003322 <HAL_TIM_ConfigClockSource+0xfa>
 80032a8:	2b50      	cmp	r3, #80	@ 0x50
 80032aa:	d873      	bhi.n	8003394 <HAL_TIM_ConfigClockSource+0x16c>
 80032ac:	2b40      	cmp	r3, #64	@ 0x40
 80032ae:	d058      	beq.n	8003362 <HAL_TIM_ConfigClockSource+0x13a>
 80032b0:	2b40      	cmp	r3, #64	@ 0x40
 80032b2:	d86f      	bhi.n	8003394 <HAL_TIM_ConfigClockSource+0x16c>
 80032b4:	2b30      	cmp	r3, #48	@ 0x30
 80032b6:	d064      	beq.n	8003382 <HAL_TIM_ConfigClockSource+0x15a>
 80032b8:	2b30      	cmp	r3, #48	@ 0x30
 80032ba:	d86b      	bhi.n	8003394 <HAL_TIM_ConfigClockSource+0x16c>
 80032bc:	2b20      	cmp	r3, #32
 80032be:	d060      	beq.n	8003382 <HAL_TIM_ConfigClockSource+0x15a>
 80032c0:	2b20      	cmp	r3, #32
 80032c2:	d867      	bhi.n	8003394 <HAL_TIM_ConfigClockSource+0x16c>
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d05c      	beq.n	8003382 <HAL_TIM_ConfigClockSource+0x15a>
 80032c8:	2b10      	cmp	r3, #16
 80032ca:	d05a      	beq.n	8003382 <HAL_TIM_ConfigClockSource+0x15a>
 80032cc:	e062      	b.n	8003394 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80032de:	f000 fcdd 	bl	8003c9c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80032f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	68ba      	ldr	r2, [r7, #8]
 80032f8:	609a      	str	r2, [r3, #8]
      break;
 80032fa:	e04f      	b.n	800339c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800330c:	f000 fcc6 	bl	8003c9c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	689a      	ldr	r2, [r3, #8]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800331e:	609a      	str	r2, [r3, #8]
      break;
 8003320:	e03c      	b.n	800339c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800332e:	461a      	mov	r2, r3
 8003330:	f000 fb8a 	bl	8003a48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	2150      	movs	r1, #80	@ 0x50
 800333a:	4618      	mov	r0, r3
 800333c:	f000 fc94 	bl	8003c68 <TIM_ITRx_SetConfig>
      break;
 8003340:	e02c      	b.n	800339c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800334e:	461a      	mov	r2, r3
 8003350:	f000 fbe4 	bl	8003b1c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	2160      	movs	r1, #96	@ 0x60
 800335a:	4618      	mov	r0, r3
 800335c:	f000 fc84 	bl	8003c68 <TIM_ITRx_SetConfig>
      break;
 8003360:	e01c      	b.n	800339c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800336e:	461a      	mov	r2, r3
 8003370:	f000 fb6a 	bl	8003a48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	2140      	movs	r1, #64	@ 0x40
 800337a:	4618      	mov	r0, r3
 800337c:	f000 fc74 	bl	8003c68 <TIM_ITRx_SetConfig>
      break;
 8003380:	e00c      	b.n	800339c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4619      	mov	r1, r3
 800338c:	4610      	mov	r0, r2
 800338e:	f000 fc6b 	bl	8003c68 <TIM_ITRx_SetConfig>
      break;
 8003392:	e003      	b.n	800339c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	73fb      	strb	r3, [r7, #15]
      break;
 8003398:	e000      	b.n	800339c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800339a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2201      	movs	r2, #1
 80033a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80033ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3710      	adds	r7, #16
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}

080033b6 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80033b6:	b580      	push	{r7, lr}
 80033b8:	b082      	sub	sp, #8
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	6078      	str	r0, [r7, #4]
 80033be:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d101      	bne.n	80033ce <HAL_TIM_SlaveConfigSynchro+0x18>
 80033ca:	2302      	movs	r3, #2
 80033cc:	e031      	b.n	8003432 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2201      	movs	r2, #1
 80033d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2202      	movs	r2, #2
 80033da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80033de:	6839      	ldr	r1, [r7, #0]
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f000 fa45 	bl	8003870 <TIM_SlaveTimer_SetConfig>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d009      	beq.n	8003400 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e018      	b.n	8003432 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	68da      	ldr	r2, [r3, #12]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800340e:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	68da      	ldr	r2, [r3, #12]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800341e:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2200      	movs	r2, #0
 800342c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003430:	2300      	movs	r3, #0
}
 8003432:	4618      	mov	r0, r3
 8003434:	3708      	adds	r7, #8
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}

0800343a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800343a:	b480      	push	{r7}
 800343c:	b083      	sub	sp, #12
 800343e:	af00      	add	r7, sp, #0
 8003440:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003442:	bf00      	nop
 8003444:	370c      	adds	r7, #12
 8003446:	46bd      	mov	sp, r7
 8003448:	bc80      	pop	{r7}
 800344a:	4770      	bx	lr

0800344c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800344c:	b480      	push	{r7}
 800344e:	b083      	sub	sp, #12
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003454:	bf00      	nop
 8003456:	370c      	adds	r7, #12
 8003458:	46bd      	mov	sp, r7
 800345a:	bc80      	pop	{r7}
 800345c:	4770      	bx	lr

0800345e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800345e:	b480      	push	{r7}
 8003460:	b083      	sub	sp, #12
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003466:	bf00      	nop
 8003468:	370c      	adds	r7, #12
 800346a:	46bd      	mov	sp, r7
 800346c:	bc80      	pop	{r7}
 800346e:	4770      	bx	lr

08003470 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003478:	bf00      	nop
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	bc80      	pop	{r7}
 8003480:	4770      	bx	lr
	...

08003484 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003484:	b480      	push	{r7}
 8003486:	b085      	sub	sp, #20
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	4a2f      	ldr	r2, [pc, #188]	@ (8003554 <TIM_Base_SetConfig+0xd0>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d00b      	beq.n	80034b4 <TIM_Base_SetConfig+0x30>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034a2:	d007      	beq.n	80034b4 <TIM_Base_SetConfig+0x30>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	4a2c      	ldr	r2, [pc, #176]	@ (8003558 <TIM_Base_SetConfig+0xd4>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d003      	beq.n	80034b4 <TIM_Base_SetConfig+0x30>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	4a2b      	ldr	r2, [pc, #172]	@ (800355c <TIM_Base_SetConfig+0xd8>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d108      	bne.n	80034c6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	68fa      	ldr	r2, [r7, #12]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4a22      	ldr	r2, [pc, #136]	@ (8003554 <TIM_Base_SetConfig+0xd0>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d00b      	beq.n	80034e6 <TIM_Base_SetConfig+0x62>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034d4:	d007      	beq.n	80034e6 <TIM_Base_SetConfig+0x62>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4a1f      	ldr	r2, [pc, #124]	@ (8003558 <TIM_Base_SetConfig+0xd4>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d003      	beq.n	80034e6 <TIM_Base_SetConfig+0x62>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	4a1e      	ldr	r2, [pc, #120]	@ (800355c <TIM_Base_SetConfig+0xd8>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d108      	bne.n	80034f8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	68fa      	ldr	r2, [r7, #12]
 80034f4:	4313      	orrs	r3, r2
 80034f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	695b      	ldr	r3, [r3, #20]
 8003502:	4313      	orrs	r3, r2
 8003504:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	68fa      	ldr	r2, [r7, #12]
 800350a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	689a      	ldr	r2, [r3, #8]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	4a0d      	ldr	r2, [pc, #52]	@ (8003554 <TIM_Base_SetConfig+0xd0>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d103      	bne.n	800352c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	691a      	ldr	r2, [r3, #16]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2201      	movs	r2, #1
 8003530:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	691b      	ldr	r3, [r3, #16]
 8003536:	f003 0301 	and.w	r3, r3, #1
 800353a:	2b00      	cmp	r3, #0
 800353c:	d005      	beq.n	800354a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	691b      	ldr	r3, [r3, #16]
 8003542:	f023 0201 	bic.w	r2, r3, #1
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	611a      	str	r2, [r3, #16]
  }
}
 800354a:	bf00      	nop
 800354c:	3714      	adds	r7, #20
 800354e:	46bd      	mov	sp, r7
 8003550:	bc80      	pop	{r7}
 8003552:	4770      	bx	lr
 8003554:	40012c00 	.word	0x40012c00
 8003558:	40000400 	.word	0x40000400
 800355c:	40000800 	.word	0x40000800

08003560 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003560:	b480      	push	{r7}
 8003562:	b087      	sub	sp, #28
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6a1b      	ldr	r3, [r3, #32]
 800356e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6a1b      	ldr	r3, [r3, #32]
 8003574:	f023 0201 	bic.w	r2, r3, #1
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	699b      	ldr	r3, [r3, #24]
 8003586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800358e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f023 0303 	bic.w	r3, r3, #3
 8003596:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	68fa      	ldr	r2, [r7, #12]
 800359e:	4313      	orrs	r3, r2
 80035a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	f023 0302 	bic.w	r3, r3, #2
 80035a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	697a      	ldr	r2, [r7, #20]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	4a1c      	ldr	r2, [pc, #112]	@ (8003628 <TIM_OC1_SetConfig+0xc8>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d10c      	bne.n	80035d6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	f023 0308 	bic.w	r3, r3, #8
 80035c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	697a      	ldr	r2, [r7, #20]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	f023 0304 	bic.w	r3, r3, #4
 80035d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a13      	ldr	r2, [pc, #76]	@ (8003628 <TIM_OC1_SetConfig+0xc8>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d111      	bne.n	8003602 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80035e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80035ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	695b      	ldr	r3, [r3, #20]
 80035f2:	693a      	ldr	r2, [r7, #16]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	699b      	ldr	r3, [r3, #24]
 80035fc:	693a      	ldr	r2, [r7, #16]
 80035fe:	4313      	orrs	r3, r2
 8003600:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	693a      	ldr	r2, [r7, #16]
 8003606:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	68fa      	ldr	r2, [r7, #12]
 800360c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	685a      	ldr	r2, [r3, #4]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	697a      	ldr	r2, [r7, #20]
 800361a:	621a      	str	r2, [r3, #32]
}
 800361c:	bf00      	nop
 800361e:	371c      	adds	r7, #28
 8003620:	46bd      	mov	sp, r7
 8003622:	bc80      	pop	{r7}
 8003624:	4770      	bx	lr
 8003626:	bf00      	nop
 8003628:	40012c00 	.word	0x40012c00

0800362c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800362c:	b480      	push	{r7}
 800362e:	b087      	sub	sp, #28
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a1b      	ldr	r3, [r3, #32]
 800363a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6a1b      	ldr	r3, [r3, #32]
 8003640:	f023 0210 	bic.w	r2, r3, #16
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	699b      	ldr	r3, [r3, #24]
 8003652:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800365a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003662:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	021b      	lsls	r3, r3, #8
 800366a:	68fa      	ldr	r2, [r7, #12]
 800366c:	4313      	orrs	r3, r2
 800366e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	f023 0320 	bic.w	r3, r3, #32
 8003676:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	011b      	lsls	r3, r3, #4
 800367e:	697a      	ldr	r2, [r7, #20]
 8003680:	4313      	orrs	r3, r2
 8003682:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	4a1d      	ldr	r2, [pc, #116]	@ (80036fc <TIM_OC2_SetConfig+0xd0>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d10d      	bne.n	80036a8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003692:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	011b      	lsls	r3, r3, #4
 800369a:	697a      	ldr	r2, [r7, #20]
 800369c:	4313      	orrs	r3, r2
 800369e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80036a6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	4a14      	ldr	r2, [pc, #80]	@ (80036fc <TIM_OC2_SetConfig+0xd0>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d113      	bne.n	80036d8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80036b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80036be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	695b      	ldr	r3, [r3, #20]
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	693a      	ldr	r2, [r7, #16]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	699b      	ldr	r3, [r3, #24]
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	693a      	ldr	r2, [r7, #16]
 80036d4:	4313      	orrs	r3, r2
 80036d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	693a      	ldr	r2, [r7, #16]
 80036dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	68fa      	ldr	r2, [r7, #12]
 80036e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	685a      	ldr	r2, [r3, #4]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	697a      	ldr	r2, [r7, #20]
 80036f0:	621a      	str	r2, [r3, #32]
}
 80036f2:	bf00      	nop
 80036f4:	371c      	adds	r7, #28
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bc80      	pop	{r7}
 80036fa:	4770      	bx	lr
 80036fc:	40012c00 	.word	0x40012c00

08003700 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003700:	b480      	push	{r7}
 8003702:	b087      	sub	sp, #28
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6a1b      	ldr	r3, [r3, #32]
 800370e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6a1b      	ldr	r3, [r3, #32]
 8003714:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	69db      	ldr	r3, [r3, #28]
 8003726:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800372e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f023 0303 	bic.w	r3, r3, #3
 8003736:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	68fa      	ldr	r2, [r7, #12]
 800373e:	4313      	orrs	r3, r2
 8003740:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003748:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	021b      	lsls	r3, r3, #8
 8003750:	697a      	ldr	r2, [r7, #20]
 8003752:	4313      	orrs	r3, r2
 8003754:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	4a1d      	ldr	r2, [pc, #116]	@ (80037d0 <TIM_OC3_SetConfig+0xd0>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d10d      	bne.n	800377a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003764:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	021b      	lsls	r3, r3, #8
 800376c:	697a      	ldr	r2, [r7, #20]
 800376e:	4313      	orrs	r3, r2
 8003770:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003778:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a14      	ldr	r2, [pc, #80]	@ (80037d0 <TIM_OC3_SetConfig+0xd0>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d113      	bne.n	80037aa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003788:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003790:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	695b      	ldr	r3, [r3, #20]
 8003796:	011b      	lsls	r3, r3, #4
 8003798:	693a      	ldr	r2, [r7, #16]
 800379a:	4313      	orrs	r3, r2
 800379c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	699b      	ldr	r3, [r3, #24]
 80037a2:	011b      	lsls	r3, r3, #4
 80037a4:	693a      	ldr	r2, [r7, #16]
 80037a6:	4313      	orrs	r3, r2
 80037a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	693a      	ldr	r2, [r7, #16]
 80037ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	68fa      	ldr	r2, [r7, #12]
 80037b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	685a      	ldr	r2, [r3, #4]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	697a      	ldr	r2, [r7, #20]
 80037c2:	621a      	str	r2, [r3, #32]
}
 80037c4:	bf00      	nop
 80037c6:	371c      	adds	r7, #28
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bc80      	pop	{r7}
 80037cc:	4770      	bx	lr
 80037ce:	bf00      	nop
 80037d0:	40012c00 	.word	0x40012c00

080037d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b087      	sub	sp, #28
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a1b      	ldr	r3, [r3, #32]
 80037e2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6a1b      	ldr	r3, [r3, #32]
 80037e8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	69db      	ldr	r3, [r3, #28]
 80037fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003802:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800380a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	021b      	lsls	r3, r3, #8
 8003812:	68fa      	ldr	r2, [r7, #12]
 8003814:	4313      	orrs	r3, r2
 8003816:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800381e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	031b      	lsls	r3, r3, #12
 8003826:	693a      	ldr	r2, [r7, #16]
 8003828:	4313      	orrs	r3, r2
 800382a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	4a0f      	ldr	r2, [pc, #60]	@ (800386c <TIM_OC4_SetConfig+0x98>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d109      	bne.n	8003848 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800383a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	695b      	ldr	r3, [r3, #20]
 8003840:	019b      	lsls	r3, r3, #6
 8003842:	697a      	ldr	r2, [r7, #20]
 8003844:	4313      	orrs	r3, r2
 8003846:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	697a      	ldr	r2, [r7, #20]
 800384c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	68fa      	ldr	r2, [r7, #12]
 8003852:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	685a      	ldr	r2, [r3, #4]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	693a      	ldr	r2, [r7, #16]
 8003860:	621a      	str	r2, [r3, #32]
}
 8003862:	bf00      	nop
 8003864:	371c      	adds	r7, #28
 8003866:	46bd      	mov	sp, r7
 8003868:	bc80      	pop	{r7}
 800386a:	4770      	bx	lr
 800386c:	40012c00 	.word	0x40012c00

08003870 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b086      	sub	sp, #24
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800387a:	2300      	movs	r3, #0
 800387c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800388c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	693a      	ldr	r2, [r7, #16]
 8003894:	4313      	orrs	r3, r2
 8003896:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	f023 0307 	bic.w	r3, r3, #7
 800389e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	693a      	ldr	r2, [r7, #16]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	693a      	ldr	r2, [r7, #16]
 80038b0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	2b70      	cmp	r3, #112	@ 0x70
 80038b8:	d01a      	beq.n	80038f0 <TIM_SlaveTimer_SetConfig+0x80>
 80038ba:	2b70      	cmp	r3, #112	@ 0x70
 80038bc:	d860      	bhi.n	8003980 <TIM_SlaveTimer_SetConfig+0x110>
 80038be:	2b60      	cmp	r3, #96	@ 0x60
 80038c0:	d054      	beq.n	800396c <TIM_SlaveTimer_SetConfig+0xfc>
 80038c2:	2b60      	cmp	r3, #96	@ 0x60
 80038c4:	d85c      	bhi.n	8003980 <TIM_SlaveTimer_SetConfig+0x110>
 80038c6:	2b50      	cmp	r3, #80	@ 0x50
 80038c8:	d046      	beq.n	8003958 <TIM_SlaveTimer_SetConfig+0xe8>
 80038ca:	2b50      	cmp	r3, #80	@ 0x50
 80038cc:	d858      	bhi.n	8003980 <TIM_SlaveTimer_SetConfig+0x110>
 80038ce:	2b40      	cmp	r3, #64	@ 0x40
 80038d0:	d019      	beq.n	8003906 <TIM_SlaveTimer_SetConfig+0x96>
 80038d2:	2b40      	cmp	r3, #64	@ 0x40
 80038d4:	d854      	bhi.n	8003980 <TIM_SlaveTimer_SetConfig+0x110>
 80038d6:	2b30      	cmp	r3, #48	@ 0x30
 80038d8:	d055      	beq.n	8003986 <TIM_SlaveTimer_SetConfig+0x116>
 80038da:	2b30      	cmp	r3, #48	@ 0x30
 80038dc:	d850      	bhi.n	8003980 <TIM_SlaveTimer_SetConfig+0x110>
 80038de:	2b20      	cmp	r3, #32
 80038e0:	d051      	beq.n	8003986 <TIM_SlaveTimer_SetConfig+0x116>
 80038e2:	2b20      	cmp	r3, #32
 80038e4:	d84c      	bhi.n	8003980 <TIM_SlaveTimer_SetConfig+0x110>
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d04d      	beq.n	8003986 <TIM_SlaveTimer_SetConfig+0x116>
 80038ea:	2b10      	cmp	r3, #16
 80038ec:	d04b      	beq.n	8003986 <TIM_SlaveTimer_SetConfig+0x116>
 80038ee:	e047      	b.n	8003980 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8003900:	f000 f9cc 	bl	8003c9c <TIM_ETR_SetConfig>
      break;
 8003904:	e040      	b.n	8003988 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	2b05      	cmp	r3, #5
 800390c:	d101      	bne.n	8003912 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e03b      	b.n	800398a <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	6a1b      	ldr	r3, [r3, #32]
 8003918:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	6a1a      	ldr	r2, [r3, #32]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f022 0201 	bic.w	r2, r2, #1
 8003928:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	699b      	ldr	r3, [r3, #24]
 8003930:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003938:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	691b      	ldr	r3, [r3, #16]
 800393e:	011b      	lsls	r3, r3, #4
 8003940:	68ba      	ldr	r2, [r7, #8]
 8003942:	4313      	orrs	r3, r2
 8003944:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	68ba      	ldr	r2, [r7, #8]
 800394c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	68fa      	ldr	r2, [r7, #12]
 8003954:	621a      	str	r2, [r3, #32]
      break;
 8003956:	e017      	b.n	8003988 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003964:	461a      	mov	r2, r3
 8003966:	f000 f86f 	bl	8003a48 <TIM_TI1_ConfigInputStage>
      break;
 800396a:	e00d      	b.n	8003988 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003978:	461a      	mov	r2, r3
 800397a:	f000 f8cf 	bl	8003b1c <TIM_TI2_ConfigInputStage>
      break;
 800397e:	e003      	b.n	8003988 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	75fb      	strb	r3, [r7, #23]
      break;
 8003984:	e000      	b.n	8003988 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8003986:	bf00      	nop
  }

  return status;
 8003988:	7dfb      	ldrb	r3, [r7, #23]
}
 800398a:	4618      	mov	r0, r3
 800398c:	3718      	adds	r7, #24
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
	...

08003994 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003994:	b480      	push	{r7}
 8003996:	b087      	sub	sp, #28
 8003998:	af00      	add	r7, sp, #0
 800399a:	60f8      	str	r0, [r7, #12]
 800399c:	60b9      	str	r1, [r7, #8]
 800399e:	607a      	str	r2, [r7, #4]
 80039a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	6a1b      	ldr	r3, [r3, #32]
 80039a6:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6a1b      	ldr	r3, [r3, #32]
 80039ac:	f023 0201 	bic.w	r2, r3, #1
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	699b      	ldr	r3, [r3, #24]
 80039b8:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	4a1f      	ldr	r2, [pc, #124]	@ (8003a3c <TIM_TI1_SetConfig+0xa8>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d00b      	beq.n	80039da <TIM_TI1_SetConfig+0x46>
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039c8:	d007      	beq.n	80039da <TIM_TI1_SetConfig+0x46>
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	4a1c      	ldr	r2, [pc, #112]	@ (8003a40 <TIM_TI1_SetConfig+0xac>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d003      	beq.n	80039da <TIM_TI1_SetConfig+0x46>
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	4a1b      	ldr	r2, [pc, #108]	@ (8003a44 <TIM_TI1_SetConfig+0xb0>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d101      	bne.n	80039de <TIM_TI1_SetConfig+0x4a>
 80039da:	2301      	movs	r3, #1
 80039dc:	e000      	b.n	80039e0 <TIM_TI1_SetConfig+0x4c>
 80039de:	2300      	movs	r3, #0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d008      	beq.n	80039f6 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	f023 0303 	bic.w	r3, r3, #3
 80039ea:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80039ec:	697a      	ldr	r2, [r7, #20]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4313      	orrs	r3, r2
 80039f2:	617b      	str	r3, [r7, #20]
 80039f4:	e003      	b.n	80039fe <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	f043 0301 	orr.w	r3, r3, #1
 80039fc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003a04:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	011b      	lsls	r3, r3, #4
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	697a      	ldr	r2, [r7, #20]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	f023 030a 	bic.w	r3, r3, #10
 8003a18:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	f003 030a 	and.w	r3, r3, #10
 8003a20:	693a      	ldr	r2, [r7, #16]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	697a      	ldr	r2, [r7, #20]
 8003a2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	693a      	ldr	r2, [r7, #16]
 8003a30:	621a      	str	r2, [r3, #32]
}
 8003a32:	bf00      	nop
 8003a34:	371c      	adds	r7, #28
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bc80      	pop	{r7}
 8003a3a:	4770      	bx	lr
 8003a3c:	40012c00 	.word	0x40012c00
 8003a40:	40000400 	.word	0x40000400
 8003a44:	40000800 	.word	0x40000800

08003a48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b087      	sub	sp, #28
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	60f8      	str	r0, [r7, #12]
 8003a50:	60b9      	str	r1, [r7, #8]
 8003a52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6a1b      	ldr	r3, [r3, #32]
 8003a58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	6a1b      	ldr	r3, [r3, #32]
 8003a5e:	f023 0201 	bic.w	r2, r3, #1
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	699b      	ldr	r3, [r3, #24]
 8003a6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003a72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	011b      	lsls	r3, r3, #4
 8003a78:	693a      	ldr	r2, [r7, #16]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	f023 030a 	bic.w	r3, r3, #10
 8003a84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a86:	697a      	ldr	r2, [r7, #20]
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	693a      	ldr	r2, [r7, #16]
 8003a92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	697a      	ldr	r2, [r7, #20]
 8003a98:	621a      	str	r2, [r3, #32]
}
 8003a9a:	bf00      	nop
 8003a9c:	371c      	adds	r7, #28
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bc80      	pop	{r7}
 8003aa2:	4770      	bx	lr

08003aa4 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b087      	sub	sp, #28
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	60b9      	str	r1, [r7, #8]
 8003aae:	607a      	str	r2, [r7, #4]
 8003ab0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	6a1b      	ldr	r3, [r3, #32]
 8003ab6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6a1b      	ldr	r3, [r3, #32]
 8003abc:	f023 0210 	bic.w	r2, r3, #16
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	699b      	ldr	r3, [r3, #24]
 8003ac8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ad0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	021b      	lsls	r3, r3, #8
 8003ad6:	693a      	ldr	r2, [r7, #16]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003ae2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	031b      	lsls	r3, r3, #12
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	693a      	ldr	r2, [r7, #16]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003af6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	011b      	lsls	r3, r3, #4
 8003afc:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8003b00:	697a      	ldr	r2, [r7, #20]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	693a      	ldr	r2, [r7, #16]
 8003b0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	697a      	ldr	r2, [r7, #20]
 8003b10:	621a      	str	r2, [r3, #32]
}
 8003b12:	bf00      	nop
 8003b14:	371c      	adds	r7, #28
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bc80      	pop	{r7}
 8003b1a:	4770      	bx	lr

08003b1c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b087      	sub	sp, #28
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	60f8      	str	r0, [r7, #12]
 8003b24:	60b9      	str	r1, [r7, #8]
 8003b26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	6a1b      	ldr	r3, [r3, #32]
 8003b2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6a1b      	ldr	r3, [r3, #32]
 8003b32:	f023 0210 	bic.w	r2, r3, #16
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	699b      	ldr	r3, [r3, #24]
 8003b3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003b46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	031b      	lsls	r3, r3, #12
 8003b4c:	693a      	ldr	r2, [r7, #16]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003b58:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	011b      	lsls	r3, r3, #4
 8003b5e:	697a      	ldr	r2, [r7, #20]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	693a      	ldr	r2, [r7, #16]
 8003b68:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	697a      	ldr	r2, [r7, #20]
 8003b6e:	621a      	str	r2, [r3, #32]
}
 8003b70:	bf00      	nop
 8003b72:	371c      	adds	r7, #28
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bc80      	pop	{r7}
 8003b78:	4770      	bx	lr

08003b7a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003b7a:	b480      	push	{r7}
 8003b7c:	b087      	sub	sp, #28
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	60f8      	str	r0, [r7, #12]
 8003b82:	60b9      	str	r1, [r7, #8]
 8003b84:	607a      	str	r2, [r7, #4]
 8003b86:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6a1b      	ldr	r3, [r3, #32]
 8003b8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	6a1b      	ldr	r3, [r3, #32]
 8003b92:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	69db      	ldr	r3, [r3, #28]
 8003b9e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	f023 0303 	bic.w	r3, r3, #3
 8003ba6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8003ba8:	693a      	ldr	r2, [r7, #16]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003bb6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	011b      	lsls	r3, r3, #4
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	693a      	ldr	r2, [r7, #16]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003bca:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	021b      	lsls	r3, r3, #8
 8003bd0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003bd4:	697a      	ldr	r2, [r7, #20]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	693a      	ldr	r2, [r7, #16]
 8003bde:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	697a      	ldr	r2, [r7, #20]
 8003be4:	621a      	str	r2, [r3, #32]
}
 8003be6:	bf00      	nop
 8003be8:	371c      	adds	r7, #28
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bc80      	pop	{r7}
 8003bee:	4770      	bx	lr

08003bf0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b087      	sub	sp, #28
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	60b9      	str	r1, [r7, #8]
 8003bfa:	607a      	str	r2, [r7, #4]
 8003bfc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6a1b      	ldr	r3, [r3, #32]
 8003c02:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6a1b      	ldr	r3, [r3, #32]
 8003c08:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	69db      	ldr	r3, [r3, #28]
 8003c14:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c1c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	021b      	lsls	r3, r3, #8
 8003c22:	693a      	ldr	r2, [r7, #16]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003c2e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	031b      	lsls	r3, r3, #12
 8003c34:	b29b      	uxth	r3, r3
 8003c36:	693a      	ldr	r2, [r7, #16]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003c42:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	031b      	lsls	r3, r3, #12
 8003c48:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003c4c:	697a      	ldr	r2, [r7, #20]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	693a      	ldr	r2, [r7, #16]
 8003c56:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	697a      	ldr	r2, [r7, #20]
 8003c5c:	621a      	str	r2, [r3, #32]
}
 8003c5e:	bf00      	nop
 8003c60:	371c      	adds	r7, #28
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bc80      	pop	{r7}
 8003c66:	4770      	bx	lr

08003c68 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b085      	sub	sp, #20
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c7e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c80:	683a      	ldr	r2, [r7, #0]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	f043 0307 	orr.w	r3, r3, #7
 8003c8a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	68fa      	ldr	r2, [r7, #12]
 8003c90:	609a      	str	r2, [r3, #8]
}
 8003c92:	bf00      	nop
 8003c94:	3714      	adds	r7, #20
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bc80      	pop	{r7}
 8003c9a:	4770      	bx	lr

08003c9c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b087      	sub	sp, #28
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	60f8      	str	r0, [r7, #12]
 8003ca4:	60b9      	str	r1, [r7, #8]
 8003ca6:	607a      	str	r2, [r7, #4]
 8003ca8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003cb6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	021a      	lsls	r2, r3, #8
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	431a      	orrs	r2, r3
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	697a      	ldr	r2, [r7, #20]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	697a      	ldr	r2, [r7, #20]
 8003cce:	609a      	str	r2, [r3, #8]
}
 8003cd0:	bf00      	nop
 8003cd2:	371c      	adds	r7, #28
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bc80      	pop	{r7}
 8003cd8:	4770      	bx	lr

08003cda <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003cda:	b480      	push	{r7}
 8003cdc:	b087      	sub	sp, #28
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	60f8      	str	r0, [r7, #12]
 8003ce2:	60b9      	str	r1, [r7, #8]
 8003ce4:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	f003 031f 	and.w	r3, r3, #31
 8003cec:	2201      	movs	r2, #1
 8003cee:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf2:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6a1a      	ldr	r2, [r3, #32]
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	43db      	mvns	r3, r3
 8003cfc:	401a      	ands	r2, r3
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	6a1a      	ldr	r2, [r3, #32]
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	f003 031f 	and.w	r3, r3, #31
 8003d0c:	6879      	ldr	r1, [r7, #4]
 8003d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d12:	431a      	orrs	r2, r3
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	621a      	str	r2, [r3, #32]
}
 8003d18:	bf00      	nop
 8003d1a:	371c      	adds	r7, #28
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bc80      	pop	{r7}
 8003d20:	4770      	bx	lr
	...

08003d24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b085      	sub	sp, #20
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d101      	bne.n	8003d3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d38:	2302      	movs	r3, #2
 8003d3a:	e046      	b.n	8003dca <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2202      	movs	r2, #2
 8003d48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	68fa      	ldr	r2, [r7, #12]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	68fa      	ldr	r2, [r7, #12]
 8003d74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a16      	ldr	r2, [pc, #88]	@ (8003dd4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d00e      	beq.n	8003d9e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d88:	d009      	beq.n	8003d9e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a12      	ldr	r2, [pc, #72]	@ (8003dd8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d004      	beq.n	8003d9e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a10      	ldr	r2, [pc, #64]	@ (8003ddc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d10c      	bne.n	8003db8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003da4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	68ba      	ldr	r2, [r7, #8]
 8003dac:	4313      	orrs	r3, r2
 8003dae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	68ba      	ldr	r2, [r7, #8]
 8003db6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2201      	movs	r2, #1
 8003dbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003dc8:	2300      	movs	r3, #0
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3714      	adds	r7, #20
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bc80      	pop	{r7}
 8003dd2:	4770      	bx	lr
 8003dd4:	40012c00 	.word	0x40012c00
 8003dd8:	40000400 	.word	0x40000400
 8003ddc:	40000800 	.word	0x40000800

08003de0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003de8:	bf00      	nop
 8003dea:	370c      	adds	r7, #12
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bc80      	pop	{r7}
 8003df0:	4770      	bx	lr

08003df2 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003df2:	b480      	push	{r7}
 8003df4:	b083      	sub	sp, #12
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003dfa:	bf00      	nop
 8003dfc:	370c      	adds	r7, #12
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bc80      	pop	{r7}
 8003e02:	4770      	bx	lr

08003e04 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b082      	sub	sp, #8
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d101      	bne.n	8003e16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e042      	b.n	8003e9c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d106      	bne.n	8003e30 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f7fd fbd4 	bl	80015d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2224      	movs	r2, #36	@ 0x24
 8003e34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68da      	ldr	r2, [r3, #12]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003e46:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f000 fcff 	bl	800484c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	691a      	ldr	r2, [r3, #16]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003e5c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	695a      	ldr	r2, [r3, #20]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003e6c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	68da      	ldr	r2, [r3, #12]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003e7c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2200      	movs	r2, #0
 8003e82:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2220      	movs	r2, #32
 8003e88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2220      	movs	r2, #32
 8003e90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2200      	movs	r2, #0
 8003e98:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003e9a:	2300      	movs	r3, #0
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3708      	adds	r7, #8
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}

08003ea4 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b085      	sub	sp, #20
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	60f8      	str	r0, [r7, #12]
 8003eac:	60b9      	str	r1, [r7, #8]
 8003eae:	4613      	mov	r3, r2
 8003eb0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	2b20      	cmp	r3, #32
 8003ebc:	d121      	bne.n	8003f02 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d002      	beq.n	8003eca <HAL_UART_Transmit_IT+0x26>
 8003ec4:	88fb      	ldrh	r3, [r7, #6]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d101      	bne.n	8003ece <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e01a      	b.n	8003f04 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	68ba      	ldr	r2, [r7, #8]
 8003ed2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	88fa      	ldrh	r2, [r7, #6]
 8003ed8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	88fa      	ldrh	r2, [r7, #6]
 8003ede:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2221      	movs	r2, #33	@ 0x21
 8003eea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	68da      	ldr	r2, [r3, #12]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003efc:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003efe:	2300      	movs	r3, #0
 8003f00:	e000      	b.n	8003f04 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8003f02:	2302      	movs	r3, #2
  }
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3714      	adds	r7, #20
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bc80      	pop	{r7}
 8003f0c:	4770      	bx	lr

08003f0e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f0e:	b580      	push	{r7, lr}
 8003f10:	b084      	sub	sp, #16
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	60f8      	str	r0, [r7, #12]
 8003f16:	60b9      	str	r1, [r7, #8]
 8003f18:	4613      	mov	r3, r2
 8003f1a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	2b20      	cmp	r3, #32
 8003f26:	d112      	bne.n	8003f4e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d002      	beq.n	8003f34 <HAL_UART_Receive_IT+0x26>
 8003f2e:	88fb      	ldrh	r3, [r7, #6]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d101      	bne.n	8003f38 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	e00b      	b.n	8003f50 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003f3e:	88fb      	ldrh	r3, [r7, #6]
 8003f40:	461a      	mov	r2, r3
 8003f42:	68b9      	ldr	r1, [r7, #8]
 8003f44:	68f8      	ldr	r0, [r7, #12]
 8003f46:	f000 faad 	bl	80044a4 <UART_Start_Receive_IT>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	e000      	b.n	8003f50 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003f4e:	2302      	movs	r3, #2
  }
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3710      	adds	r7, #16
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}

08003f58 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b0ba      	sub	sp, #232	@ 0xe8
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	695b      	ldr	r3, [r3, #20]
 8003f7a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003f84:	2300      	movs	r3, #0
 8003f86:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003f8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f8e:	f003 030f 	and.w	r3, r3, #15
 8003f92:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003f96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d10f      	bne.n	8003fbe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fa2:	f003 0320 	and.w	r3, r3, #32
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d009      	beq.n	8003fbe <HAL_UART_IRQHandler+0x66>
 8003faa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fae:	f003 0320 	and.w	r3, r3, #32
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d003      	beq.n	8003fbe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f000 fb8a 	bl	80046d0 <UART_Receive_IT>
      return;
 8003fbc:	e25b      	b.n	8004476 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003fbe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	f000 80de 	beq.w	8004184 <HAL_UART_IRQHandler+0x22c>
 8003fc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003fcc:	f003 0301 	and.w	r3, r3, #1
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d106      	bne.n	8003fe2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003fd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fd8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	f000 80d1 	beq.w	8004184 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003fe2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fe6:	f003 0301 	and.w	r3, r3, #1
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d00b      	beq.n	8004006 <HAL_UART_IRQHandler+0xae>
 8003fee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ff2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d005      	beq.n	8004006 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ffe:	f043 0201 	orr.w	r2, r3, #1
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004006:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800400a:	f003 0304 	and.w	r3, r3, #4
 800400e:	2b00      	cmp	r3, #0
 8004010:	d00b      	beq.n	800402a <HAL_UART_IRQHandler+0xd2>
 8004012:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004016:	f003 0301 	and.w	r3, r3, #1
 800401a:	2b00      	cmp	r3, #0
 800401c:	d005      	beq.n	800402a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004022:	f043 0202 	orr.w	r2, r3, #2
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800402a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800402e:	f003 0302 	and.w	r3, r3, #2
 8004032:	2b00      	cmp	r3, #0
 8004034:	d00b      	beq.n	800404e <HAL_UART_IRQHandler+0xf6>
 8004036:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800403a:	f003 0301 	and.w	r3, r3, #1
 800403e:	2b00      	cmp	r3, #0
 8004040:	d005      	beq.n	800404e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004046:	f043 0204 	orr.w	r2, r3, #4
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800404e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004052:	f003 0308 	and.w	r3, r3, #8
 8004056:	2b00      	cmp	r3, #0
 8004058:	d011      	beq.n	800407e <HAL_UART_IRQHandler+0x126>
 800405a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800405e:	f003 0320 	and.w	r3, r3, #32
 8004062:	2b00      	cmp	r3, #0
 8004064:	d105      	bne.n	8004072 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004066:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800406a:	f003 0301 	and.w	r3, r3, #1
 800406e:	2b00      	cmp	r3, #0
 8004070:	d005      	beq.n	800407e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004076:	f043 0208 	orr.w	r2, r3, #8
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004082:	2b00      	cmp	r3, #0
 8004084:	f000 81f2 	beq.w	800446c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004088:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800408c:	f003 0320 	and.w	r3, r3, #32
 8004090:	2b00      	cmp	r3, #0
 8004092:	d008      	beq.n	80040a6 <HAL_UART_IRQHandler+0x14e>
 8004094:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004098:	f003 0320 	and.w	r3, r3, #32
 800409c:	2b00      	cmp	r3, #0
 800409e:	d002      	beq.n	80040a6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f000 fb15 	bl	80046d0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	695b      	ldr	r3, [r3, #20]
 80040ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	bf14      	ite	ne
 80040b4:	2301      	movne	r3, #1
 80040b6:	2300      	moveq	r3, #0
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040c2:	f003 0308 	and.w	r3, r3, #8
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d103      	bne.n	80040d2 <HAL_UART_IRQHandler+0x17a>
 80040ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d04f      	beq.n	8004172 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f000 fa1f 	bl	8004516 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	695b      	ldr	r3, [r3, #20]
 80040de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d041      	beq.n	800416a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	3314      	adds	r3, #20
 80040ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80040f4:	e853 3f00 	ldrex	r3, [r3]
 80040f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80040fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004100:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004104:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	3314      	adds	r3, #20
 800410e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004112:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004116:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800411a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800411e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004122:	e841 2300 	strex	r3, r2, [r1]
 8004126:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800412a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800412e:	2b00      	cmp	r3, #0
 8004130:	d1d9      	bne.n	80040e6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004136:	2b00      	cmp	r3, #0
 8004138:	d013      	beq.n	8004162 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800413e:	4a7e      	ldr	r2, [pc, #504]	@ (8004338 <HAL_UART_IRQHandler+0x3e0>)
 8004140:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004146:	4618      	mov	r0, r3
 8004148:	f7fd fc80 	bl	8001a4c <HAL_DMA_Abort_IT>
 800414c:	4603      	mov	r3, r0
 800414e:	2b00      	cmp	r3, #0
 8004150:	d016      	beq.n	8004180 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004156:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800415c:	4610      	mov	r0, r2
 800415e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004160:	e00e      	b.n	8004180 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f000 f98a 	bl	800447c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004168:	e00a      	b.n	8004180 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f000 f986 	bl	800447c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004170:	e006      	b.n	8004180 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f000 f982 	bl	800447c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800417e:	e175      	b.n	800446c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004180:	bf00      	nop
    return;
 8004182:	e173      	b.n	800446c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004188:	2b01      	cmp	r3, #1
 800418a:	f040 814f 	bne.w	800442c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800418e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004192:	f003 0310 	and.w	r3, r3, #16
 8004196:	2b00      	cmp	r3, #0
 8004198:	f000 8148 	beq.w	800442c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800419c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041a0:	f003 0310 	and.w	r3, r3, #16
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	f000 8141 	beq.w	800442c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80041aa:	2300      	movs	r3, #0
 80041ac:	60bb      	str	r3, [r7, #8]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	60bb      	str	r3, [r7, #8]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	60bb      	str	r3, [r7, #8]
 80041be:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	695b      	ldr	r3, [r3, #20]
 80041c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	f000 80b6 	beq.w	800433c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80041dc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	f000 8145 	beq.w	8004470 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80041ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80041ee:	429a      	cmp	r2, r3
 80041f0:	f080 813e 	bcs.w	8004470 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80041fa:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004200:	699b      	ldr	r3, [r3, #24]
 8004202:	2b20      	cmp	r3, #32
 8004204:	f000 8088 	beq.w	8004318 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	330c      	adds	r3, #12
 800420e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004212:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004216:	e853 3f00 	ldrex	r3, [r3]
 800421a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800421e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004222:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004226:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	330c      	adds	r3, #12
 8004230:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004234:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004238:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800423c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004240:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004244:	e841 2300 	strex	r3, r2, [r1]
 8004248:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800424c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004250:	2b00      	cmp	r3, #0
 8004252:	d1d9      	bne.n	8004208 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	3314      	adds	r3, #20
 800425a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800425c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800425e:	e853 3f00 	ldrex	r3, [r3]
 8004262:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004264:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004266:	f023 0301 	bic.w	r3, r3, #1
 800426a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	3314      	adds	r3, #20
 8004274:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004278:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800427c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800427e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004280:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004284:	e841 2300 	strex	r3, r2, [r1]
 8004288:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800428a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800428c:	2b00      	cmp	r3, #0
 800428e:	d1e1      	bne.n	8004254 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	3314      	adds	r3, #20
 8004296:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004298:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800429a:	e853 3f00 	ldrex	r3, [r3]
 800429e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80042a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80042a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80042a6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	3314      	adds	r3, #20
 80042b0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80042b4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80042b6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80042ba:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80042bc:	e841 2300 	strex	r3, r2, [r1]
 80042c0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80042c2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d1e3      	bne.n	8004290 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2220      	movs	r2, #32
 80042cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2200      	movs	r2, #0
 80042d4:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	330c      	adds	r3, #12
 80042dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80042e0:	e853 3f00 	ldrex	r3, [r3]
 80042e4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80042e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80042e8:	f023 0310 	bic.w	r3, r3, #16
 80042ec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	330c      	adds	r3, #12
 80042f6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80042fa:	65ba      	str	r2, [r7, #88]	@ 0x58
 80042fc:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042fe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004300:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004302:	e841 2300 	strex	r3, r2, [r1]
 8004306:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004308:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800430a:	2b00      	cmp	r3, #0
 800430c:	d1e3      	bne.n	80042d6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004312:	4618      	mov	r0, r3
 8004314:	f7fd fb5f 	bl	80019d6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2202      	movs	r2, #2
 800431c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004326:	b29b      	uxth	r3, r3
 8004328:	1ad3      	subs	r3, r2, r3
 800432a:	b29b      	uxth	r3, r3
 800432c:	4619      	mov	r1, r3
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f000 f8ad 	bl	800448e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004334:	e09c      	b.n	8004470 <HAL_UART_IRQHandler+0x518>
 8004336:	bf00      	nop
 8004338:	080045db 	.word	0x080045db
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004344:	b29b      	uxth	r3, r3
 8004346:	1ad3      	subs	r3, r2, r3
 8004348:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004350:	b29b      	uxth	r3, r3
 8004352:	2b00      	cmp	r3, #0
 8004354:	f000 808e 	beq.w	8004474 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004358:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800435c:	2b00      	cmp	r3, #0
 800435e:	f000 8089 	beq.w	8004474 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	330c      	adds	r3, #12
 8004368:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800436a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800436c:	e853 3f00 	ldrex	r3, [r3]
 8004370:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004372:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004374:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004378:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	330c      	adds	r3, #12
 8004382:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004386:	647a      	str	r2, [r7, #68]	@ 0x44
 8004388:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800438a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800438c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800438e:	e841 2300 	strex	r3, r2, [r1]
 8004392:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004394:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004396:	2b00      	cmp	r3, #0
 8004398:	d1e3      	bne.n	8004362 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	3314      	adds	r3, #20
 80043a0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043a4:	e853 3f00 	ldrex	r3, [r3]
 80043a8:	623b      	str	r3, [r7, #32]
   return(result);
 80043aa:	6a3b      	ldr	r3, [r7, #32]
 80043ac:	f023 0301 	bic.w	r3, r3, #1
 80043b0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	3314      	adds	r3, #20
 80043ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80043be:	633a      	str	r2, [r7, #48]	@ 0x30
 80043c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80043c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043c6:	e841 2300 	strex	r3, r2, [r1]
 80043ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80043cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d1e3      	bne.n	800439a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2220      	movs	r2, #32
 80043d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	330c      	adds	r3, #12
 80043e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	e853 3f00 	ldrex	r3, [r3]
 80043ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f023 0310 	bic.w	r3, r3, #16
 80043f6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	330c      	adds	r3, #12
 8004400:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004404:	61fa      	str	r2, [r7, #28]
 8004406:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004408:	69b9      	ldr	r1, [r7, #24]
 800440a:	69fa      	ldr	r2, [r7, #28]
 800440c:	e841 2300 	strex	r3, r2, [r1]
 8004410:	617b      	str	r3, [r7, #20]
   return(result);
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d1e3      	bne.n	80043e0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2202      	movs	r2, #2
 800441c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800441e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004422:	4619      	mov	r1, r3
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f000 f832 	bl	800448e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800442a:	e023      	b.n	8004474 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800442c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004430:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004434:	2b00      	cmp	r3, #0
 8004436:	d009      	beq.n	800444c <HAL_UART_IRQHandler+0x4f4>
 8004438:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800443c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004440:	2b00      	cmp	r3, #0
 8004442:	d003      	beq.n	800444c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	f000 f8dc 	bl	8004602 <UART_Transmit_IT>
    return;
 800444a:	e014      	b.n	8004476 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800444c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004450:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004454:	2b00      	cmp	r3, #0
 8004456:	d00e      	beq.n	8004476 <HAL_UART_IRQHandler+0x51e>
 8004458:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800445c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004460:	2b00      	cmp	r3, #0
 8004462:	d008      	beq.n	8004476 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f000 f91b 	bl	80046a0 <UART_EndTransmit_IT>
    return;
 800446a:	e004      	b.n	8004476 <HAL_UART_IRQHandler+0x51e>
    return;
 800446c:	bf00      	nop
 800446e:	e002      	b.n	8004476 <HAL_UART_IRQHandler+0x51e>
      return;
 8004470:	bf00      	nop
 8004472:	e000      	b.n	8004476 <HAL_UART_IRQHandler+0x51e>
      return;
 8004474:	bf00      	nop
  }
}
 8004476:	37e8      	adds	r7, #232	@ 0xe8
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}

0800447c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800447c:	b480      	push	{r7}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004484:	bf00      	nop
 8004486:	370c      	adds	r7, #12
 8004488:	46bd      	mov	sp, r7
 800448a:	bc80      	pop	{r7}
 800448c:	4770      	bx	lr

0800448e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800448e:	b480      	push	{r7}
 8004490:	b083      	sub	sp, #12
 8004492:	af00      	add	r7, sp, #0
 8004494:	6078      	str	r0, [r7, #4]
 8004496:	460b      	mov	r3, r1
 8004498:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800449a:	bf00      	nop
 800449c:	370c      	adds	r7, #12
 800449e:	46bd      	mov	sp, r7
 80044a0:	bc80      	pop	{r7}
 80044a2:	4770      	bx	lr

080044a4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b085      	sub	sp, #20
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	60f8      	str	r0, [r7, #12]
 80044ac:	60b9      	str	r1, [r7, #8]
 80044ae:	4613      	mov	r3, r2
 80044b0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	68ba      	ldr	r2, [r7, #8]
 80044b6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	88fa      	ldrh	r2, [r7, #6]
 80044bc:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	88fa      	ldrh	r2, [r7, #6]
 80044c2:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2200      	movs	r2, #0
 80044c8:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2222      	movs	r2, #34	@ 0x22
 80044ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	691b      	ldr	r3, [r3, #16]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d007      	beq.n	80044ea <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	68da      	ldr	r2, [r3, #12]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80044e8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	695a      	ldr	r2, [r3, #20]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f042 0201 	orr.w	r2, r2, #1
 80044f8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	68da      	ldr	r2, [r3, #12]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f042 0220 	orr.w	r2, r2, #32
 8004508:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800450a:	2300      	movs	r3, #0
}
 800450c:	4618      	mov	r0, r3
 800450e:	3714      	adds	r7, #20
 8004510:	46bd      	mov	sp, r7
 8004512:	bc80      	pop	{r7}
 8004514:	4770      	bx	lr

08004516 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004516:	b480      	push	{r7}
 8004518:	b095      	sub	sp, #84	@ 0x54
 800451a:	af00      	add	r7, sp, #0
 800451c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	330c      	adds	r3, #12
 8004524:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004526:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004528:	e853 3f00 	ldrex	r3, [r3]
 800452c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800452e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004530:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004534:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	330c      	adds	r3, #12
 800453c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800453e:	643a      	str	r2, [r7, #64]	@ 0x40
 8004540:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004542:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004544:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004546:	e841 2300 	strex	r3, r2, [r1]
 800454a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800454c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800454e:	2b00      	cmp	r3, #0
 8004550:	d1e5      	bne.n	800451e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	3314      	adds	r3, #20
 8004558:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800455a:	6a3b      	ldr	r3, [r7, #32]
 800455c:	e853 3f00 	ldrex	r3, [r3]
 8004560:	61fb      	str	r3, [r7, #28]
   return(result);
 8004562:	69fb      	ldr	r3, [r7, #28]
 8004564:	f023 0301 	bic.w	r3, r3, #1
 8004568:	64bb      	str	r3, [r7, #72]	@ 0x48
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	3314      	adds	r3, #20
 8004570:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004572:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004574:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004576:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004578:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800457a:	e841 2300 	strex	r3, r2, [r1]
 800457e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004582:	2b00      	cmp	r3, #0
 8004584:	d1e5      	bne.n	8004552 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800458a:	2b01      	cmp	r3, #1
 800458c:	d119      	bne.n	80045c2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	330c      	adds	r3, #12
 8004594:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	e853 3f00 	ldrex	r3, [r3]
 800459c:	60bb      	str	r3, [r7, #8]
   return(result);
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	f023 0310 	bic.w	r3, r3, #16
 80045a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	330c      	adds	r3, #12
 80045ac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80045ae:	61ba      	str	r2, [r7, #24]
 80045b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045b2:	6979      	ldr	r1, [r7, #20]
 80045b4:	69ba      	ldr	r2, [r7, #24]
 80045b6:	e841 2300 	strex	r3, r2, [r1]
 80045ba:	613b      	str	r3, [r7, #16]
   return(result);
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d1e5      	bne.n	800458e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2220      	movs	r2, #32
 80045c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80045d0:	bf00      	nop
 80045d2:	3754      	adds	r7, #84	@ 0x54
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bc80      	pop	{r7}
 80045d8:	4770      	bx	lr

080045da <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80045da:	b580      	push	{r7, lr}
 80045dc:	b084      	sub	sp, #16
 80045de:	af00      	add	r7, sp, #0
 80045e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045e6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2200      	movs	r2, #0
 80045ec:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2200      	movs	r2, #0
 80045f2:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80045f4:	68f8      	ldr	r0, [r7, #12]
 80045f6:	f7ff ff41 	bl	800447c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80045fa:	bf00      	nop
 80045fc:	3710      	adds	r7, #16
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}

08004602 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004602:	b480      	push	{r7}
 8004604:	b085      	sub	sp, #20
 8004606:	af00      	add	r7, sp, #0
 8004608:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004610:	b2db      	uxtb	r3, r3
 8004612:	2b21      	cmp	r3, #33	@ 0x21
 8004614:	d13e      	bne.n	8004694 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800461e:	d114      	bne.n	800464a <UART_Transmit_IT+0x48>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	691b      	ldr	r3, [r3, #16]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d110      	bne.n	800464a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6a1b      	ldr	r3, [r3, #32]
 800462c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	881b      	ldrh	r3, [r3, #0]
 8004632:	461a      	mov	r2, r3
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800463c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6a1b      	ldr	r3, [r3, #32]
 8004642:	1c9a      	adds	r2, r3, #2
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	621a      	str	r2, [r3, #32]
 8004648:	e008      	b.n	800465c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6a1b      	ldr	r3, [r3, #32]
 800464e:	1c59      	adds	r1, r3, #1
 8004650:	687a      	ldr	r2, [r7, #4]
 8004652:	6211      	str	r1, [r2, #32]
 8004654:	781a      	ldrb	r2, [r3, #0]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004660:	b29b      	uxth	r3, r3
 8004662:	3b01      	subs	r3, #1
 8004664:	b29b      	uxth	r3, r3
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	4619      	mov	r1, r3
 800466a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800466c:	2b00      	cmp	r3, #0
 800466e:	d10f      	bne.n	8004690 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	68da      	ldr	r2, [r3, #12]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800467e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	68da      	ldr	r2, [r3, #12]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800468e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004690:	2300      	movs	r3, #0
 8004692:	e000      	b.n	8004696 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004694:	2302      	movs	r3, #2
  }
}
 8004696:	4618      	mov	r0, r3
 8004698:	3714      	adds	r7, #20
 800469a:	46bd      	mov	sp, r7
 800469c:	bc80      	pop	{r7}
 800469e:	4770      	bx	lr

080046a0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b082      	sub	sp, #8
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	68da      	ldr	r2, [r3, #12]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80046b6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2220      	movs	r2, #32
 80046bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f7fc f841 	bl	8000748 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80046c6:	2300      	movs	r3, #0
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	3708      	adds	r7, #8
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}

080046d0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b08c      	sub	sp, #48	@ 0x30
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80046de:	b2db      	uxtb	r3, r3
 80046e0:	2b22      	cmp	r3, #34	@ 0x22
 80046e2:	f040 80ae 	bne.w	8004842 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046ee:	d117      	bne.n	8004720 <UART_Receive_IT+0x50>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	691b      	ldr	r3, [r3, #16]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d113      	bne.n	8004720 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80046f8:	2300      	movs	r3, #0
 80046fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004700:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	b29b      	uxth	r3, r3
 800470a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800470e:	b29a      	uxth	r2, r3
 8004710:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004712:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004718:	1c9a      	adds	r2, r3, #2
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	629a      	str	r2, [r3, #40]	@ 0x28
 800471e:	e026      	b.n	800476e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004724:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004726:	2300      	movs	r3, #0
 8004728:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004732:	d007      	beq.n	8004744 <UART_Receive_IT+0x74>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d10a      	bne.n	8004752 <UART_Receive_IT+0x82>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	691b      	ldr	r3, [r3, #16]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d106      	bne.n	8004752 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	b2da      	uxtb	r2, r3
 800474c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800474e:	701a      	strb	r2, [r3, #0]
 8004750:	e008      	b.n	8004764 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	b2db      	uxtb	r3, r3
 800475a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800475e:	b2da      	uxtb	r2, r3
 8004760:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004762:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004768:	1c5a      	adds	r2, r3, #1
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004772:	b29b      	uxth	r3, r3
 8004774:	3b01      	subs	r3, #1
 8004776:	b29b      	uxth	r3, r3
 8004778:	687a      	ldr	r2, [r7, #4]
 800477a:	4619      	mov	r1, r3
 800477c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800477e:	2b00      	cmp	r3, #0
 8004780:	d15d      	bne.n	800483e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	68da      	ldr	r2, [r3, #12]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f022 0220 	bic.w	r2, r2, #32
 8004790:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	68da      	ldr	r2, [r3, #12]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80047a0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	695a      	ldr	r2, [r3, #20]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f022 0201 	bic.w	r2, r2, #1
 80047b0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2220      	movs	r2, #32
 80047b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2200      	movs	r2, #0
 80047be:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d135      	bne.n	8004834 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2200      	movs	r2, #0
 80047cc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	330c      	adds	r3, #12
 80047d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	e853 3f00 	ldrex	r3, [r3]
 80047dc:	613b      	str	r3, [r7, #16]
   return(result);
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	f023 0310 	bic.w	r3, r3, #16
 80047e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	330c      	adds	r3, #12
 80047ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047ee:	623a      	str	r2, [r7, #32]
 80047f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047f2:	69f9      	ldr	r1, [r7, #28]
 80047f4:	6a3a      	ldr	r2, [r7, #32]
 80047f6:	e841 2300 	strex	r3, r2, [r1]
 80047fa:	61bb      	str	r3, [r7, #24]
   return(result);
 80047fc:	69bb      	ldr	r3, [r7, #24]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d1e5      	bne.n	80047ce <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 0310 	and.w	r3, r3, #16
 800480c:	2b10      	cmp	r3, #16
 800480e:	d10a      	bne.n	8004826 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004810:	2300      	movs	r3, #0
 8004812:	60fb      	str	r3, [r7, #12]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	60fb      	str	r3, [r7, #12]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	60fb      	str	r3, [r7, #12]
 8004824:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800482a:	4619      	mov	r1, r3
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f7ff fe2e 	bl	800448e <HAL_UARTEx_RxEventCallback>
 8004832:	e002      	b.n	800483a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f7fb ff5b 	bl	80006f0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800483a:	2300      	movs	r3, #0
 800483c:	e002      	b.n	8004844 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800483e:	2300      	movs	r3, #0
 8004840:	e000      	b.n	8004844 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004842:	2302      	movs	r3, #2
  }
}
 8004844:	4618      	mov	r0, r3
 8004846:	3730      	adds	r7, #48	@ 0x30
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}

0800484c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b084      	sub	sp, #16
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	691b      	ldr	r3, [r3, #16]
 800485a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	68da      	ldr	r2, [r3, #12]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	430a      	orrs	r2, r1
 8004868:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	689a      	ldr	r2, [r3, #8]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	691b      	ldr	r3, [r3, #16]
 8004872:	431a      	orrs	r2, r3
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	695b      	ldr	r3, [r3, #20]
 8004878:	4313      	orrs	r3, r2
 800487a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004886:	f023 030c 	bic.w	r3, r3, #12
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	6812      	ldr	r2, [r2, #0]
 800488e:	68b9      	ldr	r1, [r7, #8]
 8004890:	430b      	orrs	r3, r1
 8004892:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	695b      	ldr	r3, [r3, #20]
 800489a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	699a      	ldr	r2, [r3, #24]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	430a      	orrs	r2, r1
 80048a8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a2c      	ldr	r2, [pc, #176]	@ (8004960 <UART_SetConfig+0x114>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d103      	bne.n	80048bc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80048b4:	f7fd fef6 	bl	80026a4 <HAL_RCC_GetPCLK2Freq>
 80048b8:	60f8      	str	r0, [r7, #12]
 80048ba:	e002      	b.n	80048c2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80048bc:	f7fd fede 	bl	800267c <HAL_RCC_GetPCLK1Freq>
 80048c0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80048c2:	68fa      	ldr	r2, [r7, #12]
 80048c4:	4613      	mov	r3, r2
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	4413      	add	r3, r2
 80048ca:	009a      	lsls	r2, r3, #2
 80048cc:	441a      	add	r2, r3
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80048d8:	4a22      	ldr	r2, [pc, #136]	@ (8004964 <UART_SetConfig+0x118>)
 80048da:	fba2 2303 	umull	r2, r3, r2, r3
 80048de:	095b      	lsrs	r3, r3, #5
 80048e0:	0119      	lsls	r1, r3, #4
 80048e2:	68fa      	ldr	r2, [r7, #12]
 80048e4:	4613      	mov	r3, r2
 80048e6:	009b      	lsls	r3, r3, #2
 80048e8:	4413      	add	r3, r2
 80048ea:	009a      	lsls	r2, r3, #2
 80048ec:	441a      	add	r2, r3
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80048f8:	4b1a      	ldr	r3, [pc, #104]	@ (8004964 <UART_SetConfig+0x118>)
 80048fa:	fba3 0302 	umull	r0, r3, r3, r2
 80048fe:	095b      	lsrs	r3, r3, #5
 8004900:	2064      	movs	r0, #100	@ 0x64
 8004902:	fb00 f303 	mul.w	r3, r0, r3
 8004906:	1ad3      	subs	r3, r2, r3
 8004908:	011b      	lsls	r3, r3, #4
 800490a:	3332      	adds	r3, #50	@ 0x32
 800490c:	4a15      	ldr	r2, [pc, #84]	@ (8004964 <UART_SetConfig+0x118>)
 800490e:	fba2 2303 	umull	r2, r3, r2, r3
 8004912:	095b      	lsrs	r3, r3, #5
 8004914:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004918:	4419      	add	r1, r3
 800491a:	68fa      	ldr	r2, [r7, #12]
 800491c:	4613      	mov	r3, r2
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	4413      	add	r3, r2
 8004922:	009a      	lsls	r2, r3, #2
 8004924:	441a      	add	r2, r3
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	009b      	lsls	r3, r3, #2
 800492c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004930:	4b0c      	ldr	r3, [pc, #48]	@ (8004964 <UART_SetConfig+0x118>)
 8004932:	fba3 0302 	umull	r0, r3, r3, r2
 8004936:	095b      	lsrs	r3, r3, #5
 8004938:	2064      	movs	r0, #100	@ 0x64
 800493a:	fb00 f303 	mul.w	r3, r0, r3
 800493e:	1ad3      	subs	r3, r2, r3
 8004940:	011b      	lsls	r3, r3, #4
 8004942:	3332      	adds	r3, #50	@ 0x32
 8004944:	4a07      	ldr	r2, [pc, #28]	@ (8004964 <UART_SetConfig+0x118>)
 8004946:	fba2 2303 	umull	r2, r3, r2, r3
 800494a:	095b      	lsrs	r3, r3, #5
 800494c:	f003 020f 	and.w	r2, r3, #15
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	440a      	add	r2, r1
 8004956:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004958:	bf00      	nop
 800495a:	3710      	adds	r7, #16
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}
 8004960:	40013800 	.word	0x40013800
 8004964:	51eb851f 	.word	0x51eb851f

08004968 <atoi>:
 8004968:	220a      	movs	r2, #10
 800496a:	2100      	movs	r1, #0
 800496c:	f000 b87a 	b.w	8004a64 <strtol>

08004970 <_strtol_l.constprop.0>:
 8004970:	2b24      	cmp	r3, #36	@ 0x24
 8004972:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004976:	4686      	mov	lr, r0
 8004978:	4690      	mov	r8, r2
 800497a:	d801      	bhi.n	8004980 <_strtol_l.constprop.0+0x10>
 800497c:	2b01      	cmp	r3, #1
 800497e:	d106      	bne.n	800498e <_strtol_l.constprop.0+0x1e>
 8004980:	f000 f8c2 	bl	8004b08 <__errno>
 8004984:	2316      	movs	r3, #22
 8004986:	6003      	str	r3, [r0, #0]
 8004988:	2000      	movs	r0, #0
 800498a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800498e:	460d      	mov	r5, r1
 8004990:	4833      	ldr	r0, [pc, #204]	@ (8004a60 <_strtol_l.constprop.0+0xf0>)
 8004992:	462a      	mov	r2, r5
 8004994:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004998:	5d06      	ldrb	r6, [r0, r4]
 800499a:	f016 0608 	ands.w	r6, r6, #8
 800499e:	d1f8      	bne.n	8004992 <_strtol_l.constprop.0+0x22>
 80049a0:	2c2d      	cmp	r4, #45	@ 0x2d
 80049a2:	d12d      	bne.n	8004a00 <_strtol_l.constprop.0+0x90>
 80049a4:	2601      	movs	r6, #1
 80049a6:	782c      	ldrb	r4, [r5, #0]
 80049a8:	1c95      	adds	r5, r2, #2
 80049aa:	f033 0210 	bics.w	r2, r3, #16
 80049ae:	d109      	bne.n	80049c4 <_strtol_l.constprop.0+0x54>
 80049b0:	2c30      	cmp	r4, #48	@ 0x30
 80049b2:	d12a      	bne.n	8004a0a <_strtol_l.constprop.0+0x9a>
 80049b4:	782a      	ldrb	r2, [r5, #0]
 80049b6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80049ba:	2a58      	cmp	r2, #88	@ 0x58
 80049bc:	d125      	bne.n	8004a0a <_strtol_l.constprop.0+0x9a>
 80049be:	2310      	movs	r3, #16
 80049c0:	786c      	ldrb	r4, [r5, #1]
 80049c2:	3502      	adds	r5, #2
 80049c4:	2200      	movs	r2, #0
 80049c6:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80049ca:	f10c 3cff 	add.w	ip, ip, #4294967295
 80049ce:	fbbc f9f3 	udiv	r9, ip, r3
 80049d2:	4610      	mov	r0, r2
 80049d4:	fb03 ca19 	mls	sl, r3, r9, ip
 80049d8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80049dc:	2f09      	cmp	r7, #9
 80049de:	d81b      	bhi.n	8004a18 <_strtol_l.constprop.0+0xa8>
 80049e0:	463c      	mov	r4, r7
 80049e2:	42a3      	cmp	r3, r4
 80049e4:	dd27      	ble.n	8004a36 <_strtol_l.constprop.0+0xc6>
 80049e6:	1c57      	adds	r7, r2, #1
 80049e8:	d007      	beq.n	80049fa <_strtol_l.constprop.0+0x8a>
 80049ea:	4581      	cmp	r9, r0
 80049ec:	d320      	bcc.n	8004a30 <_strtol_l.constprop.0+0xc0>
 80049ee:	d101      	bne.n	80049f4 <_strtol_l.constprop.0+0x84>
 80049f0:	45a2      	cmp	sl, r4
 80049f2:	db1d      	blt.n	8004a30 <_strtol_l.constprop.0+0xc0>
 80049f4:	2201      	movs	r2, #1
 80049f6:	fb00 4003 	mla	r0, r0, r3, r4
 80049fa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80049fe:	e7eb      	b.n	80049d8 <_strtol_l.constprop.0+0x68>
 8004a00:	2c2b      	cmp	r4, #43	@ 0x2b
 8004a02:	bf04      	itt	eq
 8004a04:	782c      	ldrbeq	r4, [r5, #0]
 8004a06:	1c95      	addeq	r5, r2, #2
 8004a08:	e7cf      	b.n	80049aa <_strtol_l.constprop.0+0x3a>
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d1da      	bne.n	80049c4 <_strtol_l.constprop.0+0x54>
 8004a0e:	2c30      	cmp	r4, #48	@ 0x30
 8004a10:	bf0c      	ite	eq
 8004a12:	2308      	moveq	r3, #8
 8004a14:	230a      	movne	r3, #10
 8004a16:	e7d5      	b.n	80049c4 <_strtol_l.constprop.0+0x54>
 8004a18:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8004a1c:	2f19      	cmp	r7, #25
 8004a1e:	d801      	bhi.n	8004a24 <_strtol_l.constprop.0+0xb4>
 8004a20:	3c37      	subs	r4, #55	@ 0x37
 8004a22:	e7de      	b.n	80049e2 <_strtol_l.constprop.0+0x72>
 8004a24:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8004a28:	2f19      	cmp	r7, #25
 8004a2a:	d804      	bhi.n	8004a36 <_strtol_l.constprop.0+0xc6>
 8004a2c:	3c57      	subs	r4, #87	@ 0x57
 8004a2e:	e7d8      	b.n	80049e2 <_strtol_l.constprop.0+0x72>
 8004a30:	f04f 32ff 	mov.w	r2, #4294967295
 8004a34:	e7e1      	b.n	80049fa <_strtol_l.constprop.0+0x8a>
 8004a36:	1c53      	adds	r3, r2, #1
 8004a38:	d108      	bne.n	8004a4c <_strtol_l.constprop.0+0xdc>
 8004a3a:	2322      	movs	r3, #34	@ 0x22
 8004a3c:	4660      	mov	r0, ip
 8004a3e:	f8ce 3000 	str.w	r3, [lr]
 8004a42:	f1b8 0f00 	cmp.w	r8, #0
 8004a46:	d0a0      	beq.n	800498a <_strtol_l.constprop.0+0x1a>
 8004a48:	1e69      	subs	r1, r5, #1
 8004a4a:	e006      	b.n	8004a5a <_strtol_l.constprop.0+0xea>
 8004a4c:	b106      	cbz	r6, 8004a50 <_strtol_l.constprop.0+0xe0>
 8004a4e:	4240      	negs	r0, r0
 8004a50:	f1b8 0f00 	cmp.w	r8, #0
 8004a54:	d099      	beq.n	800498a <_strtol_l.constprop.0+0x1a>
 8004a56:	2a00      	cmp	r2, #0
 8004a58:	d1f6      	bne.n	8004a48 <_strtol_l.constprop.0+0xd8>
 8004a5a:	f8c8 1000 	str.w	r1, [r8]
 8004a5e:	e794      	b.n	800498a <_strtol_l.constprop.0+0x1a>
 8004a60:	08005547 	.word	0x08005547

08004a64 <strtol>:
 8004a64:	4613      	mov	r3, r2
 8004a66:	460a      	mov	r2, r1
 8004a68:	4601      	mov	r1, r0
 8004a6a:	4802      	ldr	r0, [pc, #8]	@ (8004a74 <strtol+0x10>)
 8004a6c:	6800      	ldr	r0, [r0, #0]
 8004a6e:	f7ff bf7f 	b.w	8004970 <_strtol_l.constprop.0>
 8004a72:	bf00      	nop
 8004a74:	20000014 	.word	0x20000014

08004a78 <_vsiprintf_r>:
 8004a78:	b500      	push	{lr}
 8004a7a:	b09b      	sub	sp, #108	@ 0x6c
 8004a7c:	9100      	str	r1, [sp, #0]
 8004a7e:	9104      	str	r1, [sp, #16]
 8004a80:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004a84:	9105      	str	r1, [sp, #20]
 8004a86:	9102      	str	r1, [sp, #8]
 8004a88:	4905      	ldr	r1, [pc, #20]	@ (8004aa0 <_vsiprintf_r+0x28>)
 8004a8a:	9103      	str	r1, [sp, #12]
 8004a8c:	4669      	mov	r1, sp
 8004a8e:	f000 f9c7 	bl	8004e20 <_svfiprintf_r>
 8004a92:	2200      	movs	r2, #0
 8004a94:	9b00      	ldr	r3, [sp, #0]
 8004a96:	701a      	strb	r2, [r3, #0]
 8004a98:	b01b      	add	sp, #108	@ 0x6c
 8004a9a:	f85d fb04 	ldr.w	pc, [sp], #4
 8004a9e:	bf00      	nop
 8004aa0:	ffff0208 	.word	0xffff0208

08004aa4 <vsiprintf>:
 8004aa4:	4613      	mov	r3, r2
 8004aa6:	460a      	mov	r2, r1
 8004aa8:	4601      	mov	r1, r0
 8004aaa:	4802      	ldr	r0, [pc, #8]	@ (8004ab4 <vsiprintf+0x10>)
 8004aac:	6800      	ldr	r0, [r0, #0]
 8004aae:	f7ff bfe3 	b.w	8004a78 <_vsiprintf_r>
 8004ab2:	bf00      	nop
 8004ab4:	20000014 	.word	0x20000014

08004ab8 <memset>:
 8004ab8:	4603      	mov	r3, r0
 8004aba:	4402      	add	r2, r0
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d100      	bne.n	8004ac2 <memset+0xa>
 8004ac0:	4770      	bx	lr
 8004ac2:	f803 1b01 	strb.w	r1, [r3], #1
 8004ac6:	e7f9      	b.n	8004abc <memset+0x4>

08004ac8 <strchr>:
 8004ac8:	4603      	mov	r3, r0
 8004aca:	b2c9      	uxtb	r1, r1
 8004acc:	4618      	mov	r0, r3
 8004ace:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004ad2:	b112      	cbz	r2, 8004ada <strchr+0x12>
 8004ad4:	428a      	cmp	r2, r1
 8004ad6:	d1f9      	bne.n	8004acc <strchr+0x4>
 8004ad8:	4770      	bx	lr
 8004ada:	2900      	cmp	r1, #0
 8004adc:	bf18      	it	ne
 8004ade:	2000      	movne	r0, #0
 8004ae0:	4770      	bx	lr

08004ae2 <strncmp>:
 8004ae2:	b510      	push	{r4, lr}
 8004ae4:	b16a      	cbz	r2, 8004b02 <strncmp+0x20>
 8004ae6:	3901      	subs	r1, #1
 8004ae8:	1884      	adds	r4, r0, r2
 8004aea:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004aee:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d103      	bne.n	8004afe <strncmp+0x1c>
 8004af6:	42a0      	cmp	r0, r4
 8004af8:	d001      	beq.n	8004afe <strncmp+0x1c>
 8004afa:	2a00      	cmp	r2, #0
 8004afc:	d1f5      	bne.n	8004aea <strncmp+0x8>
 8004afe:	1ad0      	subs	r0, r2, r3
 8004b00:	bd10      	pop	{r4, pc}
 8004b02:	4610      	mov	r0, r2
 8004b04:	e7fc      	b.n	8004b00 <strncmp+0x1e>
	...

08004b08 <__errno>:
 8004b08:	4b01      	ldr	r3, [pc, #4]	@ (8004b10 <__errno+0x8>)
 8004b0a:	6818      	ldr	r0, [r3, #0]
 8004b0c:	4770      	bx	lr
 8004b0e:	bf00      	nop
 8004b10:	20000014 	.word	0x20000014

08004b14 <__libc_init_array>:
 8004b14:	b570      	push	{r4, r5, r6, lr}
 8004b16:	2600      	movs	r6, #0
 8004b18:	4d0c      	ldr	r5, [pc, #48]	@ (8004b4c <__libc_init_array+0x38>)
 8004b1a:	4c0d      	ldr	r4, [pc, #52]	@ (8004b50 <__libc_init_array+0x3c>)
 8004b1c:	1b64      	subs	r4, r4, r5
 8004b1e:	10a4      	asrs	r4, r4, #2
 8004b20:	42a6      	cmp	r6, r4
 8004b22:	d109      	bne.n	8004b38 <__libc_init_array+0x24>
 8004b24:	f000 fc78 	bl	8005418 <_init>
 8004b28:	2600      	movs	r6, #0
 8004b2a:	4d0a      	ldr	r5, [pc, #40]	@ (8004b54 <__libc_init_array+0x40>)
 8004b2c:	4c0a      	ldr	r4, [pc, #40]	@ (8004b58 <__libc_init_array+0x44>)
 8004b2e:	1b64      	subs	r4, r4, r5
 8004b30:	10a4      	asrs	r4, r4, #2
 8004b32:	42a6      	cmp	r6, r4
 8004b34:	d105      	bne.n	8004b42 <__libc_init_array+0x2e>
 8004b36:	bd70      	pop	{r4, r5, r6, pc}
 8004b38:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b3c:	4798      	blx	r3
 8004b3e:	3601      	adds	r6, #1
 8004b40:	e7ee      	b.n	8004b20 <__libc_init_array+0xc>
 8004b42:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b46:	4798      	blx	r3
 8004b48:	3601      	adds	r6, #1
 8004b4a:	e7f2      	b.n	8004b32 <__libc_init_array+0x1e>
 8004b4c:	08005684 	.word	0x08005684
 8004b50:	08005684 	.word	0x08005684
 8004b54:	08005684 	.word	0x08005684
 8004b58:	08005688 	.word	0x08005688

08004b5c <__retarget_lock_acquire_recursive>:
 8004b5c:	4770      	bx	lr

08004b5e <__retarget_lock_release_recursive>:
 8004b5e:	4770      	bx	lr

08004b60 <memcpy>:
 8004b60:	440a      	add	r2, r1
 8004b62:	4291      	cmp	r1, r2
 8004b64:	f100 33ff 	add.w	r3, r0, #4294967295
 8004b68:	d100      	bne.n	8004b6c <memcpy+0xc>
 8004b6a:	4770      	bx	lr
 8004b6c:	b510      	push	{r4, lr}
 8004b6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b72:	4291      	cmp	r1, r2
 8004b74:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b78:	d1f9      	bne.n	8004b6e <memcpy+0xe>
 8004b7a:	bd10      	pop	{r4, pc}

08004b7c <_free_r>:
 8004b7c:	b538      	push	{r3, r4, r5, lr}
 8004b7e:	4605      	mov	r5, r0
 8004b80:	2900      	cmp	r1, #0
 8004b82:	d040      	beq.n	8004c06 <_free_r+0x8a>
 8004b84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b88:	1f0c      	subs	r4, r1, #4
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	bfb8      	it	lt
 8004b8e:	18e4      	addlt	r4, r4, r3
 8004b90:	f000 f8de 	bl	8004d50 <__malloc_lock>
 8004b94:	4a1c      	ldr	r2, [pc, #112]	@ (8004c08 <_free_r+0x8c>)
 8004b96:	6813      	ldr	r3, [r2, #0]
 8004b98:	b933      	cbnz	r3, 8004ba8 <_free_r+0x2c>
 8004b9a:	6063      	str	r3, [r4, #4]
 8004b9c:	6014      	str	r4, [r2, #0]
 8004b9e:	4628      	mov	r0, r5
 8004ba0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004ba4:	f000 b8da 	b.w	8004d5c <__malloc_unlock>
 8004ba8:	42a3      	cmp	r3, r4
 8004baa:	d908      	bls.n	8004bbe <_free_r+0x42>
 8004bac:	6820      	ldr	r0, [r4, #0]
 8004bae:	1821      	adds	r1, r4, r0
 8004bb0:	428b      	cmp	r3, r1
 8004bb2:	bf01      	itttt	eq
 8004bb4:	6819      	ldreq	r1, [r3, #0]
 8004bb6:	685b      	ldreq	r3, [r3, #4]
 8004bb8:	1809      	addeq	r1, r1, r0
 8004bba:	6021      	streq	r1, [r4, #0]
 8004bbc:	e7ed      	b.n	8004b9a <_free_r+0x1e>
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	b10b      	cbz	r3, 8004bc8 <_free_r+0x4c>
 8004bc4:	42a3      	cmp	r3, r4
 8004bc6:	d9fa      	bls.n	8004bbe <_free_r+0x42>
 8004bc8:	6811      	ldr	r1, [r2, #0]
 8004bca:	1850      	adds	r0, r2, r1
 8004bcc:	42a0      	cmp	r0, r4
 8004bce:	d10b      	bne.n	8004be8 <_free_r+0x6c>
 8004bd0:	6820      	ldr	r0, [r4, #0]
 8004bd2:	4401      	add	r1, r0
 8004bd4:	1850      	adds	r0, r2, r1
 8004bd6:	4283      	cmp	r3, r0
 8004bd8:	6011      	str	r1, [r2, #0]
 8004bda:	d1e0      	bne.n	8004b9e <_free_r+0x22>
 8004bdc:	6818      	ldr	r0, [r3, #0]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	4408      	add	r0, r1
 8004be2:	6010      	str	r0, [r2, #0]
 8004be4:	6053      	str	r3, [r2, #4]
 8004be6:	e7da      	b.n	8004b9e <_free_r+0x22>
 8004be8:	d902      	bls.n	8004bf0 <_free_r+0x74>
 8004bea:	230c      	movs	r3, #12
 8004bec:	602b      	str	r3, [r5, #0]
 8004bee:	e7d6      	b.n	8004b9e <_free_r+0x22>
 8004bf0:	6820      	ldr	r0, [r4, #0]
 8004bf2:	1821      	adds	r1, r4, r0
 8004bf4:	428b      	cmp	r3, r1
 8004bf6:	bf01      	itttt	eq
 8004bf8:	6819      	ldreq	r1, [r3, #0]
 8004bfa:	685b      	ldreq	r3, [r3, #4]
 8004bfc:	1809      	addeq	r1, r1, r0
 8004bfe:	6021      	streq	r1, [r4, #0]
 8004c00:	6063      	str	r3, [r4, #4]
 8004c02:	6054      	str	r4, [r2, #4]
 8004c04:	e7cb      	b.n	8004b9e <_free_r+0x22>
 8004c06:	bd38      	pop	{r3, r4, r5, pc}
 8004c08:	2000141c 	.word	0x2000141c

08004c0c <sbrk_aligned>:
 8004c0c:	b570      	push	{r4, r5, r6, lr}
 8004c0e:	4e0f      	ldr	r6, [pc, #60]	@ (8004c4c <sbrk_aligned+0x40>)
 8004c10:	460c      	mov	r4, r1
 8004c12:	6831      	ldr	r1, [r6, #0]
 8004c14:	4605      	mov	r5, r0
 8004c16:	b911      	cbnz	r1, 8004c1e <sbrk_aligned+0x12>
 8004c18:	f000 fbaa 	bl	8005370 <_sbrk_r>
 8004c1c:	6030      	str	r0, [r6, #0]
 8004c1e:	4621      	mov	r1, r4
 8004c20:	4628      	mov	r0, r5
 8004c22:	f000 fba5 	bl	8005370 <_sbrk_r>
 8004c26:	1c43      	adds	r3, r0, #1
 8004c28:	d103      	bne.n	8004c32 <sbrk_aligned+0x26>
 8004c2a:	f04f 34ff 	mov.w	r4, #4294967295
 8004c2e:	4620      	mov	r0, r4
 8004c30:	bd70      	pop	{r4, r5, r6, pc}
 8004c32:	1cc4      	adds	r4, r0, #3
 8004c34:	f024 0403 	bic.w	r4, r4, #3
 8004c38:	42a0      	cmp	r0, r4
 8004c3a:	d0f8      	beq.n	8004c2e <sbrk_aligned+0x22>
 8004c3c:	1a21      	subs	r1, r4, r0
 8004c3e:	4628      	mov	r0, r5
 8004c40:	f000 fb96 	bl	8005370 <_sbrk_r>
 8004c44:	3001      	adds	r0, #1
 8004c46:	d1f2      	bne.n	8004c2e <sbrk_aligned+0x22>
 8004c48:	e7ef      	b.n	8004c2a <sbrk_aligned+0x1e>
 8004c4a:	bf00      	nop
 8004c4c:	20001418 	.word	0x20001418

08004c50 <_malloc_r>:
 8004c50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c54:	1ccd      	adds	r5, r1, #3
 8004c56:	f025 0503 	bic.w	r5, r5, #3
 8004c5a:	3508      	adds	r5, #8
 8004c5c:	2d0c      	cmp	r5, #12
 8004c5e:	bf38      	it	cc
 8004c60:	250c      	movcc	r5, #12
 8004c62:	2d00      	cmp	r5, #0
 8004c64:	4606      	mov	r6, r0
 8004c66:	db01      	blt.n	8004c6c <_malloc_r+0x1c>
 8004c68:	42a9      	cmp	r1, r5
 8004c6a:	d904      	bls.n	8004c76 <_malloc_r+0x26>
 8004c6c:	230c      	movs	r3, #12
 8004c6e:	6033      	str	r3, [r6, #0]
 8004c70:	2000      	movs	r0, #0
 8004c72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c76:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004d4c <_malloc_r+0xfc>
 8004c7a:	f000 f869 	bl	8004d50 <__malloc_lock>
 8004c7e:	f8d8 3000 	ldr.w	r3, [r8]
 8004c82:	461c      	mov	r4, r3
 8004c84:	bb44      	cbnz	r4, 8004cd8 <_malloc_r+0x88>
 8004c86:	4629      	mov	r1, r5
 8004c88:	4630      	mov	r0, r6
 8004c8a:	f7ff ffbf 	bl	8004c0c <sbrk_aligned>
 8004c8e:	1c43      	adds	r3, r0, #1
 8004c90:	4604      	mov	r4, r0
 8004c92:	d158      	bne.n	8004d46 <_malloc_r+0xf6>
 8004c94:	f8d8 4000 	ldr.w	r4, [r8]
 8004c98:	4627      	mov	r7, r4
 8004c9a:	2f00      	cmp	r7, #0
 8004c9c:	d143      	bne.n	8004d26 <_malloc_r+0xd6>
 8004c9e:	2c00      	cmp	r4, #0
 8004ca0:	d04b      	beq.n	8004d3a <_malloc_r+0xea>
 8004ca2:	6823      	ldr	r3, [r4, #0]
 8004ca4:	4639      	mov	r1, r7
 8004ca6:	4630      	mov	r0, r6
 8004ca8:	eb04 0903 	add.w	r9, r4, r3
 8004cac:	f000 fb60 	bl	8005370 <_sbrk_r>
 8004cb0:	4581      	cmp	r9, r0
 8004cb2:	d142      	bne.n	8004d3a <_malloc_r+0xea>
 8004cb4:	6821      	ldr	r1, [r4, #0]
 8004cb6:	4630      	mov	r0, r6
 8004cb8:	1a6d      	subs	r5, r5, r1
 8004cba:	4629      	mov	r1, r5
 8004cbc:	f7ff ffa6 	bl	8004c0c <sbrk_aligned>
 8004cc0:	3001      	adds	r0, #1
 8004cc2:	d03a      	beq.n	8004d3a <_malloc_r+0xea>
 8004cc4:	6823      	ldr	r3, [r4, #0]
 8004cc6:	442b      	add	r3, r5
 8004cc8:	6023      	str	r3, [r4, #0]
 8004cca:	f8d8 3000 	ldr.w	r3, [r8]
 8004cce:	685a      	ldr	r2, [r3, #4]
 8004cd0:	bb62      	cbnz	r2, 8004d2c <_malloc_r+0xdc>
 8004cd2:	f8c8 7000 	str.w	r7, [r8]
 8004cd6:	e00f      	b.n	8004cf8 <_malloc_r+0xa8>
 8004cd8:	6822      	ldr	r2, [r4, #0]
 8004cda:	1b52      	subs	r2, r2, r5
 8004cdc:	d420      	bmi.n	8004d20 <_malloc_r+0xd0>
 8004cde:	2a0b      	cmp	r2, #11
 8004ce0:	d917      	bls.n	8004d12 <_malloc_r+0xc2>
 8004ce2:	1961      	adds	r1, r4, r5
 8004ce4:	42a3      	cmp	r3, r4
 8004ce6:	6025      	str	r5, [r4, #0]
 8004ce8:	bf18      	it	ne
 8004cea:	6059      	strne	r1, [r3, #4]
 8004cec:	6863      	ldr	r3, [r4, #4]
 8004cee:	bf08      	it	eq
 8004cf0:	f8c8 1000 	streq.w	r1, [r8]
 8004cf4:	5162      	str	r2, [r4, r5]
 8004cf6:	604b      	str	r3, [r1, #4]
 8004cf8:	4630      	mov	r0, r6
 8004cfa:	f000 f82f 	bl	8004d5c <__malloc_unlock>
 8004cfe:	f104 000b 	add.w	r0, r4, #11
 8004d02:	1d23      	adds	r3, r4, #4
 8004d04:	f020 0007 	bic.w	r0, r0, #7
 8004d08:	1ac2      	subs	r2, r0, r3
 8004d0a:	bf1c      	itt	ne
 8004d0c:	1a1b      	subne	r3, r3, r0
 8004d0e:	50a3      	strne	r3, [r4, r2]
 8004d10:	e7af      	b.n	8004c72 <_malloc_r+0x22>
 8004d12:	6862      	ldr	r2, [r4, #4]
 8004d14:	42a3      	cmp	r3, r4
 8004d16:	bf0c      	ite	eq
 8004d18:	f8c8 2000 	streq.w	r2, [r8]
 8004d1c:	605a      	strne	r2, [r3, #4]
 8004d1e:	e7eb      	b.n	8004cf8 <_malloc_r+0xa8>
 8004d20:	4623      	mov	r3, r4
 8004d22:	6864      	ldr	r4, [r4, #4]
 8004d24:	e7ae      	b.n	8004c84 <_malloc_r+0x34>
 8004d26:	463c      	mov	r4, r7
 8004d28:	687f      	ldr	r7, [r7, #4]
 8004d2a:	e7b6      	b.n	8004c9a <_malloc_r+0x4a>
 8004d2c:	461a      	mov	r2, r3
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	42a3      	cmp	r3, r4
 8004d32:	d1fb      	bne.n	8004d2c <_malloc_r+0xdc>
 8004d34:	2300      	movs	r3, #0
 8004d36:	6053      	str	r3, [r2, #4]
 8004d38:	e7de      	b.n	8004cf8 <_malloc_r+0xa8>
 8004d3a:	230c      	movs	r3, #12
 8004d3c:	4630      	mov	r0, r6
 8004d3e:	6033      	str	r3, [r6, #0]
 8004d40:	f000 f80c 	bl	8004d5c <__malloc_unlock>
 8004d44:	e794      	b.n	8004c70 <_malloc_r+0x20>
 8004d46:	6005      	str	r5, [r0, #0]
 8004d48:	e7d6      	b.n	8004cf8 <_malloc_r+0xa8>
 8004d4a:	bf00      	nop
 8004d4c:	2000141c 	.word	0x2000141c

08004d50 <__malloc_lock>:
 8004d50:	4801      	ldr	r0, [pc, #4]	@ (8004d58 <__malloc_lock+0x8>)
 8004d52:	f7ff bf03 	b.w	8004b5c <__retarget_lock_acquire_recursive>
 8004d56:	bf00      	nop
 8004d58:	20001414 	.word	0x20001414

08004d5c <__malloc_unlock>:
 8004d5c:	4801      	ldr	r0, [pc, #4]	@ (8004d64 <__malloc_unlock+0x8>)
 8004d5e:	f7ff befe 	b.w	8004b5e <__retarget_lock_release_recursive>
 8004d62:	bf00      	nop
 8004d64:	20001414 	.word	0x20001414

08004d68 <__ssputs_r>:
 8004d68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d6c:	461f      	mov	r7, r3
 8004d6e:	688e      	ldr	r6, [r1, #8]
 8004d70:	4682      	mov	sl, r0
 8004d72:	42be      	cmp	r6, r7
 8004d74:	460c      	mov	r4, r1
 8004d76:	4690      	mov	r8, r2
 8004d78:	680b      	ldr	r3, [r1, #0]
 8004d7a:	d82d      	bhi.n	8004dd8 <__ssputs_r+0x70>
 8004d7c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004d80:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004d84:	d026      	beq.n	8004dd4 <__ssputs_r+0x6c>
 8004d86:	6965      	ldr	r5, [r4, #20]
 8004d88:	6909      	ldr	r1, [r1, #16]
 8004d8a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004d8e:	eba3 0901 	sub.w	r9, r3, r1
 8004d92:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004d96:	1c7b      	adds	r3, r7, #1
 8004d98:	444b      	add	r3, r9
 8004d9a:	106d      	asrs	r5, r5, #1
 8004d9c:	429d      	cmp	r5, r3
 8004d9e:	bf38      	it	cc
 8004da0:	461d      	movcc	r5, r3
 8004da2:	0553      	lsls	r3, r2, #21
 8004da4:	d527      	bpl.n	8004df6 <__ssputs_r+0x8e>
 8004da6:	4629      	mov	r1, r5
 8004da8:	f7ff ff52 	bl	8004c50 <_malloc_r>
 8004dac:	4606      	mov	r6, r0
 8004dae:	b360      	cbz	r0, 8004e0a <__ssputs_r+0xa2>
 8004db0:	464a      	mov	r2, r9
 8004db2:	6921      	ldr	r1, [r4, #16]
 8004db4:	f7ff fed4 	bl	8004b60 <memcpy>
 8004db8:	89a3      	ldrh	r3, [r4, #12]
 8004dba:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004dbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004dc2:	81a3      	strh	r3, [r4, #12]
 8004dc4:	6126      	str	r6, [r4, #16]
 8004dc6:	444e      	add	r6, r9
 8004dc8:	6026      	str	r6, [r4, #0]
 8004dca:	463e      	mov	r6, r7
 8004dcc:	6165      	str	r5, [r4, #20]
 8004dce:	eba5 0509 	sub.w	r5, r5, r9
 8004dd2:	60a5      	str	r5, [r4, #8]
 8004dd4:	42be      	cmp	r6, r7
 8004dd6:	d900      	bls.n	8004dda <__ssputs_r+0x72>
 8004dd8:	463e      	mov	r6, r7
 8004dda:	4632      	mov	r2, r6
 8004ddc:	4641      	mov	r1, r8
 8004dde:	6820      	ldr	r0, [r4, #0]
 8004de0:	f000 faac 	bl	800533c <memmove>
 8004de4:	2000      	movs	r0, #0
 8004de6:	68a3      	ldr	r3, [r4, #8]
 8004de8:	1b9b      	subs	r3, r3, r6
 8004dea:	60a3      	str	r3, [r4, #8]
 8004dec:	6823      	ldr	r3, [r4, #0]
 8004dee:	4433      	add	r3, r6
 8004df0:	6023      	str	r3, [r4, #0]
 8004df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004df6:	462a      	mov	r2, r5
 8004df8:	f000 fad8 	bl	80053ac <_realloc_r>
 8004dfc:	4606      	mov	r6, r0
 8004dfe:	2800      	cmp	r0, #0
 8004e00:	d1e0      	bne.n	8004dc4 <__ssputs_r+0x5c>
 8004e02:	4650      	mov	r0, sl
 8004e04:	6921      	ldr	r1, [r4, #16]
 8004e06:	f7ff feb9 	bl	8004b7c <_free_r>
 8004e0a:	230c      	movs	r3, #12
 8004e0c:	f8ca 3000 	str.w	r3, [sl]
 8004e10:	89a3      	ldrh	r3, [r4, #12]
 8004e12:	f04f 30ff 	mov.w	r0, #4294967295
 8004e16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e1a:	81a3      	strh	r3, [r4, #12]
 8004e1c:	e7e9      	b.n	8004df2 <__ssputs_r+0x8a>
	...

08004e20 <_svfiprintf_r>:
 8004e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e24:	4698      	mov	r8, r3
 8004e26:	898b      	ldrh	r3, [r1, #12]
 8004e28:	4607      	mov	r7, r0
 8004e2a:	061b      	lsls	r3, r3, #24
 8004e2c:	460d      	mov	r5, r1
 8004e2e:	4614      	mov	r4, r2
 8004e30:	b09d      	sub	sp, #116	@ 0x74
 8004e32:	d510      	bpl.n	8004e56 <_svfiprintf_r+0x36>
 8004e34:	690b      	ldr	r3, [r1, #16]
 8004e36:	b973      	cbnz	r3, 8004e56 <_svfiprintf_r+0x36>
 8004e38:	2140      	movs	r1, #64	@ 0x40
 8004e3a:	f7ff ff09 	bl	8004c50 <_malloc_r>
 8004e3e:	6028      	str	r0, [r5, #0]
 8004e40:	6128      	str	r0, [r5, #16]
 8004e42:	b930      	cbnz	r0, 8004e52 <_svfiprintf_r+0x32>
 8004e44:	230c      	movs	r3, #12
 8004e46:	603b      	str	r3, [r7, #0]
 8004e48:	f04f 30ff 	mov.w	r0, #4294967295
 8004e4c:	b01d      	add	sp, #116	@ 0x74
 8004e4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e52:	2340      	movs	r3, #64	@ 0x40
 8004e54:	616b      	str	r3, [r5, #20]
 8004e56:	2300      	movs	r3, #0
 8004e58:	9309      	str	r3, [sp, #36]	@ 0x24
 8004e5a:	2320      	movs	r3, #32
 8004e5c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004e60:	2330      	movs	r3, #48	@ 0x30
 8004e62:	f04f 0901 	mov.w	r9, #1
 8004e66:	f8cd 800c 	str.w	r8, [sp, #12]
 8004e6a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8005004 <_svfiprintf_r+0x1e4>
 8004e6e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004e72:	4623      	mov	r3, r4
 8004e74:	469a      	mov	sl, r3
 8004e76:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004e7a:	b10a      	cbz	r2, 8004e80 <_svfiprintf_r+0x60>
 8004e7c:	2a25      	cmp	r2, #37	@ 0x25
 8004e7e:	d1f9      	bne.n	8004e74 <_svfiprintf_r+0x54>
 8004e80:	ebba 0b04 	subs.w	fp, sl, r4
 8004e84:	d00b      	beq.n	8004e9e <_svfiprintf_r+0x7e>
 8004e86:	465b      	mov	r3, fp
 8004e88:	4622      	mov	r2, r4
 8004e8a:	4629      	mov	r1, r5
 8004e8c:	4638      	mov	r0, r7
 8004e8e:	f7ff ff6b 	bl	8004d68 <__ssputs_r>
 8004e92:	3001      	adds	r0, #1
 8004e94:	f000 80a7 	beq.w	8004fe6 <_svfiprintf_r+0x1c6>
 8004e98:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004e9a:	445a      	add	r2, fp
 8004e9c:	9209      	str	r2, [sp, #36]	@ 0x24
 8004e9e:	f89a 3000 	ldrb.w	r3, [sl]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	f000 809f 	beq.w	8004fe6 <_svfiprintf_r+0x1c6>
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	f04f 32ff 	mov.w	r2, #4294967295
 8004eae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004eb2:	f10a 0a01 	add.w	sl, sl, #1
 8004eb6:	9304      	str	r3, [sp, #16]
 8004eb8:	9307      	str	r3, [sp, #28]
 8004eba:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004ebe:	931a      	str	r3, [sp, #104]	@ 0x68
 8004ec0:	4654      	mov	r4, sl
 8004ec2:	2205      	movs	r2, #5
 8004ec4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ec8:	484e      	ldr	r0, [pc, #312]	@ (8005004 <_svfiprintf_r+0x1e4>)
 8004eca:	f000 fa61 	bl	8005390 <memchr>
 8004ece:	9a04      	ldr	r2, [sp, #16]
 8004ed0:	b9d8      	cbnz	r0, 8004f0a <_svfiprintf_r+0xea>
 8004ed2:	06d0      	lsls	r0, r2, #27
 8004ed4:	bf44      	itt	mi
 8004ed6:	2320      	movmi	r3, #32
 8004ed8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004edc:	0711      	lsls	r1, r2, #28
 8004ede:	bf44      	itt	mi
 8004ee0:	232b      	movmi	r3, #43	@ 0x2b
 8004ee2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004ee6:	f89a 3000 	ldrb.w	r3, [sl]
 8004eea:	2b2a      	cmp	r3, #42	@ 0x2a
 8004eec:	d015      	beq.n	8004f1a <_svfiprintf_r+0xfa>
 8004eee:	4654      	mov	r4, sl
 8004ef0:	2000      	movs	r0, #0
 8004ef2:	f04f 0c0a 	mov.w	ip, #10
 8004ef6:	9a07      	ldr	r2, [sp, #28]
 8004ef8:	4621      	mov	r1, r4
 8004efa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004efe:	3b30      	subs	r3, #48	@ 0x30
 8004f00:	2b09      	cmp	r3, #9
 8004f02:	d94b      	bls.n	8004f9c <_svfiprintf_r+0x17c>
 8004f04:	b1b0      	cbz	r0, 8004f34 <_svfiprintf_r+0x114>
 8004f06:	9207      	str	r2, [sp, #28]
 8004f08:	e014      	b.n	8004f34 <_svfiprintf_r+0x114>
 8004f0a:	eba0 0308 	sub.w	r3, r0, r8
 8004f0e:	fa09 f303 	lsl.w	r3, r9, r3
 8004f12:	4313      	orrs	r3, r2
 8004f14:	46a2      	mov	sl, r4
 8004f16:	9304      	str	r3, [sp, #16]
 8004f18:	e7d2      	b.n	8004ec0 <_svfiprintf_r+0xa0>
 8004f1a:	9b03      	ldr	r3, [sp, #12]
 8004f1c:	1d19      	adds	r1, r3, #4
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	9103      	str	r1, [sp, #12]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	bfbb      	ittet	lt
 8004f26:	425b      	neglt	r3, r3
 8004f28:	f042 0202 	orrlt.w	r2, r2, #2
 8004f2c:	9307      	strge	r3, [sp, #28]
 8004f2e:	9307      	strlt	r3, [sp, #28]
 8004f30:	bfb8      	it	lt
 8004f32:	9204      	strlt	r2, [sp, #16]
 8004f34:	7823      	ldrb	r3, [r4, #0]
 8004f36:	2b2e      	cmp	r3, #46	@ 0x2e
 8004f38:	d10a      	bne.n	8004f50 <_svfiprintf_r+0x130>
 8004f3a:	7863      	ldrb	r3, [r4, #1]
 8004f3c:	2b2a      	cmp	r3, #42	@ 0x2a
 8004f3e:	d132      	bne.n	8004fa6 <_svfiprintf_r+0x186>
 8004f40:	9b03      	ldr	r3, [sp, #12]
 8004f42:	3402      	adds	r4, #2
 8004f44:	1d1a      	adds	r2, r3, #4
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	9203      	str	r2, [sp, #12]
 8004f4a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004f4e:	9305      	str	r3, [sp, #20]
 8004f50:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8005008 <_svfiprintf_r+0x1e8>
 8004f54:	2203      	movs	r2, #3
 8004f56:	4650      	mov	r0, sl
 8004f58:	7821      	ldrb	r1, [r4, #0]
 8004f5a:	f000 fa19 	bl	8005390 <memchr>
 8004f5e:	b138      	cbz	r0, 8004f70 <_svfiprintf_r+0x150>
 8004f60:	2240      	movs	r2, #64	@ 0x40
 8004f62:	9b04      	ldr	r3, [sp, #16]
 8004f64:	eba0 000a 	sub.w	r0, r0, sl
 8004f68:	4082      	lsls	r2, r0
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	3401      	adds	r4, #1
 8004f6e:	9304      	str	r3, [sp, #16]
 8004f70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f74:	2206      	movs	r2, #6
 8004f76:	4825      	ldr	r0, [pc, #148]	@ (800500c <_svfiprintf_r+0x1ec>)
 8004f78:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004f7c:	f000 fa08 	bl	8005390 <memchr>
 8004f80:	2800      	cmp	r0, #0
 8004f82:	d036      	beq.n	8004ff2 <_svfiprintf_r+0x1d2>
 8004f84:	4b22      	ldr	r3, [pc, #136]	@ (8005010 <_svfiprintf_r+0x1f0>)
 8004f86:	bb1b      	cbnz	r3, 8004fd0 <_svfiprintf_r+0x1b0>
 8004f88:	9b03      	ldr	r3, [sp, #12]
 8004f8a:	3307      	adds	r3, #7
 8004f8c:	f023 0307 	bic.w	r3, r3, #7
 8004f90:	3308      	adds	r3, #8
 8004f92:	9303      	str	r3, [sp, #12]
 8004f94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f96:	4433      	add	r3, r6
 8004f98:	9309      	str	r3, [sp, #36]	@ 0x24
 8004f9a:	e76a      	b.n	8004e72 <_svfiprintf_r+0x52>
 8004f9c:	460c      	mov	r4, r1
 8004f9e:	2001      	movs	r0, #1
 8004fa0:	fb0c 3202 	mla	r2, ip, r2, r3
 8004fa4:	e7a8      	b.n	8004ef8 <_svfiprintf_r+0xd8>
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	f04f 0c0a 	mov.w	ip, #10
 8004fac:	4619      	mov	r1, r3
 8004fae:	3401      	adds	r4, #1
 8004fb0:	9305      	str	r3, [sp, #20]
 8004fb2:	4620      	mov	r0, r4
 8004fb4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004fb8:	3a30      	subs	r2, #48	@ 0x30
 8004fba:	2a09      	cmp	r2, #9
 8004fbc:	d903      	bls.n	8004fc6 <_svfiprintf_r+0x1a6>
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d0c6      	beq.n	8004f50 <_svfiprintf_r+0x130>
 8004fc2:	9105      	str	r1, [sp, #20]
 8004fc4:	e7c4      	b.n	8004f50 <_svfiprintf_r+0x130>
 8004fc6:	4604      	mov	r4, r0
 8004fc8:	2301      	movs	r3, #1
 8004fca:	fb0c 2101 	mla	r1, ip, r1, r2
 8004fce:	e7f0      	b.n	8004fb2 <_svfiprintf_r+0x192>
 8004fd0:	ab03      	add	r3, sp, #12
 8004fd2:	9300      	str	r3, [sp, #0]
 8004fd4:	462a      	mov	r2, r5
 8004fd6:	4638      	mov	r0, r7
 8004fd8:	4b0e      	ldr	r3, [pc, #56]	@ (8005014 <_svfiprintf_r+0x1f4>)
 8004fda:	a904      	add	r1, sp, #16
 8004fdc:	f3af 8000 	nop.w
 8004fe0:	1c42      	adds	r2, r0, #1
 8004fe2:	4606      	mov	r6, r0
 8004fe4:	d1d6      	bne.n	8004f94 <_svfiprintf_r+0x174>
 8004fe6:	89ab      	ldrh	r3, [r5, #12]
 8004fe8:	065b      	lsls	r3, r3, #25
 8004fea:	f53f af2d 	bmi.w	8004e48 <_svfiprintf_r+0x28>
 8004fee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004ff0:	e72c      	b.n	8004e4c <_svfiprintf_r+0x2c>
 8004ff2:	ab03      	add	r3, sp, #12
 8004ff4:	9300      	str	r3, [sp, #0]
 8004ff6:	462a      	mov	r2, r5
 8004ff8:	4638      	mov	r0, r7
 8004ffa:	4b06      	ldr	r3, [pc, #24]	@ (8005014 <_svfiprintf_r+0x1f4>)
 8004ffc:	a904      	add	r1, sp, #16
 8004ffe:	f000 f87d 	bl	80050fc <_printf_i>
 8005002:	e7ed      	b.n	8004fe0 <_svfiprintf_r+0x1c0>
 8005004:	08005647 	.word	0x08005647
 8005008:	0800564d 	.word	0x0800564d
 800500c:	08005651 	.word	0x08005651
 8005010:	00000000 	.word	0x00000000
 8005014:	08004d69 	.word	0x08004d69

08005018 <_printf_common>:
 8005018:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800501c:	4616      	mov	r6, r2
 800501e:	4698      	mov	r8, r3
 8005020:	688a      	ldr	r2, [r1, #8]
 8005022:	690b      	ldr	r3, [r1, #16]
 8005024:	4607      	mov	r7, r0
 8005026:	4293      	cmp	r3, r2
 8005028:	bfb8      	it	lt
 800502a:	4613      	movlt	r3, r2
 800502c:	6033      	str	r3, [r6, #0]
 800502e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005032:	460c      	mov	r4, r1
 8005034:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005038:	b10a      	cbz	r2, 800503e <_printf_common+0x26>
 800503a:	3301      	adds	r3, #1
 800503c:	6033      	str	r3, [r6, #0]
 800503e:	6823      	ldr	r3, [r4, #0]
 8005040:	0699      	lsls	r1, r3, #26
 8005042:	bf42      	ittt	mi
 8005044:	6833      	ldrmi	r3, [r6, #0]
 8005046:	3302      	addmi	r3, #2
 8005048:	6033      	strmi	r3, [r6, #0]
 800504a:	6825      	ldr	r5, [r4, #0]
 800504c:	f015 0506 	ands.w	r5, r5, #6
 8005050:	d106      	bne.n	8005060 <_printf_common+0x48>
 8005052:	f104 0a19 	add.w	sl, r4, #25
 8005056:	68e3      	ldr	r3, [r4, #12]
 8005058:	6832      	ldr	r2, [r6, #0]
 800505a:	1a9b      	subs	r3, r3, r2
 800505c:	42ab      	cmp	r3, r5
 800505e:	dc2b      	bgt.n	80050b8 <_printf_common+0xa0>
 8005060:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005064:	6822      	ldr	r2, [r4, #0]
 8005066:	3b00      	subs	r3, #0
 8005068:	bf18      	it	ne
 800506a:	2301      	movne	r3, #1
 800506c:	0692      	lsls	r2, r2, #26
 800506e:	d430      	bmi.n	80050d2 <_printf_common+0xba>
 8005070:	4641      	mov	r1, r8
 8005072:	4638      	mov	r0, r7
 8005074:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005078:	47c8      	blx	r9
 800507a:	3001      	adds	r0, #1
 800507c:	d023      	beq.n	80050c6 <_printf_common+0xae>
 800507e:	6823      	ldr	r3, [r4, #0]
 8005080:	6922      	ldr	r2, [r4, #16]
 8005082:	f003 0306 	and.w	r3, r3, #6
 8005086:	2b04      	cmp	r3, #4
 8005088:	bf14      	ite	ne
 800508a:	2500      	movne	r5, #0
 800508c:	6833      	ldreq	r3, [r6, #0]
 800508e:	f04f 0600 	mov.w	r6, #0
 8005092:	bf08      	it	eq
 8005094:	68e5      	ldreq	r5, [r4, #12]
 8005096:	f104 041a 	add.w	r4, r4, #26
 800509a:	bf08      	it	eq
 800509c:	1aed      	subeq	r5, r5, r3
 800509e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80050a2:	bf08      	it	eq
 80050a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80050a8:	4293      	cmp	r3, r2
 80050aa:	bfc4      	itt	gt
 80050ac:	1a9b      	subgt	r3, r3, r2
 80050ae:	18ed      	addgt	r5, r5, r3
 80050b0:	42b5      	cmp	r5, r6
 80050b2:	d11a      	bne.n	80050ea <_printf_common+0xd2>
 80050b4:	2000      	movs	r0, #0
 80050b6:	e008      	b.n	80050ca <_printf_common+0xb2>
 80050b8:	2301      	movs	r3, #1
 80050ba:	4652      	mov	r2, sl
 80050bc:	4641      	mov	r1, r8
 80050be:	4638      	mov	r0, r7
 80050c0:	47c8      	blx	r9
 80050c2:	3001      	adds	r0, #1
 80050c4:	d103      	bne.n	80050ce <_printf_common+0xb6>
 80050c6:	f04f 30ff 	mov.w	r0, #4294967295
 80050ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050ce:	3501      	adds	r5, #1
 80050d0:	e7c1      	b.n	8005056 <_printf_common+0x3e>
 80050d2:	2030      	movs	r0, #48	@ 0x30
 80050d4:	18e1      	adds	r1, r4, r3
 80050d6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80050da:	1c5a      	adds	r2, r3, #1
 80050dc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80050e0:	4422      	add	r2, r4
 80050e2:	3302      	adds	r3, #2
 80050e4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80050e8:	e7c2      	b.n	8005070 <_printf_common+0x58>
 80050ea:	2301      	movs	r3, #1
 80050ec:	4622      	mov	r2, r4
 80050ee:	4641      	mov	r1, r8
 80050f0:	4638      	mov	r0, r7
 80050f2:	47c8      	blx	r9
 80050f4:	3001      	adds	r0, #1
 80050f6:	d0e6      	beq.n	80050c6 <_printf_common+0xae>
 80050f8:	3601      	adds	r6, #1
 80050fa:	e7d9      	b.n	80050b0 <_printf_common+0x98>

080050fc <_printf_i>:
 80050fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005100:	7e0f      	ldrb	r7, [r1, #24]
 8005102:	4691      	mov	r9, r2
 8005104:	2f78      	cmp	r7, #120	@ 0x78
 8005106:	4680      	mov	r8, r0
 8005108:	460c      	mov	r4, r1
 800510a:	469a      	mov	sl, r3
 800510c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800510e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005112:	d807      	bhi.n	8005124 <_printf_i+0x28>
 8005114:	2f62      	cmp	r7, #98	@ 0x62
 8005116:	d80a      	bhi.n	800512e <_printf_i+0x32>
 8005118:	2f00      	cmp	r7, #0
 800511a:	f000 80d3 	beq.w	80052c4 <_printf_i+0x1c8>
 800511e:	2f58      	cmp	r7, #88	@ 0x58
 8005120:	f000 80ba 	beq.w	8005298 <_printf_i+0x19c>
 8005124:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005128:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800512c:	e03a      	b.n	80051a4 <_printf_i+0xa8>
 800512e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005132:	2b15      	cmp	r3, #21
 8005134:	d8f6      	bhi.n	8005124 <_printf_i+0x28>
 8005136:	a101      	add	r1, pc, #4	@ (adr r1, 800513c <_printf_i+0x40>)
 8005138:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800513c:	08005195 	.word	0x08005195
 8005140:	080051a9 	.word	0x080051a9
 8005144:	08005125 	.word	0x08005125
 8005148:	08005125 	.word	0x08005125
 800514c:	08005125 	.word	0x08005125
 8005150:	08005125 	.word	0x08005125
 8005154:	080051a9 	.word	0x080051a9
 8005158:	08005125 	.word	0x08005125
 800515c:	08005125 	.word	0x08005125
 8005160:	08005125 	.word	0x08005125
 8005164:	08005125 	.word	0x08005125
 8005168:	080052ab 	.word	0x080052ab
 800516c:	080051d3 	.word	0x080051d3
 8005170:	08005265 	.word	0x08005265
 8005174:	08005125 	.word	0x08005125
 8005178:	08005125 	.word	0x08005125
 800517c:	080052cd 	.word	0x080052cd
 8005180:	08005125 	.word	0x08005125
 8005184:	080051d3 	.word	0x080051d3
 8005188:	08005125 	.word	0x08005125
 800518c:	08005125 	.word	0x08005125
 8005190:	0800526d 	.word	0x0800526d
 8005194:	6833      	ldr	r3, [r6, #0]
 8005196:	1d1a      	adds	r2, r3, #4
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	6032      	str	r2, [r6, #0]
 800519c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80051a0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80051a4:	2301      	movs	r3, #1
 80051a6:	e09e      	b.n	80052e6 <_printf_i+0x1ea>
 80051a8:	6833      	ldr	r3, [r6, #0]
 80051aa:	6820      	ldr	r0, [r4, #0]
 80051ac:	1d19      	adds	r1, r3, #4
 80051ae:	6031      	str	r1, [r6, #0]
 80051b0:	0606      	lsls	r6, r0, #24
 80051b2:	d501      	bpl.n	80051b8 <_printf_i+0xbc>
 80051b4:	681d      	ldr	r5, [r3, #0]
 80051b6:	e003      	b.n	80051c0 <_printf_i+0xc4>
 80051b8:	0645      	lsls	r5, r0, #25
 80051ba:	d5fb      	bpl.n	80051b4 <_printf_i+0xb8>
 80051bc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80051c0:	2d00      	cmp	r5, #0
 80051c2:	da03      	bge.n	80051cc <_printf_i+0xd0>
 80051c4:	232d      	movs	r3, #45	@ 0x2d
 80051c6:	426d      	negs	r5, r5
 80051c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80051cc:	230a      	movs	r3, #10
 80051ce:	4859      	ldr	r0, [pc, #356]	@ (8005334 <_printf_i+0x238>)
 80051d0:	e011      	b.n	80051f6 <_printf_i+0xfa>
 80051d2:	6821      	ldr	r1, [r4, #0]
 80051d4:	6833      	ldr	r3, [r6, #0]
 80051d6:	0608      	lsls	r0, r1, #24
 80051d8:	f853 5b04 	ldr.w	r5, [r3], #4
 80051dc:	d402      	bmi.n	80051e4 <_printf_i+0xe8>
 80051de:	0649      	lsls	r1, r1, #25
 80051e0:	bf48      	it	mi
 80051e2:	b2ad      	uxthmi	r5, r5
 80051e4:	2f6f      	cmp	r7, #111	@ 0x6f
 80051e6:	6033      	str	r3, [r6, #0]
 80051e8:	bf14      	ite	ne
 80051ea:	230a      	movne	r3, #10
 80051ec:	2308      	moveq	r3, #8
 80051ee:	4851      	ldr	r0, [pc, #324]	@ (8005334 <_printf_i+0x238>)
 80051f0:	2100      	movs	r1, #0
 80051f2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80051f6:	6866      	ldr	r6, [r4, #4]
 80051f8:	2e00      	cmp	r6, #0
 80051fa:	bfa8      	it	ge
 80051fc:	6821      	ldrge	r1, [r4, #0]
 80051fe:	60a6      	str	r6, [r4, #8]
 8005200:	bfa4      	itt	ge
 8005202:	f021 0104 	bicge.w	r1, r1, #4
 8005206:	6021      	strge	r1, [r4, #0]
 8005208:	b90d      	cbnz	r5, 800520e <_printf_i+0x112>
 800520a:	2e00      	cmp	r6, #0
 800520c:	d04b      	beq.n	80052a6 <_printf_i+0x1aa>
 800520e:	4616      	mov	r6, r2
 8005210:	fbb5 f1f3 	udiv	r1, r5, r3
 8005214:	fb03 5711 	mls	r7, r3, r1, r5
 8005218:	5dc7      	ldrb	r7, [r0, r7]
 800521a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800521e:	462f      	mov	r7, r5
 8005220:	42bb      	cmp	r3, r7
 8005222:	460d      	mov	r5, r1
 8005224:	d9f4      	bls.n	8005210 <_printf_i+0x114>
 8005226:	2b08      	cmp	r3, #8
 8005228:	d10b      	bne.n	8005242 <_printf_i+0x146>
 800522a:	6823      	ldr	r3, [r4, #0]
 800522c:	07df      	lsls	r7, r3, #31
 800522e:	d508      	bpl.n	8005242 <_printf_i+0x146>
 8005230:	6923      	ldr	r3, [r4, #16]
 8005232:	6861      	ldr	r1, [r4, #4]
 8005234:	4299      	cmp	r1, r3
 8005236:	bfde      	ittt	le
 8005238:	2330      	movle	r3, #48	@ 0x30
 800523a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800523e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005242:	1b92      	subs	r2, r2, r6
 8005244:	6122      	str	r2, [r4, #16]
 8005246:	464b      	mov	r3, r9
 8005248:	4621      	mov	r1, r4
 800524a:	4640      	mov	r0, r8
 800524c:	f8cd a000 	str.w	sl, [sp]
 8005250:	aa03      	add	r2, sp, #12
 8005252:	f7ff fee1 	bl	8005018 <_printf_common>
 8005256:	3001      	adds	r0, #1
 8005258:	d14a      	bne.n	80052f0 <_printf_i+0x1f4>
 800525a:	f04f 30ff 	mov.w	r0, #4294967295
 800525e:	b004      	add	sp, #16
 8005260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005264:	6823      	ldr	r3, [r4, #0]
 8005266:	f043 0320 	orr.w	r3, r3, #32
 800526a:	6023      	str	r3, [r4, #0]
 800526c:	2778      	movs	r7, #120	@ 0x78
 800526e:	4832      	ldr	r0, [pc, #200]	@ (8005338 <_printf_i+0x23c>)
 8005270:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005274:	6823      	ldr	r3, [r4, #0]
 8005276:	6831      	ldr	r1, [r6, #0]
 8005278:	061f      	lsls	r7, r3, #24
 800527a:	f851 5b04 	ldr.w	r5, [r1], #4
 800527e:	d402      	bmi.n	8005286 <_printf_i+0x18a>
 8005280:	065f      	lsls	r7, r3, #25
 8005282:	bf48      	it	mi
 8005284:	b2ad      	uxthmi	r5, r5
 8005286:	6031      	str	r1, [r6, #0]
 8005288:	07d9      	lsls	r1, r3, #31
 800528a:	bf44      	itt	mi
 800528c:	f043 0320 	orrmi.w	r3, r3, #32
 8005290:	6023      	strmi	r3, [r4, #0]
 8005292:	b11d      	cbz	r5, 800529c <_printf_i+0x1a0>
 8005294:	2310      	movs	r3, #16
 8005296:	e7ab      	b.n	80051f0 <_printf_i+0xf4>
 8005298:	4826      	ldr	r0, [pc, #152]	@ (8005334 <_printf_i+0x238>)
 800529a:	e7e9      	b.n	8005270 <_printf_i+0x174>
 800529c:	6823      	ldr	r3, [r4, #0]
 800529e:	f023 0320 	bic.w	r3, r3, #32
 80052a2:	6023      	str	r3, [r4, #0]
 80052a4:	e7f6      	b.n	8005294 <_printf_i+0x198>
 80052a6:	4616      	mov	r6, r2
 80052a8:	e7bd      	b.n	8005226 <_printf_i+0x12a>
 80052aa:	6833      	ldr	r3, [r6, #0]
 80052ac:	6825      	ldr	r5, [r4, #0]
 80052ae:	1d18      	adds	r0, r3, #4
 80052b0:	6961      	ldr	r1, [r4, #20]
 80052b2:	6030      	str	r0, [r6, #0]
 80052b4:	062e      	lsls	r6, r5, #24
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	d501      	bpl.n	80052be <_printf_i+0x1c2>
 80052ba:	6019      	str	r1, [r3, #0]
 80052bc:	e002      	b.n	80052c4 <_printf_i+0x1c8>
 80052be:	0668      	lsls	r0, r5, #25
 80052c0:	d5fb      	bpl.n	80052ba <_printf_i+0x1be>
 80052c2:	8019      	strh	r1, [r3, #0]
 80052c4:	2300      	movs	r3, #0
 80052c6:	4616      	mov	r6, r2
 80052c8:	6123      	str	r3, [r4, #16]
 80052ca:	e7bc      	b.n	8005246 <_printf_i+0x14a>
 80052cc:	6833      	ldr	r3, [r6, #0]
 80052ce:	2100      	movs	r1, #0
 80052d0:	1d1a      	adds	r2, r3, #4
 80052d2:	6032      	str	r2, [r6, #0]
 80052d4:	681e      	ldr	r6, [r3, #0]
 80052d6:	6862      	ldr	r2, [r4, #4]
 80052d8:	4630      	mov	r0, r6
 80052da:	f000 f859 	bl	8005390 <memchr>
 80052de:	b108      	cbz	r0, 80052e4 <_printf_i+0x1e8>
 80052e0:	1b80      	subs	r0, r0, r6
 80052e2:	6060      	str	r0, [r4, #4]
 80052e4:	6863      	ldr	r3, [r4, #4]
 80052e6:	6123      	str	r3, [r4, #16]
 80052e8:	2300      	movs	r3, #0
 80052ea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80052ee:	e7aa      	b.n	8005246 <_printf_i+0x14a>
 80052f0:	4632      	mov	r2, r6
 80052f2:	4649      	mov	r1, r9
 80052f4:	4640      	mov	r0, r8
 80052f6:	6923      	ldr	r3, [r4, #16]
 80052f8:	47d0      	blx	sl
 80052fa:	3001      	adds	r0, #1
 80052fc:	d0ad      	beq.n	800525a <_printf_i+0x15e>
 80052fe:	6823      	ldr	r3, [r4, #0]
 8005300:	079b      	lsls	r3, r3, #30
 8005302:	d413      	bmi.n	800532c <_printf_i+0x230>
 8005304:	68e0      	ldr	r0, [r4, #12]
 8005306:	9b03      	ldr	r3, [sp, #12]
 8005308:	4298      	cmp	r0, r3
 800530a:	bfb8      	it	lt
 800530c:	4618      	movlt	r0, r3
 800530e:	e7a6      	b.n	800525e <_printf_i+0x162>
 8005310:	2301      	movs	r3, #1
 8005312:	4632      	mov	r2, r6
 8005314:	4649      	mov	r1, r9
 8005316:	4640      	mov	r0, r8
 8005318:	47d0      	blx	sl
 800531a:	3001      	adds	r0, #1
 800531c:	d09d      	beq.n	800525a <_printf_i+0x15e>
 800531e:	3501      	adds	r5, #1
 8005320:	68e3      	ldr	r3, [r4, #12]
 8005322:	9903      	ldr	r1, [sp, #12]
 8005324:	1a5b      	subs	r3, r3, r1
 8005326:	42ab      	cmp	r3, r5
 8005328:	dcf2      	bgt.n	8005310 <_printf_i+0x214>
 800532a:	e7eb      	b.n	8005304 <_printf_i+0x208>
 800532c:	2500      	movs	r5, #0
 800532e:	f104 0619 	add.w	r6, r4, #25
 8005332:	e7f5      	b.n	8005320 <_printf_i+0x224>
 8005334:	08005658 	.word	0x08005658
 8005338:	08005669 	.word	0x08005669

0800533c <memmove>:
 800533c:	4288      	cmp	r0, r1
 800533e:	b510      	push	{r4, lr}
 8005340:	eb01 0402 	add.w	r4, r1, r2
 8005344:	d902      	bls.n	800534c <memmove+0x10>
 8005346:	4284      	cmp	r4, r0
 8005348:	4623      	mov	r3, r4
 800534a:	d807      	bhi.n	800535c <memmove+0x20>
 800534c:	1e43      	subs	r3, r0, #1
 800534e:	42a1      	cmp	r1, r4
 8005350:	d008      	beq.n	8005364 <memmove+0x28>
 8005352:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005356:	f803 2f01 	strb.w	r2, [r3, #1]!
 800535a:	e7f8      	b.n	800534e <memmove+0x12>
 800535c:	4601      	mov	r1, r0
 800535e:	4402      	add	r2, r0
 8005360:	428a      	cmp	r2, r1
 8005362:	d100      	bne.n	8005366 <memmove+0x2a>
 8005364:	bd10      	pop	{r4, pc}
 8005366:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800536a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800536e:	e7f7      	b.n	8005360 <memmove+0x24>

08005370 <_sbrk_r>:
 8005370:	b538      	push	{r3, r4, r5, lr}
 8005372:	2300      	movs	r3, #0
 8005374:	4d05      	ldr	r5, [pc, #20]	@ (800538c <_sbrk_r+0x1c>)
 8005376:	4604      	mov	r4, r0
 8005378:	4608      	mov	r0, r1
 800537a:	602b      	str	r3, [r5, #0]
 800537c:	f7fb ff6c 	bl	8001258 <_sbrk>
 8005380:	1c43      	adds	r3, r0, #1
 8005382:	d102      	bne.n	800538a <_sbrk_r+0x1a>
 8005384:	682b      	ldr	r3, [r5, #0]
 8005386:	b103      	cbz	r3, 800538a <_sbrk_r+0x1a>
 8005388:	6023      	str	r3, [r4, #0]
 800538a:	bd38      	pop	{r3, r4, r5, pc}
 800538c:	20001410 	.word	0x20001410

08005390 <memchr>:
 8005390:	4603      	mov	r3, r0
 8005392:	b510      	push	{r4, lr}
 8005394:	b2c9      	uxtb	r1, r1
 8005396:	4402      	add	r2, r0
 8005398:	4293      	cmp	r3, r2
 800539a:	4618      	mov	r0, r3
 800539c:	d101      	bne.n	80053a2 <memchr+0x12>
 800539e:	2000      	movs	r0, #0
 80053a0:	e003      	b.n	80053aa <memchr+0x1a>
 80053a2:	7804      	ldrb	r4, [r0, #0]
 80053a4:	3301      	adds	r3, #1
 80053a6:	428c      	cmp	r4, r1
 80053a8:	d1f6      	bne.n	8005398 <memchr+0x8>
 80053aa:	bd10      	pop	{r4, pc}

080053ac <_realloc_r>:
 80053ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053b0:	4680      	mov	r8, r0
 80053b2:	4615      	mov	r5, r2
 80053b4:	460c      	mov	r4, r1
 80053b6:	b921      	cbnz	r1, 80053c2 <_realloc_r+0x16>
 80053b8:	4611      	mov	r1, r2
 80053ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80053be:	f7ff bc47 	b.w	8004c50 <_malloc_r>
 80053c2:	b92a      	cbnz	r2, 80053d0 <_realloc_r+0x24>
 80053c4:	f7ff fbda 	bl	8004b7c <_free_r>
 80053c8:	2400      	movs	r4, #0
 80053ca:	4620      	mov	r0, r4
 80053cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053d0:	f000 f81a 	bl	8005408 <_malloc_usable_size_r>
 80053d4:	4285      	cmp	r5, r0
 80053d6:	4606      	mov	r6, r0
 80053d8:	d802      	bhi.n	80053e0 <_realloc_r+0x34>
 80053da:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80053de:	d8f4      	bhi.n	80053ca <_realloc_r+0x1e>
 80053e0:	4629      	mov	r1, r5
 80053e2:	4640      	mov	r0, r8
 80053e4:	f7ff fc34 	bl	8004c50 <_malloc_r>
 80053e8:	4607      	mov	r7, r0
 80053ea:	2800      	cmp	r0, #0
 80053ec:	d0ec      	beq.n	80053c8 <_realloc_r+0x1c>
 80053ee:	42b5      	cmp	r5, r6
 80053f0:	462a      	mov	r2, r5
 80053f2:	4621      	mov	r1, r4
 80053f4:	bf28      	it	cs
 80053f6:	4632      	movcs	r2, r6
 80053f8:	f7ff fbb2 	bl	8004b60 <memcpy>
 80053fc:	4621      	mov	r1, r4
 80053fe:	4640      	mov	r0, r8
 8005400:	f7ff fbbc 	bl	8004b7c <_free_r>
 8005404:	463c      	mov	r4, r7
 8005406:	e7e0      	b.n	80053ca <_realloc_r+0x1e>

08005408 <_malloc_usable_size_r>:
 8005408:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800540c:	1f18      	subs	r0, r3, #4
 800540e:	2b00      	cmp	r3, #0
 8005410:	bfbc      	itt	lt
 8005412:	580b      	ldrlt	r3, [r1, r0]
 8005414:	18c0      	addlt	r0, r0, r3
 8005416:	4770      	bx	lr

08005418 <_init>:
 8005418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800541a:	bf00      	nop
 800541c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800541e:	bc08      	pop	{r3}
 8005420:	469e      	mov	lr, r3
 8005422:	4770      	bx	lr

08005424 <_fini>:
 8005424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005426:	bf00      	nop
 8005428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800542a:	bc08      	pop	{r3}
 800542c:	469e      	mov	lr, r3
 800542e:	4770      	bx	lr
