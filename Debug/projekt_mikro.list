
projekt_mikro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d68  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  08004e74  08004e74  00005e74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050b4  080050b4  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  080050b4  080050b4  000060b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080050bc  080050bc  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050bc  080050bc  000060bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080050c0  080050c0  000060c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080050c4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007a8  20000068  0800512c  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000810  0800512c  00007810  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d1ff  00000000  00000000  00007091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002379  00000000  00000000  00014290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d88  00000000  00000000  00016610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a81  00000000  00000000  00017398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018d5e  00000000  00000000  00017e19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fe47  00000000  00000000  00030b77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c6eb  00000000  00000000  000409be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cd0a9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000415c  00000000  00000000  000cd0ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000d1248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08004e5c 	.word	0x08004e5c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08004e5c 	.word	0x08004e5c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b088      	sub	sp, #32
 8000160:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000162:	f107 0310 	add.w	r3, r7, #16
 8000166:	2200      	movs	r2, #0
 8000168:	601a      	str	r2, [r3, #0]
 800016a:	605a      	str	r2, [r3, #4]
 800016c:	609a      	str	r2, [r3, #8]
 800016e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000170:	4b2d      	ldr	r3, [pc, #180]	@ (8000228 <MX_GPIO_Init+0xcc>)
 8000172:	699b      	ldr	r3, [r3, #24]
 8000174:	4a2c      	ldr	r2, [pc, #176]	@ (8000228 <MX_GPIO_Init+0xcc>)
 8000176:	f043 0310 	orr.w	r3, r3, #16
 800017a:	6193      	str	r3, [r2, #24]
 800017c:	4b2a      	ldr	r3, [pc, #168]	@ (8000228 <MX_GPIO_Init+0xcc>)
 800017e:	699b      	ldr	r3, [r3, #24]
 8000180:	f003 0310 	and.w	r3, r3, #16
 8000184:	60fb      	str	r3, [r7, #12]
 8000186:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000188:	4b27      	ldr	r3, [pc, #156]	@ (8000228 <MX_GPIO_Init+0xcc>)
 800018a:	699b      	ldr	r3, [r3, #24]
 800018c:	4a26      	ldr	r2, [pc, #152]	@ (8000228 <MX_GPIO_Init+0xcc>)
 800018e:	f043 0320 	orr.w	r3, r3, #32
 8000192:	6193      	str	r3, [r2, #24]
 8000194:	4b24      	ldr	r3, [pc, #144]	@ (8000228 <MX_GPIO_Init+0xcc>)
 8000196:	699b      	ldr	r3, [r3, #24]
 8000198:	f003 0320 	and.w	r3, r3, #32
 800019c:	60bb      	str	r3, [r7, #8]
 800019e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001a0:	4b21      	ldr	r3, [pc, #132]	@ (8000228 <MX_GPIO_Init+0xcc>)
 80001a2:	699b      	ldr	r3, [r3, #24]
 80001a4:	4a20      	ldr	r2, [pc, #128]	@ (8000228 <MX_GPIO_Init+0xcc>)
 80001a6:	f043 0304 	orr.w	r3, r3, #4
 80001aa:	6193      	str	r3, [r2, #24]
 80001ac:	4b1e      	ldr	r3, [pc, #120]	@ (8000228 <MX_GPIO_Init+0xcc>)
 80001ae:	699b      	ldr	r3, [r3, #24]
 80001b0:	f003 0304 	and.w	r3, r3, #4
 80001b4:	607b      	str	r3, [r7, #4]
 80001b6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001b8:	4b1b      	ldr	r3, [pc, #108]	@ (8000228 <MX_GPIO_Init+0xcc>)
 80001ba:	699b      	ldr	r3, [r3, #24]
 80001bc:	4a1a      	ldr	r2, [pc, #104]	@ (8000228 <MX_GPIO_Init+0xcc>)
 80001be:	f043 0308 	orr.w	r3, r3, #8
 80001c2:	6193      	str	r3, [r2, #24]
 80001c4:	4b18      	ldr	r3, [pc, #96]	@ (8000228 <MX_GPIO_Init+0xcc>)
 80001c6:	699b      	ldr	r3, [r3, #24]
 80001c8:	f003 0308 	and.w	r3, r3, #8
 80001cc:	603b      	str	r3, [r7, #0]
 80001ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80001d0:	2200      	movs	r2, #0
 80001d2:	2120      	movs	r1, #32
 80001d4:	4815      	ldr	r0, [pc, #84]	@ (800022c <MX_GPIO_Init+0xd0>)
 80001d6:	f001 fc1d 	bl	8001a14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80001da:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80001de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80001e0:	4b13      	ldr	r3, [pc, #76]	@ (8000230 <MX_GPIO_Init+0xd4>)
 80001e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001e4:	2300      	movs	r3, #0
 80001e6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80001e8:	f107 0310 	add.w	r3, r7, #16
 80001ec:	4619      	mov	r1, r3
 80001ee:	4811      	ldr	r0, [pc, #68]	@ (8000234 <MX_GPIO_Init+0xd8>)
 80001f0:	f001 fa8c 	bl	800170c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80001f4:	2320      	movs	r3, #32
 80001f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001f8:	2301      	movs	r3, #1
 80001fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001fc:	2300      	movs	r3, #0
 80001fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000200:	2302      	movs	r3, #2
 8000202:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000204:	f107 0310 	add.w	r3, r7, #16
 8000208:	4619      	mov	r1, r3
 800020a:	4808      	ldr	r0, [pc, #32]	@ (800022c <MX_GPIO_Init+0xd0>)
 800020c:	f001 fa7e 	bl	800170c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000210:	2200      	movs	r2, #0
 8000212:	2100      	movs	r1, #0
 8000214:	2028      	movs	r0, #40	@ 0x28
 8000216:	f001 f990 	bl	800153a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800021a:	2028      	movs	r0, #40	@ 0x28
 800021c:	f001 f9a9 	bl	8001572 <HAL_NVIC_EnableIRQ>

}
 8000220:	bf00      	nop
 8000222:	3720      	adds	r7, #32
 8000224:	46bd      	mov	sp, r7
 8000226:	bd80      	pop	{r7, pc}
 8000228:	40021000 	.word	0x40021000
 800022c:	40010800 	.word	0x40010800
 8000230:	10110000 	.word	0x10110000
 8000234:	40011000 	.word	0x40011000

08000238 <calculate_crc>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* === CRC === */
uint16_t calculate_crc(const char *data, size_t length) {
 8000238:	b480      	push	{r7}
 800023a:	b087      	sub	sp, #28
 800023c:	af00      	add	r7, sp, #0
 800023e:	6078      	str	r0, [r7, #4]
 8000240:	6039      	str	r1, [r7, #0]
	uint16_t crc = 0x0000; // początkowa wartość
 8000242:	2300      	movs	r3, #0
 8000244:	82fb      	strh	r3, [r7, #22]
	uint16_t polynomial = 0xA001; // polinom (odwrócony 0x8005)
 8000246:	f24a 0301 	movw	r3, #40961	@ 0xa001
 800024a:	81bb      	strh	r3, [r7, #12]

	for (size_t i = 0; i < length; i++) {
 800024c:	2300      	movs	r3, #0
 800024e:	613b      	str	r3, [r7, #16]
 8000250:	e022      	b.n	8000298 <calculate_crc+0x60>
		crc ^= (uint8_t)data[i]; // XOR z bieżącym bajtem
 8000252:	687a      	ldr	r2, [r7, #4]
 8000254:	693b      	ldr	r3, [r7, #16]
 8000256:	4413      	add	r3, r2
 8000258:	781b      	ldrb	r3, [r3, #0]
 800025a:	461a      	mov	r2, r3
 800025c:	8afb      	ldrh	r3, [r7, #22]
 800025e:	4053      	eors	r3, r2
 8000260:	82fb      	strh	r3, [r7, #22]
		for (uint8_t bit = 0; bit < 8; bit++) {
 8000262:	2300      	movs	r3, #0
 8000264:	73fb      	strb	r3, [r7, #15]
 8000266:	e011      	b.n	800028c <calculate_crc+0x54>
			if (crc & 0x0001) crc = (crc >> 1) ^ polynomial;
 8000268:	8afb      	ldrh	r3, [r7, #22]
 800026a:	f003 0301 	and.w	r3, r3, #1
 800026e:	2b00      	cmp	r3, #0
 8000270:	d006      	beq.n	8000280 <calculate_crc+0x48>
 8000272:	8afb      	ldrh	r3, [r7, #22]
 8000274:	085b      	lsrs	r3, r3, #1
 8000276:	b29a      	uxth	r2, r3
 8000278:	89bb      	ldrh	r3, [r7, #12]
 800027a:	4053      	eors	r3, r2
 800027c:	82fb      	strh	r3, [r7, #22]
 800027e:	e002      	b.n	8000286 <calculate_crc+0x4e>
			else crc >>= 1;
 8000280:	8afb      	ldrh	r3, [r7, #22]
 8000282:	085b      	lsrs	r3, r3, #1
 8000284:	82fb      	strh	r3, [r7, #22]
		for (uint8_t bit = 0; bit < 8; bit++) {
 8000286:	7bfb      	ldrb	r3, [r7, #15]
 8000288:	3301      	adds	r3, #1
 800028a:	73fb      	strb	r3, [r7, #15]
 800028c:	7bfb      	ldrb	r3, [r7, #15]
 800028e:	2b07      	cmp	r3, #7
 8000290:	d9ea      	bls.n	8000268 <calculate_crc+0x30>
	for (size_t i = 0; i < length; i++) {
 8000292:	693b      	ldr	r3, [r7, #16]
 8000294:	3301      	adds	r3, #1
 8000296:	613b      	str	r3, [r7, #16]
 8000298:	693a      	ldr	r2, [r7, #16]
 800029a:	683b      	ldr	r3, [r7, #0]
 800029c:	429a      	cmp	r2, r3
 800029e:	d3d8      	bcc.n	8000252 <calculate_crc+0x1a>
		}
	}
	return crc;
 80002a0:	8afb      	ldrh	r3, [r7, #22]
}
 80002a2:	4618      	mov	r0, r3
 80002a4:	371c      	adds	r7, #28
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bc80      	pop	{r7}
 80002aa:	4770      	bx	lr

080002ac <calculate_frame_crc>:

uint16_t calculate_frame_crc(Frame *frame) {
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b084      	sub	sp, #16
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
    uint16_t crc = 0x0000; // Początkowa wartość CRC
 80002b4:	2300      	movs	r3, #0
 80002b6:	81fb      	strh	r3, [r7, #14]

    // Oblicz CRC dla pola receiver
    crc = calculate_crc((const char *)frame->receiver, sizeof(frame->receiver)) ^ crc;
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	3303      	adds	r3, #3
 80002bc:	2103      	movs	r1, #3
 80002be:	4618      	mov	r0, r3
 80002c0:	f7ff ffba 	bl	8000238 <calculate_crc>
 80002c4:	4603      	mov	r3, r0
 80002c6:	461a      	mov	r2, r3
 80002c8:	89fb      	ldrh	r3, [r7, #14]
 80002ca:	4053      	eors	r3, r2
 80002cc:	81fb      	strh	r3, [r7, #14]

    // Oblicz CRC dla pola sender
    crc = calculate_crc((const char *)frame->sender, sizeof(frame->sender)) ^ crc;
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	2103      	movs	r1, #3
 80002d2:	4618      	mov	r0, r3
 80002d4:	f7ff ffb0 	bl	8000238 <calculate_crc>
 80002d8:	4603      	mov	r3, r0
 80002da:	461a      	mov	r2, r3
 80002dc:	89fb      	ldrh	r3, [r7, #14]
 80002de:	4053      	eors	r3, r2
 80002e0:	81fb      	strh	r3, [r7, #14]

    // Oblicz CRC dla pola length
    crc = calculate_crc((const char *)frame->length, sizeof(frame->length)) ^ crc;
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	3306      	adds	r3, #6
 80002e6:	2104      	movs	r1, #4
 80002e8:	4618      	mov	r0, r3
 80002ea:	f7ff ffa5 	bl	8000238 <calculate_crc>
 80002ee:	4603      	mov	r3, r0
 80002f0:	461a      	mov	r2, r3
 80002f2:	89fb      	ldrh	r3, [r7, #14]
 80002f4:	4053      	eors	r3, r2
 80002f6:	81fb      	strh	r3, [r7, #14]

    // Oblicz CRC dla pola data
    crc = calculate_crc((const char *)frame->data, sizeof(frame->data)) ^ crc;
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	330a      	adds	r3, #10
 80002fc:	f240 1101 	movw	r1, #257	@ 0x101
 8000300:	4618      	mov	r0, r3
 8000302:	f7ff ff99 	bl	8000238 <calculate_crc>
 8000306:	4603      	mov	r3, r0
 8000308:	461a      	mov	r2, r3
 800030a:	89fb      	ldrh	r3, [r7, #14]
 800030c:	4053      	eors	r3, r2
 800030e:	81fb      	strh	r3, [r7, #14]

    return crc;
 8000310:	89fb      	ldrh	r3, [r7, #14]
}
 8000312:	4618      	mov	r0, r3
 8000314:	3710      	adds	r7, #16
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}
	...

0800031c <USART_fsend>:
	} else {
		return 1;
	}
}

void USART_fsend(char* format, ...) {
 800031c:	b40f      	push	{r0, r1, r2, r3}
 800031e:	b580      	push	{r7, lr}
 8000320:	b0c4      	sub	sp, #272	@ 0x110
 8000322:	af00      	add	r7, sp, #0
	char tmp[256];
	va_list arglist;
	va_start(arglist, format);
 8000324:	f507 728e 	add.w	r2, r7, #284	@ 0x11c
 8000328:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800032c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000330:	601a      	str	r2, [r3, #0]
	vsprintf(tmp, format, arglist);
 8000332:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000336:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800033a:	f107 000c 	add.w	r0, r7, #12
 800033e:	681a      	ldr	r2, [r3, #0]
 8000340:	f8d7 1118 	ldr.w	r1, [r7, #280]	@ 0x118
 8000344:	f003 fe44 	bl	8003fd0 <vsiprintf>
	va_end(arglist);
	volatile int idx = USART_TX_EMPTY;
 8000348:	4b44      	ldr	r3, [pc, #272]	@ (800045c <USART_fsend+0x140>)
 800034a:	881b      	ldrh	r3, [r3, #0]
 800034c:	b29b      	uxth	r3, r3
 800034e:	461a      	mov	r2, r3
 8000350:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000354:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000358:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < strlen(tmp); i++) {
 800035a:	2300      	movs	r3, #0
 800035c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8000360:	e025      	b.n	80003ae <USART_fsend+0x92>
		USART_BUF_TX[idx] = tmp[i];
 8000362:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000366:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000370:	f5a2 7182 	sub.w	r1, r2, #260	@ 0x104
 8000374:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8000378:	440a      	add	r2, r1
 800037a:	7811      	ldrb	r1, [r2, #0]
 800037c:	4a38      	ldr	r2, [pc, #224]	@ (8000460 <USART_fsend+0x144>)
 800037e:	54d1      	strb	r1, [r2, r3]
		idx = (idx + 1) % USART_TXBUF_SIZE;
 8000380:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000384:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	3301      	adds	r3, #1
 800038c:	425a      	negs	r2, r3
 800038e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000392:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8000396:	bf58      	it	pl
 8000398:	4253      	negpl	r3, r2
 800039a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800039e:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80003a2:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < strlen(tmp); i++) {
 80003a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80003a8:	3301      	adds	r3, #1
 80003aa:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80003ae:	f107 030c 	add.w	r3, r7, #12
 80003b2:	4618      	mov	r0, r3
 80003b4:	f7ff feca 	bl	800014c <strlen>
 80003b8:	4602      	mov	r2, r0
 80003ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80003be:	429a      	cmp	r2, r3
 80003c0:	d8cf      	bhi.n	8000362 <USART_fsend+0x46>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003c2:	b672      	cpsid	i
}
 80003c4:	bf00      	nop
	}

	__disable_irq();
	if (USART_TX_EMPTY == USART_TX_BUSY && __HAL_UART_GET_FLAG(&huart2, UART_FLAG_TXE) == SET) {
 80003c6:	4b25      	ldr	r3, [pc, #148]	@ (800045c <USART_fsend+0x140>)
 80003c8:	881b      	ldrh	r3, [r3, #0]
 80003ca:	b29a      	uxth	r2, r3
 80003cc:	4b25      	ldr	r3, [pc, #148]	@ (8000464 <USART_fsend+0x148>)
 80003ce:	881b      	ldrh	r3, [r3, #0]
 80003d0:	b29b      	uxth	r3, r3
 80003d2:	429a      	cmp	r2, r3
 80003d4:	d130      	bne.n	8000438 <USART_fsend+0x11c>
 80003d6:	4b24      	ldr	r3, [pc, #144]	@ (8000468 <USART_fsend+0x14c>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80003e0:	2b80      	cmp	r3, #128	@ 0x80
 80003e2:	d129      	bne.n	8000438 <USART_fsend+0x11c>
		USART_TX_EMPTY = idx;
 80003e4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80003e8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	b29a      	uxth	r2, r3
 80003f0:	4b1a      	ldr	r3, [pc, #104]	@ (800045c <USART_fsend+0x140>)
 80003f2:	801a      	strh	r2, [r3, #0]
		uint8_t tmp = USART_BUF_TX[USART_TX_BUSY];
 80003f4:	4b1b      	ldr	r3, [pc, #108]	@ (8000464 <USART_fsend+0x148>)
 80003f6:	881b      	ldrh	r3, [r3, #0]
 80003f8:	b29b      	uxth	r3, r3
 80003fa:	461a      	mov	r2, r3
 80003fc:	4b18      	ldr	r3, [pc, #96]	@ (8000460 <USART_fsend+0x144>)
 80003fe:	5c9a      	ldrb	r2, [r3, r2]
 8000400:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000404:	f2a3 130d 	subw	r3, r3, #269	@ 0x10d
 8000408:	701a      	strb	r2, [r3, #0]
		USART_TX_BUSY++;
 800040a:	4b16      	ldr	r3, [pc, #88]	@ (8000464 <USART_fsend+0x148>)
 800040c:	881b      	ldrh	r3, [r3, #0]
 800040e:	b29b      	uxth	r3, r3
 8000410:	3301      	adds	r3, #1
 8000412:	b29a      	uxth	r2, r3
 8000414:	4b13      	ldr	r3, [pc, #76]	@ (8000464 <USART_fsend+0x148>)
 8000416:	801a      	strh	r2, [r3, #0]
		if (USART_TX_BUSY >= USART_TXBUF_SIZE) USART_TX_BUSY = 0;
 8000418:	4b12      	ldr	r3, [pc, #72]	@ (8000464 <USART_fsend+0x148>)
 800041a:	881b      	ldrh	r3, [r3, #0]
 800041c:	b29b      	uxth	r3, r3
 800041e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000422:	d302      	bcc.n	800042a <USART_fsend+0x10e>
 8000424:	4b0f      	ldr	r3, [pc, #60]	@ (8000464 <USART_fsend+0x148>)
 8000426:	2200      	movs	r2, #0
 8000428:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart2, &tmp, 1);
 800042a:	1cfb      	adds	r3, r7, #3
 800042c:	2201      	movs	r2, #1
 800042e:	4619      	mov	r1, r3
 8000430:	480d      	ldr	r0, [pc, #52]	@ (8000468 <USART_fsend+0x14c>)
 8000432:	f002 fe07 	bl	8003044 <HAL_UART_Transmit_IT>
	if (USART_TX_EMPTY == USART_TX_BUSY && __HAL_UART_GET_FLAG(&huart2, UART_FLAG_TXE) == SET) {
 8000436:	e007      	b.n	8000448 <USART_fsend+0x12c>
	}
	else USART_TX_EMPTY = idx;
 8000438:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800043c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	b29a      	uxth	r2, r3
 8000444:	4b05      	ldr	r3, [pc, #20]	@ (800045c <USART_fsend+0x140>)
 8000446:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000448:	b662      	cpsie	i
}
 800044a:	bf00      	nop
	__enable_irq();
}
 800044c:	bf00      	nop
 800044e:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8000452:	46bd      	mov	sp, r7
 8000454:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000458:	b004      	add	sp, #16
 800045a:	4770      	bx	lr
 800045c:	20000508 	.word	0x20000508
 8000460:	20000108 	.word	0x20000108
 8000464:	2000050a 	.word	0x2000050a
 8000468:	20000678 	.word	0x20000678

0800046c <HAL_UART_RxCpltCallback>:

/* === USART CALLBACK RECEIVE === */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800046c:	b580      	push	{r7, lr}
 800046e:	b082      	sub	sp, #8
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
	if (huart == &huart2) {
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	4a10      	ldr	r2, [pc, #64]	@ (80004b8 <HAL_UART_RxCpltCallback+0x4c>)
 8000478:	4293      	cmp	r3, r2
 800047a:	d119      	bne.n	80004b0 <HAL_UART_RxCpltCallback+0x44>
		USART_RX_EMPTY++;
 800047c:	4b0f      	ldr	r3, [pc, #60]	@ (80004bc <HAL_UART_RxCpltCallback+0x50>)
 800047e:	881b      	ldrh	r3, [r3, #0]
 8000480:	b29b      	uxth	r3, r3
 8000482:	3301      	adds	r3, #1
 8000484:	b29a      	uxth	r2, r3
 8000486:	4b0d      	ldr	r3, [pc, #52]	@ (80004bc <HAL_UART_RxCpltCallback+0x50>)
 8000488:	801a      	strh	r2, [r3, #0]
		if (USART_RX_EMPTY >= USART_RXBUF_SIZE) USART_RX_EMPTY = 0;
 800048a:	4b0c      	ldr	r3, [pc, #48]	@ (80004bc <HAL_UART_RxCpltCallback+0x50>)
 800048c:	881b      	ldrh	r3, [r3, #0]
 800048e:	b29b      	uxth	r3, r3
 8000490:	2b7f      	cmp	r3, #127	@ 0x7f
 8000492:	d902      	bls.n	800049a <HAL_UART_RxCpltCallback+0x2e>
 8000494:	4b09      	ldr	r3, [pc, #36]	@ (80004bc <HAL_UART_RxCpltCallback+0x50>)
 8000496:	2200      	movs	r2, #0
 8000498:	801a      	strh	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, &USART_BUF_RX[USART_RX_EMPTY], 1);
 800049a:	4b08      	ldr	r3, [pc, #32]	@ (80004bc <HAL_UART_RxCpltCallback+0x50>)
 800049c:	881b      	ldrh	r3, [r3, #0]
 800049e:	b29b      	uxth	r3, r3
 80004a0:	461a      	mov	r2, r3
 80004a2:	4b07      	ldr	r3, [pc, #28]	@ (80004c0 <HAL_UART_RxCpltCallback+0x54>)
 80004a4:	4413      	add	r3, r2
 80004a6:	2201      	movs	r2, #1
 80004a8:	4619      	mov	r1, r3
 80004aa:	4803      	ldr	r0, [pc, #12]	@ (80004b8 <HAL_UART_RxCpltCallback+0x4c>)
 80004ac:	f002 fdff 	bl	80030ae <HAL_UART_Receive_IT>
	}
}
 80004b0:	bf00      	nop
 80004b2:	3708      	adds	r7, #8
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	20000678 	.word	0x20000678
 80004bc:	20000104 	.word	0x20000104
 80004c0:	20000084 	.word	0x20000084

080004c4 <HAL_UART_TxCpltCallback>:

/* === USART TRANSMIT CALLBACK === */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b084      	sub	sp, #16
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
    if (huart == &huart2) {
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	4a16      	ldr	r2, [pc, #88]	@ (8000528 <HAL_UART_TxCpltCallback+0x64>)
 80004d0:	4293      	cmp	r3, r2
 80004d2:	d125      	bne.n	8000520 <HAL_UART_TxCpltCallback+0x5c>
        // sprawdzenie, czy są dane do wysłania
        if (USART_TX_EMPTY != USART_TX_BUSY) {
 80004d4:	4b15      	ldr	r3, [pc, #84]	@ (800052c <HAL_UART_TxCpltCallback+0x68>)
 80004d6:	881b      	ldrh	r3, [r3, #0]
 80004d8:	b29a      	uxth	r2, r3
 80004da:	4b15      	ldr	r3, [pc, #84]	@ (8000530 <HAL_UART_TxCpltCallback+0x6c>)
 80004dc:	881b      	ldrh	r3, [r3, #0]
 80004de:	b29b      	uxth	r3, r3
 80004e0:	429a      	cmp	r2, r3
 80004e2:	d01d      	beq.n	8000520 <HAL_UART_TxCpltCallback+0x5c>
        	uint8_t tmp = USART_BUF_TX[USART_TX_BUSY];
 80004e4:	4b12      	ldr	r3, [pc, #72]	@ (8000530 <HAL_UART_TxCpltCallback+0x6c>)
 80004e6:	881b      	ldrh	r3, [r3, #0]
 80004e8:	b29b      	uxth	r3, r3
 80004ea:	461a      	mov	r2, r3
 80004ec:	4b11      	ldr	r3, [pc, #68]	@ (8000534 <HAL_UART_TxCpltCallback+0x70>)
 80004ee:	5c9b      	ldrb	r3, [r3, r2]
 80004f0:	73fb      	strb	r3, [r7, #15]
        	USART_TX_BUSY++;
 80004f2:	4b0f      	ldr	r3, [pc, #60]	@ (8000530 <HAL_UART_TxCpltCallback+0x6c>)
 80004f4:	881b      	ldrh	r3, [r3, #0]
 80004f6:	b29b      	uxth	r3, r3
 80004f8:	3301      	adds	r3, #1
 80004fa:	b29a      	uxth	r2, r3
 80004fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000530 <HAL_UART_TxCpltCallback+0x6c>)
 80004fe:	801a      	strh	r2, [r3, #0]
        	if (USART_TX_BUSY >= USART_TXBUF_SIZE) USART_TX_BUSY = 0;
 8000500:	4b0b      	ldr	r3, [pc, #44]	@ (8000530 <HAL_UART_TxCpltCallback+0x6c>)
 8000502:	881b      	ldrh	r3, [r3, #0]
 8000504:	b29b      	uxth	r3, r3
 8000506:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800050a:	d302      	bcc.n	8000512 <HAL_UART_TxCpltCallback+0x4e>
 800050c:	4b08      	ldr	r3, [pc, #32]	@ (8000530 <HAL_UART_TxCpltCallback+0x6c>)
 800050e:	2200      	movs	r2, #0
 8000510:	801a      	strh	r2, [r3, #0]
            HAL_UART_Transmit_IT(&huart2, &tmp, 1); // bajt wysłany, można wysłać następny
 8000512:	f107 030f 	add.w	r3, r7, #15
 8000516:	2201      	movs	r2, #1
 8000518:	4619      	mov	r1, r3
 800051a:	4803      	ldr	r0, [pc, #12]	@ (8000528 <HAL_UART_TxCpltCallback+0x64>)
 800051c:	f002 fd92 	bl	8003044 <HAL_UART_Transmit_IT>
        }
    }
}
 8000520:	bf00      	nop
 8000522:	3710      	adds	r7, #16
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}
 8000528:	20000678 	.word	0x20000678
 800052c:	20000508 	.word	0x20000508
 8000530:	2000050a 	.word	0x2000050a
 8000534:	20000108 	.word	0x20000108

08000538 <USART_getchar>:

int16_t USART_getchar(){
 8000538:	b480      	push	{r7}
 800053a:	b083      	sub	sp, #12
 800053c:	af00      	add	r7, sp, #0
	int16_t tmp;
	if (USART_RX_EMPTY != USART_RX_BUSY) {
 800053e:	4b14      	ldr	r3, [pc, #80]	@ (8000590 <USART_getchar+0x58>)
 8000540:	881b      	ldrh	r3, [r3, #0]
 8000542:	b29a      	uxth	r2, r3
 8000544:	4b13      	ldr	r3, [pc, #76]	@ (8000594 <USART_getchar+0x5c>)
 8000546:	881b      	ldrh	r3, [r3, #0]
 8000548:	b29b      	uxth	r3, r3
 800054a:	429a      	cmp	r2, r3
 800054c:	d018      	beq.n	8000580 <USART_getchar+0x48>
		 tmp = USART_BUF_RX[USART_RX_BUSY];
 800054e:	4b11      	ldr	r3, [pc, #68]	@ (8000594 <USART_getchar+0x5c>)
 8000550:	881b      	ldrh	r3, [r3, #0]
 8000552:	b29b      	uxth	r3, r3
 8000554:	461a      	mov	r2, r3
 8000556:	4b10      	ldr	r3, [pc, #64]	@ (8000598 <USART_getchar+0x60>)
 8000558:	5c9b      	ldrb	r3, [r3, r2]
 800055a:	80fb      	strh	r3, [r7, #6]
		 USART_RX_BUSY++;
 800055c:	4b0d      	ldr	r3, [pc, #52]	@ (8000594 <USART_getchar+0x5c>)
 800055e:	881b      	ldrh	r3, [r3, #0]
 8000560:	b29b      	uxth	r3, r3
 8000562:	3301      	adds	r3, #1
 8000564:	b29a      	uxth	r2, r3
 8000566:	4b0b      	ldr	r3, [pc, #44]	@ (8000594 <USART_getchar+0x5c>)
 8000568:	801a      	strh	r2, [r3, #0]
		 if (USART_RX_BUSY >= USART_RXBUF_SIZE) USART_RX_BUSY = 0;
 800056a:	4b0a      	ldr	r3, [pc, #40]	@ (8000594 <USART_getchar+0x5c>)
 800056c:	881b      	ldrh	r3, [r3, #0]
 800056e:	b29b      	uxth	r3, r3
 8000570:	2b7f      	cmp	r3, #127	@ 0x7f
 8000572:	d902      	bls.n	800057a <USART_getchar+0x42>
 8000574:	4b07      	ldr	r3, [pc, #28]	@ (8000594 <USART_getchar+0x5c>)
 8000576:	2200      	movs	r2, #0
 8000578:	801a      	strh	r2, [r3, #0]
		 return tmp;
 800057a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800057e:	e001      	b.n	8000584 <USART_getchar+0x4c>
	} else return -1;
 8000580:	f04f 33ff 	mov.w	r3, #4294967295

}
 8000584:	4618      	mov	r0, r3
 8000586:	370c      	adds	r7, #12
 8000588:	46bd      	mov	sp, r7
 800058a:	bc80      	pop	{r7}
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop
 8000590:	20000104 	.word	0x20000104
 8000594:	20000106 	.word	0x20000106
 8000598:	20000084 	.word	0x20000084

0800059c <validate_and_atoi>:
	return 0;
}



uint16_t validate_and_atoi(const char *str, size_t length) {
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
 80005a4:	6039      	str	r1, [r7, #0]
    uint16_t result = 0;
 80005a6:	2300      	movs	r3, #0
 80005a8:	81fb      	strh	r3, [r7, #14]

    // sprawdzanie czy kazdy znak to cyfra
    for (size_t i = 0; i < length; i++) {
 80005aa:	2300      	movs	r3, #0
 80005ac:	60bb      	str	r3, [r7, #8]
 80005ae:	e027      	b.n	8000600 <validate_and_atoi+0x64>
        if (str[i] < '0' || str[i] > '9') {
 80005b0:	687a      	ldr	r2, [r7, #4]
 80005b2:	68bb      	ldr	r3, [r7, #8]
 80005b4:	4413      	add	r3, r2
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	2b2f      	cmp	r3, #47	@ 0x2f
 80005ba:	d905      	bls.n	80005c8 <validate_and_atoi+0x2c>
 80005bc:	687a      	ldr	r2, [r7, #4]
 80005be:	68bb      	ldr	r3, [r7, #8]
 80005c0:	4413      	add	r3, r2
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	2b39      	cmp	r3, #57	@ 0x39
 80005c6:	d90a      	bls.n	80005de <validate_and_atoi+0x42>
            USART_fsend("invalid char '%c' during atoi\n", str[i]);
 80005c8:	687a      	ldr	r2, [r7, #4]
 80005ca:	68bb      	ldr	r3, [r7, #8]
 80005cc:	4413      	add	r3, r2
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	4619      	mov	r1, r3
 80005d2:	4810      	ldr	r0, [pc, #64]	@ (8000614 <validate_and_atoi+0x78>)
 80005d4:	f7ff fea2 	bl	800031c <USART_fsend>
            return 65535; // maksymalna wartosc uint16 jako kod bledu
 80005d8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80005dc:	e015      	b.n	800060a <validate_and_atoi+0x6e>
        }
        result = (result * 10) + (str[i] - '0');
 80005de:	89fb      	ldrh	r3, [r7, #14]
 80005e0:	461a      	mov	r2, r3
 80005e2:	0092      	lsls	r2, r2, #2
 80005e4:	4413      	add	r3, r2
 80005e6:	005b      	lsls	r3, r3, #1
 80005e8:	b29b      	uxth	r3, r3
 80005ea:	6879      	ldr	r1, [r7, #4]
 80005ec:	68ba      	ldr	r2, [r7, #8]
 80005ee:	440a      	add	r2, r1
 80005f0:	7812      	ldrb	r2, [r2, #0]
 80005f2:	4413      	add	r3, r2
 80005f4:	b29b      	uxth	r3, r3
 80005f6:	3b30      	subs	r3, #48	@ 0x30
 80005f8:	81fb      	strh	r3, [r7, #14]
    for (size_t i = 0; i < length; i++) {
 80005fa:	68bb      	ldr	r3, [r7, #8]
 80005fc:	3301      	adds	r3, #1
 80005fe:	60bb      	str	r3, [r7, #8]
 8000600:	68ba      	ldr	r2, [r7, #8]
 8000602:	683b      	ldr	r3, [r7, #0]
 8000604:	429a      	cmp	r2, r3
 8000606:	d3d3      	bcc.n	80005b0 <validate_and_atoi+0x14>
    }

    return result;
 8000608:	89fb      	ldrh	r3, [r7, #14]
}
 800060a:	4618      	mov	r0, r3
 800060c:	3710      	adds	r7, #16
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	08004e7c 	.word	0x08004e7c

08000618 <process_frame>:

void process_frame() {
 8000618:	b590      	push	{r4, r7, lr}
 800061a:	b087      	sub	sp, #28
 800061c:	af00      	add	r7, sp, #0

	if (frame.crc != calculate_frame_crc(&frame)) return;
 800061e:	4b5b      	ldr	r3, [pc, #364]	@ (800078c <process_frame+0x174>)
 8000620:	f8b3 410c 	ldrh.w	r4, [r3, #268]	@ 0x10c
 8000624:	4859      	ldr	r0, [pc, #356]	@ (800078c <process_frame+0x174>)
 8000626:	f7ff fe41 	bl	80002ac <calculate_frame_crc>
 800062a:	4603      	mov	r3, r0
 800062c:	429c      	cmp	r4, r3
 800062e:	f040 80a9 	bne.w	8000784 <process_frame+0x16c>

	//uint16_t length = (atoi(frame.length[0]) * 100) + (atoi(frame.length[1] * 10)) + atoi(frame.length[3]);

	char length_str[4] = {frame.length[0], frame.length[1], frame.length[3], '\0'};
 8000632:	4b56      	ldr	r3, [pc, #344]	@ (800078c <process_frame+0x174>)
 8000634:	799b      	ldrb	r3, [r3, #6]
 8000636:	733b      	strb	r3, [r7, #12]
 8000638:	4b54      	ldr	r3, [pc, #336]	@ (800078c <process_frame+0x174>)
 800063a:	79db      	ldrb	r3, [r3, #7]
 800063c:	737b      	strb	r3, [r7, #13]
 800063e:	4b53      	ldr	r3, [pc, #332]	@ (800078c <process_frame+0x174>)
 8000640:	7a5b      	ldrb	r3, [r3, #9]
 8000642:	73bb      	strb	r3, [r7, #14]
 8000644:	2300      	movs	r3, #0
 8000646:	73fb      	strb	r3, [r7, #15]
	uint16_t length = atoi(length_str);
 8000648:	f107 030c 	add.w	r3, r7, #12
 800064c:	4618      	mov	r0, r3
 800064e:	f003 fa5b 	bl	8003b08 <atoi>
 8000652:	4603      	mov	r3, r0
 8000654:	82fb      	strh	r3, [r7, #22]

	if (length < 5 || length > 256) {
 8000656:	8afb      	ldrh	r3, [r7, #22]
 8000658:	2b04      	cmp	r3, #4
 800065a:	d903      	bls.n	8000664 <process_frame+0x4c>
 800065c:	8afb      	ldrh	r3, [r7, #22]
 800065e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000662:	d903      	bls.n	800066c <process_frame+0x54>
		USART_fsend("wrong length");
 8000664:	484a      	ldr	r0, [pc, #296]	@ (8000790 <process_frame+0x178>)
 8000666:	f7ff fe59 	bl	800031c <USART_fsend>
		//err01();
		return;
 800066a:	e08c      	b.n	8000786 <process_frame+0x16e>
	}

	length -= frame.masked_counter; // dla odkodowanej ramki dlugosc musi byc pomniejszona o ilosc zamaskowanych znakow
 800066c:	4b47      	ldr	r3, [pc, #284]	@ (800078c <process_frame+0x174>)
 800066e:	f8b3 3118 	ldrh.w	r3, [r3, #280]	@ 0x118
 8000672:	8afa      	ldrh	r2, [r7, #22]
 8000674:	1ad3      	subs	r3, r2, r3
 8000676:	82fb      	strh	r3, [r7, #22]


	if (strncmp((char *)frame.data, "READ", 4) == 0) {
 8000678:	2204      	movs	r2, #4
 800067a:	4946      	ldr	r1, [pc, #280]	@ (8000794 <process_frame+0x17c>)
 800067c:	4846      	ldr	r0, [pc, #280]	@ (8000798 <process_frame+0x180>)
 800067e:	f003 fcb9 	bl	8003ff4 <strncmp>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d125      	bne.n	80006d4 <process_frame+0xbc>
		if (length != 7) {
 8000688:	8afb      	ldrh	r3, [r7, #22]
 800068a:	2b07      	cmp	r3, #7
 800068c:	d003      	beq.n	8000696 <process_frame+0x7e>
			USART_fsend("wrong parameter");
 800068e:	4843      	ldr	r0, [pc, #268]	@ (800079c <process_frame+0x184>)
 8000690:	f7ff fe44 	bl	800031c <USART_fsend>
			//err03();
			return;
 8000694:	e077      	b.n	8000786 <process_frame+0x16e>
		}

		char parameter_str[4] = {frame.data[4], frame.data[5], frame.data[6]};
 8000696:	2300      	movs	r3, #0
 8000698:	60bb      	str	r3, [r7, #8]
 800069a:	4b3c      	ldr	r3, [pc, #240]	@ (800078c <process_frame+0x174>)
 800069c:	7b9b      	ldrb	r3, [r3, #14]
 800069e:	723b      	strb	r3, [r7, #8]
 80006a0:	4b3a      	ldr	r3, [pc, #232]	@ (800078c <process_frame+0x174>)
 80006a2:	7bdb      	ldrb	r3, [r3, #15]
 80006a4:	727b      	strb	r3, [r7, #9]
 80006a6:	4b39      	ldr	r3, [pc, #228]	@ (800078c <process_frame+0x174>)
 80006a8:	7c1b      	ldrb	r3, [r3, #16]
 80006aa:	72bb      	strb	r3, [r7, #10]
		uint16_t parameter = validate_and_atoi(parameter_str, 3);
 80006ac:	f107 0308 	add.w	r3, r7, #8
 80006b0:	2103      	movs	r1, #3
 80006b2:	4618      	mov	r0, r3
 80006b4:	f7ff ff72 	bl	800059c <validate_and_atoi>
 80006b8:	4603      	mov	r3, r0
 80006ba:	827b      	strh	r3, [r7, #18]

		if (parameter < 1 || parameter > 750) {
 80006bc:	8a7b      	ldrh	r3, [r7, #18]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d004      	beq.n	80006cc <process_frame+0xb4>
 80006c2:	8a7b      	ldrh	r3, [r7, #18]
 80006c4:	f240 22ee 	movw	r2, #750	@ 0x2ee
 80006c8:	4293      	cmp	r3, r2
 80006ca:	d95c      	bls.n	8000786 <process_frame+0x16e>
			printf("wrong parameter");
 80006cc:	4833      	ldr	r0, [pc, #204]	@ (800079c <process_frame+0x184>)
 80006ce:	f003 fc13 	bl	8003ef8 <iprintf>
			//err03();
			return;
 80006d2:	e058      	b.n	8000786 <process_frame+0x16e>
//		else {
//			read(length);
//			return;
//		}
	}
	else if (strncmp((char *)frame.data, "COUNT_DATA", 10) == 0) {
 80006d4:	220a      	movs	r2, #10
 80006d6:	4932      	ldr	r1, [pc, #200]	@ (80007a0 <process_frame+0x188>)
 80006d8:	482f      	ldr	r0, [pc, #188]	@ (8000798 <process_frame+0x180>)
 80006da:	f003 fc8b 	bl	8003ff4 <strncmp>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d108      	bne.n	80006f6 <process_frame+0xde>
		if (frame.length_int != 10) {
 80006e4:	4b29      	ldr	r3, [pc, #164]	@ (800078c <process_frame+0x174>)
 80006e6:	f8b3 3116 	ldrh.w	r3, [r3, #278]	@ 0x116
 80006ea:	2b0a      	cmp	r3, #10
 80006ec:	d04b      	beq.n	8000786 <process_frame+0x16e>
			USART_fsend("wrong command");
 80006ee:	482d      	ldr	r0, [pc, #180]	@ (80007a4 <process_frame+0x18c>)
 80006f0:	f7ff fe14 	bl	800031c <USART_fsend>
			//err02();
			return;
 80006f4:	e047      	b.n	8000786 <process_frame+0x16e>
//			count_data();
//			return;
//		}
	}

	else if (strncmp((char *)frame.data, "SET_INTERVAL", 12) == 0) {
 80006f6:	220c      	movs	r2, #12
 80006f8:	492b      	ldr	r1, [pc, #172]	@ (80007a8 <process_frame+0x190>)
 80006fa:	4827      	ldr	r0, [pc, #156]	@ (8000798 <process_frame+0x180>)
 80006fc:	f003 fc7a 	bl	8003ff4 <strncmp>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d12d      	bne.n	8000762 <process_frame+0x14a>
		if (frame.length_int != 17) {
 8000706:	4b21      	ldr	r3, [pc, #132]	@ (800078c <process_frame+0x174>)
 8000708:	f8b3 3116 	ldrh.w	r3, [r3, #278]	@ 0x116
 800070c:	2b11      	cmp	r3, #17
 800070e:	d003      	beq.n	8000718 <process_frame+0x100>
			USART_fsend("wrong command");
 8000710:	4824      	ldr	r0, [pc, #144]	@ (80007a4 <process_frame+0x18c>)
 8000712:	f7ff fe03 	bl	800031c <USART_fsend>
			//err02();
			return;
 8000716:	e036      	b.n	8000786 <process_frame+0x16e>
		}

		char parameter_str[6] = { frame.data[12], frame.data[13], frame.data[14], frame.data[15], frame.data[16], '\0' };
 8000718:	4b1c      	ldr	r3, [pc, #112]	@ (800078c <process_frame+0x174>)
 800071a:	7d9b      	ldrb	r3, [r3, #22]
 800071c:	703b      	strb	r3, [r7, #0]
 800071e:	4b1b      	ldr	r3, [pc, #108]	@ (800078c <process_frame+0x174>)
 8000720:	7ddb      	ldrb	r3, [r3, #23]
 8000722:	707b      	strb	r3, [r7, #1]
 8000724:	4b19      	ldr	r3, [pc, #100]	@ (800078c <process_frame+0x174>)
 8000726:	7e1b      	ldrb	r3, [r3, #24]
 8000728:	70bb      	strb	r3, [r7, #2]
 800072a:	4b18      	ldr	r3, [pc, #96]	@ (800078c <process_frame+0x174>)
 800072c:	7e5b      	ldrb	r3, [r3, #25]
 800072e:	70fb      	strb	r3, [r7, #3]
 8000730:	4b16      	ldr	r3, [pc, #88]	@ (800078c <process_frame+0x174>)
 8000732:	7e9b      	ldrb	r3, [r3, #26]
 8000734:	713b      	strb	r3, [r7, #4]
 8000736:	2300      	movs	r3, #0
 8000738:	717b      	strb	r3, [r7, #5]
		uint16_t parameter = validate_and_atoi(parameter_str, 5);
 800073a:	463b      	mov	r3, r7
 800073c:	2105      	movs	r1, #5
 800073e:	4618      	mov	r0, r3
 8000740:	f7ff ff2c 	bl	800059c <validate_and_atoi>
 8000744:	4603      	mov	r3, r0
 8000746:	82bb      	strh	r3, [r7, #20]

		if (parameter < 2000 || parameter > 20000) {
 8000748:	8abb      	ldrh	r3, [r7, #20]
 800074a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800074e:	d304      	bcc.n	800075a <process_frame+0x142>
 8000750:	8abb      	ldrh	r3, [r7, #20]
 8000752:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8000756:	4293      	cmp	r3, r2
 8000758:	d915      	bls.n	8000786 <process_frame+0x16e>
			USART_fsend("wrong parameter");
 800075a:	4810      	ldr	r0, [pc, #64]	@ (800079c <process_frame+0x184>)
 800075c:	f7ff fdde 	bl	800031c <USART_fsend>
			//err03();
			return;
 8000760:	e011      	b.n	8000786 <process_frame+0x16e>
//			set_interval(parameter);
//			return;
//		}
	}

	else if (strncmp((char *)frame.data, "GET_INTERVAL", 12) == 0) {
 8000762:	220c      	movs	r2, #12
 8000764:	4911      	ldr	r1, [pc, #68]	@ (80007ac <process_frame+0x194>)
 8000766:	480c      	ldr	r0, [pc, #48]	@ (8000798 <process_frame+0x180>)
 8000768:	f003 fc44 	bl	8003ff4 <strncmp>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d109      	bne.n	8000786 <process_frame+0x16e>
		if (frame.length_int != 12) {
 8000772:	4b06      	ldr	r3, [pc, #24]	@ (800078c <process_frame+0x174>)
 8000774:	f8b3 3116 	ldrh.w	r3, [r3, #278]	@ 0x116
 8000778:	2b0c      	cmp	r3, #12
 800077a:	d004      	beq.n	8000786 <process_frame+0x16e>
			USART_fsend("wrong command");
 800077c:	4809      	ldr	r0, [pc, #36]	@ (80007a4 <process_frame+0x18c>)
 800077e:	f7ff fdcd 	bl	800031c <USART_fsend>
			//err02();
			return;
 8000782:	e000      	b.n	8000786 <process_frame+0x16e>
	if (frame.crc != calculate_frame_crc(&frame)) return;
 8000784:	bf00      	nop
//		else {
//			get_interval();
//			return
//		}
	}
}
 8000786:	371c      	adds	r7, #28
 8000788:	46bd      	mov	sp, r7
 800078a:	bd90      	pop	{r4, r7, pc}
 800078c:	20000510 	.word	0x20000510
 8000790:	08004e9c 	.word	0x08004e9c
 8000794:	08004eac 	.word	0x08004eac
 8000798:	2000051a 	.word	0x2000051a
 800079c:	08004eb4 	.word	0x08004eb4
 80007a0:	08004ec4 	.word	0x08004ec4
 80007a4:	08004ed0 	.word	0x08004ed0
 80007a8:	08004ee0 	.word	0x08004ee0
 80007ac:	08004ef0 	.word	0x08004ef0

080007b0 <reset_frame>:

void reset_frame() {
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
	memset(&frame, 0, sizeof(Frame));
 80007b4:	f44f 728e 	mov.w	r2, #284	@ 0x11c
 80007b8:	2100      	movs	r1, #0
 80007ba:	4804      	ldr	r0, [pc, #16]	@ (80007cc <reset_frame+0x1c>)
 80007bc:	f003 fc12 	bl	8003fe4 <memset>
	frame.state = FIND_START;
 80007c0:	4b02      	ldr	r3, [pc, #8]	@ (80007cc <reset_frame+0x1c>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	f883 211a 	strb.w	r2, [r3, #282]	@ 0x11a
}
 80007c8:	bf00      	nop
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	20000510 	.word	0x20000510

080007d0 <get_frame>:

void get_frame(uint8_t ch) {
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b084      	sub	sp, #16
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	4603      	mov	r3, r0
 80007d8:	71fb      	strb	r3, [r7, #7]
	switch (frame.state) {
 80007da:	4b9e      	ldr	r3, [pc, #632]	@ (8000a54 <get_frame+0x284>)
 80007dc:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 80007e0:	2b08      	cmp	r3, #8
 80007e2:	f200 822b 	bhi.w	8000c3c <get_frame+0x46c>
 80007e6:	a201      	add	r2, pc, #4	@ (adr r2, 80007ec <get_frame+0x1c>)
 80007e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007ec:	08000811 	.word	0x08000811
 80007f0:	08000827 	.word	0x08000827
 80007f4:	080008af 	.word	0x080008af
 80007f8:	08000939 	.word	0x08000939
 80007fc:	080009b3 	.word	0x080009b3
 8000800:	08000b11 	.word	0x08000b11
 8000804:	08000bfd 	.word	0x08000bfd
 8000808:	08000a6d 	.word	0x08000a6d
 800080c:	08000c2b 	.word	0x08000c2b

	case FIND_START: {
		if (ch == FRAME_START) {
 8000810:	79fb      	ldrb	r3, [r7, #7]
 8000812:	2b3a      	cmp	r3, #58	@ 0x3a
 8000814:	f040 8211 	bne.w	8000c3a <get_frame+0x46a>
			reset_frame();
 8000818:	f7ff ffca 	bl	80007b0 <reset_frame>
			frame.state = FIND_SENDER;
 800081c:	4b8d      	ldr	r3, [pc, #564]	@ (8000a54 <get_frame+0x284>)
 800081e:	2201      	movs	r2, #1
 8000820:	f883 211a 	strb.w	r2, [r3, #282]	@ 0x11a
		}
		return;
 8000824:	e209      	b.n	8000c3a <get_frame+0x46a>
	}

	case FIND_SENDER: {
		if (ch >= 'A' && ch <= 'Z') {
 8000826:	79fb      	ldrb	r3, [r7, #7]
 8000828:	2b40      	cmp	r3, #64	@ 0x40
 800082a:	d92f      	bls.n	800088c <get_frame+0xbc>
 800082c:	79fb      	ldrb	r3, [r7, #7]
 800082e:	2b5a      	cmp	r3, #90	@ 0x5a
 8000830:	d82c      	bhi.n	800088c <get_frame+0xbc>
			frame.sender[frame.sender_id] = ch;
 8000832:	4b88      	ldr	r3, [pc, #544]	@ (8000a54 <get_frame+0x284>)
 8000834:	f893 310e 	ldrb.w	r3, [r3, #270]	@ 0x10e
 8000838:	4619      	mov	r1, r3
 800083a:	4a86      	ldr	r2, [pc, #536]	@ (8000a54 <get_frame+0x284>)
 800083c:	79fb      	ldrb	r3, [r7, #7]
 800083e:	5453      	strb	r3, [r2, r1]
			if (frame.sender_id == 1) {
 8000840:	4b84      	ldr	r3, [pc, #528]	@ (8000a54 <get_frame+0x284>)
 8000842:	f893 310e 	ldrb.w	r3, [r3, #270]	@ 0x10e
 8000846:	2b01      	cmp	r3, #1
 8000848:	d117      	bne.n	800087a <get_frame+0xaa>
				frame.sender[2] = '\0';
 800084a:	4b82      	ldr	r3, [pc, #520]	@ (8000a54 <get_frame+0x284>)
 800084c:	2200      	movs	r2, #0
 800084e:	709a      	strb	r2, [r3, #2]
				if (frame.sender[0] == 'P' && frame.sender[1] == 'C'){
 8000850:	4b80      	ldr	r3, [pc, #512]	@ (8000a54 <get_frame+0x284>)
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	2b50      	cmp	r3, #80	@ 0x50
 8000856:	d10b      	bne.n	8000870 <get_frame+0xa0>
 8000858:	4b7e      	ldr	r3, [pc, #504]	@ (8000a54 <get_frame+0x284>)
 800085a:	785b      	ldrb	r3, [r3, #1]
 800085c:	2b43      	cmp	r3, #67	@ 0x43
 800085e:	d107      	bne.n	8000870 <get_frame+0xa0>
					USART_fsend("sender git");
 8000860:	487d      	ldr	r0, [pc, #500]	@ (8000a58 <get_frame+0x288>)
 8000862:	f7ff fd5b 	bl	800031c <USART_fsend>
					frame.state = FIND_RECEIVER;
 8000866:	4b7b      	ldr	r3, [pc, #492]	@ (8000a54 <get_frame+0x284>)
 8000868:	2202      	movs	r2, #2
 800086a:	f883 211a 	strb.w	r2, [r3, #282]	@ 0x11a
					return;
 800086e:	e1e5      	b.n	8000c3c <get_frame+0x46c>
				}
				else frame.state = FRAME_ERROR;
 8000870:	4b78      	ldr	r3, [pc, #480]	@ (8000a54 <get_frame+0x284>)
 8000872:	2208      	movs	r2, #8
 8000874:	f883 211a 	strb.w	r2, [r3, #282]	@ 0x11a
			if (frame.sender_id == 1) {
 8000878:	e018      	b.n	80008ac <get_frame+0xdc>
			}
			else frame.sender_id++;
 800087a:	4b76      	ldr	r3, [pc, #472]	@ (8000a54 <get_frame+0x284>)
 800087c:	f893 310e 	ldrb.w	r3, [r3, #270]	@ 0x10e
 8000880:	3301      	adds	r3, #1
 8000882:	b2da      	uxtb	r2, r3
 8000884:	4b73      	ldr	r3, [pc, #460]	@ (8000a54 <get_frame+0x284>)
 8000886:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
			if (frame.sender_id == 1) {
 800088a:	e00f      	b.n	80008ac <get_frame+0xdc>
		}
		else if (ch == FRAME_START || ch == FRAME_END) frame.state = FIND_START;
 800088c:	79fb      	ldrb	r3, [r7, #7]
 800088e:	2b3a      	cmp	r3, #58	@ 0x3a
 8000890:	d002      	beq.n	8000898 <get_frame+0xc8>
 8000892:	79fb      	ldrb	r3, [r7, #7]
 8000894:	2b3b      	cmp	r3, #59	@ 0x3b
 8000896:	d104      	bne.n	80008a2 <get_frame+0xd2>
 8000898:	4b6e      	ldr	r3, [pc, #440]	@ (8000a54 <get_frame+0x284>)
 800089a:	2200      	movs	r2, #0
 800089c:	f883 211a 	strb.w	r2, [r3, #282]	@ 0x11a
 80008a0:	e004      	b.n	80008ac <get_frame+0xdc>
		else frame.state = FRAME_ERROR;
 80008a2:	4b6c      	ldr	r3, [pc, #432]	@ (8000a54 <get_frame+0x284>)
 80008a4:	2208      	movs	r2, #8
 80008a6:	f883 211a 	strb.w	r2, [r3, #282]	@ 0x11a
		break;
 80008aa:	e1c7      	b.n	8000c3c <get_frame+0x46c>
 80008ac:	e1c6      	b.n	8000c3c <get_frame+0x46c>
	}

	case FIND_RECEIVER: {
		if (ch >= 'A' && ch <= 'Z') {
 80008ae:	79fb      	ldrb	r3, [r7, #7]
 80008b0:	2b40      	cmp	r3, #64	@ 0x40
 80008b2:	d930      	bls.n	8000916 <get_frame+0x146>
 80008b4:	79fb      	ldrb	r3, [r7, #7]
 80008b6:	2b5a      	cmp	r3, #90	@ 0x5a
 80008b8:	d82d      	bhi.n	8000916 <get_frame+0x146>
			frame.receiver[frame.receiver_id] = ch;
 80008ba:	4b66      	ldr	r3, [pc, #408]	@ (8000a54 <get_frame+0x284>)
 80008bc:	f893 310f 	ldrb.w	r3, [r3, #271]	@ 0x10f
 80008c0:	461a      	mov	r2, r3
 80008c2:	4b64      	ldr	r3, [pc, #400]	@ (8000a54 <get_frame+0x284>)
 80008c4:	4413      	add	r3, r2
 80008c6:	79fa      	ldrb	r2, [r7, #7]
 80008c8:	70da      	strb	r2, [r3, #3]
			if (frame.receiver_id == 1) {
 80008ca:	4b62      	ldr	r3, [pc, #392]	@ (8000a54 <get_frame+0x284>)
 80008cc:	f893 310f 	ldrb.w	r3, [r3, #271]	@ 0x10f
 80008d0:	2b01      	cmp	r3, #1
 80008d2:	d117      	bne.n	8000904 <get_frame+0x134>
				frame.receiver[2] = '\0';
 80008d4:	4b5f      	ldr	r3, [pc, #380]	@ (8000a54 <get_frame+0x284>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	715a      	strb	r2, [r3, #5]
				if (strncmp((char *)frame.receiver, RECEIVER, 2) == 0) {
 80008da:	2202      	movs	r2, #2
 80008dc:	495f      	ldr	r1, [pc, #380]	@ (8000a5c <get_frame+0x28c>)
 80008de:	4860      	ldr	r0, [pc, #384]	@ (8000a60 <get_frame+0x290>)
 80008e0:	f003 fb88 	bl	8003ff4 <strncmp>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d107      	bne.n	80008fa <get_frame+0x12a>
					USART_fsend("receiver git");
 80008ea:	485e      	ldr	r0, [pc, #376]	@ (8000a64 <get_frame+0x294>)
 80008ec:	f7ff fd16 	bl	800031c <USART_fsend>
					frame.state = FIND_LENGTH;
 80008f0:	4b58      	ldr	r3, [pc, #352]	@ (8000a54 <get_frame+0x284>)
 80008f2:	2203      	movs	r2, #3
 80008f4:	f883 211a 	strb.w	r2, [r3, #282]	@ 0x11a
					return;
 80008f8:	e1a0      	b.n	8000c3c <get_frame+0x46c>
				}
				else frame.state = FRAME_ERROR;
 80008fa:	4b56      	ldr	r3, [pc, #344]	@ (8000a54 <get_frame+0x284>)
 80008fc:	2208      	movs	r2, #8
 80008fe:	f883 211a 	strb.w	r2, [r3, #282]	@ 0x11a
			if (frame.receiver_id == 1) {
 8000902:	e018      	b.n	8000936 <get_frame+0x166>
			}
			else frame.receiver_id++;
 8000904:	4b53      	ldr	r3, [pc, #332]	@ (8000a54 <get_frame+0x284>)
 8000906:	f893 310f 	ldrb.w	r3, [r3, #271]	@ 0x10f
 800090a:	3301      	adds	r3, #1
 800090c:	b2da      	uxtb	r2, r3
 800090e:	4b51      	ldr	r3, [pc, #324]	@ (8000a54 <get_frame+0x284>)
 8000910:	f883 210f 	strb.w	r2, [r3, #271]	@ 0x10f
			if (frame.receiver_id == 1) {
 8000914:	e00f      	b.n	8000936 <get_frame+0x166>
		}
		else if (ch == FRAME_START || ch == FRAME_END) frame.state = FIND_START;
 8000916:	79fb      	ldrb	r3, [r7, #7]
 8000918:	2b3a      	cmp	r3, #58	@ 0x3a
 800091a:	d002      	beq.n	8000922 <get_frame+0x152>
 800091c:	79fb      	ldrb	r3, [r7, #7]
 800091e:	2b3b      	cmp	r3, #59	@ 0x3b
 8000920:	d104      	bne.n	800092c <get_frame+0x15c>
 8000922:	4b4c      	ldr	r3, [pc, #304]	@ (8000a54 <get_frame+0x284>)
 8000924:	2200      	movs	r2, #0
 8000926:	f883 211a 	strb.w	r2, [r3, #282]	@ 0x11a
 800092a:	e004      	b.n	8000936 <get_frame+0x166>
		else frame.state = FRAME_ERROR;
 800092c:	4b49      	ldr	r3, [pc, #292]	@ (8000a54 <get_frame+0x284>)
 800092e:	2208      	movs	r2, #8
 8000930:	f883 211a 	strb.w	r2, [r3, #282]	@ 0x11a
		break;
 8000934:	e182      	b.n	8000c3c <get_frame+0x46c>
 8000936:	e181      	b.n	8000c3c <get_frame+0x46c>
	}

	case FIND_LENGTH: {
		if (ch >= '0' && ch <= '9') {
 8000938:	79fb      	ldrb	r3, [r7, #7]
 800093a:	2b2f      	cmp	r3, #47	@ 0x2f
 800093c:	d928      	bls.n	8000990 <get_frame+0x1c0>
 800093e:	79fb      	ldrb	r3, [r7, #7]
 8000940:	2b39      	cmp	r3, #57	@ 0x39
 8000942:	d825      	bhi.n	8000990 <get_frame+0x1c0>
			frame.length[frame.length_id] = ch;
 8000944:	4b43      	ldr	r3, [pc, #268]	@ (8000a54 <get_frame+0x284>)
 8000946:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 800094a:	461a      	mov	r2, r3
 800094c:	4b41      	ldr	r3, [pc, #260]	@ (8000a54 <get_frame+0x284>)
 800094e:	4413      	add	r3, r2
 8000950:	79fa      	ldrb	r2, [r7, #7]
 8000952:	719a      	strb	r2, [r3, #6]
			if (frame.length_id == 2) {
 8000954:	4b3f      	ldr	r3, [pc, #252]	@ (8000a54 <get_frame+0x284>)
 8000956:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 800095a:	2b02      	cmp	r3, #2
 800095c:	d10f      	bne.n	800097e <get_frame+0x1ae>
				frame.length[3] = '\0';
 800095e:	4b3d      	ldr	r3, [pc, #244]	@ (8000a54 <get_frame+0x284>)
 8000960:	2200      	movs	r2, #0
 8000962:	725a      	strb	r2, [r3, #9]
				frame.length_int = atoi((char *)frame.length);
 8000964:	4840      	ldr	r0, [pc, #256]	@ (8000a68 <get_frame+0x298>)
 8000966:	f003 f8cf 	bl	8003b08 <atoi>
 800096a:	4603      	mov	r3, r0
 800096c:	b29a      	uxth	r2, r3
 800096e:	4b39      	ldr	r3, [pc, #228]	@ (8000a54 <get_frame+0x284>)
 8000970:	f8a3 2116 	strh.w	r2, [r3, #278]	@ 0x116
				frame.state = FIND_DATA;
 8000974:	4b37      	ldr	r3, [pc, #220]	@ (8000a54 <get_frame+0x284>)
 8000976:	2204      	movs	r2, #4
 8000978:	f883 211a 	strb.w	r2, [r3, #282]	@ 0x11a
				return;
 800097c:	e15e      	b.n	8000c3c <get_frame+0x46c>
			}
			else frame.length_id++;
 800097e:	4b35      	ldr	r3, [pc, #212]	@ (8000a54 <get_frame+0x284>)
 8000980:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 8000984:	3301      	adds	r3, #1
 8000986:	b2da      	uxtb	r2, r3
 8000988:	4b32      	ldr	r3, [pc, #200]	@ (8000a54 <get_frame+0x284>)
 800098a:	f883 2110 	strb.w	r2, [r3, #272]	@ 0x110
			if (frame.length_id == 2) {
 800098e:	e00f      	b.n	80009b0 <get_frame+0x1e0>
		}
		else if (ch == FRAME_START || ch == FRAME_END) frame.state = FIND_START;
 8000990:	79fb      	ldrb	r3, [r7, #7]
 8000992:	2b3a      	cmp	r3, #58	@ 0x3a
 8000994:	d002      	beq.n	800099c <get_frame+0x1cc>
 8000996:	79fb      	ldrb	r3, [r7, #7]
 8000998:	2b3b      	cmp	r3, #59	@ 0x3b
 800099a:	d104      	bne.n	80009a6 <get_frame+0x1d6>
 800099c:	4b2d      	ldr	r3, [pc, #180]	@ (8000a54 <get_frame+0x284>)
 800099e:	2200      	movs	r2, #0
 80009a0:	f883 211a 	strb.w	r2, [r3, #282]	@ 0x11a
 80009a4:	e004      	b.n	80009b0 <get_frame+0x1e0>
		else frame.state = FRAME_ERROR;
 80009a6:	4b2b      	ldr	r3, [pc, #172]	@ (8000a54 <get_frame+0x284>)
 80009a8:	2208      	movs	r2, #8
 80009aa:	f883 211a 	strb.w	r2, [r3, #282]	@ 0x11a
		break;
 80009ae:	e145      	b.n	8000c3c <get_frame+0x46c>
 80009b0:	e144      	b.n	8000c3c <get_frame+0x46c>
	}

	case FIND_DATA: {
		if (frame.data_id < frame.length_int) {
 80009b2:	4b28      	ldr	r3, [pc, #160]	@ (8000a54 <get_frame+0x284>)
 80009b4:	f8b3 2112 	ldrh.w	r2, [r3, #274]	@ 0x112
 80009b8:	4b26      	ldr	r3, [pc, #152]	@ (8000a54 <get_frame+0x284>)
 80009ba:	f8b3 3116 	ldrh.w	r3, [r3, #278]	@ 0x116
 80009be:	429a      	cmp	r2, r3
 80009c0:	d23a      	bcs.n	8000a38 <get_frame+0x268>
			if (ch == MASK) {
 80009c2:	79fb      	ldrb	r3, [r7, #7]
 80009c4:	2b2f      	cmp	r3, #47	@ 0x2f
 80009c6:	d11b      	bne.n	8000a00 <get_frame+0x230>
				if (frame.data_id < frame.length_int - 1) {
 80009c8:	4b22      	ldr	r3, [pc, #136]	@ (8000a54 <get_frame+0x284>)
 80009ca:	f8b3 3112 	ldrh.w	r3, [r3, #274]	@ 0x112
 80009ce:	461a      	mov	r2, r3
 80009d0:	4b20      	ldr	r3, [pc, #128]	@ (8000a54 <get_frame+0x284>)
 80009d2:	f8b3 3116 	ldrh.w	r3, [r3, #278]	@ 0x116
 80009d6:	3b01      	subs	r3, #1
 80009d8:	429a      	cmp	r2, r3
 80009da:	da0c      	bge.n	80009f6 <get_frame+0x226>
					frame.state = FIND_MASKED;
 80009dc:	4b1d      	ldr	r3, [pc, #116]	@ (8000a54 <get_frame+0x284>)
 80009de:	2207      	movs	r2, #7
 80009e0:	f883 211a 	strb.w	r2, [r3, #282]	@ 0x11a
					frame.data_id++;
 80009e4:	4b1b      	ldr	r3, [pc, #108]	@ (8000a54 <get_frame+0x284>)
 80009e6:	f8b3 3112 	ldrh.w	r3, [r3, #274]	@ 0x112
 80009ea:	3301      	adds	r3, #1
 80009ec:	b29a      	uxth	r2, r3
 80009ee:	4b19      	ldr	r3, [pc, #100]	@ (8000a54 <get_frame+0x284>)
 80009f0:	f8a3 2112 	strh.w	r2, [r3, #274]	@ 0x112
					return;
 80009f4:	e122      	b.n	8000c3c <get_frame+0x46c>
				}
				else {	// jeśli znak maskujący jest ostatnim w danych, wtedy błąd
					frame.state = FRAME_ERROR;
 80009f6:	4b17      	ldr	r3, [pc, #92]	@ (8000a54 <get_frame+0x284>)
 80009f8:	2208      	movs	r2, #8
 80009fa:	f883 211a 	strb.w	r2, [r3, #282]	@ 0x11a
 80009fe:	e035      	b.n	8000a6c <get_frame+0x29c>
				}
			}
			else if (ch == FRAME_START || ch == FRAME_END) {
 8000a00:	79fb      	ldrb	r3, [r7, #7]
 8000a02:	2b3a      	cmp	r3, #58	@ 0x3a
 8000a04:	d002      	beq.n	8000a0c <get_frame+0x23c>
 8000a06:	79fb      	ldrb	r3, [r7, #7]
 8000a08:	2b3b      	cmp	r3, #59	@ 0x3b
 8000a0a:	d104      	bne.n	8000a16 <get_frame+0x246>
				frame.state = FIND_START;
 8000a0c:	4b11      	ldr	r3, [pc, #68]	@ (8000a54 <get_frame+0x284>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	f883 211a 	strb.w	r2, [r3, #282]	@ 0x11a
				return;
 8000a14:	e112      	b.n	8000c3c <get_frame+0x46c>
			}
			else {
				frame.data[frame.data_id] = ch;
 8000a16:	4b0f      	ldr	r3, [pc, #60]	@ (8000a54 <get_frame+0x284>)
 8000a18:	f8b3 3112 	ldrh.w	r3, [r3, #274]	@ 0x112
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	4b0d      	ldr	r3, [pc, #52]	@ (8000a54 <get_frame+0x284>)
 8000a20:	4413      	add	r3, r2
 8000a22:	79fa      	ldrb	r2, [r7, #7]
 8000a24:	729a      	strb	r2, [r3, #10]
				frame.data_id++;
 8000a26:	4b0b      	ldr	r3, [pc, #44]	@ (8000a54 <get_frame+0x284>)
 8000a28:	f8b3 3112 	ldrh.w	r3, [r3, #274]	@ 0x112
 8000a2c:	3301      	adds	r3, #1
 8000a2e:	b29a      	uxth	r2, r3
 8000a30:	4b08      	ldr	r3, [pc, #32]	@ (8000a54 <get_frame+0x284>)
 8000a32:	f8a3 2112 	strh.w	r2, [r3, #274]	@ 0x112
				break;
 8000a36:	e101      	b.n	8000c3c <get_frame+0x46c>
			}
		}
		else {
			frame.data[frame.data_id] = '\0';
 8000a38:	4b06      	ldr	r3, [pc, #24]	@ (8000a54 <get_frame+0x284>)
 8000a3a:	f8b3 3112 	ldrh.w	r3, [r3, #274]	@ 0x112
 8000a3e:	461a      	mov	r2, r3
 8000a40:	4b04      	ldr	r3, [pc, #16]	@ (8000a54 <get_frame+0x284>)
 8000a42:	4413      	add	r3, r2
 8000a44:	2200      	movs	r2, #0
 8000a46:	729a      	strb	r2, [r3, #10]
			frame.state = FIND_CRC;
 8000a48:	4b02      	ldr	r3, [pc, #8]	@ (8000a54 <get_frame+0x284>)
 8000a4a:	2205      	movs	r2, #5
 8000a4c:	f883 211a 	strb.w	r2, [r3, #282]	@ 0x11a
			return;
 8000a50:	e0f4      	b.n	8000c3c <get_frame+0x46c>
 8000a52:	bf00      	nop
 8000a54:	20000510 	.word	0x20000510
 8000a58:	08004f00 	.word	0x08004f00
 8000a5c:	08004f0c 	.word	0x08004f0c
 8000a60:	20000513 	.word	0x20000513
 8000a64:	08004f10 	.word	0x08004f10
 8000a68:	20000516 	.word	0x20000516
		}
	}

	case FIND_MASKED: {
		frame.masked_counter++;
 8000a6c:	4b75      	ldr	r3, [pc, #468]	@ (8000c44 <get_frame+0x474>)
 8000a6e:	f8b3 3118 	ldrh.w	r3, [r3, #280]	@ 0x118
 8000a72:	3301      	adds	r3, #1
 8000a74:	b29a      	uxth	r2, r3
 8000a76:	4b73      	ldr	r3, [pc, #460]	@ (8000c44 <get_frame+0x474>)
 8000a78:	f8a3 2118 	strh.w	r2, [r3, #280]	@ 0x118
		switch(ch) {
 8000a7c:	79fb      	ldrb	r3, [r7, #7]
 8000a7e:	2b2f      	cmp	r3, #47	@ 0x2f
 8000a80:	d02d      	beq.n	8000ade <get_frame+0x30e>
 8000a82:	2b2f      	cmp	r3, #47	@ 0x2f
 8000a84:	dc3f      	bgt.n	8000b06 <get_frame+0x336>
 8000a86:	2b2c      	cmp	r3, #44	@ 0x2c
 8000a88:	d015      	beq.n	8000ab6 <get_frame+0x2e6>
 8000a8a:	2b2e      	cmp	r3, #46	@ 0x2e
 8000a8c:	d13b      	bne.n	8000b06 <get_frame+0x336>
		case MASKED_START: {
			frame.data[frame.data_id] = ':';
 8000a8e:	4b6d      	ldr	r3, [pc, #436]	@ (8000c44 <get_frame+0x474>)
 8000a90:	f8b3 3112 	ldrh.w	r3, [r3, #274]	@ 0x112
 8000a94:	461a      	mov	r2, r3
 8000a96:	4b6b      	ldr	r3, [pc, #428]	@ (8000c44 <get_frame+0x474>)
 8000a98:	4413      	add	r3, r2
 8000a9a:	223a      	movs	r2, #58	@ 0x3a
 8000a9c:	729a      	strb	r2, [r3, #10]
			frame.data_id++;
 8000a9e:	4b69      	ldr	r3, [pc, #420]	@ (8000c44 <get_frame+0x474>)
 8000aa0:	f8b3 3112 	ldrh.w	r3, [r3, #274]	@ 0x112
 8000aa4:	3301      	adds	r3, #1
 8000aa6:	b29a      	uxth	r2, r3
 8000aa8:	4b66      	ldr	r3, [pc, #408]	@ (8000c44 <get_frame+0x474>)
 8000aaa:	f8a3 2112 	strh.w	r2, [r3, #274]	@ 0x112
			frame.state = FIND_DATA;
 8000aae:	4b65      	ldr	r3, [pc, #404]	@ (8000c44 <get_frame+0x474>)
 8000ab0:	2204      	movs	r2, #4
 8000ab2:	f883 211a 	strb.w	r2, [r3, #282]	@ 0x11a
		}
		case MASKED_END: {
			frame.data[frame.data_id] = ';';
 8000ab6:	4b63      	ldr	r3, [pc, #396]	@ (8000c44 <get_frame+0x474>)
 8000ab8:	f8b3 3112 	ldrh.w	r3, [r3, #274]	@ 0x112
 8000abc:	461a      	mov	r2, r3
 8000abe:	4b61      	ldr	r3, [pc, #388]	@ (8000c44 <get_frame+0x474>)
 8000ac0:	4413      	add	r3, r2
 8000ac2:	223b      	movs	r2, #59	@ 0x3b
 8000ac4:	729a      	strb	r2, [r3, #10]
			frame.data_id++;
 8000ac6:	4b5f      	ldr	r3, [pc, #380]	@ (8000c44 <get_frame+0x474>)
 8000ac8:	f8b3 3112 	ldrh.w	r3, [r3, #274]	@ 0x112
 8000acc:	3301      	adds	r3, #1
 8000ace:	b29a      	uxth	r2, r3
 8000ad0:	4b5c      	ldr	r3, [pc, #368]	@ (8000c44 <get_frame+0x474>)
 8000ad2:	f8a3 2112 	strh.w	r2, [r3, #274]	@ 0x112
			frame.state = FIND_DATA;
 8000ad6:	4b5b      	ldr	r3, [pc, #364]	@ (8000c44 <get_frame+0x474>)
 8000ad8:	2204      	movs	r2, #4
 8000ada:	f883 211a 	strb.w	r2, [r3, #282]	@ 0x11a
		}
		case MASK: {
			frame.data[frame.data_id] = '/';
 8000ade:	4b59      	ldr	r3, [pc, #356]	@ (8000c44 <get_frame+0x474>)
 8000ae0:	f8b3 3112 	ldrh.w	r3, [r3, #274]	@ 0x112
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	4b57      	ldr	r3, [pc, #348]	@ (8000c44 <get_frame+0x474>)
 8000ae8:	4413      	add	r3, r2
 8000aea:	222f      	movs	r2, #47	@ 0x2f
 8000aec:	729a      	strb	r2, [r3, #10]
			frame.data_id++;
 8000aee:	4b55      	ldr	r3, [pc, #340]	@ (8000c44 <get_frame+0x474>)
 8000af0:	f8b3 3112 	ldrh.w	r3, [r3, #274]	@ 0x112
 8000af4:	3301      	adds	r3, #1
 8000af6:	b29a      	uxth	r2, r3
 8000af8:	4b52      	ldr	r3, [pc, #328]	@ (8000c44 <get_frame+0x474>)
 8000afa:	f8a3 2112 	strh.w	r2, [r3, #274]	@ 0x112
			frame.state = FIND_DATA;
 8000afe:	4b51      	ldr	r3, [pc, #324]	@ (8000c44 <get_frame+0x474>)
 8000b00:	2204      	movs	r2, #4
 8000b02:	f883 211a 	strb.w	r2, [r3, #282]	@ 0x11a
		}
		default: {
			frame.state = FRAME_ERROR;
 8000b06:	4b4f      	ldr	r3, [pc, #316]	@ (8000c44 <get_frame+0x474>)
 8000b08:	2208      	movs	r2, #8
 8000b0a:	f883 211a 	strb.w	r2, [r3, #282]	@ 0x11a
			return;
 8000b0e:	e095      	b.n	8000c3c <get_frame+0x46c>
			return;
		}
	}

	case FIND_CRC: {
		if ((ch >= '0' && ch <= '9') || (ch >= 'A' && ch <= 'F')) {
 8000b10:	79fb      	ldrb	r3, [r7, #7]
 8000b12:	2b2f      	cmp	r3, #47	@ 0x2f
 8000b14:	d902      	bls.n	8000b1c <get_frame+0x34c>
 8000b16:	79fb      	ldrb	r3, [r7, #7]
 8000b18:	2b39      	cmp	r3, #57	@ 0x39
 8000b1a:	d905      	bls.n	8000b28 <get_frame+0x358>
 8000b1c:	79fb      	ldrb	r3, [r7, #7]
 8000b1e:	2b40      	cmp	r3, #64	@ 0x40
 8000b20:	d95c      	bls.n	8000bdc <get_frame+0x40c>
 8000b22:	79fb      	ldrb	r3, [r7, #7]
 8000b24:	2b46      	cmp	r3, #70	@ 0x46
 8000b26:	d859      	bhi.n	8000bdc <get_frame+0x40c>
			uint8_t value;
			if (ch >= '0' && ch <= '9') value = ch - '0';
 8000b28:	79fb      	ldrb	r3, [r7, #7]
 8000b2a:	2b2f      	cmp	r3, #47	@ 0x2f
 8000b2c:	d906      	bls.n	8000b3c <get_frame+0x36c>
 8000b2e:	79fb      	ldrb	r3, [r7, #7]
 8000b30:	2b39      	cmp	r3, #57	@ 0x39
 8000b32:	d803      	bhi.n	8000b3c <get_frame+0x36c>
 8000b34:	79fb      	ldrb	r3, [r7, #7]
 8000b36:	3b30      	subs	r3, #48	@ 0x30
 8000b38:	73fb      	strb	r3, [r7, #15]
 8000b3a:	e002      	b.n	8000b42 <get_frame+0x372>
			else value = ch - 'A' + 10;
 8000b3c:	79fb      	ldrb	r3, [r7, #7]
 8000b3e:	3b37      	subs	r3, #55	@ 0x37
 8000b40:	73fb      	strb	r3, [r7, #15]

			switch(frame.crc_id) {
 8000b42:	4b40      	ldr	r3, [pc, #256]	@ (8000c44 <get_frame+0x474>)
 8000b44:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 8000b48:	2b03      	cmp	r3, #3
 8000b4a:	d83e      	bhi.n	8000bca <get_frame+0x3fa>
 8000b4c:	a201      	add	r2, pc, #4	@ (adr r2, 8000b54 <get_frame+0x384>)
 8000b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b52:	bf00      	nop
 8000b54:	08000b65 	.word	0x08000b65
 8000b58:	08000b75 	.word	0x08000b75
 8000b5c:	08000b91 	.word	0x08000b91
 8000b60:	08000bad 	.word	0x08000bad
			case 0: {
				frame.crc = value << 12;
 8000b64:	7bfb      	ldrb	r3, [r7, #15]
 8000b66:	b29b      	uxth	r3, r3
 8000b68:	031b      	lsls	r3, r3, #12
 8000b6a:	b29a      	uxth	r2, r3
 8000b6c:	4b35      	ldr	r3, [pc, #212]	@ (8000c44 <get_frame+0x474>)
 8000b6e:	f8a3 210c 	strh.w	r2, [r3, #268]	@ 0x10c
				break;
 8000b72:	e02a      	b.n	8000bca <get_frame+0x3fa>
			}
			case 1: {
				frame.crc |= value << 8;
 8000b74:	4b33      	ldr	r3, [pc, #204]	@ (8000c44 <get_frame+0x474>)
 8000b76:	f8b3 310c 	ldrh.w	r3, [r3, #268]	@ 0x10c
 8000b7a:	b21a      	sxth	r2, r3
 8000b7c:	7bfb      	ldrb	r3, [r7, #15]
 8000b7e:	021b      	lsls	r3, r3, #8
 8000b80:	b21b      	sxth	r3, r3
 8000b82:	4313      	orrs	r3, r2
 8000b84:	b21b      	sxth	r3, r3
 8000b86:	b29a      	uxth	r2, r3
 8000b88:	4b2e      	ldr	r3, [pc, #184]	@ (8000c44 <get_frame+0x474>)
 8000b8a:	f8a3 210c 	strh.w	r2, [r3, #268]	@ 0x10c
				break;
 8000b8e:	e01c      	b.n	8000bca <get_frame+0x3fa>
			}
			case 2: {
				frame.crc |= value << 4;
 8000b90:	4b2c      	ldr	r3, [pc, #176]	@ (8000c44 <get_frame+0x474>)
 8000b92:	f8b3 310c 	ldrh.w	r3, [r3, #268]	@ 0x10c
 8000b96:	b21a      	sxth	r2, r3
 8000b98:	7bfb      	ldrb	r3, [r7, #15]
 8000b9a:	011b      	lsls	r3, r3, #4
 8000b9c:	b21b      	sxth	r3, r3
 8000b9e:	4313      	orrs	r3, r2
 8000ba0:	b21b      	sxth	r3, r3
 8000ba2:	b29a      	uxth	r2, r3
 8000ba4:	4b27      	ldr	r3, [pc, #156]	@ (8000c44 <get_frame+0x474>)
 8000ba6:	f8a3 210c 	strh.w	r2, [r3, #268]	@ 0x10c
				break;
 8000baa:	e00e      	b.n	8000bca <get_frame+0x3fa>
			}
			case 3: {
				frame.crc |= value;
 8000bac:	4b25      	ldr	r3, [pc, #148]	@ (8000c44 <get_frame+0x474>)
 8000bae:	f8b3 210c 	ldrh.w	r2, [r3, #268]	@ 0x10c
 8000bb2:	7bfb      	ldrb	r3, [r7, #15]
 8000bb4:	b29b      	uxth	r3, r3
 8000bb6:	4313      	orrs	r3, r2
 8000bb8:	b29a      	uxth	r2, r3
 8000bba:	4b22      	ldr	r3, [pc, #136]	@ (8000c44 <get_frame+0x474>)
 8000bbc:	f8a3 210c 	strh.w	r2, [r3, #268]	@ 0x10c
				frame.state = FIND_END;
 8000bc0:	4b20      	ldr	r3, [pc, #128]	@ (8000c44 <get_frame+0x474>)
 8000bc2:	2206      	movs	r2, #6
 8000bc4:	f883 211a 	strb.w	r2, [r3, #282]	@ 0x11a
				return;
 8000bc8:	e038      	b.n	8000c3c <get_frame+0x46c>
			}
			}
			frame.crc_id++;
 8000bca:	4b1e      	ldr	r3, [pc, #120]	@ (8000c44 <get_frame+0x474>)
 8000bcc:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 8000bd0:	3301      	adds	r3, #1
 8000bd2:	b2da      	uxtb	r2, r3
 8000bd4:	4b1b      	ldr	r3, [pc, #108]	@ (8000c44 <get_frame+0x474>)
 8000bd6:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
			break;
 8000bda:	e02f      	b.n	8000c3c <get_frame+0x46c>
		}
		else if (ch == FRAME_START || ch == FRAME_END) frame.state = FIND_START;
 8000bdc:	79fb      	ldrb	r3, [r7, #7]
 8000bde:	2b3a      	cmp	r3, #58	@ 0x3a
 8000be0:	d002      	beq.n	8000be8 <get_frame+0x418>
 8000be2:	79fb      	ldrb	r3, [r7, #7]
 8000be4:	2b3b      	cmp	r3, #59	@ 0x3b
 8000be6:	d104      	bne.n	8000bf2 <get_frame+0x422>
 8000be8:	4b16      	ldr	r3, [pc, #88]	@ (8000c44 <get_frame+0x474>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	f883 211a 	strb.w	r2, [r3, #282]	@ 0x11a
		else frame.state = FRAME_ERROR;
		break;
 8000bf0:	e024      	b.n	8000c3c <get_frame+0x46c>
		else frame.state = FRAME_ERROR;
 8000bf2:	4b14      	ldr	r3, [pc, #80]	@ (8000c44 <get_frame+0x474>)
 8000bf4:	2208      	movs	r2, #8
 8000bf6:	f883 211a 	strb.w	r2, [r3, #282]	@ 0x11a
		break;
 8000bfa:	e01f      	b.n	8000c3c <get_frame+0x46c>
	}

	case FIND_END: {
		if (ch == FRAME_END) {
 8000bfc:	79fb      	ldrb	r3, [r7, #7]
 8000bfe:	2b3b      	cmp	r3, #59	@ 0x3b
 8000c00:	d106      	bne.n	8000c10 <get_frame+0x440>
			frame.complete = true;
 8000c02:	4b10      	ldr	r3, [pc, #64]	@ (8000c44 <get_frame+0x474>)
 8000c04:	2201      	movs	r2, #1
 8000c06:	f883 211b 	strb.w	r2, [r3, #283]	@ 0x11b
			process_frame();
 8000c0a:	f7ff fd05 	bl	8000618 <process_frame>
			return;
 8000c0e:	e015      	b.n	8000c3c <get_frame+0x46c>
		}
		else if (ch == FRAME_START) frame.state = FIND_START;
 8000c10:	79fb      	ldrb	r3, [r7, #7]
 8000c12:	2b3a      	cmp	r3, #58	@ 0x3a
 8000c14:	d104      	bne.n	8000c20 <get_frame+0x450>
 8000c16:	4b0b      	ldr	r3, [pc, #44]	@ (8000c44 <get_frame+0x474>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	f883 211a 	strb.w	r2, [r3, #282]	@ 0x11a
		else frame.state = FRAME_ERROR;
		break;
 8000c1e:	e00d      	b.n	8000c3c <get_frame+0x46c>
		else frame.state = FRAME_ERROR;
 8000c20:	4b08      	ldr	r3, [pc, #32]	@ (8000c44 <get_frame+0x474>)
 8000c22:	2208      	movs	r2, #8
 8000c24:	f883 211a 	strb.w	r2, [r3, #282]	@ 0x11a
		break;
 8000c28:	e008      	b.n	8000c3c <get_frame+0x46c>
	}

	case FRAME_ERROR: {
		USART_fsend("error during frame processing");
 8000c2a:	4807      	ldr	r0, [pc, #28]	@ (8000c48 <get_frame+0x478>)
 8000c2c:	f7ff fb76 	bl	800031c <USART_fsend>
		frame.state = FIND_START;
 8000c30:	4b04      	ldr	r3, [pc, #16]	@ (8000c44 <get_frame+0x474>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	f883 211a 	strb.w	r2, [r3, #282]	@ 0x11a
		return;
 8000c38:	e000      	b.n	8000c3c <get_frame+0x46c>
		return;
 8000c3a:	bf00      	nop
	}

	}
}
 8000c3c:	3710      	adds	r7, #16
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	20000510 	.word	0x20000510
 8000c48:	08004f20 	.word	0x08004f20

08000c4c <handle_char>:

void handle_char() {
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
	//__disable_irq();
	is_handling = 1;
 8000c52:	4b10      	ldr	r3, [pc, #64]	@ (8000c94 <handle_char+0x48>)
 8000c54:	2201      	movs	r2, #1
 8000c56:	701a      	strb	r2, [r3, #0]
	//__enable_irq();

	int16_t ch;
	if ((ch = USART_getchar()) >= 0 && ch < 128) {
 8000c58:	f7ff fc6e 	bl	8000538 <USART_getchar>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	80fb      	strh	r3, [r7, #6]
 8000c60:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	db0e      	blt.n	8000c86 <handle_char+0x3a>
 8000c68:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c6c:	2b7f      	cmp	r3, #127	@ 0x7f
 8000c6e:	dc0a      	bgt.n	8000c86 <handle_char+0x3a>
		USART_fsend("  |%c|  ", ch);
 8000c70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c74:	4619      	mov	r1, r3
 8000c76:	4808      	ldr	r0, [pc, #32]	@ (8000c98 <handle_char+0x4c>)
 8000c78:	f7ff fb50 	bl	800031c <USART_fsend>
		get_frame((uint8_t)ch);
 8000c7c:	88fb      	ldrh	r3, [r7, #6]
 8000c7e:	b2db      	uxtb	r3, r3
 8000c80:	4618      	mov	r0, r3
 8000c82:	f7ff fda5 	bl	80007d0 <get_frame>
	}

	//__disable_irq();
	is_handling = 0;
 8000c86:	4b03      	ldr	r3, [pc, #12]	@ (8000c94 <handle_char+0x48>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	701a      	strb	r2, [r3, #0]
	//__enable_irq();
}
 8000c8c:	bf00      	nop
 8000c8e:	3708      	adds	r7, #8
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	2000050c 	.word	0x2000050c
 8000c98:	08004f40 	.word	0x08004f40

08000c9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ca0:	f000 fb12 	bl	80012c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ca4:	f000 f82c 	bl	8000d00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ca8:	f7ff fa58 	bl	800015c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000cac:	f000 fa76 	bl	800119c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000cb0:	f000 f994 	bl	8000fdc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &USART_BUF_RX[USART_RX_EMPTY], 1);
 8000cb4:	4b0d      	ldr	r3, [pc, #52]	@ (8000cec <main+0x50>)
 8000cb6:	881b      	ldrh	r3, [r3, #0]
 8000cb8:	b29b      	uxth	r3, r3
 8000cba:	461a      	mov	r2, r3
 8000cbc:	4b0c      	ldr	r3, [pc, #48]	@ (8000cf0 <main+0x54>)
 8000cbe:	4413      	add	r3, r2
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	480b      	ldr	r0, [pc, #44]	@ (8000cf4 <main+0x58>)
 8000cc6:	f002 f9f2 	bl	80030ae <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (USART_RX_EMPTY != USART_RX_BUSY && !is_handling) {
 8000cca:	4b08      	ldr	r3, [pc, #32]	@ (8000cec <main+0x50>)
 8000ccc:	881b      	ldrh	r3, [r3, #0]
 8000cce:	b29a      	uxth	r2, r3
 8000cd0:	4b09      	ldr	r3, [pc, #36]	@ (8000cf8 <main+0x5c>)
 8000cd2:	881b      	ldrh	r3, [r3, #0]
 8000cd4:	b29b      	uxth	r3, r3
 8000cd6:	429a      	cmp	r2, r3
 8000cd8:	d0f7      	beq.n	8000cca <main+0x2e>
 8000cda:	4b08      	ldr	r3, [pc, #32]	@ (8000cfc <main+0x60>)
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	b2db      	uxtb	r3, r3
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d1f2      	bne.n	8000cca <main+0x2e>
		  handle_char();
 8000ce4:	f7ff ffb2 	bl	8000c4c <handle_char>
	  if (USART_RX_EMPTY != USART_RX_BUSY && !is_handling) {
 8000ce8:	e7ef      	b.n	8000cca <main+0x2e>
 8000cea:	bf00      	nop
 8000cec:	20000104 	.word	0x20000104
 8000cf0:	20000084 	.word	0x20000084
 8000cf4:	20000678 	.word	0x20000678
 8000cf8:	20000106 	.word	0x20000106
 8000cfc:	2000050c 	.word	0x2000050c

08000d00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b090      	sub	sp, #64	@ 0x40
 8000d04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d06:	f107 0318 	add.w	r3, r7, #24
 8000d0a:	2228      	movs	r2, #40	@ 0x28
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f003 f968 	bl	8003fe4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d14:	1d3b      	adds	r3, r7, #4
 8000d16:	2200      	movs	r2, #0
 8000d18:	601a      	str	r2, [r3, #0]
 8000d1a:	605a      	str	r2, [r3, #4]
 8000d1c:	609a      	str	r2, [r3, #8]
 8000d1e:	60da      	str	r2, [r3, #12]
 8000d20:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d22:	2302      	movs	r3, #2
 8000d24:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d26:	2301      	movs	r3, #1
 8000d28:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d2a:	2310      	movs	r3, #16
 8000d2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d2e:	2302      	movs	r3, #2
 8000d30:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000d32:	2300      	movs	r3, #0
 8000d34:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000d36:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000d3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d3c:	f107 0318 	add.w	r3, r7, #24
 8000d40:	4618      	mov	r0, r3
 8000d42:	f000 fea1 	bl	8001a88 <HAL_RCC_OscConfig>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000d4c:	f000 f81a 	bl	8000d84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d50:	230f      	movs	r3, #15
 8000d52:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d54:	2302      	movs	r3, #2
 8000d56:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d5c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d60:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d62:	2300      	movs	r3, #0
 8000d64:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d66:	1d3b      	adds	r3, r7, #4
 8000d68:	2102      	movs	r1, #2
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f001 f90e 	bl	8001f8c <HAL_RCC_ClockConfig>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000d76:	f000 f805 	bl	8000d84 <Error_Handler>
  }
}
 8000d7a:	bf00      	nop
 8000d7c:	3740      	adds	r7, #64	@ 0x40
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
	...

08000d84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	USART_fsend("problem");
 8000d88:	4803      	ldr	r0, [pc, #12]	@ (8000d98 <Error_Handler+0x14>)
 8000d8a:	f7ff fac7 	bl	800031c <USART_fsend>
  __ASM volatile ("cpsid i" : : : "memory");
 8000d8e:	b672      	cpsid	i
}
 8000d90:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d92:	bf00      	nop
 8000d94:	e7fd      	b.n	8000d92 <Error_Handler+0xe>
 8000d96:	bf00      	nop
 8000d98:	08004f4c 	.word	0x08004f4c

08000d9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b085      	sub	sp, #20
 8000da0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000da2:	4b15      	ldr	r3, [pc, #84]	@ (8000df8 <HAL_MspInit+0x5c>)
 8000da4:	699b      	ldr	r3, [r3, #24]
 8000da6:	4a14      	ldr	r2, [pc, #80]	@ (8000df8 <HAL_MspInit+0x5c>)
 8000da8:	f043 0301 	orr.w	r3, r3, #1
 8000dac:	6193      	str	r3, [r2, #24]
 8000dae:	4b12      	ldr	r3, [pc, #72]	@ (8000df8 <HAL_MspInit+0x5c>)
 8000db0:	699b      	ldr	r3, [r3, #24]
 8000db2:	f003 0301 	and.w	r3, r3, #1
 8000db6:	60bb      	str	r3, [r7, #8]
 8000db8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dba:	4b0f      	ldr	r3, [pc, #60]	@ (8000df8 <HAL_MspInit+0x5c>)
 8000dbc:	69db      	ldr	r3, [r3, #28]
 8000dbe:	4a0e      	ldr	r2, [pc, #56]	@ (8000df8 <HAL_MspInit+0x5c>)
 8000dc0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dc4:	61d3      	str	r3, [r2, #28]
 8000dc6:	4b0c      	ldr	r3, [pc, #48]	@ (8000df8 <HAL_MspInit+0x5c>)
 8000dc8:	69db      	ldr	r3, [r3, #28]
 8000dca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dce:	607b      	str	r3, [r7, #4]
 8000dd0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000dd2:	4b0a      	ldr	r3, [pc, #40]	@ (8000dfc <HAL_MspInit+0x60>)
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	60fb      	str	r3, [r7, #12]
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000dde:	60fb      	str	r3, [r7, #12]
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000de6:	60fb      	str	r3, [r7, #12]
 8000de8:	4a04      	ldr	r2, [pc, #16]	@ (8000dfc <HAL_MspInit+0x60>)
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dee:	bf00      	nop
 8000df0:	3714      	adds	r7, #20
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bc80      	pop	{r7}
 8000df6:	4770      	bx	lr
 8000df8:	40021000 	.word	0x40021000
 8000dfc:	40010000 	.word	0x40010000

08000e00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e04:	bf00      	nop
 8000e06:	e7fd      	b.n	8000e04 <NMI_Handler+0x4>

08000e08 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e0c:	bf00      	nop
 8000e0e:	e7fd      	b.n	8000e0c <HardFault_Handler+0x4>

08000e10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e14:	bf00      	nop
 8000e16:	e7fd      	b.n	8000e14 <MemManage_Handler+0x4>

08000e18 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e1c:	bf00      	nop
 8000e1e:	e7fd      	b.n	8000e1c <BusFault_Handler+0x4>

08000e20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e24:	bf00      	nop
 8000e26:	e7fd      	b.n	8000e24 <UsageFault_Handler+0x4>

08000e28 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e2c:	bf00      	nop
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bc80      	pop	{r7}
 8000e32:	4770      	bx	lr

08000e34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e38:	bf00      	nop
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bc80      	pop	{r7}
 8000e3e:	4770      	bx	lr

08000e40 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bc80      	pop	{r7}
 8000e4a:	4770      	bx	lr

08000e4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e50:	f000 fa80 	bl	8001354 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e54:	bf00      	nop
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e5c:	4802      	ldr	r0, [pc, #8]	@ (8000e68 <TIM2_IRQHandler+0x10>)
 8000e5e:	f001 faca 	bl	80023f6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000e62:	bf00      	nop
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	20000630 	.word	0x20000630

08000e6c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e70:	4802      	ldr	r0, [pc, #8]	@ (8000e7c <USART2_IRQHandler+0x10>)
 8000e72:	f002 f941 	bl	80030f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	20000678 	.word	0x20000678

08000e80 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000e84:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000e88:	f000 fddc 	bl	8001a44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000e8c:	bf00      	nop
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	60f8      	str	r0, [r7, #12]
 8000e98:	60b9      	str	r1, [r7, #8]
 8000e9a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	617b      	str	r3, [r7, #20]
 8000ea0:	e00a      	b.n	8000eb8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ea2:	f3af 8000 	nop.w
 8000ea6:	4601      	mov	r1, r0
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	1c5a      	adds	r2, r3, #1
 8000eac:	60ba      	str	r2, [r7, #8]
 8000eae:	b2ca      	uxtb	r2, r1
 8000eb0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	617b      	str	r3, [r7, #20]
 8000eb8:	697a      	ldr	r2, [r7, #20]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	dbf0      	blt.n	8000ea2 <_read+0x12>
  }

  return len;
 8000ec0:	687b      	ldr	r3, [r7, #4]
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3718      	adds	r7, #24
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	b086      	sub	sp, #24
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	60f8      	str	r0, [r7, #12]
 8000ed2:	60b9      	str	r1, [r7, #8]
 8000ed4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	617b      	str	r3, [r7, #20]
 8000eda:	e009      	b.n	8000ef0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	1c5a      	adds	r2, r3, #1
 8000ee0:	60ba      	str	r2, [r7, #8]
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	3301      	adds	r3, #1
 8000eee:	617b      	str	r3, [r7, #20]
 8000ef0:	697a      	ldr	r2, [r7, #20]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	dbf1      	blt.n	8000edc <_write+0x12>
  }
  return len;
 8000ef8:	687b      	ldr	r3, [r7, #4]
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3718      	adds	r7, #24
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <_close>:

int _close(int file)
{
 8000f02:	b480      	push	{r7}
 8000f04:	b083      	sub	sp, #12
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	370c      	adds	r7, #12
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bc80      	pop	{r7}
 8000f16:	4770      	bx	lr

08000f18 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f28:	605a      	str	r2, [r3, #4]
  return 0;
 8000f2a:	2300      	movs	r3, #0
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	370c      	adds	r7, #12
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bc80      	pop	{r7}
 8000f34:	4770      	bx	lr

08000f36 <_isatty>:

int _isatty(int file)
{
 8000f36:	b480      	push	{r7}
 8000f38:	b083      	sub	sp, #12
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f3e:	2301      	movs	r3, #1
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	370c      	adds	r7, #12
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bc80      	pop	{r7}
 8000f48:	4770      	bx	lr

08000f4a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	b085      	sub	sp, #20
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	60f8      	str	r0, [r7, #12]
 8000f52:	60b9      	str	r1, [r7, #8]
 8000f54:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f56:	2300      	movs	r3, #0
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3714      	adds	r7, #20
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bc80      	pop	{r7}
 8000f60:	4770      	bx	lr
	...

08000f64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b086      	sub	sp, #24
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f6c:	4a14      	ldr	r2, [pc, #80]	@ (8000fc0 <_sbrk+0x5c>)
 8000f6e:	4b15      	ldr	r3, [pc, #84]	@ (8000fc4 <_sbrk+0x60>)
 8000f70:	1ad3      	subs	r3, r2, r3
 8000f72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f78:	4b13      	ldr	r3, [pc, #76]	@ (8000fc8 <_sbrk+0x64>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d102      	bne.n	8000f86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f80:	4b11      	ldr	r3, [pc, #68]	@ (8000fc8 <_sbrk+0x64>)
 8000f82:	4a12      	ldr	r2, [pc, #72]	@ (8000fcc <_sbrk+0x68>)
 8000f84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f86:	4b10      	ldr	r3, [pc, #64]	@ (8000fc8 <_sbrk+0x64>)
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4413      	add	r3, r2
 8000f8e:	693a      	ldr	r2, [r7, #16]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	d207      	bcs.n	8000fa4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f94:	f003 f896 	bl	80040c4 <__errno>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	220c      	movs	r2, #12
 8000f9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000fa2:	e009      	b.n	8000fb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fa4:	4b08      	ldr	r3, [pc, #32]	@ (8000fc8 <_sbrk+0x64>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000faa:	4b07      	ldr	r3, [pc, #28]	@ (8000fc8 <_sbrk+0x64>)
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4413      	add	r3, r2
 8000fb2:	4a05      	ldr	r2, [pc, #20]	@ (8000fc8 <_sbrk+0x64>)
 8000fb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fb6:	68fb      	ldr	r3, [r7, #12]
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3718      	adds	r7, #24
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	20005000 	.word	0x20005000
 8000fc4:	00000400 	.word	0x00000400
 8000fc8:	2000062c 	.word	0x2000062c
 8000fcc:	20000810 	.word	0x20000810

08000fd0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bc80      	pop	{r7}
 8000fda:	4770      	bx	lr

08000fdc <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b090      	sub	sp, #64	@ 0x40
 8000fe0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fe2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	601a      	str	r2, [r3, #0]
 8000fea:	605a      	str	r2, [r3, #4]
 8000fec:	609a      	str	r2, [r3, #8]
 8000fee:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000ff0:	f107 031c 	add.w	r3, r7, #28
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]
 8000ffe:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001000:	f107 030c 	add.w	r3, r7, #12
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]
 800100a:	609a      	str	r2, [r3, #8]
 800100c:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800100e:	1d3b      	adds	r3, r7, #4
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001016:	4b3e      	ldr	r3, [pc, #248]	@ (8001110 <MX_TIM2_Init+0x134>)
 8001018:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800101c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31;
 800101e:	4b3c      	ldr	r3, [pc, #240]	@ (8001110 <MX_TIM2_Init+0x134>)
 8001020:	221f      	movs	r2, #31
 8001022:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001024:	4b3a      	ldr	r3, [pc, #232]	@ (8001110 <MX_TIM2_Init+0x134>)
 8001026:	2200      	movs	r2, #0
 8001028:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800102a:	4b39      	ldr	r3, [pc, #228]	@ (8001110 <MX_TIM2_Init+0x134>)
 800102c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001030:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001032:	4b37      	ldr	r3, [pc, #220]	@ (8001110 <MX_TIM2_Init+0x134>)
 8001034:	2200      	movs	r2, #0
 8001036:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001038:	4b35      	ldr	r3, [pc, #212]	@ (8001110 <MX_TIM2_Init+0x134>)
 800103a:	2200      	movs	r2, #0
 800103c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800103e:	4834      	ldr	r0, [pc, #208]	@ (8001110 <MX_TIM2_Init+0x134>)
 8001040:	f001 f932 	bl	80022a8 <HAL_TIM_Base_Init>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800104a:	f7ff fe9b 	bl	8000d84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800104e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001052:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001054:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001058:	4619      	mov	r1, r3
 800105a:	482d      	ldr	r0, [pc, #180]	@ (8001110 <MX_TIM2_Init+0x134>)
 800105c:	f001 fb57 	bl	800270e <HAL_TIM_ConfigClockSource>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001066:	f7ff fe8d 	bl	8000d84 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800106a:	4829      	ldr	r0, [pc, #164]	@ (8001110 <MX_TIM2_Init+0x134>)
 800106c:	f001 f96b 	bl	8002346 <HAL_TIM_IC_Init>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001076:	f7ff fe85 	bl	8000d84 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800107a:	2304      	movs	r3, #4
 800107c:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 800107e:	2350      	movs	r3, #80	@ 0x50
 8001080:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001082:	2300      	movs	r3, #0
 8001084:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001086:	2300      	movs	r3, #0
 8001088:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 800108a:	2300      	movs	r3, #0
 800108c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 800108e:	f107 031c 	add.w	r3, r7, #28
 8001092:	4619      	mov	r1, r3
 8001094:	481e      	ldr	r0, [pc, #120]	@ (8001110 <MX_TIM2_Init+0x134>)
 8001096:	f001 fc01 	bl	800289c <HAL_TIM_SlaveConfigSynchro>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_TIM2_Init+0xc8>
  {
    Error_Handler();
 80010a0:	f7ff fe70 	bl	8000d84 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80010a4:	2300      	movs	r3, #0
 80010a6:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80010a8:	2301      	movs	r3, #1
 80010aa:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80010ac:	2300      	movs	r3, #0
 80010ae:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 80010b0:	2300      	movs	r3, #0
 80010b2:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80010b4:	f107 030c 	add.w	r3, r7, #12
 80010b8:	2200      	movs	r2, #0
 80010ba:	4619      	mov	r1, r3
 80010bc:	4814      	ldr	r0, [pc, #80]	@ (8001110 <MX_TIM2_Init+0x134>)
 80010be:	f001 fa8a 	bl	80025d6 <HAL_TIM_IC_ConfigChannel>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 80010c8:	f7ff fe5c 	bl	8000d84 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80010cc:	2302      	movs	r3, #2
 80010ce:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80010d0:	2302      	movs	r3, #2
 80010d2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80010d4:	f107 030c 	add.w	r3, r7, #12
 80010d8:	2204      	movs	r2, #4
 80010da:	4619      	mov	r1, r3
 80010dc:	480c      	ldr	r0, [pc, #48]	@ (8001110 <MX_TIM2_Init+0x134>)
 80010de:	f001 fa7a 	bl	80025d6 <HAL_TIM_IC_ConfigChannel>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MX_TIM2_Init+0x110>
  {
    Error_Handler();
 80010e8:	f7ff fe4c 	bl	8000d84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010ec:	2300      	movs	r3, #0
 80010ee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010f0:	2300      	movs	r3, #0
 80010f2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010f4:	1d3b      	adds	r3, r7, #4
 80010f6:	4619      	mov	r1, r3
 80010f8:	4805      	ldr	r0, [pc, #20]	@ (8001110 <MX_TIM2_Init+0x134>)
 80010fa:	f001 fee3 	bl	8002ec4 <HAL_TIMEx_MasterConfigSynchronization>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_TIM2_Init+0x12c>
  {
    Error_Handler();
 8001104:	f7ff fe3e 	bl	8000d84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001108:	bf00      	nop
 800110a:	3740      	adds	r7, #64	@ 0x40
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	20000630 	.word	0x20000630

08001114 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b088      	sub	sp, #32
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800111c:	f107 0310 	add.w	r3, r7, #16
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	605a      	str	r2, [r3, #4]
 8001126:	609a      	str	r2, [r3, #8]
 8001128:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM2)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001132:	d12b      	bne.n	800118c <HAL_TIM_Base_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001134:	4b17      	ldr	r3, [pc, #92]	@ (8001194 <HAL_TIM_Base_MspInit+0x80>)
 8001136:	69db      	ldr	r3, [r3, #28]
 8001138:	4a16      	ldr	r2, [pc, #88]	@ (8001194 <HAL_TIM_Base_MspInit+0x80>)
 800113a:	f043 0301 	orr.w	r3, r3, #1
 800113e:	61d3      	str	r3, [r2, #28]
 8001140:	4b14      	ldr	r3, [pc, #80]	@ (8001194 <HAL_TIM_Base_MspInit+0x80>)
 8001142:	69db      	ldr	r3, [r3, #28]
 8001144:	f003 0301 	and.w	r3, r3, #1
 8001148:	60fb      	str	r3, [r7, #12]
 800114a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800114c:	4b11      	ldr	r3, [pc, #68]	@ (8001194 <HAL_TIM_Base_MspInit+0x80>)
 800114e:	699b      	ldr	r3, [r3, #24]
 8001150:	4a10      	ldr	r2, [pc, #64]	@ (8001194 <HAL_TIM_Base_MspInit+0x80>)
 8001152:	f043 0304 	orr.w	r3, r3, #4
 8001156:	6193      	str	r3, [r2, #24]
 8001158:	4b0e      	ldr	r3, [pc, #56]	@ (8001194 <HAL_TIM_Base_MspInit+0x80>)
 800115a:	699b      	ldr	r3, [r3, #24]
 800115c:	f003 0304 	and.w	r3, r3, #4
 8001160:	60bb      	str	r3, [r7, #8]
 8001162:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001164:	2301      	movs	r3, #1
 8001166:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001168:	2300      	movs	r3, #0
 800116a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116c:	2300      	movs	r3, #0
 800116e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001170:	f107 0310 	add.w	r3, r7, #16
 8001174:	4619      	mov	r1, r3
 8001176:	4808      	ldr	r0, [pc, #32]	@ (8001198 <HAL_TIM_Base_MspInit+0x84>)
 8001178:	f000 fac8 	bl	800170c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800117c:	2200      	movs	r2, #0
 800117e:	2100      	movs	r1, #0
 8001180:	201c      	movs	r0, #28
 8001182:	f000 f9da 	bl	800153a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001186:	201c      	movs	r0, #28
 8001188:	f000 f9f3 	bl	8001572 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800118c:	bf00      	nop
 800118e:	3720      	adds	r7, #32
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	40021000 	.word	0x40021000
 8001198:	40010800 	.word	0x40010800

0800119c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011a0:	4b11      	ldr	r3, [pc, #68]	@ (80011e8 <MX_USART2_UART_Init+0x4c>)
 80011a2:	4a12      	ldr	r2, [pc, #72]	@ (80011ec <MX_USART2_UART_Init+0x50>)
 80011a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011a6:	4b10      	ldr	r3, [pc, #64]	@ (80011e8 <MX_USART2_UART_Init+0x4c>)
 80011a8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011ae:	4b0e      	ldr	r3, [pc, #56]	@ (80011e8 <MX_USART2_UART_Init+0x4c>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011b4:	4b0c      	ldr	r3, [pc, #48]	@ (80011e8 <MX_USART2_UART_Init+0x4c>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011ba:	4b0b      	ldr	r3, [pc, #44]	@ (80011e8 <MX_USART2_UART_Init+0x4c>)
 80011bc:	2200      	movs	r2, #0
 80011be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011c0:	4b09      	ldr	r3, [pc, #36]	@ (80011e8 <MX_USART2_UART_Init+0x4c>)
 80011c2:	220c      	movs	r2, #12
 80011c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011c6:	4b08      	ldr	r3, [pc, #32]	@ (80011e8 <MX_USART2_UART_Init+0x4c>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011cc:	4b06      	ldr	r3, [pc, #24]	@ (80011e8 <MX_USART2_UART_Init+0x4c>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011d2:	4805      	ldr	r0, [pc, #20]	@ (80011e8 <MX_USART2_UART_Init+0x4c>)
 80011d4:	f001 fee6 	bl	8002fa4 <HAL_UART_Init>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011de:	f7ff fdd1 	bl	8000d84 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011e2:	bf00      	nop
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	20000678 	.word	0x20000678
 80011ec:	40004400 	.word	0x40004400

080011f0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b088      	sub	sp, #32
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f8:	f107 0310 	add.w	r3, r7, #16
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	605a      	str	r2, [r3, #4]
 8001202:	609a      	str	r2, [r3, #8]
 8001204:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a19      	ldr	r2, [pc, #100]	@ (8001270 <HAL_UART_MspInit+0x80>)
 800120c:	4293      	cmp	r3, r2
 800120e:	d12b      	bne.n	8001268 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001210:	4b18      	ldr	r3, [pc, #96]	@ (8001274 <HAL_UART_MspInit+0x84>)
 8001212:	69db      	ldr	r3, [r3, #28]
 8001214:	4a17      	ldr	r2, [pc, #92]	@ (8001274 <HAL_UART_MspInit+0x84>)
 8001216:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800121a:	61d3      	str	r3, [r2, #28]
 800121c:	4b15      	ldr	r3, [pc, #84]	@ (8001274 <HAL_UART_MspInit+0x84>)
 800121e:	69db      	ldr	r3, [r3, #28]
 8001220:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001224:	60fb      	str	r3, [r7, #12]
 8001226:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001228:	4b12      	ldr	r3, [pc, #72]	@ (8001274 <HAL_UART_MspInit+0x84>)
 800122a:	699b      	ldr	r3, [r3, #24]
 800122c:	4a11      	ldr	r2, [pc, #68]	@ (8001274 <HAL_UART_MspInit+0x84>)
 800122e:	f043 0304 	orr.w	r3, r3, #4
 8001232:	6193      	str	r3, [r2, #24]
 8001234:	4b0f      	ldr	r3, [pc, #60]	@ (8001274 <HAL_UART_MspInit+0x84>)
 8001236:	699b      	ldr	r3, [r3, #24]
 8001238:	f003 0304 	and.w	r3, r3, #4
 800123c:	60bb      	str	r3, [r7, #8]
 800123e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001240:	230c      	movs	r3, #12
 8001242:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001244:	2302      	movs	r3, #2
 8001246:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001248:	2302      	movs	r3, #2
 800124a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800124c:	f107 0310 	add.w	r3, r7, #16
 8001250:	4619      	mov	r1, r3
 8001252:	4809      	ldr	r0, [pc, #36]	@ (8001278 <HAL_UART_MspInit+0x88>)
 8001254:	f000 fa5a 	bl	800170c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001258:	2200      	movs	r2, #0
 800125a:	2100      	movs	r1, #0
 800125c:	2026      	movs	r0, #38	@ 0x26
 800125e:	f000 f96c 	bl	800153a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001262:	2026      	movs	r0, #38	@ 0x26
 8001264:	f000 f985 	bl	8001572 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001268:	bf00      	nop
 800126a:	3720      	adds	r7, #32
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	40004400 	.word	0x40004400
 8001274:	40021000 	.word	0x40021000
 8001278:	40010800 	.word	0x40010800

0800127c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800127c:	f7ff fea8 	bl	8000fd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001280:	480b      	ldr	r0, [pc, #44]	@ (80012b0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001282:	490c      	ldr	r1, [pc, #48]	@ (80012b4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001284:	4a0c      	ldr	r2, [pc, #48]	@ (80012b8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001286:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001288:	e002      	b.n	8001290 <LoopCopyDataInit>

0800128a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800128a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800128c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800128e:	3304      	adds	r3, #4

08001290 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001290:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001292:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001294:	d3f9      	bcc.n	800128a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001296:	4a09      	ldr	r2, [pc, #36]	@ (80012bc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001298:	4c09      	ldr	r4, [pc, #36]	@ (80012c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800129a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800129c:	e001      	b.n	80012a2 <LoopFillZerobss>

0800129e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800129e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012a0:	3204      	adds	r2, #4

080012a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012a4:	d3fb      	bcc.n	800129e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012a6:	f002 ff13 	bl	80040d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012aa:	f7ff fcf7 	bl	8000c9c <main>
  bx lr
 80012ae:	4770      	bx	lr
  ldr r0, =_sdata
 80012b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012b4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80012b8:	080050c4 	.word	0x080050c4
  ldr r2, =_sbss
 80012bc:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80012c0:	20000810 	.word	0x20000810

080012c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012c4:	e7fe      	b.n	80012c4 <ADC1_2_IRQHandler>
	...

080012c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012cc:	4b08      	ldr	r3, [pc, #32]	@ (80012f0 <HAL_Init+0x28>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a07      	ldr	r2, [pc, #28]	@ (80012f0 <HAL_Init+0x28>)
 80012d2:	f043 0310 	orr.w	r3, r3, #16
 80012d6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012d8:	2003      	movs	r0, #3
 80012da:	f000 f923 	bl	8001524 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012de:	2000      	movs	r0, #0
 80012e0:	f000 f808 	bl	80012f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012e4:	f7ff fd5a 	bl	8000d9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012e8:	2300      	movs	r3, #0
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	40022000 	.word	0x40022000

080012f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012fc:	4b12      	ldr	r3, [pc, #72]	@ (8001348 <HAL_InitTick+0x54>)
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	4b12      	ldr	r3, [pc, #72]	@ (800134c <HAL_InitTick+0x58>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	4619      	mov	r1, r3
 8001306:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800130a:	fbb3 f3f1 	udiv	r3, r3, r1
 800130e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001312:	4618      	mov	r0, r3
 8001314:	f000 f93b 	bl	800158e <HAL_SYSTICK_Config>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e00e      	b.n	8001340 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2b0f      	cmp	r3, #15
 8001326:	d80a      	bhi.n	800133e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001328:	2200      	movs	r2, #0
 800132a:	6879      	ldr	r1, [r7, #4]
 800132c:	f04f 30ff 	mov.w	r0, #4294967295
 8001330:	f000 f903 	bl	800153a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001334:	4a06      	ldr	r2, [pc, #24]	@ (8001350 <HAL_InitTick+0x5c>)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800133a:	2300      	movs	r3, #0
 800133c:	e000      	b.n	8001340 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
}
 8001340:	4618      	mov	r0, r3
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	20000000 	.word	0x20000000
 800134c:	20000008 	.word	0x20000008
 8001350:	20000004 	.word	0x20000004

08001354 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001358:	4b05      	ldr	r3, [pc, #20]	@ (8001370 <HAL_IncTick+0x1c>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	461a      	mov	r2, r3
 800135e:	4b05      	ldr	r3, [pc, #20]	@ (8001374 <HAL_IncTick+0x20>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4413      	add	r3, r2
 8001364:	4a03      	ldr	r2, [pc, #12]	@ (8001374 <HAL_IncTick+0x20>)
 8001366:	6013      	str	r3, [r2, #0]
}
 8001368:	bf00      	nop
 800136a:	46bd      	mov	sp, r7
 800136c:	bc80      	pop	{r7}
 800136e:	4770      	bx	lr
 8001370:	20000008 	.word	0x20000008
 8001374:	200006c0 	.word	0x200006c0

08001378 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  return uwTick;
 800137c:	4b02      	ldr	r3, [pc, #8]	@ (8001388 <HAL_GetTick+0x10>)
 800137e:	681b      	ldr	r3, [r3, #0]
}
 8001380:	4618      	mov	r0, r3
 8001382:	46bd      	mov	sp, r7
 8001384:	bc80      	pop	{r7}
 8001386:	4770      	bx	lr
 8001388:	200006c0 	.word	0x200006c0

0800138c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800138c:	b480      	push	{r7}
 800138e:	b085      	sub	sp, #20
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f003 0307 	and.w	r3, r3, #7
 800139a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800139c:	4b0c      	ldr	r3, [pc, #48]	@ (80013d0 <__NVIC_SetPriorityGrouping+0x44>)
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013a2:	68ba      	ldr	r2, [r7, #8]
 80013a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80013a8:	4013      	ands	r3, r2
 80013aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80013b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013be:	4a04      	ldr	r2, [pc, #16]	@ (80013d0 <__NVIC_SetPriorityGrouping+0x44>)
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	60d3      	str	r3, [r2, #12]
}
 80013c4:	bf00      	nop
 80013c6:	3714      	adds	r7, #20
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bc80      	pop	{r7}
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	e000ed00 	.word	0xe000ed00

080013d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013d8:	4b04      	ldr	r3, [pc, #16]	@ (80013ec <__NVIC_GetPriorityGrouping+0x18>)
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	0a1b      	lsrs	r3, r3, #8
 80013de:	f003 0307 	and.w	r3, r3, #7
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bc80      	pop	{r7}
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	e000ed00 	.word	0xe000ed00

080013f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	db0b      	blt.n	800141a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001402:	79fb      	ldrb	r3, [r7, #7]
 8001404:	f003 021f 	and.w	r2, r3, #31
 8001408:	4906      	ldr	r1, [pc, #24]	@ (8001424 <__NVIC_EnableIRQ+0x34>)
 800140a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140e:	095b      	lsrs	r3, r3, #5
 8001410:	2001      	movs	r0, #1
 8001412:	fa00 f202 	lsl.w	r2, r0, r2
 8001416:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800141a:	bf00      	nop
 800141c:	370c      	adds	r7, #12
 800141e:	46bd      	mov	sp, r7
 8001420:	bc80      	pop	{r7}
 8001422:	4770      	bx	lr
 8001424:	e000e100 	.word	0xe000e100

08001428 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	4603      	mov	r3, r0
 8001430:	6039      	str	r1, [r7, #0]
 8001432:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001434:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001438:	2b00      	cmp	r3, #0
 800143a:	db0a      	blt.n	8001452 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	b2da      	uxtb	r2, r3
 8001440:	490c      	ldr	r1, [pc, #48]	@ (8001474 <__NVIC_SetPriority+0x4c>)
 8001442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001446:	0112      	lsls	r2, r2, #4
 8001448:	b2d2      	uxtb	r2, r2
 800144a:	440b      	add	r3, r1
 800144c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001450:	e00a      	b.n	8001468 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	b2da      	uxtb	r2, r3
 8001456:	4908      	ldr	r1, [pc, #32]	@ (8001478 <__NVIC_SetPriority+0x50>)
 8001458:	79fb      	ldrb	r3, [r7, #7]
 800145a:	f003 030f 	and.w	r3, r3, #15
 800145e:	3b04      	subs	r3, #4
 8001460:	0112      	lsls	r2, r2, #4
 8001462:	b2d2      	uxtb	r2, r2
 8001464:	440b      	add	r3, r1
 8001466:	761a      	strb	r2, [r3, #24]
}
 8001468:	bf00      	nop
 800146a:	370c      	adds	r7, #12
 800146c:	46bd      	mov	sp, r7
 800146e:	bc80      	pop	{r7}
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	e000e100 	.word	0xe000e100
 8001478:	e000ed00 	.word	0xe000ed00

0800147c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800147c:	b480      	push	{r7}
 800147e:	b089      	sub	sp, #36	@ 0x24
 8001480:	af00      	add	r7, sp, #0
 8001482:	60f8      	str	r0, [r7, #12]
 8001484:	60b9      	str	r1, [r7, #8]
 8001486:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	f003 0307 	and.w	r3, r3, #7
 800148e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	f1c3 0307 	rsb	r3, r3, #7
 8001496:	2b04      	cmp	r3, #4
 8001498:	bf28      	it	cs
 800149a:	2304      	movcs	r3, #4
 800149c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	3304      	adds	r3, #4
 80014a2:	2b06      	cmp	r3, #6
 80014a4:	d902      	bls.n	80014ac <NVIC_EncodePriority+0x30>
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	3b03      	subs	r3, #3
 80014aa:	e000      	b.n	80014ae <NVIC_EncodePriority+0x32>
 80014ac:	2300      	movs	r3, #0
 80014ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b0:	f04f 32ff 	mov.w	r2, #4294967295
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ba:	43da      	mvns	r2, r3
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	401a      	ands	r2, r3
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014c4:	f04f 31ff 	mov.w	r1, #4294967295
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	fa01 f303 	lsl.w	r3, r1, r3
 80014ce:	43d9      	mvns	r1, r3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d4:	4313      	orrs	r3, r2
         );
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3724      	adds	r7, #36	@ 0x24
 80014da:	46bd      	mov	sp, r7
 80014dc:	bc80      	pop	{r7}
 80014de:	4770      	bx	lr

080014e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	3b01      	subs	r3, #1
 80014ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80014f0:	d301      	bcc.n	80014f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014f2:	2301      	movs	r3, #1
 80014f4:	e00f      	b.n	8001516 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001520 <SysTick_Config+0x40>)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	3b01      	subs	r3, #1
 80014fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014fe:	210f      	movs	r1, #15
 8001500:	f04f 30ff 	mov.w	r0, #4294967295
 8001504:	f7ff ff90 	bl	8001428 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001508:	4b05      	ldr	r3, [pc, #20]	@ (8001520 <SysTick_Config+0x40>)
 800150a:	2200      	movs	r2, #0
 800150c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800150e:	4b04      	ldr	r3, [pc, #16]	@ (8001520 <SysTick_Config+0x40>)
 8001510:	2207      	movs	r2, #7
 8001512:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001514:	2300      	movs	r3, #0
}
 8001516:	4618      	mov	r0, r3
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	e000e010 	.word	0xe000e010

08001524 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f7ff ff2d 	bl	800138c <__NVIC_SetPriorityGrouping>
}
 8001532:	bf00      	nop
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800153a:	b580      	push	{r7, lr}
 800153c:	b086      	sub	sp, #24
 800153e:	af00      	add	r7, sp, #0
 8001540:	4603      	mov	r3, r0
 8001542:	60b9      	str	r1, [r7, #8]
 8001544:	607a      	str	r2, [r7, #4]
 8001546:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001548:	2300      	movs	r3, #0
 800154a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800154c:	f7ff ff42 	bl	80013d4 <__NVIC_GetPriorityGrouping>
 8001550:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001552:	687a      	ldr	r2, [r7, #4]
 8001554:	68b9      	ldr	r1, [r7, #8]
 8001556:	6978      	ldr	r0, [r7, #20]
 8001558:	f7ff ff90 	bl	800147c <NVIC_EncodePriority>
 800155c:	4602      	mov	r2, r0
 800155e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001562:	4611      	mov	r1, r2
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff ff5f 	bl	8001428 <__NVIC_SetPriority>
}
 800156a:	bf00      	nop
 800156c:	3718      	adds	r7, #24
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001572:	b580      	push	{r7, lr}
 8001574:	b082      	sub	sp, #8
 8001576:	af00      	add	r7, sp, #0
 8001578:	4603      	mov	r3, r0
 800157a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800157c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001580:	4618      	mov	r0, r3
 8001582:	f7ff ff35 	bl	80013f0 <__NVIC_EnableIRQ>
}
 8001586:	bf00      	nop
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}

0800158e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800158e:	b580      	push	{r7, lr}
 8001590:	b082      	sub	sp, #8
 8001592:	af00      	add	r7, sp, #0
 8001594:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f7ff ffa2 	bl	80014e0 <SysTick_Config>
 800159c:	4603      	mov	r3, r0
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015a6:	b480      	push	{r7}
 80015a8:	b085      	sub	sp, #20
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015ae:	2300      	movs	r3, #0
 80015b0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	d008      	beq.n	80015d0 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2204      	movs	r2, #4
 80015c2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2200      	movs	r2, #0
 80015c8:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	e020      	b.n	8001612 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f022 020e 	bic.w	r2, r2, #14
 80015de:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f022 0201 	bic.w	r2, r2, #1
 80015ee:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015f8:	2101      	movs	r1, #1
 80015fa:	fa01 f202 	lsl.w	r2, r1, r2
 80015fe:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2201      	movs	r2, #1
 8001604:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2200      	movs	r2, #0
 800160c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001610:	7bfb      	ldrb	r3, [r7, #15]
}
 8001612:	4618      	mov	r0, r3
 8001614:	3714      	adds	r7, #20
 8001616:	46bd      	mov	sp, r7
 8001618:	bc80      	pop	{r7}
 800161a:	4770      	bx	lr

0800161c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001624:	2300      	movs	r3, #0
 8001626:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800162e:	b2db      	uxtb	r3, r3
 8001630:	2b02      	cmp	r3, #2
 8001632:	d005      	beq.n	8001640 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2204      	movs	r2, #4
 8001638:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	73fb      	strb	r3, [r7, #15]
 800163e:	e051      	b.n	80016e4 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f022 020e 	bic.w	r2, r2, #14
 800164e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f022 0201 	bic.w	r2, r2, #1
 800165e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a22      	ldr	r2, [pc, #136]	@ (80016f0 <HAL_DMA_Abort_IT+0xd4>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d029      	beq.n	80016be <HAL_DMA_Abort_IT+0xa2>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a21      	ldr	r2, [pc, #132]	@ (80016f4 <HAL_DMA_Abort_IT+0xd8>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d022      	beq.n	80016ba <HAL_DMA_Abort_IT+0x9e>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a1f      	ldr	r2, [pc, #124]	@ (80016f8 <HAL_DMA_Abort_IT+0xdc>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d01a      	beq.n	80016b4 <HAL_DMA_Abort_IT+0x98>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a1e      	ldr	r2, [pc, #120]	@ (80016fc <HAL_DMA_Abort_IT+0xe0>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d012      	beq.n	80016ae <HAL_DMA_Abort_IT+0x92>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a1c      	ldr	r2, [pc, #112]	@ (8001700 <HAL_DMA_Abort_IT+0xe4>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d00a      	beq.n	80016a8 <HAL_DMA_Abort_IT+0x8c>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a1b      	ldr	r2, [pc, #108]	@ (8001704 <HAL_DMA_Abort_IT+0xe8>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d102      	bne.n	80016a2 <HAL_DMA_Abort_IT+0x86>
 800169c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80016a0:	e00e      	b.n	80016c0 <HAL_DMA_Abort_IT+0xa4>
 80016a2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80016a6:	e00b      	b.n	80016c0 <HAL_DMA_Abort_IT+0xa4>
 80016a8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80016ac:	e008      	b.n	80016c0 <HAL_DMA_Abort_IT+0xa4>
 80016ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016b2:	e005      	b.n	80016c0 <HAL_DMA_Abort_IT+0xa4>
 80016b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80016b8:	e002      	b.n	80016c0 <HAL_DMA_Abort_IT+0xa4>
 80016ba:	2310      	movs	r3, #16
 80016bc:	e000      	b.n	80016c0 <HAL_DMA_Abort_IT+0xa4>
 80016be:	2301      	movs	r3, #1
 80016c0:	4a11      	ldr	r2, [pc, #68]	@ (8001708 <HAL_DMA_Abort_IT+0xec>)
 80016c2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2201      	movs	r2, #1
 80016c8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2200      	movs	r2, #0
 80016d0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d003      	beq.n	80016e4 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	4798      	blx	r3
    } 
  }
  return status;
 80016e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3710      	adds	r7, #16
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	40020008 	.word	0x40020008
 80016f4:	4002001c 	.word	0x4002001c
 80016f8:	40020030 	.word	0x40020030
 80016fc:	40020044 	.word	0x40020044
 8001700:	40020058 	.word	0x40020058
 8001704:	4002006c 	.word	0x4002006c
 8001708:	40020000 	.word	0x40020000

0800170c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800170c:	b480      	push	{r7}
 800170e:	b08b      	sub	sp, #44	@ 0x2c
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001716:	2300      	movs	r3, #0
 8001718:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800171a:	2300      	movs	r3, #0
 800171c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800171e:	e169      	b.n	80019f4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001720:	2201      	movs	r2, #1
 8001722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001724:	fa02 f303 	lsl.w	r3, r2, r3
 8001728:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	69fa      	ldr	r2, [r7, #28]
 8001730:	4013      	ands	r3, r2
 8001732:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001734:	69ba      	ldr	r2, [r7, #24]
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	429a      	cmp	r2, r3
 800173a:	f040 8158 	bne.w	80019ee <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	4a9a      	ldr	r2, [pc, #616]	@ (80019ac <HAL_GPIO_Init+0x2a0>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d05e      	beq.n	8001806 <HAL_GPIO_Init+0xfa>
 8001748:	4a98      	ldr	r2, [pc, #608]	@ (80019ac <HAL_GPIO_Init+0x2a0>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d875      	bhi.n	800183a <HAL_GPIO_Init+0x12e>
 800174e:	4a98      	ldr	r2, [pc, #608]	@ (80019b0 <HAL_GPIO_Init+0x2a4>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d058      	beq.n	8001806 <HAL_GPIO_Init+0xfa>
 8001754:	4a96      	ldr	r2, [pc, #600]	@ (80019b0 <HAL_GPIO_Init+0x2a4>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d86f      	bhi.n	800183a <HAL_GPIO_Init+0x12e>
 800175a:	4a96      	ldr	r2, [pc, #600]	@ (80019b4 <HAL_GPIO_Init+0x2a8>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d052      	beq.n	8001806 <HAL_GPIO_Init+0xfa>
 8001760:	4a94      	ldr	r2, [pc, #592]	@ (80019b4 <HAL_GPIO_Init+0x2a8>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d869      	bhi.n	800183a <HAL_GPIO_Init+0x12e>
 8001766:	4a94      	ldr	r2, [pc, #592]	@ (80019b8 <HAL_GPIO_Init+0x2ac>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d04c      	beq.n	8001806 <HAL_GPIO_Init+0xfa>
 800176c:	4a92      	ldr	r2, [pc, #584]	@ (80019b8 <HAL_GPIO_Init+0x2ac>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d863      	bhi.n	800183a <HAL_GPIO_Init+0x12e>
 8001772:	4a92      	ldr	r2, [pc, #584]	@ (80019bc <HAL_GPIO_Init+0x2b0>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d046      	beq.n	8001806 <HAL_GPIO_Init+0xfa>
 8001778:	4a90      	ldr	r2, [pc, #576]	@ (80019bc <HAL_GPIO_Init+0x2b0>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d85d      	bhi.n	800183a <HAL_GPIO_Init+0x12e>
 800177e:	2b12      	cmp	r3, #18
 8001780:	d82a      	bhi.n	80017d8 <HAL_GPIO_Init+0xcc>
 8001782:	2b12      	cmp	r3, #18
 8001784:	d859      	bhi.n	800183a <HAL_GPIO_Init+0x12e>
 8001786:	a201      	add	r2, pc, #4	@ (adr r2, 800178c <HAL_GPIO_Init+0x80>)
 8001788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800178c:	08001807 	.word	0x08001807
 8001790:	080017e1 	.word	0x080017e1
 8001794:	080017f3 	.word	0x080017f3
 8001798:	08001835 	.word	0x08001835
 800179c:	0800183b 	.word	0x0800183b
 80017a0:	0800183b 	.word	0x0800183b
 80017a4:	0800183b 	.word	0x0800183b
 80017a8:	0800183b 	.word	0x0800183b
 80017ac:	0800183b 	.word	0x0800183b
 80017b0:	0800183b 	.word	0x0800183b
 80017b4:	0800183b 	.word	0x0800183b
 80017b8:	0800183b 	.word	0x0800183b
 80017bc:	0800183b 	.word	0x0800183b
 80017c0:	0800183b 	.word	0x0800183b
 80017c4:	0800183b 	.word	0x0800183b
 80017c8:	0800183b 	.word	0x0800183b
 80017cc:	0800183b 	.word	0x0800183b
 80017d0:	080017e9 	.word	0x080017e9
 80017d4:	080017fd 	.word	0x080017fd
 80017d8:	4a79      	ldr	r2, [pc, #484]	@ (80019c0 <HAL_GPIO_Init+0x2b4>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d013      	beq.n	8001806 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80017de:	e02c      	b.n	800183a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	623b      	str	r3, [r7, #32]
          break;
 80017e6:	e029      	b.n	800183c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	3304      	adds	r3, #4
 80017ee:	623b      	str	r3, [r7, #32]
          break;
 80017f0:	e024      	b.n	800183c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	68db      	ldr	r3, [r3, #12]
 80017f6:	3308      	adds	r3, #8
 80017f8:	623b      	str	r3, [r7, #32]
          break;
 80017fa:	e01f      	b.n	800183c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	330c      	adds	r3, #12
 8001802:	623b      	str	r3, [r7, #32]
          break;
 8001804:	e01a      	b.n	800183c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d102      	bne.n	8001814 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800180e:	2304      	movs	r3, #4
 8001810:	623b      	str	r3, [r7, #32]
          break;
 8001812:	e013      	b.n	800183c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	2b01      	cmp	r3, #1
 800181a:	d105      	bne.n	8001828 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800181c:	2308      	movs	r3, #8
 800181e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	69fa      	ldr	r2, [r7, #28]
 8001824:	611a      	str	r2, [r3, #16]
          break;
 8001826:	e009      	b.n	800183c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001828:	2308      	movs	r3, #8
 800182a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	69fa      	ldr	r2, [r7, #28]
 8001830:	615a      	str	r2, [r3, #20]
          break;
 8001832:	e003      	b.n	800183c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001834:	2300      	movs	r3, #0
 8001836:	623b      	str	r3, [r7, #32]
          break;
 8001838:	e000      	b.n	800183c <HAL_GPIO_Init+0x130>
          break;
 800183a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800183c:	69bb      	ldr	r3, [r7, #24]
 800183e:	2bff      	cmp	r3, #255	@ 0xff
 8001840:	d801      	bhi.n	8001846 <HAL_GPIO_Init+0x13a>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	e001      	b.n	800184a <HAL_GPIO_Init+0x13e>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	3304      	adds	r3, #4
 800184a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800184c:	69bb      	ldr	r3, [r7, #24]
 800184e:	2bff      	cmp	r3, #255	@ 0xff
 8001850:	d802      	bhi.n	8001858 <HAL_GPIO_Init+0x14c>
 8001852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	e002      	b.n	800185e <HAL_GPIO_Init+0x152>
 8001858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800185a:	3b08      	subs	r3, #8
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	210f      	movs	r1, #15
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	fa01 f303 	lsl.w	r3, r1, r3
 800186c:	43db      	mvns	r3, r3
 800186e:	401a      	ands	r2, r3
 8001870:	6a39      	ldr	r1, [r7, #32]
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	fa01 f303 	lsl.w	r3, r1, r3
 8001878:	431a      	orrs	r2, r3
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001886:	2b00      	cmp	r3, #0
 8001888:	f000 80b1 	beq.w	80019ee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800188c:	4b4d      	ldr	r3, [pc, #308]	@ (80019c4 <HAL_GPIO_Init+0x2b8>)
 800188e:	699b      	ldr	r3, [r3, #24]
 8001890:	4a4c      	ldr	r2, [pc, #304]	@ (80019c4 <HAL_GPIO_Init+0x2b8>)
 8001892:	f043 0301 	orr.w	r3, r3, #1
 8001896:	6193      	str	r3, [r2, #24]
 8001898:	4b4a      	ldr	r3, [pc, #296]	@ (80019c4 <HAL_GPIO_Init+0x2b8>)
 800189a:	699b      	ldr	r3, [r3, #24]
 800189c:	f003 0301 	and.w	r3, r3, #1
 80018a0:	60bb      	str	r3, [r7, #8]
 80018a2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80018a4:	4a48      	ldr	r2, [pc, #288]	@ (80019c8 <HAL_GPIO_Init+0x2bc>)
 80018a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018a8:	089b      	lsrs	r3, r3, #2
 80018aa:	3302      	adds	r3, #2
 80018ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018b0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80018b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018b4:	f003 0303 	and.w	r3, r3, #3
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	220f      	movs	r2, #15
 80018bc:	fa02 f303 	lsl.w	r3, r2, r3
 80018c0:	43db      	mvns	r3, r3
 80018c2:	68fa      	ldr	r2, [r7, #12]
 80018c4:	4013      	ands	r3, r2
 80018c6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	4a40      	ldr	r2, [pc, #256]	@ (80019cc <HAL_GPIO_Init+0x2c0>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d013      	beq.n	80018f8 <HAL_GPIO_Init+0x1ec>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	4a3f      	ldr	r2, [pc, #252]	@ (80019d0 <HAL_GPIO_Init+0x2c4>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d00d      	beq.n	80018f4 <HAL_GPIO_Init+0x1e8>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	4a3e      	ldr	r2, [pc, #248]	@ (80019d4 <HAL_GPIO_Init+0x2c8>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d007      	beq.n	80018f0 <HAL_GPIO_Init+0x1e4>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	4a3d      	ldr	r2, [pc, #244]	@ (80019d8 <HAL_GPIO_Init+0x2cc>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d101      	bne.n	80018ec <HAL_GPIO_Init+0x1e0>
 80018e8:	2303      	movs	r3, #3
 80018ea:	e006      	b.n	80018fa <HAL_GPIO_Init+0x1ee>
 80018ec:	2304      	movs	r3, #4
 80018ee:	e004      	b.n	80018fa <HAL_GPIO_Init+0x1ee>
 80018f0:	2302      	movs	r3, #2
 80018f2:	e002      	b.n	80018fa <HAL_GPIO_Init+0x1ee>
 80018f4:	2301      	movs	r3, #1
 80018f6:	e000      	b.n	80018fa <HAL_GPIO_Init+0x1ee>
 80018f8:	2300      	movs	r3, #0
 80018fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018fc:	f002 0203 	and.w	r2, r2, #3
 8001900:	0092      	lsls	r2, r2, #2
 8001902:	4093      	lsls	r3, r2
 8001904:	68fa      	ldr	r2, [r7, #12]
 8001906:	4313      	orrs	r3, r2
 8001908:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800190a:	492f      	ldr	r1, [pc, #188]	@ (80019c8 <HAL_GPIO_Init+0x2bc>)
 800190c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800190e:	089b      	lsrs	r3, r3, #2
 8001910:	3302      	adds	r3, #2
 8001912:	68fa      	ldr	r2, [r7, #12]
 8001914:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001920:	2b00      	cmp	r3, #0
 8001922:	d006      	beq.n	8001932 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001924:	4b2d      	ldr	r3, [pc, #180]	@ (80019dc <HAL_GPIO_Init+0x2d0>)
 8001926:	689a      	ldr	r2, [r3, #8]
 8001928:	492c      	ldr	r1, [pc, #176]	@ (80019dc <HAL_GPIO_Init+0x2d0>)
 800192a:	69bb      	ldr	r3, [r7, #24]
 800192c:	4313      	orrs	r3, r2
 800192e:	608b      	str	r3, [r1, #8]
 8001930:	e006      	b.n	8001940 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001932:	4b2a      	ldr	r3, [pc, #168]	@ (80019dc <HAL_GPIO_Init+0x2d0>)
 8001934:	689a      	ldr	r2, [r3, #8]
 8001936:	69bb      	ldr	r3, [r7, #24]
 8001938:	43db      	mvns	r3, r3
 800193a:	4928      	ldr	r1, [pc, #160]	@ (80019dc <HAL_GPIO_Init+0x2d0>)
 800193c:	4013      	ands	r3, r2
 800193e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001948:	2b00      	cmp	r3, #0
 800194a:	d006      	beq.n	800195a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800194c:	4b23      	ldr	r3, [pc, #140]	@ (80019dc <HAL_GPIO_Init+0x2d0>)
 800194e:	68da      	ldr	r2, [r3, #12]
 8001950:	4922      	ldr	r1, [pc, #136]	@ (80019dc <HAL_GPIO_Init+0x2d0>)
 8001952:	69bb      	ldr	r3, [r7, #24]
 8001954:	4313      	orrs	r3, r2
 8001956:	60cb      	str	r3, [r1, #12]
 8001958:	e006      	b.n	8001968 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800195a:	4b20      	ldr	r3, [pc, #128]	@ (80019dc <HAL_GPIO_Init+0x2d0>)
 800195c:	68da      	ldr	r2, [r3, #12]
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	43db      	mvns	r3, r3
 8001962:	491e      	ldr	r1, [pc, #120]	@ (80019dc <HAL_GPIO_Init+0x2d0>)
 8001964:	4013      	ands	r3, r2
 8001966:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001970:	2b00      	cmp	r3, #0
 8001972:	d006      	beq.n	8001982 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001974:	4b19      	ldr	r3, [pc, #100]	@ (80019dc <HAL_GPIO_Init+0x2d0>)
 8001976:	685a      	ldr	r2, [r3, #4]
 8001978:	4918      	ldr	r1, [pc, #96]	@ (80019dc <HAL_GPIO_Init+0x2d0>)
 800197a:	69bb      	ldr	r3, [r7, #24]
 800197c:	4313      	orrs	r3, r2
 800197e:	604b      	str	r3, [r1, #4]
 8001980:	e006      	b.n	8001990 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001982:	4b16      	ldr	r3, [pc, #88]	@ (80019dc <HAL_GPIO_Init+0x2d0>)
 8001984:	685a      	ldr	r2, [r3, #4]
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	43db      	mvns	r3, r3
 800198a:	4914      	ldr	r1, [pc, #80]	@ (80019dc <HAL_GPIO_Init+0x2d0>)
 800198c:	4013      	ands	r3, r2
 800198e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001998:	2b00      	cmp	r3, #0
 800199a:	d021      	beq.n	80019e0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800199c:	4b0f      	ldr	r3, [pc, #60]	@ (80019dc <HAL_GPIO_Init+0x2d0>)
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	490e      	ldr	r1, [pc, #56]	@ (80019dc <HAL_GPIO_Init+0x2d0>)
 80019a2:	69bb      	ldr	r3, [r7, #24]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	600b      	str	r3, [r1, #0]
 80019a8:	e021      	b.n	80019ee <HAL_GPIO_Init+0x2e2>
 80019aa:	bf00      	nop
 80019ac:	10320000 	.word	0x10320000
 80019b0:	10310000 	.word	0x10310000
 80019b4:	10220000 	.word	0x10220000
 80019b8:	10210000 	.word	0x10210000
 80019bc:	10120000 	.word	0x10120000
 80019c0:	10110000 	.word	0x10110000
 80019c4:	40021000 	.word	0x40021000
 80019c8:	40010000 	.word	0x40010000
 80019cc:	40010800 	.word	0x40010800
 80019d0:	40010c00 	.word	0x40010c00
 80019d4:	40011000 	.word	0x40011000
 80019d8:	40011400 	.word	0x40011400
 80019dc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80019e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001a10 <HAL_GPIO_Init+0x304>)
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	43db      	mvns	r3, r3
 80019e8:	4909      	ldr	r1, [pc, #36]	@ (8001a10 <HAL_GPIO_Init+0x304>)
 80019ea:	4013      	ands	r3, r2
 80019ec:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80019ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019f0:	3301      	adds	r3, #1
 80019f2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019fa:	fa22 f303 	lsr.w	r3, r2, r3
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	f47f ae8e 	bne.w	8001720 <HAL_GPIO_Init+0x14>
  }
}
 8001a04:	bf00      	nop
 8001a06:	bf00      	nop
 8001a08:	372c      	adds	r7, #44	@ 0x2c
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bc80      	pop	{r7}
 8001a0e:	4770      	bx	lr
 8001a10:	40010400 	.word	0x40010400

08001a14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	807b      	strh	r3, [r7, #2]
 8001a20:	4613      	mov	r3, r2
 8001a22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a24:	787b      	ldrb	r3, [r7, #1]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d003      	beq.n	8001a32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a2a:	887a      	ldrh	r2, [r7, #2]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a30:	e003      	b.n	8001a3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a32:	887b      	ldrh	r3, [r7, #2]
 8001a34:	041a      	lsls	r2, r3, #16
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	611a      	str	r2, [r3, #16]
}
 8001a3a:	bf00      	nop
 8001a3c:	370c      	adds	r7, #12
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bc80      	pop	{r7}
 8001a42:	4770      	bx	lr

08001a44 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001a4e:	4b08      	ldr	r3, [pc, #32]	@ (8001a70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a50:	695a      	ldr	r2, [r3, #20]
 8001a52:	88fb      	ldrh	r3, [r7, #6]
 8001a54:	4013      	ands	r3, r2
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d006      	beq.n	8001a68 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a5a:	4a05      	ldr	r2, [pc, #20]	@ (8001a70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a5c:	88fb      	ldrh	r3, [r7, #6]
 8001a5e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a60:	88fb      	ldrh	r3, [r7, #6]
 8001a62:	4618      	mov	r0, r3
 8001a64:	f000 f806 	bl	8001a74 <HAL_GPIO_EXTI_Callback>
  }
}
 8001a68:	bf00      	nop
 8001a6a:	3708      	adds	r7, #8
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	40010400 	.word	0x40010400

08001a74 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001a7e:	bf00      	nop
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bc80      	pop	{r7}
 8001a86:	4770      	bx	lr

08001a88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b086      	sub	sp, #24
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d101      	bne.n	8001a9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e272      	b.n	8001f80 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0301 	and.w	r3, r3, #1
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	f000 8087 	beq.w	8001bb6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001aa8:	4b92      	ldr	r3, [pc, #584]	@ (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f003 030c 	and.w	r3, r3, #12
 8001ab0:	2b04      	cmp	r3, #4
 8001ab2:	d00c      	beq.n	8001ace <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ab4:	4b8f      	ldr	r3, [pc, #572]	@ (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f003 030c 	and.w	r3, r3, #12
 8001abc:	2b08      	cmp	r3, #8
 8001abe:	d112      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x5e>
 8001ac0:	4b8c      	ldr	r3, [pc, #560]	@ (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ac8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001acc:	d10b      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ace:	4b89      	ldr	r3, [pc, #548]	@ (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d06c      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x12c>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d168      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e24c      	b.n	8001f80 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001aee:	d106      	bne.n	8001afe <HAL_RCC_OscConfig+0x76>
 8001af0:	4b80      	ldr	r3, [pc, #512]	@ (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a7f      	ldr	r2, [pc, #508]	@ (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001af6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001afa:	6013      	str	r3, [r2, #0]
 8001afc:	e02e      	b.n	8001b5c <HAL_RCC_OscConfig+0xd4>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d10c      	bne.n	8001b20 <HAL_RCC_OscConfig+0x98>
 8001b06:	4b7b      	ldr	r3, [pc, #492]	@ (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a7a      	ldr	r2, [pc, #488]	@ (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001b0c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b10:	6013      	str	r3, [r2, #0]
 8001b12:	4b78      	ldr	r3, [pc, #480]	@ (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a77      	ldr	r2, [pc, #476]	@ (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001b18:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b1c:	6013      	str	r3, [r2, #0]
 8001b1e:	e01d      	b.n	8001b5c <HAL_RCC_OscConfig+0xd4>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b28:	d10c      	bne.n	8001b44 <HAL_RCC_OscConfig+0xbc>
 8001b2a:	4b72      	ldr	r3, [pc, #456]	@ (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a71      	ldr	r2, [pc, #452]	@ (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001b30:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b34:	6013      	str	r3, [r2, #0]
 8001b36:	4b6f      	ldr	r3, [pc, #444]	@ (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a6e      	ldr	r2, [pc, #440]	@ (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001b3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b40:	6013      	str	r3, [r2, #0]
 8001b42:	e00b      	b.n	8001b5c <HAL_RCC_OscConfig+0xd4>
 8001b44:	4b6b      	ldr	r3, [pc, #428]	@ (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a6a      	ldr	r2, [pc, #424]	@ (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001b4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b4e:	6013      	str	r3, [r2, #0]
 8001b50:	4b68      	ldr	r3, [pc, #416]	@ (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a67      	ldr	r2, [pc, #412]	@ (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001b56:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b5a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d013      	beq.n	8001b8c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b64:	f7ff fc08 	bl	8001378 <HAL_GetTick>
 8001b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b6a:	e008      	b.n	8001b7e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b6c:	f7ff fc04 	bl	8001378 <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	2b64      	cmp	r3, #100	@ 0x64
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e200      	b.n	8001f80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b7e:	4b5d      	ldr	r3, [pc, #372]	@ (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d0f0      	beq.n	8001b6c <HAL_RCC_OscConfig+0xe4>
 8001b8a:	e014      	b.n	8001bb6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b8c:	f7ff fbf4 	bl	8001378 <HAL_GetTick>
 8001b90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b92:	e008      	b.n	8001ba6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b94:	f7ff fbf0 	bl	8001378 <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	2b64      	cmp	r3, #100	@ 0x64
 8001ba0:	d901      	bls.n	8001ba6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e1ec      	b.n	8001f80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ba6:	4b53      	ldr	r3, [pc, #332]	@ (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d1f0      	bne.n	8001b94 <HAL_RCC_OscConfig+0x10c>
 8001bb2:	e000      	b.n	8001bb6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0302 	and.w	r3, r3, #2
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d063      	beq.n	8001c8a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bc2:	4b4c      	ldr	r3, [pc, #304]	@ (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f003 030c 	and.w	r3, r3, #12
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d00b      	beq.n	8001be6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001bce:	4b49      	ldr	r3, [pc, #292]	@ (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f003 030c 	and.w	r3, r3, #12
 8001bd6:	2b08      	cmp	r3, #8
 8001bd8:	d11c      	bne.n	8001c14 <HAL_RCC_OscConfig+0x18c>
 8001bda:	4b46      	ldr	r3, [pc, #280]	@ (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d116      	bne.n	8001c14 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001be6:	4b43      	ldr	r3, [pc, #268]	@ (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0302 	and.w	r3, r3, #2
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d005      	beq.n	8001bfe <HAL_RCC_OscConfig+0x176>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	691b      	ldr	r3, [r3, #16]
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d001      	beq.n	8001bfe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e1c0      	b.n	8001f80 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bfe:	4b3d      	ldr	r3, [pc, #244]	@ (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	695b      	ldr	r3, [r3, #20]
 8001c0a:	00db      	lsls	r3, r3, #3
 8001c0c:	4939      	ldr	r1, [pc, #228]	@ (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c12:	e03a      	b.n	8001c8a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	691b      	ldr	r3, [r3, #16]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d020      	beq.n	8001c5e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c1c:	4b36      	ldr	r3, [pc, #216]	@ (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001c1e:	2201      	movs	r2, #1
 8001c20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c22:	f7ff fba9 	bl	8001378 <HAL_GetTick>
 8001c26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c28:	e008      	b.n	8001c3c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c2a:	f7ff fba5 	bl	8001378 <HAL_GetTick>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d901      	bls.n	8001c3c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	e1a1      	b.n	8001f80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c3c:	4b2d      	ldr	r3, [pc, #180]	@ (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0302 	and.w	r3, r3, #2
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d0f0      	beq.n	8001c2a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c48:	4b2a      	ldr	r3, [pc, #168]	@ (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	695b      	ldr	r3, [r3, #20]
 8001c54:	00db      	lsls	r3, r3, #3
 8001c56:	4927      	ldr	r1, [pc, #156]	@ (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	600b      	str	r3, [r1, #0]
 8001c5c:	e015      	b.n	8001c8a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c5e:	4b26      	ldr	r3, [pc, #152]	@ (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c64:	f7ff fb88 	bl	8001378 <HAL_GetTick>
 8001c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c6a:	e008      	b.n	8001c7e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c6c:	f7ff fb84 	bl	8001378 <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d901      	bls.n	8001c7e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e180      	b.n	8001f80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c7e:	4b1d      	ldr	r3, [pc, #116]	@ (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d1f0      	bne.n	8001c6c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0308 	and.w	r3, r3, #8
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d03a      	beq.n	8001d0c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	699b      	ldr	r3, [r3, #24]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d019      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c9e:	4b17      	ldr	r3, [pc, #92]	@ (8001cfc <HAL_RCC_OscConfig+0x274>)
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ca4:	f7ff fb68 	bl	8001378 <HAL_GetTick>
 8001ca8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001caa:	e008      	b.n	8001cbe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cac:	f7ff fb64 	bl	8001378 <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e160      	b.n	8001f80 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cbe:	4b0d      	ldr	r3, [pc, #52]	@ (8001cf4 <HAL_RCC_OscConfig+0x26c>)
 8001cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cc2:	f003 0302 	and.w	r3, r3, #2
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d0f0      	beq.n	8001cac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001cca:	2001      	movs	r0, #1
 8001ccc:	f000 face 	bl	800226c <RCC_Delay>
 8001cd0:	e01c      	b.n	8001d0c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cd2:	4b0a      	ldr	r3, [pc, #40]	@ (8001cfc <HAL_RCC_OscConfig+0x274>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cd8:	f7ff fb4e 	bl	8001378 <HAL_GetTick>
 8001cdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cde:	e00f      	b.n	8001d00 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ce0:	f7ff fb4a 	bl	8001378 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d908      	bls.n	8001d00 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e146      	b.n	8001f80 <HAL_RCC_OscConfig+0x4f8>
 8001cf2:	bf00      	nop
 8001cf4:	40021000 	.word	0x40021000
 8001cf8:	42420000 	.word	0x42420000
 8001cfc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d00:	4b92      	ldr	r3, [pc, #584]	@ (8001f4c <HAL_RCC_OscConfig+0x4c4>)
 8001d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d04:	f003 0302 	and.w	r3, r3, #2
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d1e9      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0304 	and.w	r3, r3, #4
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	f000 80a6 	beq.w	8001e66 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d1e:	4b8b      	ldr	r3, [pc, #556]	@ (8001f4c <HAL_RCC_OscConfig+0x4c4>)
 8001d20:	69db      	ldr	r3, [r3, #28]
 8001d22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d10d      	bne.n	8001d46 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d2a:	4b88      	ldr	r3, [pc, #544]	@ (8001f4c <HAL_RCC_OscConfig+0x4c4>)
 8001d2c:	69db      	ldr	r3, [r3, #28]
 8001d2e:	4a87      	ldr	r2, [pc, #540]	@ (8001f4c <HAL_RCC_OscConfig+0x4c4>)
 8001d30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d34:	61d3      	str	r3, [r2, #28]
 8001d36:	4b85      	ldr	r3, [pc, #532]	@ (8001f4c <HAL_RCC_OscConfig+0x4c4>)
 8001d38:	69db      	ldr	r3, [r3, #28]
 8001d3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d3e:	60bb      	str	r3, [r7, #8]
 8001d40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d42:	2301      	movs	r3, #1
 8001d44:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d46:	4b82      	ldr	r3, [pc, #520]	@ (8001f50 <HAL_RCC_OscConfig+0x4c8>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d118      	bne.n	8001d84 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d52:	4b7f      	ldr	r3, [pc, #508]	@ (8001f50 <HAL_RCC_OscConfig+0x4c8>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a7e      	ldr	r2, [pc, #504]	@ (8001f50 <HAL_RCC_OscConfig+0x4c8>)
 8001d58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d5e:	f7ff fb0b 	bl	8001378 <HAL_GetTick>
 8001d62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d64:	e008      	b.n	8001d78 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d66:	f7ff fb07 	bl	8001378 <HAL_GetTick>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	1ad3      	subs	r3, r2, r3
 8001d70:	2b64      	cmp	r3, #100	@ 0x64
 8001d72:	d901      	bls.n	8001d78 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d74:	2303      	movs	r3, #3
 8001d76:	e103      	b.n	8001f80 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d78:	4b75      	ldr	r3, [pc, #468]	@ (8001f50 <HAL_RCC_OscConfig+0x4c8>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d0f0      	beq.n	8001d66 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d106      	bne.n	8001d9a <HAL_RCC_OscConfig+0x312>
 8001d8c:	4b6f      	ldr	r3, [pc, #444]	@ (8001f4c <HAL_RCC_OscConfig+0x4c4>)
 8001d8e:	6a1b      	ldr	r3, [r3, #32]
 8001d90:	4a6e      	ldr	r2, [pc, #440]	@ (8001f4c <HAL_RCC_OscConfig+0x4c4>)
 8001d92:	f043 0301 	orr.w	r3, r3, #1
 8001d96:	6213      	str	r3, [r2, #32]
 8001d98:	e02d      	b.n	8001df6 <HAL_RCC_OscConfig+0x36e>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	68db      	ldr	r3, [r3, #12]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d10c      	bne.n	8001dbc <HAL_RCC_OscConfig+0x334>
 8001da2:	4b6a      	ldr	r3, [pc, #424]	@ (8001f4c <HAL_RCC_OscConfig+0x4c4>)
 8001da4:	6a1b      	ldr	r3, [r3, #32]
 8001da6:	4a69      	ldr	r2, [pc, #420]	@ (8001f4c <HAL_RCC_OscConfig+0x4c4>)
 8001da8:	f023 0301 	bic.w	r3, r3, #1
 8001dac:	6213      	str	r3, [r2, #32]
 8001dae:	4b67      	ldr	r3, [pc, #412]	@ (8001f4c <HAL_RCC_OscConfig+0x4c4>)
 8001db0:	6a1b      	ldr	r3, [r3, #32]
 8001db2:	4a66      	ldr	r2, [pc, #408]	@ (8001f4c <HAL_RCC_OscConfig+0x4c4>)
 8001db4:	f023 0304 	bic.w	r3, r3, #4
 8001db8:	6213      	str	r3, [r2, #32]
 8001dba:	e01c      	b.n	8001df6 <HAL_RCC_OscConfig+0x36e>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	2b05      	cmp	r3, #5
 8001dc2:	d10c      	bne.n	8001dde <HAL_RCC_OscConfig+0x356>
 8001dc4:	4b61      	ldr	r3, [pc, #388]	@ (8001f4c <HAL_RCC_OscConfig+0x4c4>)
 8001dc6:	6a1b      	ldr	r3, [r3, #32]
 8001dc8:	4a60      	ldr	r2, [pc, #384]	@ (8001f4c <HAL_RCC_OscConfig+0x4c4>)
 8001dca:	f043 0304 	orr.w	r3, r3, #4
 8001dce:	6213      	str	r3, [r2, #32]
 8001dd0:	4b5e      	ldr	r3, [pc, #376]	@ (8001f4c <HAL_RCC_OscConfig+0x4c4>)
 8001dd2:	6a1b      	ldr	r3, [r3, #32]
 8001dd4:	4a5d      	ldr	r2, [pc, #372]	@ (8001f4c <HAL_RCC_OscConfig+0x4c4>)
 8001dd6:	f043 0301 	orr.w	r3, r3, #1
 8001dda:	6213      	str	r3, [r2, #32]
 8001ddc:	e00b      	b.n	8001df6 <HAL_RCC_OscConfig+0x36e>
 8001dde:	4b5b      	ldr	r3, [pc, #364]	@ (8001f4c <HAL_RCC_OscConfig+0x4c4>)
 8001de0:	6a1b      	ldr	r3, [r3, #32]
 8001de2:	4a5a      	ldr	r2, [pc, #360]	@ (8001f4c <HAL_RCC_OscConfig+0x4c4>)
 8001de4:	f023 0301 	bic.w	r3, r3, #1
 8001de8:	6213      	str	r3, [r2, #32]
 8001dea:	4b58      	ldr	r3, [pc, #352]	@ (8001f4c <HAL_RCC_OscConfig+0x4c4>)
 8001dec:	6a1b      	ldr	r3, [r3, #32]
 8001dee:	4a57      	ldr	r2, [pc, #348]	@ (8001f4c <HAL_RCC_OscConfig+0x4c4>)
 8001df0:	f023 0304 	bic.w	r3, r3, #4
 8001df4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d015      	beq.n	8001e2a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dfe:	f7ff fabb 	bl	8001378 <HAL_GetTick>
 8001e02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e04:	e00a      	b.n	8001e1c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e06:	f7ff fab7 	bl	8001378 <HAL_GetTick>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d901      	bls.n	8001e1c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	e0b1      	b.n	8001f80 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e1c:	4b4b      	ldr	r3, [pc, #300]	@ (8001f4c <HAL_RCC_OscConfig+0x4c4>)
 8001e1e:	6a1b      	ldr	r3, [r3, #32]
 8001e20:	f003 0302 	and.w	r3, r3, #2
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d0ee      	beq.n	8001e06 <HAL_RCC_OscConfig+0x37e>
 8001e28:	e014      	b.n	8001e54 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e2a:	f7ff faa5 	bl	8001378 <HAL_GetTick>
 8001e2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e30:	e00a      	b.n	8001e48 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e32:	f7ff faa1 	bl	8001378 <HAL_GetTick>
 8001e36:	4602      	mov	r2, r0
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d901      	bls.n	8001e48 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e44:	2303      	movs	r3, #3
 8001e46:	e09b      	b.n	8001f80 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e48:	4b40      	ldr	r3, [pc, #256]	@ (8001f4c <HAL_RCC_OscConfig+0x4c4>)
 8001e4a:	6a1b      	ldr	r3, [r3, #32]
 8001e4c:	f003 0302 	and.w	r3, r3, #2
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d1ee      	bne.n	8001e32 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e54:	7dfb      	ldrb	r3, [r7, #23]
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d105      	bne.n	8001e66 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e5a:	4b3c      	ldr	r3, [pc, #240]	@ (8001f4c <HAL_RCC_OscConfig+0x4c4>)
 8001e5c:	69db      	ldr	r3, [r3, #28]
 8001e5e:	4a3b      	ldr	r2, [pc, #236]	@ (8001f4c <HAL_RCC_OscConfig+0x4c4>)
 8001e60:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e64:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	69db      	ldr	r3, [r3, #28]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	f000 8087 	beq.w	8001f7e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e70:	4b36      	ldr	r3, [pc, #216]	@ (8001f4c <HAL_RCC_OscConfig+0x4c4>)
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f003 030c 	and.w	r3, r3, #12
 8001e78:	2b08      	cmp	r3, #8
 8001e7a:	d061      	beq.n	8001f40 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	69db      	ldr	r3, [r3, #28]
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d146      	bne.n	8001f12 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e84:	4b33      	ldr	r3, [pc, #204]	@ (8001f54 <HAL_RCC_OscConfig+0x4cc>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e8a:	f7ff fa75 	bl	8001378 <HAL_GetTick>
 8001e8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e90:	e008      	b.n	8001ea4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e92:	f7ff fa71 	bl	8001378 <HAL_GetTick>
 8001e96:	4602      	mov	r2, r0
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d901      	bls.n	8001ea4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	e06d      	b.n	8001f80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ea4:	4b29      	ldr	r3, [pc, #164]	@ (8001f4c <HAL_RCC_OscConfig+0x4c4>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d1f0      	bne.n	8001e92 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6a1b      	ldr	r3, [r3, #32]
 8001eb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001eb8:	d108      	bne.n	8001ecc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001eba:	4b24      	ldr	r3, [pc, #144]	@ (8001f4c <HAL_RCC_OscConfig+0x4c4>)
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	4921      	ldr	r1, [pc, #132]	@ (8001f4c <HAL_RCC_OscConfig+0x4c4>)
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ecc:	4b1f      	ldr	r3, [pc, #124]	@ (8001f4c <HAL_RCC_OscConfig+0x4c4>)
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6a19      	ldr	r1, [r3, #32]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001edc:	430b      	orrs	r3, r1
 8001ede:	491b      	ldr	r1, [pc, #108]	@ (8001f4c <HAL_RCC_OscConfig+0x4c4>)
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ee4:	4b1b      	ldr	r3, [pc, #108]	@ (8001f54 <HAL_RCC_OscConfig+0x4cc>)
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eea:	f7ff fa45 	bl	8001378 <HAL_GetTick>
 8001eee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ef0:	e008      	b.n	8001f04 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ef2:	f7ff fa41 	bl	8001378 <HAL_GetTick>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d901      	bls.n	8001f04 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	e03d      	b.n	8001f80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f04:	4b11      	ldr	r3, [pc, #68]	@ (8001f4c <HAL_RCC_OscConfig+0x4c4>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d0f0      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x46a>
 8001f10:	e035      	b.n	8001f7e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f12:	4b10      	ldr	r3, [pc, #64]	@ (8001f54 <HAL_RCC_OscConfig+0x4cc>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f18:	f7ff fa2e 	bl	8001378 <HAL_GetTick>
 8001f1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f1e:	e008      	b.n	8001f32 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f20:	f7ff fa2a 	bl	8001378 <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d901      	bls.n	8001f32 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	e026      	b.n	8001f80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f32:	4b06      	ldr	r3, [pc, #24]	@ (8001f4c <HAL_RCC_OscConfig+0x4c4>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d1f0      	bne.n	8001f20 <HAL_RCC_OscConfig+0x498>
 8001f3e:	e01e      	b.n	8001f7e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	69db      	ldr	r3, [r3, #28]
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d107      	bne.n	8001f58 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e019      	b.n	8001f80 <HAL_RCC_OscConfig+0x4f8>
 8001f4c:	40021000 	.word	0x40021000
 8001f50:	40007000 	.word	0x40007000
 8001f54:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f58:	4b0b      	ldr	r3, [pc, #44]	@ (8001f88 <HAL_RCC_OscConfig+0x500>)
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6a1b      	ldr	r3, [r3, #32]
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d106      	bne.n	8001f7a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d001      	beq.n	8001f7e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e000      	b.n	8001f80 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001f7e:	2300      	movs	r3, #0
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3718      	adds	r7, #24
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	40021000 	.word	0x40021000

08001f8c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d101      	bne.n	8001fa0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e0d0      	b.n	8002142 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fa0:	4b6a      	ldr	r3, [pc, #424]	@ (800214c <HAL_RCC_ClockConfig+0x1c0>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0307 	and.w	r3, r3, #7
 8001fa8:	683a      	ldr	r2, [r7, #0]
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d910      	bls.n	8001fd0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fae:	4b67      	ldr	r3, [pc, #412]	@ (800214c <HAL_RCC_ClockConfig+0x1c0>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f023 0207 	bic.w	r2, r3, #7
 8001fb6:	4965      	ldr	r1, [pc, #404]	@ (800214c <HAL_RCC_ClockConfig+0x1c0>)
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fbe:	4b63      	ldr	r3, [pc, #396]	@ (800214c <HAL_RCC_ClockConfig+0x1c0>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0307 	and.w	r3, r3, #7
 8001fc6:	683a      	ldr	r2, [r7, #0]
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d001      	beq.n	8001fd0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e0b8      	b.n	8002142 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0302 	and.w	r3, r3, #2
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d020      	beq.n	800201e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0304 	and.w	r3, r3, #4
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d005      	beq.n	8001ff4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fe8:	4b59      	ldr	r3, [pc, #356]	@ (8002150 <HAL_RCC_ClockConfig+0x1c4>)
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	4a58      	ldr	r2, [pc, #352]	@ (8002150 <HAL_RCC_ClockConfig+0x1c4>)
 8001fee:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001ff2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0308 	and.w	r3, r3, #8
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d005      	beq.n	800200c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002000:	4b53      	ldr	r3, [pc, #332]	@ (8002150 <HAL_RCC_ClockConfig+0x1c4>)
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	4a52      	ldr	r2, [pc, #328]	@ (8002150 <HAL_RCC_ClockConfig+0x1c4>)
 8002006:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800200a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800200c:	4b50      	ldr	r3, [pc, #320]	@ (8002150 <HAL_RCC_ClockConfig+0x1c4>)
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	494d      	ldr	r1, [pc, #308]	@ (8002150 <HAL_RCC_ClockConfig+0x1c4>)
 800201a:	4313      	orrs	r3, r2
 800201c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0301 	and.w	r3, r3, #1
 8002026:	2b00      	cmp	r3, #0
 8002028:	d040      	beq.n	80020ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	2b01      	cmp	r3, #1
 8002030:	d107      	bne.n	8002042 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002032:	4b47      	ldr	r3, [pc, #284]	@ (8002150 <HAL_RCC_ClockConfig+0x1c4>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d115      	bne.n	800206a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e07f      	b.n	8002142 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	2b02      	cmp	r3, #2
 8002048:	d107      	bne.n	800205a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800204a:	4b41      	ldr	r3, [pc, #260]	@ (8002150 <HAL_RCC_ClockConfig+0x1c4>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d109      	bne.n	800206a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e073      	b.n	8002142 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800205a:	4b3d      	ldr	r3, [pc, #244]	@ (8002150 <HAL_RCC_ClockConfig+0x1c4>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0302 	and.w	r3, r3, #2
 8002062:	2b00      	cmp	r3, #0
 8002064:	d101      	bne.n	800206a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e06b      	b.n	8002142 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800206a:	4b39      	ldr	r3, [pc, #228]	@ (8002150 <HAL_RCC_ClockConfig+0x1c4>)
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f023 0203 	bic.w	r2, r3, #3
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	4936      	ldr	r1, [pc, #216]	@ (8002150 <HAL_RCC_ClockConfig+0x1c4>)
 8002078:	4313      	orrs	r3, r2
 800207a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800207c:	f7ff f97c 	bl	8001378 <HAL_GetTick>
 8002080:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002082:	e00a      	b.n	800209a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002084:	f7ff f978 	bl	8001378 <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002092:	4293      	cmp	r3, r2
 8002094:	d901      	bls.n	800209a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	e053      	b.n	8002142 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800209a:	4b2d      	ldr	r3, [pc, #180]	@ (8002150 <HAL_RCC_ClockConfig+0x1c4>)
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f003 020c 	and.w	r2, r3, #12
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d1eb      	bne.n	8002084 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020ac:	4b27      	ldr	r3, [pc, #156]	@ (800214c <HAL_RCC_ClockConfig+0x1c0>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0307 	and.w	r3, r3, #7
 80020b4:	683a      	ldr	r2, [r7, #0]
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d210      	bcs.n	80020dc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ba:	4b24      	ldr	r3, [pc, #144]	@ (800214c <HAL_RCC_ClockConfig+0x1c0>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f023 0207 	bic.w	r2, r3, #7
 80020c2:	4922      	ldr	r1, [pc, #136]	@ (800214c <HAL_RCC_ClockConfig+0x1c0>)
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	4313      	orrs	r3, r2
 80020c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ca:	4b20      	ldr	r3, [pc, #128]	@ (800214c <HAL_RCC_ClockConfig+0x1c0>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0307 	and.w	r3, r3, #7
 80020d2:	683a      	ldr	r2, [r7, #0]
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d001      	beq.n	80020dc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e032      	b.n	8002142 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0304 	and.w	r3, r3, #4
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d008      	beq.n	80020fa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020e8:	4b19      	ldr	r3, [pc, #100]	@ (8002150 <HAL_RCC_ClockConfig+0x1c4>)
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	4916      	ldr	r1, [pc, #88]	@ (8002150 <HAL_RCC_ClockConfig+0x1c4>)
 80020f6:	4313      	orrs	r3, r2
 80020f8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0308 	and.w	r3, r3, #8
 8002102:	2b00      	cmp	r3, #0
 8002104:	d009      	beq.n	800211a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002106:	4b12      	ldr	r3, [pc, #72]	@ (8002150 <HAL_RCC_ClockConfig+0x1c4>)
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	691b      	ldr	r3, [r3, #16]
 8002112:	00db      	lsls	r3, r3, #3
 8002114:	490e      	ldr	r1, [pc, #56]	@ (8002150 <HAL_RCC_ClockConfig+0x1c4>)
 8002116:	4313      	orrs	r3, r2
 8002118:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800211a:	f000 f821 	bl	8002160 <HAL_RCC_GetSysClockFreq>
 800211e:	4602      	mov	r2, r0
 8002120:	4b0b      	ldr	r3, [pc, #44]	@ (8002150 <HAL_RCC_ClockConfig+0x1c4>)
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	091b      	lsrs	r3, r3, #4
 8002126:	f003 030f 	and.w	r3, r3, #15
 800212a:	490a      	ldr	r1, [pc, #40]	@ (8002154 <HAL_RCC_ClockConfig+0x1c8>)
 800212c:	5ccb      	ldrb	r3, [r1, r3]
 800212e:	fa22 f303 	lsr.w	r3, r2, r3
 8002132:	4a09      	ldr	r2, [pc, #36]	@ (8002158 <HAL_RCC_ClockConfig+0x1cc>)
 8002134:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002136:	4b09      	ldr	r3, [pc, #36]	@ (800215c <HAL_RCC_ClockConfig+0x1d0>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4618      	mov	r0, r3
 800213c:	f7ff f8da 	bl	80012f4 <HAL_InitTick>

  return HAL_OK;
 8002140:	2300      	movs	r3, #0
}
 8002142:	4618      	mov	r0, r3
 8002144:	3710      	adds	r7, #16
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	40022000 	.word	0x40022000
 8002150:	40021000 	.word	0x40021000
 8002154:	08004f54 	.word	0x08004f54
 8002158:	20000000 	.word	0x20000000
 800215c:	20000004 	.word	0x20000004

08002160 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002160:	b480      	push	{r7}
 8002162:	b087      	sub	sp, #28
 8002164:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002166:	2300      	movs	r3, #0
 8002168:	60fb      	str	r3, [r7, #12]
 800216a:	2300      	movs	r3, #0
 800216c:	60bb      	str	r3, [r7, #8]
 800216e:	2300      	movs	r3, #0
 8002170:	617b      	str	r3, [r7, #20]
 8002172:	2300      	movs	r3, #0
 8002174:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002176:	2300      	movs	r3, #0
 8002178:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800217a:	4b1e      	ldr	r3, [pc, #120]	@ (80021f4 <HAL_RCC_GetSysClockFreq+0x94>)
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f003 030c 	and.w	r3, r3, #12
 8002186:	2b04      	cmp	r3, #4
 8002188:	d002      	beq.n	8002190 <HAL_RCC_GetSysClockFreq+0x30>
 800218a:	2b08      	cmp	r3, #8
 800218c:	d003      	beq.n	8002196 <HAL_RCC_GetSysClockFreq+0x36>
 800218e:	e027      	b.n	80021e0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002190:	4b19      	ldr	r3, [pc, #100]	@ (80021f8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002192:	613b      	str	r3, [r7, #16]
      break;
 8002194:	e027      	b.n	80021e6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	0c9b      	lsrs	r3, r3, #18
 800219a:	f003 030f 	and.w	r3, r3, #15
 800219e:	4a17      	ldr	r2, [pc, #92]	@ (80021fc <HAL_RCC_GetSysClockFreq+0x9c>)
 80021a0:	5cd3      	ldrb	r3, [r2, r3]
 80021a2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d010      	beq.n	80021d0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80021ae:	4b11      	ldr	r3, [pc, #68]	@ (80021f4 <HAL_RCC_GetSysClockFreq+0x94>)
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	0c5b      	lsrs	r3, r3, #17
 80021b4:	f003 0301 	and.w	r3, r3, #1
 80021b8:	4a11      	ldr	r2, [pc, #68]	@ (8002200 <HAL_RCC_GetSysClockFreq+0xa0>)
 80021ba:	5cd3      	ldrb	r3, [r2, r3]
 80021bc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a0d      	ldr	r2, [pc, #52]	@ (80021f8 <HAL_RCC_GetSysClockFreq+0x98>)
 80021c2:	fb03 f202 	mul.w	r2, r3, r2
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80021cc:	617b      	str	r3, [r7, #20]
 80021ce:	e004      	b.n	80021da <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	4a0c      	ldr	r2, [pc, #48]	@ (8002204 <HAL_RCC_GetSysClockFreq+0xa4>)
 80021d4:	fb02 f303 	mul.w	r3, r2, r3
 80021d8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	613b      	str	r3, [r7, #16]
      break;
 80021de:	e002      	b.n	80021e6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021e0:	4b05      	ldr	r3, [pc, #20]	@ (80021f8 <HAL_RCC_GetSysClockFreq+0x98>)
 80021e2:	613b      	str	r3, [r7, #16]
      break;
 80021e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021e6:	693b      	ldr	r3, [r7, #16]
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	371c      	adds	r7, #28
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bc80      	pop	{r7}
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	40021000 	.word	0x40021000
 80021f8:	007a1200 	.word	0x007a1200
 80021fc:	08004f6c 	.word	0x08004f6c
 8002200:	08004f7c 	.word	0x08004f7c
 8002204:	003d0900 	.word	0x003d0900

08002208 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800220c:	4b02      	ldr	r3, [pc, #8]	@ (8002218 <HAL_RCC_GetHCLKFreq+0x10>)
 800220e:	681b      	ldr	r3, [r3, #0]
}
 8002210:	4618      	mov	r0, r3
 8002212:	46bd      	mov	sp, r7
 8002214:	bc80      	pop	{r7}
 8002216:	4770      	bx	lr
 8002218:	20000000 	.word	0x20000000

0800221c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002220:	f7ff fff2 	bl	8002208 <HAL_RCC_GetHCLKFreq>
 8002224:	4602      	mov	r2, r0
 8002226:	4b05      	ldr	r3, [pc, #20]	@ (800223c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	0a1b      	lsrs	r3, r3, #8
 800222c:	f003 0307 	and.w	r3, r3, #7
 8002230:	4903      	ldr	r1, [pc, #12]	@ (8002240 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002232:	5ccb      	ldrb	r3, [r1, r3]
 8002234:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002238:	4618      	mov	r0, r3
 800223a:	bd80      	pop	{r7, pc}
 800223c:	40021000 	.word	0x40021000
 8002240:	08004f64 	.word	0x08004f64

08002244 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002248:	f7ff ffde 	bl	8002208 <HAL_RCC_GetHCLKFreq>
 800224c:	4602      	mov	r2, r0
 800224e:	4b05      	ldr	r3, [pc, #20]	@ (8002264 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	0adb      	lsrs	r3, r3, #11
 8002254:	f003 0307 	and.w	r3, r3, #7
 8002258:	4903      	ldr	r1, [pc, #12]	@ (8002268 <HAL_RCC_GetPCLK2Freq+0x24>)
 800225a:	5ccb      	ldrb	r3, [r1, r3]
 800225c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002260:	4618      	mov	r0, r3
 8002262:	bd80      	pop	{r7, pc}
 8002264:	40021000 	.word	0x40021000
 8002268:	08004f64 	.word	0x08004f64

0800226c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800226c:	b480      	push	{r7}
 800226e:	b085      	sub	sp, #20
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002274:	4b0a      	ldr	r3, [pc, #40]	@ (80022a0 <RCC_Delay+0x34>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a0a      	ldr	r2, [pc, #40]	@ (80022a4 <RCC_Delay+0x38>)
 800227a:	fba2 2303 	umull	r2, r3, r2, r3
 800227e:	0a5b      	lsrs	r3, r3, #9
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	fb02 f303 	mul.w	r3, r2, r3
 8002286:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002288:	bf00      	nop
  }
  while (Delay --);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	1e5a      	subs	r2, r3, #1
 800228e:	60fa      	str	r2, [r7, #12]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d1f9      	bne.n	8002288 <RCC_Delay+0x1c>
}
 8002294:	bf00      	nop
 8002296:	bf00      	nop
 8002298:	3714      	adds	r7, #20
 800229a:	46bd      	mov	sp, r7
 800229c:	bc80      	pop	{r7}
 800229e:	4770      	bx	lr
 80022a0:	20000000 	.word	0x20000000
 80022a4:	10624dd3 	.word	0x10624dd3

080022a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d101      	bne.n	80022ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e041      	b.n	800233e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d106      	bne.n	80022d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f7fe ff20 	bl	8001114 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2202      	movs	r2, #2
 80022d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	3304      	adds	r3, #4
 80022e4:	4619      	mov	r1, r3
 80022e6:	4610      	mov	r0, r2
 80022e8:	f000 fb48 	bl	800297c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2201      	movs	r2, #1
 80022f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2201      	movs	r2, #1
 80022f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2201      	movs	r2, #1
 8002300:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2201      	movs	r2, #1
 8002308:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2201      	movs	r2, #1
 8002310:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2201      	movs	r2, #1
 8002318:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2201      	movs	r2, #1
 8002320:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2201      	movs	r2, #1
 8002328:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2201      	movs	r2, #1
 8002330:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2201      	movs	r2, #1
 8002338:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800233c:	2300      	movs	r3, #0
}
 800233e:	4618      	mov	r0, r3
 8002340:	3708      	adds	r7, #8
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}

08002346 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002346:	b580      	push	{r7, lr}
 8002348:	b082      	sub	sp, #8
 800234a:	af00      	add	r7, sp, #0
 800234c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d101      	bne.n	8002358 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e041      	b.n	80023dc <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800235e:	b2db      	uxtb	r3, r3
 8002360:	2b00      	cmp	r3, #0
 8002362:	d106      	bne.n	8002372 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f000 f839 	bl	80023e4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2202      	movs	r2, #2
 8002376:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	3304      	adds	r3, #4
 8002382:	4619      	mov	r1, r3
 8002384:	4610      	mov	r0, r2
 8002386:	f000 faf9 	bl	800297c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2201      	movs	r2, #1
 800238e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2201      	movs	r2, #1
 8002396:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2201      	movs	r2, #1
 800239e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2201      	movs	r2, #1
 80023a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2201      	movs	r2, #1
 80023ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2201      	movs	r2, #1
 80023b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2201      	movs	r2, #1
 80023be:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2201      	movs	r2, #1
 80023c6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2201      	movs	r2, #1
 80023ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2201      	movs	r2, #1
 80023d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80023da:	2300      	movs	r3, #0
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3708      	adds	r7, #8
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80023ec:	bf00      	nop
 80023ee:	370c      	adds	r7, #12
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bc80      	pop	{r7}
 80023f4:	4770      	bx	lr

080023f6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b084      	sub	sp, #16
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	691b      	ldr	r3, [r3, #16]
 800240c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	f003 0302 	and.w	r3, r3, #2
 8002414:	2b00      	cmp	r3, #0
 8002416:	d020      	beq.n	800245a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	f003 0302 	and.w	r3, r3, #2
 800241e:	2b00      	cmp	r3, #0
 8002420:	d01b      	beq.n	800245a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f06f 0202 	mvn.w	r2, #2
 800242a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2201      	movs	r2, #1
 8002430:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	699b      	ldr	r3, [r3, #24]
 8002438:	f003 0303 	and.w	r3, r3, #3
 800243c:	2b00      	cmp	r3, #0
 800243e:	d003      	beq.n	8002448 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	f000 fa7f 	bl	8002944 <HAL_TIM_IC_CaptureCallback>
 8002446:	e005      	b.n	8002454 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	f000 fa72 	bl	8002932 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f000 fa81 	bl	8002956 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	f003 0304 	and.w	r3, r3, #4
 8002460:	2b00      	cmp	r3, #0
 8002462:	d020      	beq.n	80024a6 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	f003 0304 	and.w	r3, r3, #4
 800246a:	2b00      	cmp	r3, #0
 800246c:	d01b      	beq.n	80024a6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f06f 0204 	mvn.w	r2, #4
 8002476:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2202      	movs	r2, #2
 800247c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	699b      	ldr	r3, [r3, #24]
 8002484:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002488:	2b00      	cmp	r3, #0
 800248a:	d003      	beq.n	8002494 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f000 fa59 	bl	8002944 <HAL_TIM_IC_CaptureCallback>
 8002492:	e005      	b.n	80024a0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f000 fa4c 	bl	8002932 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f000 fa5b 	bl	8002956 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2200      	movs	r2, #0
 80024a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	f003 0308 	and.w	r3, r3, #8
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d020      	beq.n	80024f2 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f003 0308 	and.w	r3, r3, #8
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d01b      	beq.n	80024f2 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f06f 0208 	mvn.w	r2, #8
 80024c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2204      	movs	r2, #4
 80024c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	69db      	ldr	r3, [r3, #28]
 80024d0:	f003 0303 	and.w	r3, r3, #3
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d003      	beq.n	80024e0 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f000 fa33 	bl	8002944 <HAL_TIM_IC_CaptureCallback>
 80024de:	e005      	b.n	80024ec <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f000 fa26 	bl	8002932 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f000 fa35 	bl	8002956 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2200      	movs	r2, #0
 80024f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	f003 0310 	and.w	r3, r3, #16
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d020      	beq.n	800253e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	f003 0310 	and.w	r3, r3, #16
 8002502:	2b00      	cmp	r3, #0
 8002504:	d01b      	beq.n	800253e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f06f 0210 	mvn.w	r2, #16
 800250e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2208      	movs	r2, #8
 8002514:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	69db      	ldr	r3, [r3, #28]
 800251c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002520:	2b00      	cmp	r3, #0
 8002522:	d003      	beq.n	800252c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f000 fa0d 	bl	8002944 <HAL_TIM_IC_CaptureCallback>
 800252a:	e005      	b.n	8002538 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f000 fa00 	bl	8002932 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f000 fa0f 	bl	8002956 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2200      	movs	r2, #0
 800253c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	f003 0301 	and.w	r3, r3, #1
 8002544:	2b00      	cmp	r3, #0
 8002546:	d00c      	beq.n	8002562 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	f003 0301 	and.w	r3, r3, #1
 800254e:	2b00      	cmp	r3, #0
 8002550:	d007      	beq.n	8002562 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f06f 0201 	mvn.w	r2, #1
 800255a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	f000 f9df 	bl	8002920 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002568:	2b00      	cmp	r3, #0
 800256a:	d00c      	beq.n	8002586 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002572:	2b00      	cmp	r3, #0
 8002574:	d007      	beq.n	8002586 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800257e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f000 fd06 	bl	8002f92 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800258c:	2b00      	cmp	r3, #0
 800258e:	d00c      	beq.n	80025aa <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002596:	2b00      	cmp	r3, #0
 8002598:	d007      	beq.n	80025aa <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80025a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f000 f9df 	bl	8002968 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	f003 0320 	and.w	r3, r3, #32
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d00c      	beq.n	80025ce <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	f003 0320 	and.w	r3, r3, #32
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d007      	beq.n	80025ce <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f06f 0220 	mvn.w	r2, #32
 80025c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f000 fcd9 	bl	8002f80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80025ce:	bf00      	nop
 80025d0:	3710      	adds	r7, #16
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80025d6:	b580      	push	{r7, lr}
 80025d8:	b086      	sub	sp, #24
 80025da:	af00      	add	r7, sp, #0
 80025dc:	60f8      	str	r0, [r7, #12]
 80025de:	60b9      	str	r1, [r7, #8]
 80025e0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025e2:	2300      	movs	r3, #0
 80025e4:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d101      	bne.n	80025f4 <HAL_TIM_IC_ConfigChannel+0x1e>
 80025f0:	2302      	movs	r3, #2
 80025f2:	e088      	b.n	8002706 <HAL_TIM_IC_ConfigChannel+0x130>
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2201      	movs	r2, #1
 80025f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d11b      	bne.n	800263a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8002612:	f000 fab3 	bl	8002b7c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	699a      	ldr	r2, [r3, #24]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f022 020c 	bic.w	r2, r2, #12
 8002624:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	6999      	ldr	r1, [r3, #24]
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	689a      	ldr	r2, [r3, #8]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	430a      	orrs	r2, r1
 8002636:	619a      	str	r2, [r3, #24]
 8002638:	e060      	b.n	80026fc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2b04      	cmp	r3, #4
 800263e:	d11c      	bne.n	800267a <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8002650:	f000 fb1c 	bl	8002c8c <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	699a      	ldr	r2, [r3, #24]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002662:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	6999      	ldr	r1, [r3, #24]
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	021a      	lsls	r2, r3, #8
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	430a      	orrs	r2, r1
 8002676:	619a      	str	r2, [r3, #24]
 8002678:	e040      	b.n	80026fc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2b08      	cmp	r3, #8
 800267e:	d11b      	bne.n	80026b8 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8002690:	f000 fb67 	bl	8002d62 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	69da      	ldr	r2, [r3, #28]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f022 020c 	bic.w	r2, r2, #12
 80026a2:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	69d9      	ldr	r1, [r3, #28]
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	689a      	ldr	r2, [r3, #8]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	430a      	orrs	r2, r1
 80026b4:	61da      	str	r2, [r3, #28]
 80026b6:	e021      	b.n	80026fc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2b0c      	cmp	r3, #12
 80026bc:	d11c      	bne.n	80026f8 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80026ce:	f000 fb83 	bl	8002dd8 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	69da      	ldr	r2, [r3, #28]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80026e0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	69d9      	ldr	r1, [r3, #28]
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	021a      	lsls	r2, r3, #8
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	430a      	orrs	r2, r1
 80026f4:	61da      	str	r2, [r3, #28]
 80026f6:	e001      	b.n	80026fc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2200      	movs	r2, #0
 8002700:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002704:	7dfb      	ldrb	r3, [r7, #23]
}
 8002706:	4618      	mov	r0, r3
 8002708:	3718      	adds	r7, #24
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}

0800270e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800270e:	b580      	push	{r7, lr}
 8002710:	b084      	sub	sp, #16
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
 8002716:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002718:	2300      	movs	r3, #0
 800271a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002722:	2b01      	cmp	r3, #1
 8002724:	d101      	bne.n	800272a <HAL_TIM_ConfigClockSource+0x1c>
 8002726:	2302      	movs	r3, #2
 8002728:	e0b4      	b.n	8002894 <HAL_TIM_ConfigClockSource+0x186>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2201      	movs	r2, #1
 800272e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2202      	movs	r2, #2
 8002736:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002748:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002750:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	68ba      	ldr	r2, [r7, #8]
 8002758:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002762:	d03e      	beq.n	80027e2 <HAL_TIM_ConfigClockSource+0xd4>
 8002764:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002768:	f200 8087 	bhi.w	800287a <HAL_TIM_ConfigClockSource+0x16c>
 800276c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002770:	f000 8086 	beq.w	8002880 <HAL_TIM_ConfigClockSource+0x172>
 8002774:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002778:	d87f      	bhi.n	800287a <HAL_TIM_ConfigClockSource+0x16c>
 800277a:	2b70      	cmp	r3, #112	@ 0x70
 800277c:	d01a      	beq.n	80027b4 <HAL_TIM_ConfigClockSource+0xa6>
 800277e:	2b70      	cmp	r3, #112	@ 0x70
 8002780:	d87b      	bhi.n	800287a <HAL_TIM_ConfigClockSource+0x16c>
 8002782:	2b60      	cmp	r3, #96	@ 0x60
 8002784:	d050      	beq.n	8002828 <HAL_TIM_ConfigClockSource+0x11a>
 8002786:	2b60      	cmp	r3, #96	@ 0x60
 8002788:	d877      	bhi.n	800287a <HAL_TIM_ConfigClockSource+0x16c>
 800278a:	2b50      	cmp	r3, #80	@ 0x50
 800278c:	d03c      	beq.n	8002808 <HAL_TIM_ConfigClockSource+0xfa>
 800278e:	2b50      	cmp	r3, #80	@ 0x50
 8002790:	d873      	bhi.n	800287a <HAL_TIM_ConfigClockSource+0x16c>
 8002792:	2b40      	cmp	r3, #64	@ 0x40
 8002794:	d058      	beq.n	8002848 <HAL_TIM_ConfigClockSource+0x13a>
 8002796:	2b40      	cmp	r3, #64	@ 0x40
 8002798:	d86f      	bhi.n	800287a <HAL_TIM_ConfigClockSource+0x16c>
 800279a:	2b30      	cmp	r3, #48	@ 0x30
 800279c:	d064      	beq.n	8002868 <HAL_TIM_ConfigClockSource+0x15a>
 800279e:	2b30      	cmp	r3, #48	@ 0x30
 80027a0:	d86b      	bhi.n	800287a <HAL_TIM_ConfigClockSource+0x16c>
 80027a2:	2b20      	cmp	r3, #32
 80027a4:	d060      	beq.n	8002868 <HAL_TIM_ConfigClockSource+0x15a>
 80027a6:	2b20      	cmp	r3, #32
 80027a8:	d867      	bhi.n	800287a <HAL_TIM_ConfigClockSource+0x16c>
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d05c      	beq.n	8002868 <HAL_TIM_ConfigClockSource+0x15a>
 80027ae:	2b10      	cmp	r3, #16
 80027b0:	d05a      	beq.n	8002868 <HAL_TIM_ConfigClockSource+0x15a>
 80027b2:	e062      	b.n	800287a <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80027c4:	f000 fb5e 	bl	8002e84 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80027d6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	68ba      	ldr	r2, [r7, #8]
 80027de:	609a      	str	r2, [r3, #8]
      break;
 80027e0:	e04f      	b.n	8002882 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80027f2:	f000 fb47 	bl	8002e84 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	689a      	ldr	r2, [r3, #8]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002804:	609a      	str	r2, [r3, #8]
      break;
 8002806:	e03c      	b.n	8002882 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002814:	461a      	mov	r2, r3
 8002816:	f000 fa0b 	bl	8002c30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	2150      	movs	r1, #80	@ 0x50
 8002820:	4618      	mov	r0, r3
 8002822:	f000 fb15 	bl	8002e50 <TIM_ITRx_SetConfig>
      break;
 8002826:	e02c      	b.n	8002882 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002834:	461a      	mov	r2, r3
 8002836:	f000 fa65 	bl	8002d04 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	2160      	movs	r1, #96	@ 0x60
 8002840:	4618      	mov	r0, r3
 8002842:	f000 fb05 	bl	8002e50 <TIM_ITRx_SetConfig>
      break;
 8002846:	e01c      	b.n	8002882 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002854:	461a      	mov	r2, r3
 8002856:	f000 f9eb 	bl	8002c30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	2140      	movs	r1, #64	@ 0x40
 8002860:	4618      	mov	r0, r3
 8002862:	f000 faf5 	bl	8002e50 <TIM_ITRx_SetConfig>
      break;
 8002866:	e00c      	b.n	8002882 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4619      	mov	r1, r3
 8002872:	4610      	mov	r0, r2
 8002874:	f000 faec 	bl	8002e50 <TIM_ITRx_SetConfig>
      break;
 8002878:	e003      	b.n	8002882 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	73fb      	strb	r3, [r7, #15]
      break;
 800287e:	e000      	b.n	8002882 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002880:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2201      	movs	r2, #1
 8002886:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002892:	7bfb      	ldrb	r3, [r7, #15]
}
 8002894:	4618      	mov	r0, r3
 8002896:	3710      	adds	r7, #16
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}

0800289c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d101      	bne.n	80028b4 <HAL_TIM_SlaveConfigSynchro+0x18>
 80028b0:	2302      	movs	r3, #2
 80028b2:	e031      	b.n	8002918 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2202      	movs	r2, #2
 80028c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80028c4:	6839      	ldr	r1, [r7, #0]
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f000 f8c6 	bl	8002a58 <TIM_SlaveTimer_SetConfig>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d009      	beq.n	80028e6 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2201      	movs	r2, #1
 80028d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e018      	b.n	8002918 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	68da      	ldr	r2, [r3, #12]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80028f4:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	68da      	ldr	r2, [r3, #12]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002904:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2201      	movs	r2, #1
 800290a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002916:	2300      	movs	r3, #0
}
 8002918:	4618      	mov	r0, r3
 800291a:	3708      	adds	r7, #8
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}

08002920 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002928:	bf00      	nop
 800292a:	370c      	adds	r7, #12
 800292c:	46bd      	mov	sp, r7
 800292e:	bc80      	pop	{r7}
 8002930:	4770      	bx	lr

08002932 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002932:	b480      	push	{r7}
 8002934:	b083      	sub	sp, #12
 8002936:	af00      	add	r7, sp, #0
 8002938:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800293a:	bf00      	nop
 800293c:	370c      	adds	r7, #12
 800293e:	46bd      	mov	sp, r7
 8002940:	bc80      	pop	{r7}
 8002942:	4770      	bx	lr

08002944 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800294c:	bf00      	nop
 800294e:	370c      	adds	r7, #12
 8002950:	46bd      	mov	sp, r7
 8002952:	bc80      	pop	{r7}
 8002954:	4770      	bx	lr

08002956 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002956:	b480      	push	{r7}
 8002958:	b083      	sub	sp, #12
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800295e:	bf00      	nop
 8002960:	370c      	adds	r7, #12
 8002962:	46bd      	mov	sp, r7
 8002964:	bc80      	pop	{r7}
 8002966:	4770      	bx	lr

08002968 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002970:	bf00      	nop
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	bc80      	pop	{r7}
 8002978:	4770      	bx	lr
	...

0800297c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800297c:	b480      	push	{r7}
 800297e:	b085      	sub	sp, #20
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	4a2f      	ldr	r2, [pc, #188]	@ (8002a4c <TIM_Base_SetConfig+0xd0>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d00b      	beq.n	80029ac <TIM_Base_SetConfig+0x30>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800299a:	d007      	beq.n	80029ac <TIM_Base_SetConfig+0x30>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	4a2c      	ldr	r2, [pc, #176]	@ (8002a50 <TIM_Base_SetConfig+0xd4>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d003      	beq.n	80029ac <TIM_Base_SetConfig+0x30>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	4a2b      	ldr	r2, [pc, #172]	@ (8002a54 <TIM_Base_SetConfig+0xd8>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d108      	bne.n	80029be <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	68fa      	ldr	r2, [r7, #12]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4a22      	ldr	r2, [pc, #136]	@ (8002a4c <TIM_Base_SetConfig+0xd0>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d00b      	beq.n	80029de <TIM_Base_SetConfig+0x62>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029cc:	d007      	beq.n	80029de <TIM_Base_SetConfig+0x62>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a1f      	ldr	r2, [pc, #124]	@ (8002a50 <TIM_Base_SetConfig+0xd4>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d003      	beq.n	80029de <TIM_Base_SetConfig+0x62>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a1e      	ldr	r2, [pc, #120]	@ (8002a54 <TIM_Base_SetConfig+0xd8>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d108      	bne.n	80029f0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80029e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	68db      	ldr	r3, [r3, #12]
 80029ea:	68fa      	ldr	r2, [r7, #12]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	695b      	ldr	r3, [r3, #20]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	68fa      	ldr	r2, [r7, #12]
 8002a02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	689a      	ldr	r2, [r3, #8]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	4a0d      	ldr	r2, [pc, #52]	@ (8002a4c <TIM_Base_SetConfig+0xd0>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d103      	bne.n	8002a24 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	691a      	ldr	r2, [r3, #16]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2201      	movs	r2, #1
 8002a28:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	691b      	ldr	r3, [r3, #16]
 8002a2e:	f003 0301 	and.w	r3, r3, #1
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d005      	beq.n	8002a42 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	691b      	ldr	r3, [r3, #16]
 8002a3a:	f023 0201 	bic.w	r2, r3, #1
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	611a      	str	r2, [r3, #16]
  }
}
 8002a42:	bf00      	nop
 8002a44:	3714      	adds	r7, #20
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bc80      	pop	{r7}
 8002a4a:	4770      	bx	lr
 8002a4c:	40012c00 	.word	0x40012c00
 8002a50:	40000400 	.word	0x40000400
 8002a54:	40000800 	.word	0x40000800

08002a58 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b086      	sub	sp, #24
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a62:	2300      	movs	r3, #0
 8002a64:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a74:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	693a      	ldr	r2, [r7, #16]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	f023 0307 	bic.w	r3, r3, #7
 8002a86:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	693a      	ldr	r2, [r7, #16]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	693a      	ldr	r2, [r7, #16]
 8002a98:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	2b70      	cmp	r3, #112	@ 0x70
 8002aa0:	d01a      	beq.n	8002ad8 <TIM_SlaveTimer_SetConfig+0x80>
 8002aa2:	2b70      	cmp	r3, #112	@ 0x70
 8002aa4:	d860      	bhi.n	8002b68 <TIM_SlaveTimer_SetConfig+0x110>
 8002aa6:	2b60      	cmp	r3, #96	@ 0x60
 8002aa8:	d054      	beq.n	8002b54 <TIM_SlaveTimer_SetConfig+0xfc>
 8002aaa:	2b60      	cmp	r3, #96	@ 0x60
 8002aac:	d85c      	bhi.n	8002b68 <TIM_SlaveTimer_SetConfig+0x110>
 8002aae:	2b50      	cmp	r3, #80	@ 0x50
 8002ab0:	d046      	beq.n	8002b40 <TIM_SlaveTimer_SetConfig+0xe8>
 8002ab2:	2b50      	cmp	r3, #80	@ 0x50
 8002ab4:	d858      	bhi.n	8002b68 <TIM_SlaveTimer_SetConfig+0x110>
 8002ab6:	2b40      	cmp	r3, #64	@ 0x40
 8002ab8:	d019      	beq.n	8002aee <TIM_SlaveTimer_SetConfig+0x96>
 8002aba:	2b40      	cmp	r3, #64	@ 0x40
 8002abc:	d854      	bhi.n	8002b68 <TIM_SlaveTimer_SetConfig+0x110>
 8002abe:	2b30      	cmp	r3, #48	@ 0x30
 8002ac0:	d055      	beq.n	8002b6e <TIM_SlaveTimer_SetConfig+0x116>
 8002ac2:	2b30      	cmp	r3, #48	@ 0x30
 8002ac4:	d850      	bhi.n	8002b68 <TIM_SlaveTimer_SetConfig+0x110>
 8002ac6:	2b20      	cmp	r3, #32
 8002ac8:	d051      	beq.n	8002b6e <TIM_SlaveTimer_SetConfig+0x116>
 8002aca:	2b20      	cmp	r3, #32
 8002acc:	d84c      	bhi.n	8002b68 <TIM_SlaveTimer_SetConfig+0x110>
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d04d      	beq.n	8002b6e <TIM_SlaveTimer_SetConfig+0x116>
 8002ad2:	2b10      	cmp	r3, #16
 8002ad4:	d04b      	beq.n	8002b6e <TIM_SlaveTimer_SetConfig+0x116>
 8002ad6:	e047      	b.n	8002b68 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8002ae8:	f000 f9cc 	bl	8002e84 <TIM_ETR_SetConfig>
      break;
 8002aec:	e040      	b.n	8002b70 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	2b05      	cmp	r3, #5
 8002af4:	d101      	bne.n	8002afa <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e03b      	b.n	8002b72 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	6a1b      	ldr	r3, [r3, #32]
 8002b00:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	6a1a      	ldr	r2, [r3, #32]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f022 0201 	bic.w	r2, r2, #1
 8002b10:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	699b      	ldr	r3, [r3, #24]
 8002b18:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002b20:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	691b      	ldr	r3, [r3, #16]
 8002b26:	011b      	lsls	r3, r3, #4
 8002b28:	68ba      	ldr	r2, [r7, #8]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	68ba      	ldr	r2, [r7, #8]
 8002b34:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	68fa      	ldr	r2, [r7, #12]
 8002b3c:	621a      	str	r2, [r3, #32]
      break;
 8002b3e:	e017      	b.n	8002b70 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	f000 f86f 	bl	8002c30 <TIM_TI1_ConfigInputStage>
      break;
 8002b52:	e00d      	b.n	8002b70 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b60:	461a      	mov	r2, r3
 8002b62:	f000 f8cf 	bl	8002d04 <TIM_TI2_ConfigInputStage>
      break;
 8002b66:	e003      	b.n	8002b70 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	75fb      	strb	r3, [r7, #23]
      break;
 8002b6c:	e000      	b.n	8002b70 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8002b6e:	bf00      	nop
  }

  return status;
 8002b70:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3718      	adds	r7, #24
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
	...

08002b7c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b087      	sub	sp, #28
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	60b9      	str	r1, [r7, #8]
 8002b86:	607a      	str	r2, [r7, #4]
 8002b88:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6a1b      	ldr	r3, [r3, #32]
 8002b8e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6a1b      	ldr	r3, [r3, #32]
 8002b94:	f023 0201 	bic.w	r2, r3, #1
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	699b      	ldr	r3, [r3, #24]
 8002ba0:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	4a1f      	ldr	r2, [pc, #124]	@ (8002c24 <TIM_TI1_SetConfig+0xa8>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d00b      	beq.n	8002bc2 <TIM_TI1_SetConfig+0x46>
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bb0:	d007      	beq.n	8002bc2 <TIM_TI1_SetConfig+0x46>
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	4a1c      	ldr	r2, [pc, #112]	@ (8002c28 <TIM_TI1_SetConfig+0xac>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d003      	beq.n	8002bc2 <TIM_TI1_SetConfig+0x46>
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	4a1b      	ldr	r2, [pc, #108]	@ (8002c2c <TIM_TI1_SetConfig+0xb0>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d101      	bne.n	8002bc6 <TIM_TI1_SetConfig+0x4a>
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e000      	b.n	8002bc8 <TIM_TI1_SetConfig+0x4c>
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d008      	beq.n	8002bde <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	f023 0303 	bic.w	r3, r3, #3
 8002bd2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002bd4:	697a      	ldr	r2, [r7, #20]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	617b      	str	r3, [r7, #20]
 8002bdc:	e003      	b.n	8002be6 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	f043 0301 	orr.w	r3, r3, #1
 8002be4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002bec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	011b      	lsls	r3, r3, #4
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	697a      	ldr	r2, [r7, #20]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	f023 030a 	bic.w	r3, r3, #10
 8002c00:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	f003 030a 	and.w	r3, r3, #10
 8002c08:	693a      	ldr	r2, [r7, #16]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	697a      	ldr	r2, [r7, #20]
 8002c12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	693a      	ldr	r2, [r7, #16]
 8002c18:	621a      	str	r2, [r3, #32]
}
 8002c1a:	bf00      	nop
 8002c1c:	371c      	adds	r7, #28
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bc80      	pop	{r7}
 8002c22:	4770      	bx	lr
 8002c24:	40012c00 	.word	0x40012c00
 8002c28:	40000400 	.word	0x40000400
 8002c2c:	40000800 	.word	0x40000800

08002c30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b087      	sub	sp, #28
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	60f8      	str	r0, [r7, #12]
 8002c38:	60b9      	str	r1, [r7, #8]
 8002c3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6a1b      	ldr	r3, [r3, #32]
 8002c40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	6a1b      	ldr	r3, [r3, #32]
 8002c46:	f023 0201 	bic.w	r2, r3, #1
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	699b      	ldr	r3, [r3, #24]
 8002c52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002c5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	011b      	lsls	r3, r3, #4
 8002c60:	693a      	ldr	r2, [r7, #16]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	f023 030a 	bic.w	r3, r3, #10
 8002c6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002c6e:	697a      	ldr	r2, [r7, #20]
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	693a      	ldr	r2, [r7, #16]
 8002c7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	697a      	ldr	r2, [r7, #20]
 8002c80:	621a      	str	r2, [r3, #32]
}
 8002c82:	bf00      	nop
 8002c84:	371c      	adds	r7, #28
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bc80      	pop	{r7}
 8002c8a:	4770      	bx	lr

08002c8c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b087      	sub	sp, #28
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	60b9      	str	r1, [r7, #8]
 8002c96:	607a      	str	r2, [r7, #4]
 8002c98:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	6a1b      	ldr	r3, [r3, #32]
 8002c9e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6a1b      	ldr	r3, [r3, #32]
 8002ca4:	f023 0210 	bic.w	r2, r3, #16
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	699b      	ldr	r3, [r3, #24]
 8002cb0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002cb8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	021b      	lsls	r3, r3, #8
 8002cbe:	693a      	ldr	r2, [r7, #16]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002cca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	031b      	lsls	r3, r3, #12
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	693a      	ldr	r2, [r7, #16]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002cde:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	011b      	lsls	r3, r3, #4
 8002ce4:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8002ce8:	697a      	ldr	r2, [r7, #20]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	693a      	ldr	r2, [r7, #16]
 8002cf2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	697a      	ldr	r2, [r7, #20]
 8002cf8:	621a      	str	r2, [r3, #32]
}
 8002cfa:	bf00      	nop
 8002cfc:	371c      	adds	r7, #28
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bc80      	pop	{r7}
 8002d02:	4770      	bx	lr

08002d04 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b087      	sub	sp, #28
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	60b9      	str	r1, [r7, #8]
 8002d0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6a1b      	ldr	r3, [r3, #32]
 8002d14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	6a1b      	ldr	r3, [r3, #32]
 8002d1a:	f023 0210 	bic.w	r2, r3, #16
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	699b      	ldr	r3, [r3, #24]
 8002d26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002d2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	031b      	lsls	r3, r3, #12
 8002d34:	693a      	ldr	r2, [r7, #16]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002d40:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	011b      	lsls	r3, r3, #4
 8002d46:	697a      	ldr	r2, [r7, #20]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	693a      	ldr	r2, [r7, #16]
 8002d50:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	697a      	ldr	r2, [r7, #20]
 8002d56:	621a      	str	r2, [r3, #32]
}
 8002d58:	bf00      	nop
 8002d5a:	371c      	adds	r7, #28
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bc80      	pop	{r7}
 8002d60:	4770      	bx	lr

08002d62 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002d62:	b480      	push	{r7}
 8002d64:	b087      	sub	sp, #28
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	60f8      	str	r0, [r7, #12]
 8002d6a:	60b9      	str	r1, [r7, #8]
 8002d6c:	607a      	str	r2, [r7, #4]
 8002d6e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6a1b      	ldr	r3, [r3, #32]
 8002d74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	6a1b      	ldr	r3, [r3, #32]
 8002d7a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	69db      	ldr	r3, [r3, #28]
 8002d86:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	f023 0303 	bic.w	r3, r3, #3
 8002d8e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8002d90:	693a      	ldr	r2, [r7, #16]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002d9e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	011b      	lsls	r3, r3, #4
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	693a      	ldr	r2, [r7, #16]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002db2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	021b      	lsls	r3, r3, #8
 8002db8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002dbc:	697a      	ldr	r2, [r7, #20]
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	693a      	ldr	r2, [r7, #16]
 8002dc6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	697a      	ldr	r2, [r7, #20]
 8002dcc:	621a      	str	r2, [r3, #32]
}
 8002dce:	bf00      	nop
 8002dd0:	371c      	adds	r7, #28
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bc80      	pop	{r7}
 8002dd6:	4770      	bx	lr

08002dd8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b087      	sub	sp, #28
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	60f8      	str	r0, [r7, #12]
 8002de0:	60b9      	str	r1, [r7, #8]
 8002de2:	607a      	str	r2, [r7, #4]
 8002de4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	6a1b      	ldr	r3, [r3, #32]
 8002dea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	6a1b      	ldr	r3, [r3, #32]
 8002df0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	69db      	ldr	r3, [r3, #28]
 8002dfc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e04:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	021b      	lsls	r3, r3, #8
 8002e0a:	693a      	ldr	r2, [r7, #16]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002e16:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	031b      	lsls	r3, r3, #12
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	693a      	ldr	r2, [r7, #16]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002e2a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	031b      	lsls	r3, r3, #12
 8002e30:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e34:	697a      	ldr	r2, [r7, #20]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	693a      	ldr	r2, [r7, #16]
 8002e3e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	697a      	ldr	r2, [r7, #20]
 8002e44:	621a      	str	r2, [r3, #32]
}
 8002e46:	bf00      	nop
 8002e48:	371c      	adds	r7, #28
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bc80      	pop	{r7}
 8002e4e:	4770      	bx	lr

08002e50 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b085      	sub	sp, #20
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e66:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e68:	683a      	ldr	r2, [r7, #0]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	f043 0307 	orr.w	r3, r3, #7
 8002e72:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	68fa      	ldr	r2, [r7, #12]
 8002e78:	609a      	str	r2, [r3, #8]
}
 8002e7a:	bf00      	nop
 8002e7c:	3714      	adds	r7, #20
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bc80      	pop	{r7}
 8002e82:	4770      	bx	lr

08002e84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b087      	sub	sp, #28
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	60b9      	str	r1, [r7, #8]
 8002e8e:	607a      	str	r2, [r7, #4]
 8002e90:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002e9e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	021a      	lsls	r2, r3, #8
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	431a      	orrs	r2, r3
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	697a      	ldr	r2, [r7, #20]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	697a      	ldr	r2, [r7, #20]
 8002eb6:	609a      	str	r2, [r3, #8]
}
 8002eb8:	bf00      	nop
 8002eba:	371c      	adds	r7, #28
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bc80      	pop	{r7}
 8002ec0:	4770      	bx	lr
	...

08002ec4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b085      	sub	sp, #20
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d101      	bne.n	8002edc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ed8:	2302      	movs	r3, #2
 8002eda:	e046      	b.n	8002f6a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2202      	movs	r2, #2
 8002ee8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	68fa      	ldr	r2, [r7, #12]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	68fa      	ldr	r2, [r7, #12]
 8002f14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a16      	ldr	r2, [pc, #88]	@ (8002f74 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d00e      	beq.n	8002f3e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f28:	d009      	beq.n	8002f3e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a12      	ldr	r2, [pc, #72]	@ (8002f78 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d004      	beq.n	8002f3e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a10      	ldr	r2, [pc, #64]	@ (8002f7c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d10c      	bne.n	8002f58 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002f44:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	68ba      	ldr	r2, [r7, #8]
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	68ba      	ldr	r2, [r7, #8]
 8002f56:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002f68:	2300      	movs	r3, #0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3714      	adds	r7, #20
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bc80      	pop	{r7}
 8002f72:	4770      	bx	lr
 8002f74:	40012c00 	.word	0x40012c00
 8002f78:	40000400 	.word	0x40000400
 8002f7c:	40000800 	.word	0x40000800

08002f80 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f88:	bf00      	nop
 8002f8a:	370c      	adds	r7, #12
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bc80      	pop	{r7}
 8002f90:	4770      	bx	lr

08002f92 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f92:	b480      	push	{r7}
 8002f94:	b083      	sub	sp, #12
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f9a:	bf00      	nop
 8002f9c:	370c      	adds	r7, #12
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bc80      	pop	{r7}
 8002fa2:	4770      	bx	lr

08002fa4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b082      	sub	sp, #8
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d101      	bne.n	8002fb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e042      	b.n	800303c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d106      	bne.n	8002fd0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f7fe f910 	bl	80011f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2224      	movs	r2, #36	@ 0x24
 8002fd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	68da      	ldr	r2, [r3, #12]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002fe6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f000 fcff 	bl	80039ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	691a      	ldr	r2, [r3, #16]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002ffc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	695a      	ldr	r2, [r3, #20]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800300c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	68da      	ldr	r2, [r3, #12]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800301c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2220      	movs	r2, #32
 8003028:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2220      	movs	r2, #32
 8003030:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2200      	movs	r2, #0
 8003038:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800303a:	2300      	movs	r3, #0
}
 800303c:	4618      	mov	r0, r3
 800303e:	3708      	adds	r7, #8
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}

08003044 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003044:	b480      	push	{r7}
 8003046:	b085      	sub	sp, #20
 8003048:	af00      	add	r7, sp, #0
 800304a:	60f8      	str	r0, [r7, #12]
 800304c:	60b9      	str	r1, [r7, #8]
 800304e:	4613      	mov	r3, r2
 8003050:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003058:	b2db      	uxtb	r3, r3
 800305a:	2b20      	cmp	r3, #32
 800305c:	d121      	bne.n	80030a2 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d002      	beq.n	800306a <HAL_UART_Transmit_IT+0x26>
 8003064:	88fb      	ldrh	r3, [r7, #6]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d101      	bne.n	800306e <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e01a      	b.n	80030a4 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	68ba      	ldr	r2, [r7, #8]
 8003072:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	88fa      	ldrh	r2, [r7, #6]
 8003078:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	88fa      	ldrh	r2, [r7, #6]
 800307e:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2200      	movs	r2, #0
 8003084:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2221      	movs	r2, #33	@ 0x21
 800308a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	68da      	ldr	r2, [r3, #12]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800309c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800309e:	2300      	movs	r3, #0
 80030a0:	e000      	b.n	80030a4 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80030a2:	2302      	movs	r3, #2
  }
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3714      	adds	r7, #20
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bc80      	pop	{r7}
 80030ac:	4770      	bx	lr

080030ae <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80030ae:	b580      	push	{r7, lr}
 80030b0:	b084      	sub	sp, #16
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	60f8      	str	r0, [r7, #12]
 80030b6:	60b9      	str	r1, [r7, #8]
 80030b8:	4613      	mov	r3, r2
 80030ba:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	2b20      	cmp	r3, #32
 80030c6:	d112      	bne.n	80030ee <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d002      	beq.n	80030d4 <HAL_UART_Receive_IT+0x26>
 80030ce:	88fb      	ldrh	r3, [r7, #6]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d101      	bne.n	80030d8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e00b      	b.n	80030f0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2200      	movs	r2, #0
 80030dc:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80030de:	88fb      	ldrh	r3, [r7, #6]
 80030e0:	461a      	mov	r2, r3
 80030e2:	68b9      	ldr	r1, [r7, #8]
 80030e4:	68f8      	ldr	r0, [r7, #12]
 80030e6:	f000 faad 	bl	8003644 <UART_Start_Receive_IT>
 80030ea:	4603      	mov	r3, r0
 80030ec:	e000      	b.n	80030f0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80030ee:	2302      	movs	r3, #2
  }
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3710      	adds	r7, #16
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b0ba      	sub	sp, #232	@ 0xe8
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	695b      	ldr	r3, [r3, #20]
 800311a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800311e:	2300      	movs	r3, #0
 8003120:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003124:	2300      	movs	r3, #0
 8003126:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800312a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800312e:	f003 030f 	and.w	r3, r3, #15
 8003132:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003136:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800313a:	2b00      	cmp	r3, #0
 800313c:	d10f      	bne.n	800315e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800313e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003142:	f003 0320 	and.w	r3, r3, #32
 8003146:	2b00      	cmp	r3, #0
 8003148:	d009      	beq.n	800315e <HAL_UART_IRQHandler+0x66>
 800314a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800314e:	f003 0320 	and.w	r3, r3, #32
 8003152:	2b00      	cmp	r3, #0
 8003154:	d003      	beq.n	800315e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f000 fb8a 	bl	8003870 <UART_Receive_IT>
      return;
 800315c:	e25b      	b.n	8003616 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800315e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003162:	2b00      	cmp	r3, #0
 8003164:	f000 80de 	beq.w	8003324 <HAL_UART_IRQHandler+0x22c>
 8003168:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800316c:	f003 0301 	and.w	r3, r3, #1
 8003170:	2b00      	cmp	r3, #0
 8003172:	d106      	bne.n	8003182 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003174:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003178:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800317c:	2b00      	cmp	r3, #0
 800317e:	f000 80d1 	beq.w	8003324 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003182:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003186:	f003 0301 	and.w	r3, r3, #1
 800318a:	2b00      	cmp	r3, #0
 800318c:	d00b      	beq.n	80031a6 <HAL_UART_IRQHandler+0xae>
 800318e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003192:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003196:	2b00      	cmp	r3, #0
 8003198:	d005      	beq.n	80031a6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800319e:	f043 0201 	orr.w	r2, r3, #1
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80031a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031aa:	f003 0304 	and.w	r3, r3, #4
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d00b      	beq.n	80031ca <HAL_UART_IRQHandler+0xd2>
 80031b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80031b6:	f003 0301 	and.w	r3, r3, #1
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d005      	beq.n	80031ca <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031c2:	f043 0202 	orr.w	r2, r3, #2
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80031ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031ce:	f003 0302 	and.w	r3, r3, #2
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d00b      	beq.n	80031ee <HAL_UART_IRQHandler+0xf6>
 80031d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80031da:	f003 0301 	and.w	r3, r3, #1
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d005      	beq.n	80031ee <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031e6:	f043 0204 	orr.w	r2, r3, #4
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80031ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031f2:	f003 0308 	and.w	r3, r3, #8
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d011      	beq.n	800321e <HAL_UART_IRQHandler+0x126>
 80031fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80031fe:	f003 0320 	and.w	r3, r3, #32
 8003202:	2b00      	cmp	r3, #0
 8003204:	d105      	bne.n	8003212 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003206:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800320a:	f003 0301 	and.w	r3, r3, #1
 800320e:	2b00      	cmp	r3, #0
 8003210:	d005      	beq.n	800321e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003216:	f043 0208 	orr.w	r2, r3, #8
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003222:	2b00      	cmp	r3, #0
 8003224:	f000 81f2 	beq.w	800360c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003228:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800322c:	f003 0320 	and.w	r3, r3, #32
 8003230:	2b00      	cmp	r3, #0
 8003232:	d008      	beq.n	8003246 <HAL_UART_IRQHandler+0x14e>
 8003234:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003238:	f003 0320 	and.w	r3, r3, #32
 800323c:	2b00      	cmp	r3, #0
 800323e:	d002      	beq.n	8003246 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f000 fb15 	bl	8003870 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	695b      	ldr	r3, [r3, #20]
 800324c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003250:	2b00      	cmp	r3, #0
 8003252:	bf14      	ite	ne
 8003254:	2301      	movne	r3, #1
 8003256:	2300      	moveq	r3, #0
 8003258:	b2db      	uxtb	r3, r3
 800325a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003262:	f003 0308 	and.w	r3, r3, #8
 8003266:	2b00      	cmp	r3, #0
 8003268:	d103      	bne.n	8003272 <HAL_UART_IRQHandler+0x17a>
 800326a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800326e:	2b00      	cmp	r3, #0
 8003270:	d04f      	beq.n	8003312 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f000 fa1f 	bl	80036b6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	695b      	ldr	r3, [r3, #20]
 800327e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003282:	2b00      	cmp	r3, #0
 8003284:	d041      	beq.n	800330a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	3314      	adds	r3, #20
 800328c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003290:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003294:	e853 3f00 	ldrex	r3, [r3]
 8003298:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800329c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80032a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80032a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	3314      	adds	r3, #20
 80032ae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80032b2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80032b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032ba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80032be:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80032c2:	e841 2300 	strex	r3, r2, [r1]
 80032c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80032ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d1d9      	bne.n	8003286 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d013      	beq.n	8003302 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032de:	4a7e      	ldr	r2, [pc, #504]	@ (80034d8 <HAL_UART_IRQHandler+0x3e0>)
 80032e0:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032e6:	4618      	mov	r0, r3
 80032e8:	f7fe f998 	bl	800161c <HAL_DMA_Abort_IT>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d016      	beq.n	8003320 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80032fc:	4610      	mov	r0, r2
 80032fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003300:	e00e      	b.n	8003320 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f000 f98a 	bl	800361c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003308:	e00a      	b.n	8003320 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f000 f986 	bl	800361c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003310:	e006      	b.n	8003320 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f000 f982 	bl	800361c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800331e:	e175      	b.n	800360c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003320:	bf00      	nop
    return;
 8003322:	e173      	b.n	800360c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003328:	2b01      	cmp	r3, #1
 800332a:	f040 814f 	bne.w	80035cc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800332e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003332:	f003 0310 	and.w	r3, r3, #16
 8003336:	2b00      	cmp	r3, #0
 8003338:	f000 8148 	beq.w	80035cc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800333c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003340:	f003 0310 	and.w	r3, r3, #16
 8003344:	2b00      	cmp	r3, #0
 8003346:	f000 8141 	beq.w	80035cc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800334a:	2300      	movs	r3, #0
 800334c:	60bb      	str	r3, [r7, #8]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	60bb      	str	r3, [r7, #8]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	60bb      	str	r3, [r7, #8]
 800335e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	695b      	ldr	r3, [r3, #20]
 8003366:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800336a:	2b00      	cmp	r3, #0
 800336c:	f000 80b6 	beq.w	80034dc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800337c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003380:	2b00      	cmp	r3, #0
 8003382:	f000 8145 	beq.w	8003610 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800338a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800338e:	429a      	cmp	r2, r3
 8003390:	f080 813e 	bcs.w	8003610 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800339a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033a0:	699b      	ldr	r3, [r3, #24]
 80033a2:	2b20      	cmp	r3, #32
 80033a4:	f000 8088 	beq.w	80034b8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	330c      	adds	r3, #12
 80033ae:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80033b6:	e853 3f00 	ldrex	r3, [r3]
 80033ba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80033be:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80033c2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80033c6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	330c      	adds	r3, #12
 80033d0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80033d4:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80033d8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033dc:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80033e0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80033e4:	e841 2300 	strex	r3, r2, [r1]
 80033e8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80033ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d1d9      	bne.n	80033a8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	3314      	adds	r3, #20
 80033fa:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033fc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80033fe:	e853 3f00 	ldrex	r3, [r3]
 8003402:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003404:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003406:	f023 0301 	bic.w	r3, r3, #1
 800340a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	3314      	adds	r3, #20
 8003414:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003418:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800341c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800341e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003420:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003424:	e841 2300 	strex	r3, r2, [r1]
 8003428:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800342a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800342c:	2b00      	cmp	r3, #0
 800342e:	d1e1      	bne.n	80033f4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	3314      	adds	r3, #20
 8003436:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003438:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800343a:	e853 3f00 	ldrex	r3, [r3]
 800343e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003440:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003442:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003446:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	3314      	adds	r3, #20
 8003450:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003454:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003456:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003458:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800345a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800345c:	e841 2300 	strex	r3, r2, [r1]
 8003460:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003462:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003464:	2b00      	cmp	r3, #0
 8003466:	d1e3      	bne.n	8003430 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2220      	movs	r2, #32
 800346c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2200      	movs	r2, #0
 8003474:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	330c      	adds	r3, #12
 800347c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800347e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003480:	e853 3f00 	ldrex	r3, [r3]
 8003484:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003486:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003488:	f023 0310 	bic.w	r3, r3, #16
 800348c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	330c      	adds	r3, #12
 8003496:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800349a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800349c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800349e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80034a0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80034a2:	e841 2300 	strex	r3, r2, [r1]
 80034a6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80034a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d1e3      	bne.n	8003476 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034b2:	4618      	mov	r0, r3
 80034b4:	f7fe f877 	bl	80015a6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2202      	movs	r2, #2
 80034bc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	4619      	mov	r1, r3
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f000 f8ad 	bl	800362e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80034d4:	e09c      	b.n	8003610 <HAL_UART_IRQHandler+0x518>
 80034d6:	bf00      	nop
 80034d8:	0800377b 	.word	0x0800377b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80034f0:	b29b      	uxth	r3, r3
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	f000 808e 	beq.w	8003614 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80034f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	f000 8089 	beq.w	8003614 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	330c      	adds	r3, #12
 8003508:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800350a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800350c:	e853 3f00 	ldrex	r3, [r3]
 8003510:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003512:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003514:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003518:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	330c      	adds	r3, #12
 8003522:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003526:	647a      	str	r2, [r7, #68]	@ 0x44
 8003528:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800352a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800352c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800352e:	e841 2300 	strex	r3, r2, [r1]
 8003532:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003534:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003536:	2b00      	cmp	r3, #0
 8003538:	d1e3      	bne.n	8003502 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	3314      	adds	r3, #20
 8003540:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003544:	e853 3f00 	ldrex	r3, [r3]
 8003548:	623b      	str	r3, [r7, #32]
   return(result);
 800354a:	6a3b      	ldr	r3, [r7, #32]
 800354c:	f023 0301 	bic.w	r3, r3, #1
 8003550:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	3314      	adds	r3, #20
 800355a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800355e:	633a      	str	r2, [r7, #48]	@ 0x30
 8003560:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003562:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003564:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003566:	e841 2300 	strex	r3, r2, [r1]
 800356a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800356c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800356e:	2b00      	cmp	r3, #0
 8003570:	d1e3      	bne.n	800353a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2220      	movs	r2, #32
 8003576:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	330c      	adds	r3, #12
 8003586:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	e853 3f00 	ldrex	r3, [r3]
 800358e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f023 0310 	bic.w	r3, r3, #16
 8003596:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	330c      	adds	r3, #12
 80035a0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80035a4:	61fa      	str	r2, [r7, #28]
 80035a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035a8:	69b9      	ldr	r1, [r7, #24]
 80035aa:	69fa      	ldr	r2, [r7, #28]
 80035ac:	e841 2300 	strex	r3, r2, [r1]
 80035b0:	617b      	str	r3, [r7, #20]
   return(result);
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d1e3      	bne.n	8003580 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2202      	movs	r2, #2
 80035bc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80035be:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80035c2:	4619      	mov	r1, r3
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f000 f832 	bl	800362e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80035ca:	e023      	b.n	8003614 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80035cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d009      	beq.n	80035ec <HAL_UART_IRQHandler+0x4f4>
 80035d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d003      	beq.n	80035ec <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f000 f8dc 	bl	80037a2 <UART_Transmit_IT>
    return;
 80035ea:	e014      	b.n	8003616 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80035ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d00e      	beq.n	8003616 <HAL_UART_IRQHandler+0x51e>
 80035f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003600:	2b00      	cmp	r3, #0
 8003602:	d008      	beq.n	8003616 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f000 f91b 	bl	8003840 <UART_EndTransmit_IT>
    return;
 800360a:	e004      	b.n	8003616 <HAL_UART_IRQHandler+0x51e>
    return;
 800360c:	bf00      	nop
 800360e:	e002      	b.n	8003616 <HAL_UART_IRQHandler+0x51e>
      return;
 8003610:	bf00      	nop
 8003612:	e000      	b.n	8003616 <HAL_UART_IRQHandler+0x51e>
      return;
 8003614:	bf00      	nop
  }
}
 8003616:	37e8      	adds	r7, #232	@ 0xe8
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}

0800361c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003624:	bf00      	nop
 8003626:	370c      	adds	r7, #12
 8003628:	46bd      	mov	sp, r7
 800362a:	bc80      	pop	{r7}
 800362c:	4770      	bx	lr

0800362e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800362e:	b480      	push	{r7}
 8003630:	b083      	sub	sp, #12
 8003632:	af00      	add	r7, sp, #0
 8003634:	6078      	str	r0, [r7, #4]
 8003636:	460b      	mov	r3, r1
 8003638:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800363a:	bf00      	nop
 800363c:	370c      	adds	r7, #12
 800363e:	46bd      	mov	sp, r7
 8003640:	bc80      	pop	{r7}
 8003642:	4770      	bx	lr

08003644 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003644:	b480      	push	{r7}
 8003646:	b085      	sub	sp, #20
 8003648:	af00      	add	r7, sp, #0
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	60b9      	str	r1, [r7, #8]
 800364e:	4613      	mov	r3, r2
 8003650:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	68ba      	ldr	r2, [r7, #8]
 8003656:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	88fa      	ldrh	r2, [r7, #6]
 800365c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	88fa      	ldrh	r2, [r7, #6]
 8003662:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2200      	movs	r2, #0
 8003668:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2222      	movs	r2, #34	@ 0x22
 800366e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	691b      	ldr	r3, [r3, #16]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d007      	beq.n	800368a <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	68da      	ldr	r2, [r3, #12]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003688:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	695a      	ldr	r2, [r3, #20]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f042 0201 	orr.w	r2, r2, #1
 8003698:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	68da      	ldr	r2, [r3, #12]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f042 0220 	orr.w	r2, r2, #32
 80036a8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80036aa:	2300      	movs	r3, #0
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3714      	adds	r7, #20
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bc80      	pop	{r7}
 80036b4:	4770      	bx	lr

080036b6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80036b6:	b480      	push	{r7}
 80036b8:	b095      	sub	sp, #84	@ 0x54
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	330c      	adds	r3, #12
 80036c4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036c8:	e853 3f00 	ldrex	r3, [r3]
 80036cc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80036ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80036d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	330c      	adds	r3, #12
 80036dc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80036de:	643a      	str	r2, [r7, #64]	@ 0x40
 80036e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036e2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80036e4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80036e6:	e841 2300 	strex	r3, r2, [r1]
 80036ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80036ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d1e5      	bne.n	80036be <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	3314      	adds	r3, #20
 80036f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036fa:	6a3b      	ldr	r3, [r7, #32]
 80036fc:	e853 3f00 	ldrex	r3, [r3]
 8003700:	61fb      	str	r3, [r7, #28]
   return(result);
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	f023 0301 	bic.w	r3, r3, #1
 8003708:	64bb      	str	r3, [r7, #72]	@ 0x48
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	3314      	adds	r3, #20
 8003710:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003712:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003714:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003716:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003718:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800371a:	e841 2300 	strex	r3, r2, [r1]
 800371e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003722:	2b00      	cmp	r3, #0
 8003724:	d1e5      	bne.n	80036f2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800372a:	2b01      	cmp	r3, #1
 800372c:	d119      	bne.n	8003762 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	330c      	adds	r3, #12
 8003734:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	e853 3f00 	ldrex	r3, [r3]
 800373c:	60bb      	str	r3, [r7, #8]
   return(result);
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	f023 0310 	bic.w	r3, r3, #16
 8003744:	647b      	str	r3, [r7, #68]	@ 0x44
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	330c      	adds	r3, #12
 800374c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800374e:	61ba      	str	r2, [r7, #24]
 8003750:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003752:	6979      	ldr	r1, [r7, #20]
 8003754:	69ba      	ldr	r2, [r7, #24]
 8003756:	e841 2300 	strex	r3, r2, [r1]
 800375a:	613b      	str	r3, [r7, #16]
   return(result);
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d1e5      	bne.n	800372e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2220      	movs	r2, #32
 8003766:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003770:	bf00      	nop
 8003772:	3754      	adds	r7, #84	@ 0x54
 8003774:	46bd      	mov	sp, r7
 8003776:	bc80      	pop	{r7}
 8003778:	4770      	bx	lr

0800377a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800377a:	b580      	push	{r7, lr}
 800377c:	b084      	sub	sp, #16
 800377e:	af00      	add	r7, sp, #0
 8003780:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003786:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2200      	movs	r2, #0
 800378c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2200      	movs	r2, #0
 8003792:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003794:	68f8      	ldr	r0, [r7, #12]
 8003796:	f7ff ff41 	bl	800361c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800379a:	bf00      	nop
 800379c:	3710      	adds	r7, #16
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}

080037a2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80037a2:	b480      	push	{r7}
 80037a4:	b085      	sub	sp, #20
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	2b21      	cmp	r3, #33	@ 0x21
 80037b4:	d13e      	bne.n	8003834 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037be:	d114      	bne.n	80037ea <UART_Transmit_IT+0x48>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	691b      	ldr	r3, [r3, #16]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d110      	bne.n	80037ea <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6a1b      	ldr	r3, [r3, #32]
 80037cc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	881b      	ldrh	r3, [r3, #0]
 80037d2:	461a      	mov	r2, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037dc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a1b      	ldr	r3, [r3, #32]
 80037e2:	1c9a      	adds	r2, r3, #2
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	621a      	str	r2, [r3, #32]
 80037e8:	e008      	b.n	80037fc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6a1b      	ldr	r3, [r3, #32]
 80037ee:	1c59      	adds	r1, r3, #1
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	6211      	str	r1, [r2, #32]
 80037f4:	781a      	ldrb	r2, [r3, #0]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003800:	b29b      	uxth	r3, r3
 8003802:	3b01      	subs	r3, #1
 8003804:	b29b      	uxth	r3, r3
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	4619      	mov	r1, r3
 800380a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800380c:	2b00      	cmp	r3, #0
 800380e:	d10f      	bne.n	8003830 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	68da      	ldr	r2, [r3, #12]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800381e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	68da      	ldr	r2, [r3, #12]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800382e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003830:	2300      	movs	r3, #0
 8003832:	e000      	b.n	8003836 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003834:	2302      	movs	r3, #2
  }
}
 8003836:	4618      	mov	r0, r3
 8003838:	3714      	adds	r7, #20
 800383a:	46bd      	mov	sp, r7
 800383c:	bc80      	pop	{r7}
 800383e:	4770      	bx	lr

08003840 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b082      	sub	sp, #8
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	68da      	ldr	r2, [r3, #12]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003856:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2220      	movs	r2, #32
 800385c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f7fc fe2f 	bl	80004c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003866:	2300      	movs	r3, #0
}
 8003868:	4618      	mov	r0, r3
 800386a:	3708      	adds	r7, #8
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}

08003870 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b08c      	sub	sp, #48	@ 0x30
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800387e:	b2db      	uxtb	r3, r3
 8003880:	2b22      	cmp	r3, #34	@ 0x22
 8003882:	f040 80ae 	bne.w	80039e2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800388e:	d117      	bne.n	80038c0 <UART_Receive_IT+0x50>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	691b      	ldr	r3, [r3, #16]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d113      	bne.n	80038c0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003898:	2300      	movs	r3, #0
 800389a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038a0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038ae:	b29a      	uxth	r2, r3
 80038b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038b2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038b8:	1c9a      	adds	r2, r3, #2
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	629a      	str	r2, [r3, #40]	@ 0x28
 80038be:	e026      	b.n	800390e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80038c6:	2300      	movs	r3, #0
 80038c8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038d2:	d007      	beq.n	80038e4 <UART_Receive_IT+0x74>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d10a      	bne.n	80038f2 <UART_Receive_IT+0x82>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	691b      	ldr	r3, [r3, #16]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d106      	bne.n	80038f2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	b2da      	uxtb	r2, r3
 80038ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038ee:	701a      	strb	r2, [r3, #0]
 80038f0:	e008      	b.n	8003904 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80038fe:	b2da      	uxtb	r2, r3
 8003900:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003902:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003908:	1c5a      	adds	r2, r3, #1
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003912:	b29b      	uxth	r3, r3
 8003914:	3b01      	subs	r3, #1
 8003916:	b29b      	uxth	r3, r3
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	4619      	mov	r1, r3
 800391c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800391e:	2b00      	cmp	r3, #0
 8003920:	d15d      	bne.n	80039de <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	68da      	ldr	r2, [r3, #12]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f022 0220 	bic.w	r2, r2, #32
 8003930:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	68da      	ldr	r2, [r3, #12]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003940:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	695a      	ldr	r2, [r3, #20]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f022 0201 	bic.w	r2, r2, #1
 8003950:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2220      	movs	r2, #32
 8003956:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003964:	2b01      	cmp	r3, #1
 8003966:	d135      	bne.n	80039d4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	330c      	adds	r3, #12
 8003974:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	e853 3f00 	ldrex	r3, [r3]
 800397c:	613b      	str	r3, [r7, #16]
   return(result);
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	f023 0310 	bic.w	r3, r3, #16
 8003984:	627b      	str	r3, [r7, #36]	@ 0x24
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	330c      	adds	r3, #12
 800398c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800398e:	623a      	str	r2, [r7, #32]
 8003990:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003992:	69f9      	ldr	r1, [r7, #28]
 8003994:	6a3a      	ldr	r2, [r7, #32]
 8003996:	e841 2300 	strex	r3, r2, [r1]
 800399a:	61bb      	str	r3, [r7, #24]
   return(result);
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d1e5      	bne.n	800396e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0310 	and.w	r3, r3, #16
 80039ac:	2b10      	cmp	r3, #16
 80039ae:	d10a      	bne.n	80039c6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80039b0:	2300      	movs	r3, #0
 80039b2:	60fb      	str	r3, [r7, #12]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	60fb      	str	r3, [r7, #12]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	60fb      	str	r3, [r7, #12]
 80039c4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80039ca:	4619      	mov	r1, r3
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f7ff fe2e 	bl	800362e <HAL_UARTEx_RxEventCallback>
 80039d2:	e002      	b.n	80039da <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f7fc fd49 	bl	800046c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80039da:	2300      	movs	r3, #0
 80039dc:	e002      	b.n	80039e4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80039de:	2300      	movs	r3, #0
 80039e0:	e000      	b.n	80039e4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80039e2:	2302      	movs	r3, #2
  }
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3730      	adds	r7, #48	@ 0x30
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}

080039ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	691b      	ldr	r3, [r3, #16]
 80039fa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	68da      	ldr	r2, [r3, #12]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	430a      	orrs	r2, r1
 8003a08:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	689a      	ldr	r2, [r3, #8]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	691b      	ldr	r3, [r3, #16]
 8003a12:	431a      	orrs	r2, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	695b      	ldr	r3, [r3, #20]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003a26:	f023 030c 	bic.w	r3, r3, #12
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	6812      	ldr	r2, [r2, #0]
 8003a2e:	68b9      	ldr	r1, [r7, #8]
 8003a30:	430b      	orrs	r3, r1
 8003a32:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	695b      	ldr	r3, [r3, #20]
 8003a3a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	699a      	ldr	r2, [r3, #24]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	430a      	orrs	r2, r1
 8003a48:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a2c      	ldr	r2, [pc, #176]	@ (8003b00 <UART_SetConfig+0x114>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d103      	bne.n	8003a5c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003a54:	f7fe fbf6 	bl	8002244 <HAL_RCC_GetPCLK2Freq>
 8003a58:	60f8      	str	r0, [r7, #12]
 8003a5a:	e002      	b.n	8003a62 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003a5c:	f7fe fbde 	bl	800221c <HAL_RCC_GetPCLK1Freq>
 8003a60:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a62:	68fa      	ldr	r2, [r7, #12]
 8003a64:	4613      	mov	r3, r2
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	4413      	add	r3, r2
 8003a6a:	009a      	lsls	r2, r3, #2
 8003a6c:	441a      	add	r2, r3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a78:	4a22      	ldr	r2, [pc, #136]	@ (8003b04 <UART_SetConfig+0x118>)
 8003a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a7e:	095b      	lsrs	r3, r3, #5
 8003a80:	0119      	lsls	r1, r3, #4
 8003a82:	68fa      	ldr	r2, [r7, #12]
 8003a84:	4613      	mov	r3, r2
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	4413      	add	r3, r2
 8003a8a:	009a      	lsls	r2, r3, #2
 8003a8c:	441a      	add	r2, r3
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a98:	4b1a      	ldr	r3, [pc, #104]	@ (8003b04 <UART_SetConfig+0x118>)
 8003a9a:	fba3 0302 	umull	r0, r3, r3, r2
 8003a9e:	095b      	lsrs	r3, r3, #5
 8003aa0:	2064      	movs	r0, #100	@ 0x64
 8003aa2:	fb00 f303 	mul.w	r3, r0, r3
 8003aa6:	1ad3      	subs	r3, r2, r3
 8003aa8:	011b      	lsls	r3, r3, #4
 8003aaa:	3332      	adds	r3, #50	@ 0x32
 8003aac:	4a15      	ldr	r2, [pc, #84]	@ (8003b04 <UART_SetConfig+0x118>)
 8003aae:	fba2 2303 	umull	r2, r3, r2, r3
 8003ab2:	095b      	lsrs	r3, r3, #5
 8003ab4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003ab8:	4419      	add	r1, r3
 8003aba:	68fa      	ldr	r2, [r7, #12]
 8003abc:	4613      	mov	r3, r2
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	4413      	add	r3, r2
 8003ac2:	009a      	lsls	r2, r3, #2
 8003ac4:	441a      	add	r2, r3
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ad0:	4b0c      	ldr	r3, [pc, #48]	@ (8003b04 <UART_SetConfig+0x118>)
 8003ad2:	fba3 0302 	umull	r0, r3, r3, r2
 8003ad6:	095b      	lsrs	r3, r3, #5
 8003ad8:	2064      	movs	r0, #100	@ 0x64
 8003ada:	fb00 f303 	mul.w	r3, r0, r3
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	011b      	lsls	r3, r3, #4
 8003ae2:	3332      	adds	r3, #50	@ 0x32
 8003ae4:	4a07      	ldr	r2, [pc, #28]	@ (8003b04 <UART_SetConfig+0x118>)
 8003ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8003aea:	095b      	lsrs	r3, r3, #5
 8003aec:	f003 020f 	and.w	r2, r3, #15
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	440a      	add	r2, r1
 8003af6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003af8:	bf00      	nop
 8003afa:	3710      	adds	r7, #16
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	40013800 	.word	0x40013800
 8003b04:	51eb851f 	.word	0x51eb851f

08003b08 <atoi>:
 8003b08:	220a      	movs	r2, #10
 8003b0a:	2100      	movs	r1, #0
 8003b0c:	f000 b928 	b.w	8003d60 <strtol>

08003b10 <sbrk_aligned>:
 8003b10:	b570      	push	{r4, r5, r6, lr}
 8003b12:	4e0f      	ldr	r6, [pc, #60]	@ (8003b50 <sbrk_aligned+0x40>)
 8003b14:	460c      	mov	r4, r1
 8003b16:	6831      	ldr	r1, [r6, #0]
 8003b18:	4605      	mov	r5, r0
 8003b1a:	b911      	cbnz	r1, 8003b22 <sbrk_aligned+0x12>
 8003b1c:	f000 fab0 	bl	8004080 <_sbrk_r>
 8003b20:	6030      	str	r0, [r6, #0]
 8003b22:	4621      	mov	r1, r4
 8003b24:	4628      	mov	r0, r5
 8003b26:	f000 faab 	bl	8004080 <_sbrk_r>
 8003b2a:	1c43      	adds	r3, r0, #1
 8003b2c:	d103      	bne.n	8003b36 <sbrk_aligned+0x26>
 8003b2e:	f04f 34ff 	mov.w	r4, #4294967295
 8003b32:	4620      	mov	r0, r4
 8003b34:	bd70      	pop	{r4, r5, r6, pc}
 8003b36:	1cc4      	adds	r4, r0, #3
 8003b38:	f024 0403 	bic.w	r4, r4, #3
 8003b3c:	42a0      	cmp	r0, r4
 8003b3e:	d0f8      	beq.n	8003b32 <sbrk_aligned+0x22>
 8003b40:	1a21      	subs	r1, r4, r0
 8003b42:	4628      	mov	r0, r5
 8003b44:	f000 fa9c 	bl	8004080 <_sbrk_r>
 8003b48:	3001      	adds	r0, #1
 8003b4a:	d1f2      	bne.n	8003b32 <sbrk_aligned+0x22>
 8003b4c:	e7ef      	b.n	8003b2e <sbrk_aligned+0x1e>
 8003b4e:	bf00      	nop
 8003b50:	200006c4 	.word	0x200006c4

08003b54 <_malloc_r>:
 8003b54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b58:	1ccd      	adds	r5, r1, #3
 8003b5a:	f025 0503 	bic.w	r5, r5, #3
 8003b5e:	3508      	adds	r5, #8
 8003b60:	2d0c      	cmp	r5, #12
 8003b62:	bf38      	it	cc
 8003b64:	250c      	movcc	r5, #12
 8003b66:	2d00      	cmp	r5, #0
 8003b68:	4606      	mov	r6, r0
 8003b6a:	db01      	blt.n	8003b70 <_malloc_r+0x1c>
 8003b6c:	42a9      	cmp	r1, r5
 8003b6e:	d904      	bls.n	8003b7a <_malloc_r+0x26>
 8003b70:	230c      	movs	r3, #12
 8003b72:	6033      	str	r3, [r6, #0]
 8003b74:	2000      	movs	r0, #0
 8003b76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b7a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003c50 <_malloc_r+0xfc>
 8003b7e:	f000 f869 	bl	8003c54 <__malloc_lock>
 8003b82:	f8d8 3000 	ldr.w	r3, [r8]
 8003b86:	461c      	mov	r4, r3
 8003b88:	bb44      	cbnz	r4, 8003bdc <_malloc_r+0x88>
 8003b8a:	4629      	mov	r1, r5
 8003b8c:	4630      	mov	r0, r6
 8003b8e:	f7ff ffbf 	bl	8003b10 <sbrk_aligned>
 8003b92:	1c43      	adds	r3, r0, #1
 8003b94:	4604      	mov	r4, r0
 8003b96:	d158      	bne.n	8003c4a <_malloc_r+0xf6>
 8003b98:	f8d8 4000 	ldr.w	r4, [r8]
 8003b9c:	4627      	mov	r7, r4
 8003b9e:	2f00      	cmp	r7, #0
 8003ba0:	d143      	bne.n	8003c2a <_malloc_r+0xd6>
 8003ba2:	2c00      	cmp	r4, #0
 8003ba4:	d04b      	beq.n	8003c3e <_malloc_r+0xea>
 8003ba6:	6823      	ldr	r3, [r4, #0]
 8003ba8:	4639      	mov	r1, r7
 8003baa:	4630      	mov	r0, r6
 8003bac:	eb04 0903 	add.w	r9, r4, r3
 8003bb0:	f000 fa66 	bl	8004080 <_sbrk_r>
 8003bb4:	4581      	cmp	r9, r0
 8003bb6:	d142      	bne.n	8003c3e <_malloc_r+0xea>
 8003bb8:	6821      	ldr	r1, [r4, #0]
 8003bba:	4630      	mov	r0, r6
 8003bbc:	1a6d      	subs	r5, r5, r1
 8003bbe:	4629      	mov	r1, r5
 8003bc0:	f7ff ffa6 	bl	8003b10 <sbrk_aligned>
 8003bc4:	3001      	adds	r0, #1
 8003bc6:	d03a      	beq.n	8003c3e <_malloc_r+0xea>
 8003bc8:	6823      	ldr	r3, [r4, #0]
 8003bca:	442b      	add	r3, r5
 8003bcc:	6023      	str	r3, [r4, #0]
 8003bce:	f8d8 3000 	ldr.w	r3, [r8]
 8003bd2:	685a      	ldr	r2, [r3, #4]
 8003bd4:	bb62      	cbnz	r2, 8003c30 <_malloc_r+0xdc>
 8003bd6:	f8c8 7000 	str.w	r7, [r8]
 8003bda:	e00f      	b.n	8003bfc <_malloc_r+0xa8>
 8003bdc:	6822      	ldr	r2, [r4, #0]
 8003bde:	1b52      	subs	r2, r2, r5
 8003be0:	d420      	bmi.n	8003c24 <_malloc_r+0xd0>
 8003be2:	2a0b      	cmp	r2, #11
 8003be4:	d917      	bls.n	8003c16 <_malloc_r+0xc2>
 8003be6:	1961      	adds	r1, r4, r5
 8003be8:	42a3      	cmp	r3, r4
 8003bea:	6025      	str	r5, [r4, #0]
 8003bec:	bf18      	it	ne
 8003bee:	6059      	strne	r1, [r3, #4]
 8003bf0:	6863      	ldr	r3, [r4, #4]
 8003bf2:	bf08      	it	eq
 8003bf4:	f8c8 1000 	streq.w	r1, [r8]
 8003bf8:	5162      	str	r2, [r4, r5]
 8003bfa:	604b      	str	r3, [r1, #4]
 8003bfc:	4630      	mov	r0, r6
 8003bfe:	f000 f82f 	bl	8003c60 <__malloc_unlock>
 8003c02:	f104 000b 	add.w	r0, r4, #11
 8003c06:	1d23      	adds	r3, r4, #4
 8003c08:	f020 0007 	bic.w	r0, r0, #7
 8003c0c:	1ac2      	subs	r2, r0, r3
 8003c0e:	bf1c      	itt	ne
 8003c10:	1a1b      	subne	r3, r3, r0
 8003c12:	50a3      	strne	r3, [r4, r2]
 8003c14:	e7af      	b.n	8003b76 <_malloc_r+0x22>
 8003c16:	6862      	ldr	r2, [r4, #4]
 8003c18:	42a3      	cmp	r3, r4
 8003c1a:	bf0c      	ite	eq
 8003c1c:	f8c8 2000 	streq.w	r2, [r8]
 8003c20:	605a      	strne	r2, [r3, #4]
 8003c22:	e7eb      	b.n	8003bfc <_malloc_r+0xa8>
 8003c24:	4623      	mov	r3, r4
 8003c26:	6864      	ldr	r4, [r4, #4]
 8003c28:	e7ae      	b.n	8003b88 <_malloc_r+0x34>
 8003c2a:	463c      	mov	r4, r7
 8003c2c:	687f      	ldr	r7, [r7, #4]
 8003c2e:	e7b6      	b.n	8003b9e <_malloc_r+0x4a>
 8003c30:	461a      	mov	r2, r3
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	42a3      	cmp	r3, r4
 8003c36:	d1fb      	bne.n	8003c30 <_malloc_r+0xdc>
 8003c38:	2300      	movs	r3, #0
 8003c3a:	6053      	str	r3, [r2, #4]
 8003c3c:	e7de      	b.n	8003bfc <_malloc_r+0xa8>
 8003c3e:	230c      	movs	r3, #12
 8003c40:	4630      	mov	r0, r6
 8003c42:	6033      	str	r3, [r6, #0]
 8003c44:	f000 f80c 	bl	8003c60 <__malloc_unlock>
 8003c48:	e794      	b.n	8003b74 <_malloc_r+0x20>
 8003c4a:	6005      	str	r5, [r0, #0]
 8003c4c:	e7d6      	b.n	8003bfc <_malloc_r+0xa8>
 8003c4e:	bf00      	nop
 8003c50:	200006c8 	.word	0x200006c8

08003c54 <__malloc_lock>:
 8003c54:	4801      	ldr	r0, [pc, #4]	@ (8003c5c <__malloc_lock+0x8>)
 8003c56:	f000 ba60 	b.w	800411a <__retarget_lock_acquire_recursive>
 8003c5a:	bf00      	nop
 8003c5c:	2000080c 	.word	0x2000080c

08003c60 <__malloc_unlock>:
 8003c60:	4801      	ldr	r0, [pc, #4]	@ (8003c68 <__malloc_unlock+0x8>)
 8003c62:	f000 ba5b 	b.w	800411c <__retarget_lock_release_recursive>
 8003c66:	bf00      	nop
 8003c68:	2000080c 	.word	0x2000080c

08003c6c <_strtol_l.constprop.0>:
 8003c6c:	2b24      	cmp	r3, #36	@ 0x24
 8003c6e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c72:	4686      	mov	lr, r0
 8003c74:	4690      	mov	r8, r2
 8003c76:	d801      	bhi.n	8003c7c <_strtol_l.constprop.0+0x10>
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d106      	bne.n	8003c8a <_strtol_l.constprop.0+0x1e>
 8003c7c:	f000 fa22 	bl	80040c4 <__errno>
 8003c80:	2316      	movs	r3, #22
 8003c82:	6003      	str	r3, [r0, #0]
 8003c84:	2000      	movs	r0, #0
 8003c86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c8a:	460d      	mov	r5, r1
 8003c8c:	4833      	ldr	r0, [pc, #204]	@ (8003d5c <_strtol_l.constprop.0+0xf0>)
 8003c8e:	462a      	mov	r2, r5
 8003c90:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003c94:	5d06      	ldrb	r6, [r0, r4]
 8003c96:	f016 0608 	ands.w	r6, r6, #8
 8003c9a:	d1f8      	bne.n	8003c8e <_strtol_l.constprop.0+0x22>
 8003c9c:	2c2d      	cmp	r4, #45	@ 0x2d
 8003c9e:	d12d      	bne.n	8003cfc <_strtol_l.constprop.0+0x90>
 8003ca0:	2601      	movs	r6, #1
 8003ca2:	782c      	ldrb	r4, [r5, #0]
 8003ca4:	1c95      	adds	r5, r2, #2
 8003ca6:	f033 0210 	bics.w	r2, r3, #16
 8003caa:	d109      	bne.n	8003cc0 <_strtol_l.constprop.0+0x54>
 8003cac:	2c30      	cmp	r4, #48	@ 0x30
 8003cae:	d12a      	bne.n	8003d06 <_strtol_l.constprop.0+0x9a>
 8003cb0:	782a      	ldrb	r2, [r5, #0]
 8003cb2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8003cb6:	2a58      	cmp	r2, #88	@ 0x58
 8003cb8:	d125      	bne.n	8003d06 <_strtol_l.constprop.0+0x9a>
 8003cba:	2310      	movs	r3, #16
 8003cbc:	786c      	ldrb	r4, [r5, #1]
 8003cbe:	3502      	adds	r5, #2
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8003cc6:	f10c 3cff 	add.w	ip, ip, #4294967295
 8003cca:	fbbc f9f3 	udiv	r9, ip, r3
 8003cce:	4610      	mov	r0, r2
 8003cd0:	fb03 ca19 	mls	sl, r3, r9, ip
 8003cd4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8003cd8:	2f09      	cmp	r7, #9
 8003cda:	d81b      	bhi.n	8003d14 <_strtol_l.constprop.0+0xa8>
 8003cdc:	463c      	mov	r4, r7
 8003cde:	42a3      	cmp	r3, r4
 8003ce0:	dd27      	ble.n	8003d32 <_strtol_l.constprop.0+0xc6>
 8003ce2:	1c57      	adds	r7, r2, #1
 8003ce4:	d007      	beq.n	8003cf6 <_strtol_l.constprop.0+0x8a>
 8003ce6:	4581      	cmp	r9, r0
 8003ce8:	d320      	bcc.n	8003d2c <_strtol_l.constprop.0+0xc0>
 8003cea:	d101      	bne.n	8003cf0 <_strtol_l.constprop.0+0x84>
 8003cec:	45a2      	cmp	sl, r4
 8003cee:	db1d      	blt.n	8003d2c <_strtol_l.constprop.0+0xc0>
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	fb00 4003 	mla	r0, r0, r3, r4
 8003cf6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003cfa:	e7eb      	b.n	8003cd4 <_strtol_l.constprop.0+0x68>
 8003cfc:	2c2b      	cmp	r4, #43	@ 0x2b
 8003cfe:	bf04      	itt	eq
 8003d00:	782c      	ldrbeq	r4, [r5, #0]
 8003d02:	1c95      	addeq	r5, r2, #2
 8003d04:	e7cf      	b.n	8003ca6 <_strtol_l.constprop.0+0x3a>
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d1da      	bne.n	8003cc0 <_strtol_l.constprop.0+0x54>
 8003d0a:	2c30      	cmp	r4, #48	@ 0x30
 8003d0c:	bf0c      	ite	eq
 8003d0e:	2308      	moveq	r3, #8
 8003d10:	230a      	movne	r3, #10
 8003d12:	e7d5      	b.n	8003cc0 <_strtol_l.constprop.0+0x54>
 8003d14:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8003d18:	2f19      	cmp	r7, #25
 8003d1a:	d801      	bhi.n	8003d20 <_strtol_l.constprop.0+0xb4>
 8003d1c:	3c37      	subs	r4, #55	@ 0x37
 8003d1e:	e7de      	b.n	8003cde <_strtol_l.constprop.0+0x72>
 8003d20:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8003d24:	2f19      	cmp	r7, #25
 8003d26:	d804      	bhi.n	8003d32 <_strtol_l.constprop.0+0xc6>
 8003d28:	3c57      	subs	r4, #87	@ 0x57
 8003d2a:	e7d8      	b.n	8003cde <_strtol_l.constprop.0+0x72>
 8003d2c:	f04f 32ff 	mov.w	r2, #4294967295
 8003d30:	e7e1      	b.n	8003cf6 <_strtol_l.constprop.0+0x8a>
 8003d32:	1c53      	adds	r3, r2, #1
 8003d34:	d108      	bne.n	8003d48 <_strtol_l.constprop.0+0xdc>
 8003d36:	2322      	movs	r3, #34	@ 0x22
 8003d38:	4660      	mov	r0, ip
 8003d3a:	f8ce 3000 	str.w	r3, [lr]
 8003d3e:	f1b8 0f00 	cmp.w	r8, #0
 8003d42:	d0a0      	beq.n	8003c86 <_strtol_l.constprop.0+0x1a>
 8003d44:	1e69      	subs	r1, r5, #1
 8003d46:	e006      	b.n	8003d56 <_strtol_l.constprop.0+0xea>
 8003d48:	b106      	cbz	r6, 8003d4c <_strtol_l.constprop.0+0xe0>
 8003d4a:	4240      	negs	r0, r0
 8003d4c:	f1b8 0f00 	cmp.w	r8, #0
 8003d50:	d099      	beq.n	8003c86 <_strtol_l.constprop.0+0x1a>
 8003d52:	2a00      	cmp	r2, #0
 8003d54:	d1f6      	bne.n	8003d44 <_strtol_l.constprop.0+0xd8>
 8003d56:	f8c8 1000 	str.w	r1, [r8]
 8003d5a:	e794      	b.n	8003c86 <_strtol_l.constprop.0+0x1a>
 8003d5c:	08004f7f 	.word	0x08004f7f

08003d60 <strtol>:
 8003d60:	4613      	mov	r3, r2
 8003d62:	460a      	mov	r2, r1
 8003d64:	4601      	mov	r1, r0
 8003d66:	4802      	ldr	r0, [pc, #8]	@ (8003d70 <strtol+0x10>)
 8003d68:	6800      	ldr	r0, [r0, #0]
 8003d6a:	f7ff bf7f 	b.w	8003c6c <_strtol_l.constprop.0>
 8003d6e:	bf00      	nop
 8003d70:	20000018 	.word	0x20000018

08003d74 <std>:
 8003d74:	2300      	movs	r3, #0
 8003d76:	b510      	push	{r4, lr}
 8003d78:	4604      	mov	r4, r0
 8003d7a:	e9c0 3300 	strd	r3, r3, [r0]
 8003d7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003d82:	6083      	str	r3, [r0, #8]
 8003d84:	8181      	strh	r1, [r0, #12]
 8003d86:	6643      	str	r3, [r0, #100]	@ 0x64
 8003d88:	81c2      	strh	r2, [r0, #14]
 8003d8a:	6183      	str	r3, [r0, #24]
 8003d8c:	4619      	mov	r1, r3
 8003d8e:	2208      	movs	r2, #8
 8003d90:	305c      	adds	r0, #92	@ 0x5c
 8003d92:	f000 f927 	bl	8003fe4 <memset>
 8003d96:	4b0d      	ldr	r3, [pc, #52]	@ (8003dcc <std+0x58>)
 8003d98:	6224      	str	r4, [r4, #32]
 8003d9a:	6263      	str	r3, [r4, #36]	@ 0x24
 8003d9c:	4b0c      	ldr	r3, [pc, #48]	@ (8003dd0 <std+0x5c>)
 8003d9e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003da0:	4b0c      	ldr	r3, [pc, #48]	@ (8003dd4 <std+0x60>)
 8003da2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003da4:	4b0c      	ldr	r3, [pc, #48]	@ (8003dd8 <std+0x64>)
 8003da6:	6323      	str	r3, [r4, #48]	@ 0x30
 8003da8:	4b0c      	ldr	r3, [pc, #48]	@ (8003ddc <std+0x68>)
 8003daa:	429c      	cmp	r4, r3
 8003dac:	d006      	beq.n	8003dbc <std+0x48>
 8003dae:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003db2:	4294      	cmp	r4, r2
 8003db4:	d002      	beq.n	8003dbc <std+0x48>
 8003db6:	33d0      	adds	r3, #208	@ 0xd0
 8003db8:	429c      	cmp	r4, r3
 8003dba:	d105      	bne.n	8003dc8 <std+0x54>
 8003dbc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003dc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003dc4:	f000 b9a8 	b.w	8004118 <__retarget_lock_init_recursive>
 8003dc8:	bd10      	pop	{r4, pc}
 8003dca:	bf00      	nop
 8003dcc:	08003f1d 	.word	0x08003f1d
 8003dd0:	08003f3f 	.word	0x08003f3f
 8003dd4:	08003f77 	.word	0x08003f77
 8003dd8:	08003f9b 	.word	0x08003f9b
 8003ddc:	200006cc 	.word	0x200006cc

08003de0 <stdio_exit_handler>:
 8003de0:	4a02      	ldr	r2, [pc, #8]	@ (8003dec <stdio_exit_handler+0xc>)
 8003de2:	4903      	ldr	r1, [pc, #12]	@ (8003df0 <stdio_exit_handler+0x10>)
 8003de4:	4803      	ldr	r0, [pc, #12]	@ (8003df4 <stdio_exit_handler+0x14>)
 8003de6:	f000 b869 	b.w	8003ebc <_fwalk_sglue>
 8003dea:	bf00      	nop
 8003dec:	2000000c 	.word	0x2000000c
 8003df0:	08004b05 	.word	0x08004b05
 8003df4:	2000001c 	.word	0x2000001c

08003df8 <cleanup_stdio>:
 8003df8:	6841      	ldr	r1, [r0, #4]
 8003dfa:	4b0c      	ldr	r3, [pc, #48]	@ (8003e2c <cleanup_stdio+0x34>)
 8003dfc:	b510      	push	{r4, lr}
 8003dfe:	4299      	cmp	r1, r3
 8003e00:	4604      	mov	r4, r0
 8003e02:	d001      	beq.n	8003e08 <cleanup_stdio+0x10>
 8003e04:	f000 fe7e 	bl	8004b04 <_fflush_r>
 8003e08:	68a1      	ldr	r1, [r4, #8]
 8003e0a:	4b09      	ldr	r3, [pc, #36]	@ (8003e30 <cleanup_stdio+0x38>)
 8003e0c:	4299      	cmp	r1, r3
 8003e0e:	d002      	beq.n	8003e16 <cleanup_stdio+0x1e>
 8003e10:	4620      	mov	r0, r4
 8003e12:	f000 fe77 	bl	8004b04 <_fflush_r>
 8003e16:	68e1      	ldr	r1, [r4, #12]
 8003e18:	4b06      	ldr	r3, [pc, #24]	@ (8003e34 <cleanup_stdio+0x3c>)
 8003e1a:	4299      	cmp	r1, r3
 8003e1c:	d004      	beq.n	8003e28 <cleanup_stdio+0x30>
 8003e1e:	4620      	mov	r0, r4
 8003e20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e24:	f000 be6e 	b.w	8004b04 <_fflush_r>
 8003e28:	bd10      	pop	{r4, pc}
 8003e2a:	bf00      	nop
 8003e2c:	200006cc 	.word	0x200006cc
 8003e30:	20000734 	.word	0x20000734
 8003e34:	2000079c 	.word	0x2000079c

08003e38 <global_stdio_init.part.0>:
 8003e38:	b510      	push	{r4, lr}
 8003e3a:	4b0b      	ldr	r3, [pc, #44]	@ (8003e68 <global_stdio_init.part.0+0x30>)
 8003e3c:	4c0b      	ldr	r4, [pc, #44]	@ (8003e6c <global_stdio_init.part.0+0x34>)
 8003e3e:	4a0c      	ldr	r2, [pc, #48]	@ (8003e70 <global_stdio_init.part.0+0x38>)
 8003e40:	4620      	mov	r0, r4
 8003e42:	601a      	str	r2, [r3, #0]
 8003e44:	2104      	movs	r1, #4
 8003e46:	2200      	movs	r2, #0
 8003e48:	f7ff ff94 	bl	8003d74 <std>
 8003e4c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003e50:	2201      	movs	r2, #1
 8003e52:	2109      	movs	r1, #9
 8003e54:	f7ff ff8e 	bl	8003d74 <std>
 8003e58:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003e5c:	2202      	movs	r2, #2
 8003e5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e62:	2112      	movs	r1, #18
 8003e64:	f7ff bf86 	b.w	8003d74 <std>
 8003e68:	20000804 	.word	0x20000804
 8003e6c:	200006cc 	.word	0x200006cc
 8003e70:	08003de1 	.word	0x08003de1

08003e74 <__sfp_lock_acquire>:
 8003e74:	4801      	ldr	r0, [pc, #4]	@ (8003e7c <__sfp_lock_acquire+0x8>)
 8003e76:	f000 b950 	b.w	800411a <__retarget_lock_acquire_recursive>
 8003e7a:	bf00      	nop
 8003e7c:	2000080d 	.word	0x2000080d

08003e80 <__sfp_lock_release>:
 8003e80:	4801      	ldr	r0, [pc, #4]	@ (8003e88 <__sfp_lock_release+0x8>)
 8003e82:	f000 b94b 	b.w	800411c <__retarget_lock_release_recursive>
 8003e86:	bf00      	nop
 8003e88:	2000080d 	.word	0x2000080d

08003e8c <__sinit>:
 8003e8c:	b510      	push	{r4, lr}
 8003e8e:	4604      	mov	r4, r0
 8003e90:	f7ff fff0 	bl	8003e74 <__sfp_lock_acquire>
 8003e94:	6a23      	ldr	r3, [r4, #32]
 8003e96:	b11b      	cbz	r3, 8003ea0 <__sinit+0x14>
 8003e98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e9c:	f7ff bff0 	b.w	8003e80 <__sfp_lock_release>
 8003ea0:	4b04      	ldr	r3, [pc, #16]	@ (8003eb4 <__sinit+0x28>)
 8003ea2:	6223      	str	r3, [r4, #32]
 8003ea4:	4b04      	ldr	r3, [pc, #16]	@ (8003eb8 <__sinit+0x2c>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d1f5      	bne.n	8003e98 <__sinit+0xc>
 8003eac:	f7ff ffc4 	bl	8003e38 <global_stdio_init.part.0>
 8003eb0:	e7f2      	b.n	8003e98 <__sinit+0xc>
 8003eb2:	bf00      	nop
 8003eb4:	08003df9 	.word	0x08003df9
 8003eb8:	20000804 	.word	0x20000804

08003ebc <_fwalk_sglue>:
 8003ebc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ec0:	4607      	mov	r7, r0
 8003ec2:	4688      	mov	r8, r1
 8003ec4:	4614      	mov	r4, r2
 8003ec6:	2600      	movs	r6, #0
 8003ec8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003ecc:	f1b9 0901 	subs.w	r9, r9, #1
 8003ed0:	d505      	bpl.n	8003ede <_fwalk_sglue+0x22>
 8003ed2:	6824      	ldr	r4, [r4, #0]
 8003ed4:	2c00      	cmp	r4, #0
 8003ed6:	d1f7      	bne.n	8003ec8 <_fwalk_sglue+0xc>
 8003ed8:	4630      	mov	r0, r6
 8003eda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ede:	89ab      	ldrh	r3, [r5, #12]
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d907      	bls.n	8003ef4 <_fwalk_sglue+0x38>
 8003ee4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003ee8:	3301      	adds	r3, #1
 8003eea:	d003      	beq.n	8003ef4 <_fwalk_sglue+0x38>
 8003eec:	4629      	mov	r1, r5
 8003eee:	4638      	mov	r0, r7
 8003ef0:	47c0      	blx	r8
 8003ef2:	4306      	orrs	r6, r0
 8003ef4:	3568      	adds	r5, #104	@ 0x68
 8003ef6:	e7e9      	b.n	8003ecc <_fwalk_sglue+0x10>

08003ef8 <iprintf>:
 8003ef8:	b40f      	push	{r0, r1, r2, r3}
 8003efa:	b507      	push	{r0, r1, r2, lr}
 8003efc:	4906      	ldr	r1, [pc, #24]	@ (8003f18 <iprintf+0x20>)
 8003efe:	ab04      	add	r3, sp, #16
 8003f00:	6808      	ldr	r0, [r1, #0]
 8003f02:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f06:	6881      	ldr	r1, [r0, #8]
 8003f08:	9301      	str	r3, [sp, #4]
 8003f0a:	f000 fad1 	bl	80044b0 <_vfiprintf_r>
 8003f0e:	b003      	add	sp, #12
 8003f10:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f14:	b004      	add	sp, #16
 8003f16:	4770      	bx	lr
 8003f18:	20000018 	.word	0x20000018

08003f1c <__sread>:
 8003f1c:	b510      	push	{r4, lr}
 8003f1e:	460c      	mov	r4, r1
 8003f20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f24:	f000 f89a 	bl	800405c <_read_r>
 8003f28:	2800      	cmp	r0, #0
 8003f2a:	bfab      	itete	ge
 8003f2c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003f2e:	89a3      	ldrhlt	r3, [r4, #12]
 8003f30:	181b      	addge	r3, r3, r0
 8003f32:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003f36:	bfac      	ite	ge
 8003f38:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003f3a:	81a3      	strhlt	r3, [r4, #12]
 8003f3c:	bd10      	pop	{r4, pc}

08003f3e <__swrite>:
 8003f3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f42:	461f      	mov	r7, r3
 8003f44:	898b      	ldrh	r3, [r1, #12]
 8003f46:	4605      	mov	r5, r0
 8003f48:	05db      	lsls	r3, r3, #23
 8003f4a:	460c      	mov	r4, r1
 8003f4c:	4616      	mov	r6, r2
 8003f4e:	d505      	bpl.n	8003f5c <__swrite+0x1e>
 8003f50:	2302      	movs	r3, #2
 8003f52:	2200      	movs	r2, #0
 8003f54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f58:	f000 f86e 	bl	8004038 <_lseek_r>
 8003f5c:	89a3      	ldrh	r3, [r4, #12]
 8003f5e:	4632      	mov	r2, r6
 8003f60:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003f64:	81a3      	strh	r3, [r4, #12]
 8003f66:	4628      	mov	r0, r5
 8003f68:	463b      	mov	r3, r7
 8003f6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f72:	f000 b895 	b.w	80040a0 <_write_r>

08003f76 <__sseek>:
 8003f76:	b510      	push	{r4, lr}
 8003f78:	460c      	mov	r4, r1
 8003f7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f7e:	f000 f85b 	bl	8004038 <_lseek_r>
 8003f82:	1c43      	adds	r3, r0, #1
 8003f84:	89a3      	ldrh	r3, [r4, #12]
 8003f86:	bf15      	itete	ne
 8003f88:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003f8a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003f8e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003f92:	81a3      	strheq	r3, [r4, #12]
 8003f94:	bf18      	it	ne
 8003f96:	81a3      	strhne	r3, [r4, #12]
 8003f98:	bd10      	pop	{r4, pc}

08003f9a <__sclose>:
 8003f9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f9e:	f000 b83b 	b.w	8004018 <_close_r>
	...

08003fa4 <_vsiprintf_r>:
 8003fa4:	b500      	push	{lr}
 8003fa6:	b09b      	sub	sp, #108	@ 0x6c
 8003fa8:	9100      	str	r1, [sp, #0]
 8003faa:	9104      	str	r1, [sp, #16]
 8003fac:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003fb0:	9105      	str	r1, [sp, #20]
 8003fb2:	9102      	str	r1, [sp, #8]
 8003fb4:	4905      	ldr	r1, [pc, #20]	@ (8003fcc <_vsiprintf_r+0x28>)
 8003fb6:	9103      	str	r1, [sp, #12]
 8003fb8:	4669      	mov	r1, sp
 8003fba:	f000 f955 	bl	8004268 <_svfiprintf_r>
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	9b00      	ldr	r3, [sp, #0]
 8003fc2:	701a      	strb	r2, [r3, #0]
 8003fc4:	b01b      	add	sp, #108	@ 0x6c
 8003fc6:	f85d fb04 	ldr.w	pc, [sp], #4
 8003fca:	bf00      	nop
 8003fcc:	ffff0208 	.word	0xffff0208

08003fd0 <vsiprintf>:
 8003fd0:	4613      	mov	r3, r2
 8003fd2:	460a      	mov	r2, r1
 8003fd4:	4601      	mov	r1, r0
 8003fd6:	4802      	ldr	r0, [pc, #8]	@ (8003fe0 <vsiprintf+0x10>)
 8003fd8:	6800      	ldr	r0, [r0, #0]
 8003fda:	f7ff bfe3 	b.w	8003fa4 <_vsiprintf_r>
 8003fde:	bf00      	nop
 8003fe0:	20000018 	.word	0x20000018

08003fe4 <memset>:
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	4402      	add	r2, r0
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d100      	bne.n	8003fee <memset+0xa>
 8003fec:	4770      	bx	lr
 8003fee:	f803 1b01 	strb.w	r1, [r3], #1
 8003ff2:	e7f9      	b.n	8003fe8 <memset+0x4>

08003ff4 <strncmp>:
 8003ff4:	b510      	push	{r4, lr}
 8003ff6:	b16a      	cbz	r2, 8004014 <strncmp+0x20>
 8003ff8:	3901      	subs	r1, #1
 8003ffa:	1884      	adds	r4, r0, r2
 8003ffc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004000:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8004004:	429a      	cmp	r2, r3
 8004006:	d103      	bne.n	8004010 <strncmp+0x1c>
 8004008:	42a0      	cmp	r0, r4
 800400a:	d001      	beq.n	8004010 <strncmp+0x1c>
 800400c:	2a00      	cmp	r2, #0
 800400e:	d1f5      	bne.n	8003ffc <strncmp+0x8>
 8004010:	1ad0      	subs	r0, r2, r3
 8004012:	bd10      	pop	{r4, pc}
 8004014:	4610      	mov	r0, r2
 8004016:	e7fc      	b.n	8004012 <strncmp+0x1e>

08004018 <_close_r>:
 8004018:	b538      	push	{r3, r4, r5, lr}
 800401a:	2300      	movs	r3, #0
 800401c:	4d05      	ldr	r5, [pc, #20]	@ (8004034 <_close_r+0x1c>)
 800401e:	4604      	mov	r4, r0
 8004020:	4608      	mov	r0, r1
 8004022:	602b      	str	r3, [r5, #0]
 8004024:	f7fc ff6d 	bl	8000f02 <_close>
 8004028:	1c43      	adds	r3, r0, #1
 800402a:	d102      	bne.n	8004032 <_close_r+0x1a>
 800402c:	682b      	ldr	r3, [r5, #0]
 800402e:	b103      	cbz	r3, 8004032 <_close_r+0x1a>
 8004030:	6023      	str	r3, [r4, #0]
 8004032:	bd38      	pop	{r3, r4, r5, pc}
 8004034:	20000808 	.word	0x20000808

08004038 <_lseek_r>:
 8004038:	b538      	push	{r3, r4, r5, lr}
 800403a:	4604      	mov	r4, r0
 800403c:	4608      	mov	r0, r1
 800403e:	4611      	mov	r1, r2
 8004040:	2200      	movs	r2, #0
 8004042:	4d05      	ldr	r5, [pc, #20]	@ (8004058 <_lseek_r+0x20>)
 8004044:	602a      	str	r2, [r5, #0]
 8004046:	461a      	mov	r2, r3
 8004048:	f7fc ff7f 	bl	8000f4a <_lseek>
 800404c:	1c43      	adds	r3, r0, #1
 800404e:	d102      	bne.n	8004056 <_lseek_r+0x1e>
 8004050:	682b      	ldr	r3, [r5, #0]
 8004052:	b103      	cbz	r3, 8004056 <_lseek_r+0x1e>
 8004054:	6023      	str	r3, [r4, #0]
 8004056:	bd38      	pop	{r3, r4, r5, pc}
 8004058:	20000808 	.word	0x20000808

0800405c <_read_r>:
 800405c:	b538      	push	{r3, r4, r5, lr}
 800405e:	4604      	mov	r4, r0
 8004060:	4608      	mov	r0, r1
 8004062:	4611      	mov	r1, r2
 8004064:	2200      	movs	r2, #0
 8004066:	4d05      	ldr	r5, [pc, #20]	@ (800407c <_read_r+0x20>)
 8004068:	602a      	str	r2, [r5, #0]
 800406a:	461a      	mov	r2, r3
 800406c:	f7fc ff10 	bl	8000e90 <_read>
 8004070:	1c43      	adds	r3, r0, #1
 8004072:	d102      	bne.n	800407a <_read_r+0x1e>
 8004074:	682b      	ldr	r3, [r5, #0]
 8004076:	b103      	cbz	r3, 800407a <_read_r+0x1e>
 8004078:	6023      	str	r3, [r4, #0]
 800407a:	bd38      	pop	{r3, r4, r5, pc}
 800407c:	20000808 	.word	0x20000808

08004080 <_sbrk_r>:
 8004080:	b538      	push	{r3, r4, r5, lr}
 8004082:	2300      	movs	r3, #0
 8004084:	4d05      	ldr	r5, [pc, #20]	@ (800409c <_sbrk_r+0x1c>)
 8004086:	4604      	mov	r4, r0
 8004088:	4608      	mov	r0, r1
 800408a:	602b      	str	r3, [r5, #0]
 800408c:	f7fc ff6a 	bl	8000f64 <_sbrk>
 8004090:	1c43      	adds	r3, r0, #1
 8004092:	d102      	bne.n	800409a <_sbrk_r+0x1a>
 8004094:	682b      	ldr	r3, [r5, #0]
 8004096:	b103      	cbz	r3, 800409a <_sbrk_r+0x1a>
 8004098:	6023      	str	r3, [r4, #0]
 800409a:	bd38      	pop	{r3, r4, r5, pc}
 800409c:	20000808 	.word	0x20000808

080040a0 <_write_r>:
 80040a0:	b538      	push	{r3, r4, r5, lr}
 80040a2:	4604      	mov	r4, r0
 80040a4:	4608      	mov	r0, r1
 80040a6:	4611      	mov	r1, r2
 80040a8:	2200      	movs	r2, #0
 80040aa:	4d05      	ldr	r5, [pc, #20]	@ (80040c0 <_write_r+0x20>)
 80040ac:	602a      	str	r2, [r5, #0]
 80040ae:	461a      	mov	r2, r3
 80040b0:	f7fc ff0b 	bl	8000eca <_write>
 80040b4:	1c43      	adds	r3, r0, #1
 80040b6:	d102      	bne.n	80040be <_write_r+0x1e>
 80040b8:	682b      	ldr	r3, [r5, #0]
 80040ba:	b103      	cbz	r3, 80040be <_write_r+0x1e>
 80040bc:	6023      	str	r3, [r4, #0]
 80040be:	bd38      	pop	{r3, r4, r5, pc}
 80040c0:	20000808 	.word	0x20000808

080040c4 <__errno>:
 80040c4:	4b01      	ldr	r3, [pc, #4]	@ (80040cc <__errno+0x8>)
 80040c6:	6818      	ldr	r0, [r3, #0]
 80040c8:	4770      	bx	lr
 80040ca:	bf00      	nop
 80040cc:	20000018 	.word	0x20000018

080040d0 <__libc_init_array>:
 80040d0:	b570      	push	{r4, r5, r6, lr}
 80040d2:	2600      	movs	r6, #0
 80040d4:	4d0c      	ldr	r5, [pc, #48]	@ (8004108 <__libc_init_array+0x38>)
 80040d6:	4c0d      	ldr	r4, [pc, #52]	@ (800410c <__libc_init_array+0x3c>)
 80040d8:	1b64      	subs	r4, r4, r5
 80040da:	10a4      	asrs	r4, r4, #2
 80040dc:	42a6      	cmp	r6, r4
 80040de:	d109      	bne.n	80040f4 <__libc_init_array+0x24>
 80040e0:	f000 febc 	bl	8004e5c <_init>
 80040e4:	2600      	movs	r6, #0
 80040e6:	4d0a      	ldr	r5, [pc, #40]	@ (8004110 <__libc_init_array+0x40>)
 80040e8:	4c0a      	ldr	r4, [pc, #40]	@ (8004114 <__libc_init_array+0x44>)
 80040ea:	1b64      	subs	r4, r4, r5
 80040ec:	10a4      	asrs	r4, r4, #2
 80040ee:	42a6      	cmp	r6, r4
 80040f0:	d105      	bne.n	80040fe <__libc_init_array+0x2e>
 80040f2:	bd70      	pop	{r4, r5, r6, pc}
 80040f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80040f8:	4798      	blx	r3
 80040fa:	3601      	adds	r6, #1
 80040fc:	e7ee      	b.n	80040dc <__libc_init_array+0xc>
 80040fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8004102:	4798      	blx	r3
 8004104:	3601      	adds	r6, #1
 8004106:	e7f2      	b.n	80040ee <__libc_init_array+0x1e>
 8004108:	080050bc 	.word	0x080050bc
 800410c:	080050bc 	.word	0x080050bc
 8004110:	080050bc 	.word	0x080050bc
 8004114:	080050c0 	.word	0x080050c0

08004118 <__retarget_lock_init_recursive>:
 8004118:	4770      	bx	lr

0800411a <__retarget_lock_acquire_recursive>:
 800411a:	4770      	bx	lr

0800411c <__retarget_lock_release_recursive>:
 800411c:	4770      	bx	lr
	...

08004120 <_free_r>:
 8004120:	b538      	push	{r3, r4, r5, lr}
 8004122:	4605      	mov	r5, r0
 8004124:	2900      	cmp	r1, #0
 8004126:	d040      	beq.n	80041aa <_free_r+0x8a>
 8004128:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800412c:	1f0c      	subs	r4, r1, #4
 800412e:	2b00      	cmp	r3, #0
 8004130:	bfb8      	it	lt
 8004132:	18e4      	addlt	r4, r4, r3
 8004134:	f7ff fd8e 	bl	8003c54 <__malloc_lock>
 8004138:	4a1c      	ldr	r2, [pc, #112]	@ (80041ac <_free_r+0x8c>)
 800413a:	6813      	ldr	r3, [r2, #0]
 800413c:	b933      	cbnz	r3, 800414c <_free_r+0x2c>
 800413e:	6063      	str	r3, [r4, #4]
 8004140:	6014      	str	r4, [r2, #0]
 8004142:	4628      	mov	r0, r5
 8004144:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004148:	f7ff bd8a 	b.w	8003c60 <__malloc_unlock>
 800414c:	42a3      	cmp	r3, r4
 800414e:	d908      	bls.n	8004162 <_free_r+0x42>
 8004150:	6820      	ldr	r0, [r4, #0]
 8004152:	1821      	adds	r1, r4, r0
 8004154:	428b      	cmp	r3, r1
 8004156:	bf01      	itttt	eq
 8004158:	6819      	ldreq	r1, [r3, #0]
 800415a:	685b      	ldreq	r3, [r3, #4]
 800415c:	1809      	addeq	r1, r1, r0
 800415e:	6021      	streq	r1, [r4, #0]
 8004160:	e7ed      	b.n	800413e <_free_r+0x1e>
 8004162:	461a      	mov	r2, r3
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	b10b      	cbz	r3, 800416c <_free_r+0x4c>
 8004168:	42a3      	cmp	r3, r4
 800416a:	d9fa      	bls.n	8004162 <_free_r+0x42>
 800416c:	6811      	ldr	r1, [r2, #0]
 800416e:	1850      	adds	r0, r2, r1
 8004170:	42a0      	cmp	r0, r4
 8004172:	d10b      	bne.n	800418c <_free_r+0x6c>
 8004174:	6820      	ldr	r0, [r4, #0]
 8004176:	4401      	add	r1, r0
 8004178:	1850      	adds	r0, r2, r1
 800417a:	4283      	cmp	r3, r0
 800417c:	6011      	str	r1, [r2, #0]
 800417e:	d1e0      	bne.n	8004142 <_free_r+0x22>
 8004180:	6818      	ldr	r0, [r3, #0]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	4408      	add	r0, r1
 8004186:	6010      	str	r0, [r2, #0]
 8004188:	6053      	str	r3, [r2, #4]
 800418a:	e7da      	b.n	8004142 <_free_r+0x22>
 800418c:	d902      	bls.n	8004194 <_free_r+0x74>
 800418e:	230c      	movs	r3, #12
 8004190:	602b      	str	r3, [r5, #0]
 8004192:	e7d6      	b.n	8004142 <_free_r+0x22>
 8004194:	6820      	ldr	r0, [r4, #0]
 8004196:	1821      	adds	r1, r4, r0
 8004198:	428b      	cmp	r3, r1
 800419a:	bf01      	itttt	eq
 800419c:	6819      	ldreq	r1, [r3, #0]
 800419e:	685b      	ldreq	r3, [r3, #4]
 80041a0:	1809      	addeq	r1, r1, r0
 80041a2:	6021      	streq	r1, [r4, #0]
 80041a4:	6063      	str	r3, [r4, #4]
 80041a6:	6054      	str	r4, [r2, #4]
 80041a8:	e7cb      	b.n	8004142 <_free_r+0x22>
 80041aa:	bd38      	pop	{r3, r4, r5, pc}
 80041ac:	200006c8 	.word	0x200006c8

080041b0 <__ssputs_r>:
 80041b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041b4:	461f      	mov	r7, r3
 80041b6:	688e      	ldr	r6, [r1, #8]
 80041b8:	4682      	mov	sl, r0
 80041ba:	42be      	cmp	r6, r7
 80041bc:	460c      	mov	r4, r1
 80041be:	4690      	mov	r8, r2
 80041c0:	680b      	ldr	r3, [r1, #0]
 80041c2:	d82d      	bhi.n	8004220 <__ssputs_r+0x70>
 80041c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80041c8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80041cc:	d026      	beq.n	800421c <__ssputs_r+0x6c>
 80041ce:	6965      	ldr	r5, [r4, #20]
 80041d0:	6909      	ldr	r1, [r1, #16]
 80041d2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80041d6:	eba3 0901 	sub.w	r9, r3, r1
 80041da:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80041de:	1c7b      	adds	r3, r7, #1
 80041e0:	444b      	add	r3, r9
 80041e2:	106d      	asrs	r5, r5, #1
 80041e4:	429d      	cmp	r5, r3
 80041e6:	bf38      	it	cc
 80041e8:	461d      	movcc	r5, r3
 80041ea:	0553      	lsls	r3, r2, #21
 80041ec:	d527      	bpl.n	800423e <__ssputs_r+0x8e>
 80041ee:	4629      	mov	r1, r5
 80041f0:	f7ff fcb0 	bl	8003b54 <_malloc_r>
 80041f4:	4606      	mov	r6, r0
 80041f6:	b360      	cbz	r0, 8004252 <__ssputs_r+0xa2>
 80041f8:	464a      	mov	r2, r9
 80041fa:	6921      	ldr	r1, [r4, #16]
 80041fc:	f000 fd66 	bl	8004ccc <memcpy>
 8004200:	89a3      	ldrh	r3, [r4, #12]
 8004202:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004206:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800420a:	81a3      	strh	r3, [r4, #12]
 800420c:	6126      	str	r6, [r4, #16]
 800420e:	444e      	add	r6, r9
 8004210:	6026      	str	r6, [r4, #0]
 8004212:	463e      	mov	r6, r7
 8004214:	6165      	str	r5, [r4, #20]
 8004216:	eba5 0509 	sub.w	r5, r5, r9
 800421a:	60a5      	str	r5, [r4, #8]
 800421c:	42be      	cmp	r6, r7
 800421e:	d900      	bls.n	8004222 <__ssputs_r+0x72>
 8004220:	463e      	mov	r6, r7
 8004222:	4632      	mov	r2, r6
 8004224:	4641      	mov	r1, r8
 8004226:	6820      	ldr	r0, [r4, #0]
 8004228:	f000 fd28 	bl	8004c7c <memmove>
 800422c:	2000      	movs	r0, #0
 800422e:	68a3      	ldr	r3, [r4, #8]
 8004230:	1b9b      	subs	r3, r3, r6
 8004232:	60a3      	str	r3, [r4, #8]
 8004234:	6823      	ldr	r3, [r4, #0]
 8004236:	4433      	add	r3, r6
 8004238:	6023      	str	r3, [r4, #0]
 800423a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800423e:	462a      	mov	r2, r5
 8004240:	f000 fd52 	bl	8004ce8 <_realloc_r>
 8004244:	4606      	mov	r6, r0
 8004246:	2800      	cmp	r0, #0
 8004248:	d1e0      	bne.n	800420c <__ssputs_r+0x5c>
 800424a:	4650      	mov	r0, sl
 800424c:	6921      	ldr	r1, [r4, #16]
 800424e:	f7ff ff67 	bl	8004120 <_free_r>
 8004252:	230c      	movs	r3, #12
 8004254:	f8ca 3000 	str.w	r3, [sl]
 8004258:	89a3      	ldrh	r3, [r4, #12]
 800425a:	f04f 30ff 	mov.w	r0, #4294967295
 800425e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004262:	81a3      	strh	r3, [r4, #12]
 8004264:	e7e9      	b.n	800423a <__ssputs_r+0x8a>
	...

08004268 <_svfiprintf_r>:
 8004268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800426c:	4698      	mov	r8, r3
 800426e:	898b      	ldrh	r3, [r1, #12]
 8004270:	4607      	mov	r7, r0
 8004272:	061b      	lsls	r3, r3, #24
 8004274:	460d      	mov	r5, r1
 8004276:	4614      	mov	r4, r2
 8004278:	b09d      	sub	sp, #116	@ 0x74
 800427a:	d510      	bpl.n	800429e <_svfiprintf_r+0x36>
 800427c:	690b      	ldr	r3, [r1, #16]
 800427e:	b973      	cbnz	r3, 800429e <_svfiprintf_r+0x36>
 8004280:	2140      	movs	r1, #64	@ 0x40
 8004282:	f7ff fc67 	bl	8003b54 <_malloc_r>
 8004286:	6028      	str	r0, [r5, #0]
 8004288:	6128      	str	r0, [r5, #16]
 800428a:	b930      	cbnz	r0, 800429a <_svfiprintf_r+0x32>
 800428c:	230c      	movs	r3, #12
 800428e:	603b      	str	r3, [r7, #0]
 8004290:	f04f 30ff 	mov.w	r0, #4294967295
 8004294:	b01d      	add	sp, #116	@ 0x74
 8004296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800429a:	2340      	movs	r3, #64	@ 0x40
 800429c:	616b      	str	r3, [r5, #20]
 800429e:	2300      	movs	r3, #0
 80042a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80042a2:	2320      	movs	r3, #32
 80042a4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80042a8:	2330      	movs	r3, #48	@ 0x30
 80042aa:	f04f 0901 	mov.w	r9, #1
 80042ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80042b2:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800444c <_svfiprintf_r+0x1e4>
 80042b6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80042ba:	4623      	mov	r3, r4
 80042bc:	469a      	mov	sl, r3
 80042be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80042c2:	b10a      	cbz	r2, 80042c8 <_svfiprintf_r+0x60>
 80042c4:	2a25      	cmp	r2, #37	@ 0x25
 80042c6:	d1f9      	bne.n	80042bc <_svfiprintf_r+0x54>
 80042c8:	ebba 0b04 	subs.w	fp, sl, r4
 80042cc:	d00b      	beq.n	80042e6 <_svfiprintf_r+0x7e>
 80042ce:	465b      	mov	r3, fp
 80042d0:	4622      	mov	r2, r4
 80042d2:	4629      	mov	r1, r5
 80042d4:	4638      	mov	r0, r7
 80042d6:	f7ff ff6b 	bl	80041b0 <__ssputs_r>
 80042da:	3001      	adds	r0, #1
 80042dc:	f000 80a7 	beq.w	800442e <_svfiprintf_r+0x1c6>
 80042e0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80042e2:	445a      	add	r2, fp
 80042e4:	9209      	str	r2, [sp, #36]	@ 0x24
 80042e6:	f89a 3000 	ldrb.w	r3, [sl]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	f000 809f 	beq.w	800442e <_svfiprintf_r+0x1c6>
 80042f0:	2300      	movs	r3, #0
 80042f2:	f04f 32ff 	mov.w	r2, #4294967295
 80042f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80042fa:	f10a 0a01 	add.w	sl, sl, #1
 80042fe:	9304      	str	r3, [sp, #16]
 8004300:	9307      	str	r3, [sp, #28]
 8004302:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004306:	931a      	str	r3, [sp, #104]	@ 0x68
 8004308:	4654      	mov	r4, sl
 800430a:	2205      	movs	r2, #5
 800430c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004310:	484e      	ldr	r0, [pc, #312]	@ (800444c <_svfiprintf_r+0x1e4>)
 8004312:	f000 fccd 	bl	8004cb0 <memchr>
 8004316:	9a04      	ldr	r2, [sp, #16]
 8004318:	b9d8      	cbnz	r0, 8004352 <_svfiprintf_r+0xea>
 800431a:	06d0      	lsls	r0, r2, #27
 800431c:	bf44      	itt	mi
 800431e:	2320      	movmi	r3, #32
 8004320:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004324:	0711      	lsls	r1, r2, #28
 8004326:	bf44      	itt	mi
 8004328:	232b      	movmi	r3, #43	@ 0x2b
 800432a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800432e:	f89a 3000 	ldrb.w	r3, [sl]
 8004332:	2b2a      	cmp	r3, #42	@ 0x2a
 8004334:	d015      	beq.n	8004362 <_svfiprintf_r+0xfa>
 8004336:	4654      	mov	r4, sl
 8004338:	2000      	movs	r0, #0
 800433a:	f04f 0c0a 	mov.w	ip, #10
 800433e:	9a07      	ldr	r2, [sp, #28]
 8004340:	4621      	mov	r1, r4
 8004342:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004346:	3b30      	subs	r3, #48	@ 0x30
 8004348:	2b09      	cmp	r3, #9
 800434a:	d94b      	bls.n	80043e4 <_svfiprintf_r+0x17c>
 800434c:	b1b0      	cbz	r0, 800437c <_svfiprintf_r+0x114>
 800434e:	9207      	str	r2, [sp, #28]
 8004350:	e014      	b.n	800437c <_svfiprintf_r+0x114>
 8004352:	eba0 0308 	sub.w	r3, r0, r8
 8004356:	fa09 f303 	lsl.w	r3, r9, r3
 800435a:	4313      	orrs	r3, r2
 800435c:	46a2      	mov	sl, r4
 800435e:	9304      	str	r3, [sp, #16]
 8004360:	e7d2      	b.n	8004308 <_svfiprintf_r+0xa0>
 8004362:	9b03      	ldr	r3, [sp, #12]
 8004364:	1d19      	adds	r1, r3, #4
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	9103      	str	r1, [sp, #12]
 800436a:	2b00      	cmp	r3, #0
 800436c:	bfbb      	ittet	lt
 800436e:	425b      	neglt	r3, r3
 8004370:	f042 0202 	orrlt.w	r2, r2, #2
 8004374:	9307      	strge	r3, [sp, #28]
 8004376:	9307      	strlt	r3, [sp, #28]
 8004378:	bfb8      	it	lt
 800437a:	9204      	strlt	r2, [sp, #16]
 800437c:	7823      	ldrb	r3, [r4, #0]
 800437e:	2b2e      	cmp	r3, #46	@ 0x2e
 8004380:	d10a      	bne.n	8004398 <_svfiprintf_r+0x130>
 8004382:	7863      	ldrb	r3, [r4, #1]
 8004384:	2b2a      	cmp	r3, #42	@ 0x2a
 8004386:	d132      	bne.n	80043ee <_svfiprintf_r+0x186>
 8004388:	9b03      	ldr	r3, [sp, #12]
 800438a:	3402      	adds	r4, #2
 800438c:	1d1a      	adds	r2, r3, #4
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	9203      	str	r2, [sp, #12]
 8004392:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004396:	9305      	str	r3, [sp, #20]
 8004398:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8004450 <_svfiprintf_r+0x1e8>
 800439c:	2203      	movs	r2, #3
 800439e:	4650      	mov	r0, sl
 80043a0:	7821      	ldrb	r1, [r4, #0]
 80043a2:	f000 fc85 	bl	8004cb0 <memchr>
 80043a6:	b138      	cbz	r0, 80043b8 <_svfiprintf_r+0x150>
 80043a8:	2240      	movs	r2, #64	@ 0x40
 80043aa:	9b04      	ldr	r3, [sp, #16]
 80043ac:	eba0 000a 	sub.w	r0, r0, sl
 80043b0:	4082      	lsls	r2, r0
 80043b2:	4313      	orrs	r3, r2
 80043b4:	3401      	adds	r4, #1
 80043b6:	9304      	str	r3, [sp, #16]
 80043b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043bc:	2206      	movs	r2, #6
 80043be:	4825      	ldr	r0, [pc, #148]	@ (8004454 <_svfiprintf_r+0x1ec>)
 80043c0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80043c4:	f000 fc74 	bl	8004cb0 <memchr>
 80043c8:	2800      	cmp	r0, #0
 80043ca:	d036      	beq.n	800443a <_svfiprintf_r+0x1d2>
 80043cc:	4b22      	ldr	r3, [pc, #136]	@ (8004458 <_svfiprintf_r+0x1f0>)
 80043ce:	bb1b      	cbnz	r3, 8004418 <_svfiprintf_r+0x1b0>
 80043d0:	9b03      	ldr	r3, [sp, #12]
 80043d2:	3307      	adds	r3, #7
 80043d4:	f023 0307 	bic.w	r3, r3, #7
 80043d8:	3308      	adds	r3, #8
 80043da:	9303      	str	r3, [sp, #12]
 80043dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80043de:	4433      	add	r3, r6
 80043e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80043e2:	e76a      	b.n	80042ba <_svfiprintf_r+0x52>
 80043e4:	460c      	mov	r4, r1
 80043e6:	2001      	movs	r0, #1
 80043e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80043ec:	e7a8      	b.n	8004340 <_svfiprintf_r+0xd8>
 80043ee:	2300      	movs	r3, #0
 80043f0:	f04f 0c0a 	mov.w	ip, #10
 80043f4:	4619      	mov	r1, r3
 80043f6:	3401      	adds	r4, #1
 80043f8:	9305      	str	r3, [sp, #20]
 80043fa:	4620      	mov	r0, r4
 80043fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004400:	3a30      	subs	r2, #48	@ 0x30
 8004402:	2a09      	cmp	r2, #9
 8004404:	d903      	bls.n	800440e <_svfiprintf_r+0x1a6>
 8004406:	2b00      	cmp	r3, #0
 8004408:	d0c6      	beq.n	8004398 <_svfiprintf_r+0x130>
 800440a:	9105      	str	r1, [sp, #20]
 800440c:	e7c4      	b.n	8004398 <_svfiprintf_r+0x130>
 800440e:	4604      	mov	r4, r0
 8004410:	2301      	movs	r3, #1
 8004412:	fb0c 2101 	mla	r1, ip, r1, r2
 8004416:	e7f0      	b.n	80043fa <_svfiprintf_r+0x192>
 8004418:	ab03      	add	r3, sp, #12
 800441a:	9300      	str	r3, [sp, #0]
 800441c:	462a      	mov	r2, r5
 800441e:	4638      	mov	r0, r7
 8004420:	4b0e      	ldr	r3, [pc, #56]	@ (800445c <_svfiprintf_r+0x1f4>)
 8004422:	a904      	add	r1, sp, #16
 8004424:	f3af 8000 	nop.w
 8004428:	1c42      	adds	r2, r0, #1
 800442a:	4606      	mov	r6, r0
 800442c:	d1d6      	bne.n	80043dc <_svfiprintf_r+0x174>
 800442e:	89ab      	ldrh	r3, [r5, #12]
 8004430:	065b      	lsls	r3, r3, #25
 8004432:	f53f af2d 	bmi.w	8004290 <_svfiprintf_r+0x28>
 8004436:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004438:	e72c      	b.n	8004294 <_svfiprintf_r+0x2c>
 800443a:	ab03      	add	r3, sp, #12
 800443c:	9300      	str	r3, [sp, #0]
 800443e:	462a      	mov	r2, r5
 8004440:	4638      	mov	r0, r7
 8004442:	4b06      	ldr	r3, [pc, #24]	@ (800445c <_svfiprintf_r+0x1f4>)
 8004444:	a904      	add	r1, sp, #16
 8004446:	f000 f9bd 	bl	80047c4 <_printf_i>
 800444a:	e7ed      	b.n	8004428 <_svfiprintf_r+0x1c0>
 800444c:	0800507f 	.word	0x0800507f
 8004450:	08005085 	.word	0x08005085
 8004454:	08005089 	.word	0x08005089
 8004458:	00000000 	.word	0x00000000
 800445c:	080041b1 	.word	0x080041b1

08004460 <__sfputc_r>:
 8004460:	6893      	ldr	r3, [r2, #8]
 8004462:	b410      	push	{r4}
 8004464:	3b01      	subs	r3, #1
 8004466:	2b00      	cmp	r3, #0
 8004468:	6093      	str	r3, [r2, #8]
 800446a:	da07      	bge.n	800447c <__sfputc_r+0x1c>
 800446c:	6994      	ldr	r4, [r2, #24]
 800446e:	42a3      	cmp	r3, r4
 8004470:	db01      	blt.n	8004476 <__sfputc_r+0x16>
 8004472:	290a      	cmp	r1, #10
 8004474:	d102      	bne.n	800447c <__sfputc_r+0x1c>
 8004476:	bc10      	pop	{r4}
 8004478:	f000 bb6c 	b.w	8004b54 <__swbuf_r>
 800447c:	6813      	ldr	r3, [r2, #0]
 800447e:	1c58      	adds	r0, r3, #1
 8004480:	6010      	str	r0, [r2, #0]
 8004482:	7019      	strb	r1, [r3, #0]
 8004484:	4608      	mov	r0, r1
 8004486:	bc10      	pop	{r4}
 8004488:	4770      	bx	lr

0800448a <__sfputs_r>:
 800448a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800448c:	4606      	mov	r6, r0
 800448e:	460f      	mov	r7, r1
 8004490:	4614      	mov	r4, r2
 8004492:	18d5      	adds	r5, r2, r3
 8004494:	42ac      	cmp	r4, r5
 8004496:	d101      	bne.n	800449c <__sfputs_r+0x12>
 8004498:	2000      	movs	r0, #0
 800449a:	e007      	b.n	80044ac <__sfputs_r+0x22>
 800449c:	463a      	mov	r2, r7
 800449e:	4630      	mov	r0, r6
 80044a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044a4:	f7ff ffdc 	bl	8004460 <__sfputc_r>
 80044a8:	1c43      	adds	r3, r0, #1
 80044aa:	d1f3      	bne.n	8004494 <__sfputs_r+0xa>
 80044ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080044b0 <_vfiprintf_r>:
 80044b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044b4:	460d      	mov	r5, r1
 80044b6:	4614      	mov	r4, r2
 80044b8:	4698      	mov	r8, r3
 80044ba:	4606      	mov	r6, r0
 80044bc:	b09d      	sub	sp, #116	@ 0x74
 80044be:	b118      	cbz	r0, 80044c8 <_vfiprintf_r+0x18>
 80044c0:	6a03      	ldr	r3, [r0, #32]
 80044c2:	b90b      	cbnz	r3, 80044c8 <_vfiprintf_r+0x18>
 80044c4:	f7ff fce2 	bl	8003e8c <__sinit>
 80044c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80044ca:	07d9      	lsls	r1, r3, #31
 80044cc:	d405      	bmi.n	80044da <_vfiprintf_r+0x2a>
 80044ce:	89ab      	ldrh	r3, [r5, #12]
 80044d0:	059a      	lsls	r2, r3, #22
 80044d2:	d402      	bmi.n	80044da <_vfiprintf_r+0x2a>
 80044d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80044d6:	f7ff fe20 	bl	800411a <__retarget_lock_acquire_recursive>
 80044da:	89ab      	ldrh	r3, [r5, #12]
 80044dc:	071b      	lsls	r3, r3, #28
 80044de:	d501      	bpl.n	80044e4 <_vfiprintf_r+0x34>
 80044e0:	692b      	ldr	r3, [r5, #16]
 80044e2:	b99b      	cbnz	r3, 800450c <_vfiprintf_r+0x5c>
 80044e4:	4629      	mov	r1, r5
 80044e6:	4630      	mov	r0, r6
 80044e8:	f000 fb72 	bl	8004bd0 <__swsetup_r>
 80044ec:	b170      	cbz	r0, 800450c <_vfiprintf_r+0x5c>
 80044ee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80044f0:	07dc      	lsls	r4, r3, #31
 80044f2:	d504      	bpl.n	80044fe <_vfiprintf_r+0x4e>
 80044f4:	f04f 30ff 	mov.w	r0, #4294967295
 80044f8:	b01d      	add	sp, #116	@ 0x74
 80044fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044fe:	89ab      	ldrh	r3, [r5, #12]
 8004500:	0598      	lsls	r0, r3, #22
 8004502:	d4f7      	bmi.n	80044f4 <_vfiprintf_r+0x44>
 8004504:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004506:	f7ff fe09 	bl	800411c <__retarget_lock_release_recursive>
 800450a:	e7f3      	b.n	80044f4 <_vfiprintf_r+0x44>
 800450c:	2300      	movs	r3, #0
 800450e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004510:	2320      	movs	r3, #32
 8004512:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004516:	2330      	movs	r3, #48	@ 0x30
 8004518:	f04f 0901 	mov.w	r9, #1
 800451c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004520:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80046cc <_vfiprintf_r+0x21c>
 8004524:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004528:	4623      	mov	r3, r4
 800452a:	469a      	mov	sl, r3
 800452c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004530:	b10a      	cbz	r2, 8004536 <_vfiprintf_r+0x86>
 8004532:	2a25      	cmp	r2, #37	@ 0x25
 8004534:	d1f9      	bne.n	800452a <_vfiprintf_r+0x7a>
 8004536:	ebba 0b04 	subs.w	fp, sl, r4
 800453a:	d00b      	beq.n	8004554 <_vfiprintf_r+0xa4>
 800453c:	465b      	mov	r3, fp
 800453e:	4622      	mov	r2, r4
 8004540:	4629      	mov	r1, r5
 8004542:	4630      	mov	r0, r6
 8004544:	f7ff ffa1 	bl	800448a <__sfputs_r>
 8004548:	3001      	adds	r0, #1
 800454a:	f000 80a7 	beq.w	800469c <_vfiprintf_r+0x1ec>
 800454e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004550:	445a      	add	r2, fp
 8004552:	9209      	str	r2, [sp, #36]	@ 0x24
 8004554:	f89a 3000 	ldrb.w	r3, [sl]
 8004558:	2b00      	cmp	r3, #0
 800455a:	f000 809f 	beq.w	800469c <_vfiprintf_r+0x1ec>
 800455e:	2300      	movs	r3, #0
 8004560:	f04f 32ff 	mov.w	r2, #4294967295
 8004564:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004568:	f10a 0a01 	add.w	sl, sl, #1
 800456c:	9304      	str	r3, [sp, #16]
 800456e:	9307      	str	r3, [sp, #28]
 8004570:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004574:	931a      	str	r3, [sp, #104]	@ 0x68
 8004576:	4654      	mov	r4, sl
 8004578:	2205      	movs	r2, #5
 800457a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800457e:	4853      	ldr	r0, [pc, #332]	@ (80046cc <_vfiprintf_r+0x21c>)
 8004580:	f000 fb96 	bl	8004cb0 <memchr>
 8004584:	9a04      	ldr	r2, [sp, #16]
 8004586:	b9d8      	cbnz	r0, 80045c0 <_vfiprintf_r+0x110>
 8004588:	06d1      	lsls	r1, r2, #27
 800458a:	bf44      	itt	mi
 800458c:	2320      	movmi	r3, #32
 800458e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004592:	0713      	lsls	r3, r2, #28
 8004594:	bf44      	itt	mi
 8004596:	232b      	movmi	r3, #43	@ 0x2b
 8004598:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800459c:	f89a 3000 	ldrb.w	r3, [sl]
 80045a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80045a2:	d015      	beq.n	80045d0 <_vfiprintf_r+0x120>
 80045a4:	4654      	mov	r4, sl
 80045a6:	2000      	movs	r0, #0
 80045a8:	f04f 0c0a 	mov.w	ip, #10
 80045ac:	9a07      	ldr	r2, [sp, #28]
 80045ae:	4621      	mov	r1, r4
 80045b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80045b4:	3b30      	subs	r3, #48	@ 0x30
 80045b6:	2b09      	cmp	r3, #9
 80045b8:	d94b      	bls.n	8004652 <_vfiprintf_r+0x1a2>
 80045ba:	b1b0      	cbz	r0, 80045ea <_vfiprintf_r+0x13a>
 80045bc:	9207      	str	r2, [sp, #28]
 80045be:	e014      	b.n	80045ea <_vfiprintf_r+0x13a>
 80045c0:	eba0 0308 	sub.w	r3, r0, r8
 80045c4:	fa09 f303 	lsl.w	r3, r9, r3
 80045c8:	4313      	orrs	r3, r2
 80045ca:	46a2      	mov	sl, r4
 80045cc:	9304      	str	r3, [sp, #16]
 80045ce:	e7d2      	b.n	8004576 <_vfiprintf_r+0xc6>
 80045d0:	9b03      	ldr	r3, [sp, #12]
 80045d2:	1d19      	adds	r1, r3, #4
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	9103      	str	r1, [sp, #12]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	bfbb      	ittet	lt
 80045dc:	425b      	neglt	r3, r3
 80045de:	f042 0202 	orrlt.w	r2, r2, #2
 80045e2:	9307      	strge	r3, [sp, #28]
 80045e4:	9307      	strlt	r3, [sp, #28]
 80045e6:	bfb8      	it	lt
 80045e8:	9204      	strlt	r2, [sp, #16]
 80045ea:	7823      	ldrb	r3, [r4, #0]
 80045ec:	2b2e      	cmp	r3, #46	@ 0x2e
 80045ee:	d10a      	bne.n	8004606 <_vfiprintf_r+0x156>
 80045f0:	7863      	ldrb	r3, [r4, #1]
 80045f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80045f4:	d132      	bne.n	800465c <_vfiprintf_r+0x1ac>
 80045f6:	9b03      	ldr	r3, [sp, #12]
 80045f8:	3402      	adds	r4, #2
 80045fa:	1d1a      	adds	r2, r3, #4
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	9203      	str	r2, [sp, #12]
 8004600:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004604:	9305      	str	r3, [sp, #20]
 8004606:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80046d0 <_vfiprintf_r+0x220>
 800460a:	2203      	movs	r2, #3
 800460c:	4650      	mov	r0, sl
 800460e:	7821      	ldrb	r1, [r4, #0]
 8004610:	f000 fb4e 	bl	8004cb0 <memchr>
 8004614:	b138      	cbz	r0, 8004626 <_vfiprintf_r+0x176>
 8004616:	2240      	movs	r2, #64	@ 0x40
 8004618:	9b04      	ldr	r3, [sp, #16]
 800461a:	eba0 000a 	sub.w	r0, r0, sl
 800461e:	4082      	lsls	r2, r0
 8004620:	4313      	orrs	r3, r2
 8004622:	3401      	adds	r4, #1
 8004624:	9304      	str	r3, [sp, #16]
 8004626:	f814 1b01 	ldrb.w	r1, [r4], #1
 800462a:	2206      	movs	r2, #6
 800462c:	4829      	ldr	r0, [pc, #164]	@ (80046d4 <_vfiprintf_r+0x224>)
 800462e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004632:	f000 fb3d 	bl	8004cb0 <memchr>
 8004636:	2800      	cmp	r0, #0
 8004638:	d03f      	beq.n	80046ba <_vfiprintf_r+0x20a>
 800463a:	4b27      	ldr	r3, [pc, #156]	@ (80046d8 <_vfiprintf_r+0x228>)
 800463c:	bb1b      	cbnz	r3, 8004686 <_vfiprintf_r+0x1d6>
 800463e:	9b03      	ldr	r3, [sp, #12]
 8004640:	3307      	adds	r3, #7
 8004642:	f023 0307 	bic.w	r3, r3, #7
 8004646:	3308      	adds	r3, #8
 8004648:	9303      	str	r3, [sp, #12]
 800464a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800464c:	443b      	add	r3, r7
 800464e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004650:	e76a      	b.n	8004528 <_vfiprintf_r+0x78>
 8004652:	460c      	mov	r4, r1
 8004654:	2001      	movs	r0, #1
 8004656:	fb0c 3202 	mla	r2, ip, r2, r3
 800465a:	e7a8      	b.n	80045ae <_vfiprintf_r+0xfe>
 800465c:	2300      	movs	r3, #0
 800465e:	f04f 0c0a 	mov.w	ip, #10
 8004662:	4619      	mov	r1, r3
 8004664:	3401      	adds	r4, #1
 8004666:	9305      	str	r3, [sp, #20]
 8004668:	4620      	mov	r0, r4
 800466a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800466e:	3a30      	subs	r2, #48	@ 0x30
 8004670:	2a09      	cmp	r2, #9
 8004672:	d903      	bls.n	800467c <_vfiprintf_r+0x1cc>
 8004674:	2b00      	cmp	r3, #0
 8004676:	d0c6      	beq.n	8004606 <_vfiprintf_r+0x156>
 8004678:	9105      	str	r1, [sp, #20]
 800467a:	e7c4      	b.n	8004606 <_vfiprintf_r+0x156>
 800467c:	4604      	mov	r4, r0
 800467e:	2301      	movs	r3, #1
 8004680:	fb0c 2101 	mla	r1, ip, r1, r2
 8004684:	e7f0      	b.n	8004668 <_vfiprintf_r+0x1b8>
 8004686:	ab03      	add	r3, sp, #12
 8004688:	9300      	str	r3, [sp, #0]
 800468a:	462a      	mov	r2, r5
 800468c:	4630      	mov	r0, r6
 800468e:	4b13      	ldr	r3, [pc, #76]	@ (80046dc <_vfiprintf_r+0x22c>)
 8004690:	a904      	add	r1, sp, #16
 8004692:	f3af 8000 	nop.w
 8004696:	4607      	mov	r7, r0
 8004698:	1c78      	adds	r0, r7, #1
 800469a:	d1d6      	bne.n	800464a <_vfiprintf_r+0x19a>
 800469c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800469e:	07d9      	lsls	r1, r3, #31
 80046a0:	d405      	bmi.n	80046ae <_vfiprintf_r+0x1fe>
 80046a2:	89ab      	ldrh	r3, [r5, #12]
 80046a4:	059a      	lsls	r2, r3, #22
 80046a6:	d402      	bmi.n	80046ae <_vfiprintf_r+0x1fe>
 80046a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80046aa:	f7ff fd37 	bl	800411c <__retarget_lock_release_recursive>
 80046ae:	89ab      	ldrh	r3, [r5, #12]
 80046b0:	065b      	lsls	r3, r3, #25
 80046b2:	f53f af1f 	bmi.w	80044f4 <_vfiprintf_r+0x44>
 80046b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80046b8:	e71e      	b.n	80044f8 <_vfiprintf_r+0x48>
 80046ba:	ab03      	add	r3, sp, #12
 80046bc:	9300      	str	r3, [sp, #0]
 80046be:	462a      	mov	r2, r5
 80046c0:	4630      	mov	r0, r6
 80046c2:	4b06      	ldr	r3, [pc, #24]	@ (80046dc <_vfiprintf_r+0x22c>)
 80046c4:	a904      	add	r1, sp, #16
 80046c6:	f000 f87d 	bl	80047c4 <_printf_i>
 80046ca:	e7e4      	b.n	8004696 <_vfiprintf_r+0x1e6>
 80046cc:	0800507f 	.word	0x0800507f
 80046d0:	08005085 	.word	0x08005085
 80046d4:	08005089 	.word	0x08005089
 80046d8:	00000000 	.word	0x00000000
 80046dc:	0800448b 	.word	0x0800448b

080046e0 <_printf_common>:
 80046e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046e4:	4616      	mov	r6, r2
 80046e6:	4698      	mov	r8, r3
 80046e8:	688a      	ldr	r2, [r1, #8]
 80046ea:	690b      	ldr	r3, [r1, #16]
 80046ec:	4607      	mov	r7, r0
 80046ee:	4293      	cmp	r3, r2
 80046f0:	bfb8      	it	lt
 80046f2:	4613      	movlt	r3, r2
 80046f4:	6033      	str	r3, [r6, #0]
 80046f6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80046fa:	460c      	mov	r4, r1
 80046fc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004700:	b10a      	cbz	r2, 8004706 <_printf_common+0x26>
 8004702:	3301      	adds	r3, #1
 8004704:	6033      	str	r3, [r6, #0]
 8004706:	6823      	ldr	r3, [r4, #0]
 8004708:	0699      	lsls	r1, r3, #26
 800470a:	bf42      	ittt	mi
 800470c:	6833      	ldrmi	r3, [r6, #0]
 800470e:	3302      	addmi	r3, #2
 8004710:	6033      	strmi	r3, [r6, #0]
 8004712:	6825      	ldr	r5, [r4, #0]
 8004714:	f015 0506 	ands.w	r5, r5, #6
 8004718:	d106      	bne.n	8004728 <_printf_common+0x48>
 800471a:	f104 0a19 	add.w	sl, r4, #25
 800471e:	68e3      	ldr	r3, [r4, #12]
 8004720:	6832      	ldr	r2, [r6, #0]
 8004722:	1a9b      	subs	r3, r3, r2
 8004724:	42ab      	cmp	r3, r5
 8004726:	dc2b      	bgt.n	8004780 <_printf_common+0xa0>
 8004728:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800472c:	6822      	ldr	r2, [r4, #0]
 800472e:	3b00      	subs	r3, #0
 8004730:	bf18      	it	ne
 8004732:	2301      	movne	r3, #1
 8004734:	0692      	lsls	r2, r2, #26
 8004736:	d430      	bmi.n	800479a <_printf_common+0xba>
 8004738:	4641      	mov	r1, r8
 800473a:	4638      	mov	r0, r7
 800473c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004740:	47c8      	blx	r9
 8004742:	3001      	adds	r0, #1
 8004744:	d023      	beq.n	800478e <_printf_common+0xae>
 8004746:	6823      	ldr	r3, [r4, #0]
 8004748:	6922      	ldr	r2, [r4, #16]
 800474a:	f003 0306 	and.w	r3, r3, #6
 800474e:	2b04      	cmp	r3, #4
 8004750:	bf14      	ite	ne
 8004752:	2500      	movne	r5, #0
 8004754:	6833      	ldreq	r3, [r6, #0]
 8004756:	f04f 0600 	mov.w	r6, #0
 800475a:	bf08      	it	eq
 800475c:	68e5      	ldreq	r5, [r4, #12]
 800475e:	f104 041a 	add.w	r4, r4, #26
 8004762:	bf08      	it	eq
 8004764:	1aed      	subeq	r5, r5, r3
 8004766:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800476a:	bf08      	it	eq
 800476c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004770:	4293      	cmp	r3, r2
 8004772:	bfc4      	itt	gt
 8004774:	1a9b      	subgt	r3, r3, r2
 8004776:	18ed      	addgt	r5, r5, r3
 8004778:	42b5      	cmp	r5, r6
 800477a:	d11a      	bne.n	80047b2 <_printf_common+0xd2>
 800477c:	2000      	movs	r0, #0
 800477e:	e008      	b.n	8004792 <_printf_common+0xb2>
 8004780:	2301      	movs	r3, #1
 8004782:	4652      	mov	r2, sl
 8004784:	4641      	mov	r1, r8
 8004786:	4638      	mov	r0, r7
 8004788:	47c8      	blx	r9
 800478a:	3001      	adds	r0, #1
 800478c:	d103      	bne.n	8004796 <_printf_common+0xb6>
 800478e:	f04f 30ff 	mov.w	r0, #4294967295
 8004792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004796:	3501      	adds	r5, #1
 8004798:	e7c1      	b.n	800471e <_printf_common+0x3e>
 800479a:	2030      	movs	r0, #48	@ 0x30
 800479c:	18e1      	adds	r1, r4, r3
 800479e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80047a2:	1c5a      	adds	r2, r3, #1
 80047a4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80047a8:	4422      	add	r2, r4
 80047aa:	3302      	adds	r3, #2
 80047ac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80047b0:	e7c2      	b.n	8004738 <_printf_common+0x58>
 80047b2:	2301      	movs	r3, #1
 80047b4:	4622      	mov	r2, r4
 80047b6:	4641      	mov	r1, r8
 80047b8:	4638      	mov	r0, r7
 80047ba:	47c8      	blx	r9
 80047bc:	3001      	adds	r0, #1
 80047be:	d0e6      	beq.n	800478e <_printf_common+0xae>
 80047c0:	3601      	adds	r6, #1
 80047c2:	e7d9      	b.n	8004778 <_printf_common+0x98>

080047c4 <_printf_i>:
 80047c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80047c8:	7e0f      	ldrb	r7, [r1, #24]
 80047ca:	4691      	mov	r9, r2
 80047cc:	2f78      	cmp	r7, #120	@ 0x78
 80047ce:	4680      	mov	r8, r0
 80047d0:	460c      	mov	r4, r1
 80047d2:	469a      	mov	sl, r3
 80047d4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80047d6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80047da:	d807      	bhi.n	80047ec <_printf_i+0x28>
 80047dc:	2f62      	cmp	r7, #98	@ 0x62
 80047de:	d80a      	bhi.n	80047f6 <_printf_i+0x32>
 80047e0:	2f00      	cmp	r7, #0
 80047e2:	f000 80d3 	beq.w	800498c <_printf_i+0x1c8>
 80047e6:	2f58      	cmp	r7, #88	@ 0x58
 80047e8:	f000 80ba 	beq.w	8004960 <_printf_i+0x19c>
 80047ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80047f0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80047f4:	e03a      	b.n	800486c <_printf_i+0xa8>
 80047f6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80047fa:	2b15      	cmp	r3, #21
 80047fc:	d8f6      	bhi.n	80047ec <_printf_i+0x28>
 80047fe:	a101      	add	r1, pc, #4	@ (adr r1, 8004804 <_printf_i+0x40>)
 8004800:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004804:	0800485d 	.word	0x0800485d
 8004808:	08004871 	.word	0x08004871
 800480c:	080047ed 	.word	0x080047ed
 8004810:	080047ed 	.word	0x080047ed
 8004814:	080047ed 	.word	0x080047ed
 8004818:	080047ed 	.word	0x080047ed
 800481c:	08004871 	.word	0x08004871
 8004820:	080047ed 	.word	0x080047ed
 8004824:	080047ed 	.word	0x080047ed
 8004828:	080047ed 	.word	0x080047ed
 800482c:	080047ed 	.word	0x080047ed
 8004830:	08004973 	.word	0x08004973
 8004834:	0800489b 	.word	0x0800489b
 8004838:	0800492d 	.word	0x0800492d
 800483c:	080047ed 	.word	0x080047ed
 8004840:	080047ed 	.word	0x080047ed
 8004844:	08004995 	.word	0x08004995
 8004848:	080047ed 	.word	0x080047ed
 800484c:	0800489b 	.word	0x0800489b
 8004850:	080047ed 	.word	0x080047ed
 8004854:	080047ed 	.word	0x080047ed
 8004858:	08004935 	.word	0x08004935
 800485c:	6833      	ldr	r3, [r6, #0]
 800485e:	1d1a      	adds	r2, r3, #4
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	6032      	str	r2, [r6, #0]
 8004864:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004868:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800486c:	2301      	movs	r3, #1
 800486e:	e09e      	b.n	80049ae <_printf_i+0x1ea>
 8004870:	6833      	ldr	r3, [r6, #0]
 8004872:	6820      	ldr	r0, [r4, #0]
 8004874:	1d19      	adds	r1, r3, #4
 8004876:	6031      	str	r1, [r6, #0]
 8004878:	0606      	lsls	r6, r0, #24
 800487a:	d501      	bpl.n	8004880 <_printf_i+0xbc>
 800487c:	681d      	ldr	r5, [r3, #0]
 800487e:	e003      	b.n	8004888 <_printf_i+0xc4>
 8004880:	0645      	lsls	r5, r0, #25
 8004882:	d5fb      	bpl.n	800487c <_printf_i+0xb8>
 8004884:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004888:	2d00      	cmp	r5, #0
 800488a:	da03      	bge.n	8004894 <_printf_i+0xd0>
 800488c:	232d      	movs	r3, #45	@ 0x2d
 800488e:	426d      	negs	r5, r5
 8004890:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004894:	230a      	movs	r3, #10
 8004896:	4859      	ldr	r0, [pc, #356]	@ (80049fc <_printf_i+0x238>)
 8004898:	e011      	b.n	80048be <_printf_i+0xfa>
 800489a:	6821      	ldr	r1, [r4, #0]
 800489c:	6833      	ldr	r3, [r6, #0]
 800489e:	0608      	lsls	r0, r1, #24
 80048a0:	f853 5b04 	ldr.w	r5, [r3], #4
 80048a4:	d402      	bmi.n	80048ac <_printf_i+0xe8>
 80048a6:	0649      	lsls	r1, r1, #25
 80048a8:	bf48      	it	mi
 80048aa:	b2ad      	uxthmi	r5, r5
 80048ac:	2f6f      	cmp	r7, #111	@ 0x6f
 80048ae:	6033      	str	r3, [r6, #0]
 80048b0:	bf14      	ite	ne
 80048b2:	230a      	movne	r3, #10
 80048b4:	2308      	moveq	r3, #8
 80048b6:	4851      	ldr	r0, [pc, #324]	@ (80049fc <_printf_i+0x238>)
 80048b8:	2100      	movs	r1, #0
 80048ba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80048be:	6866      	ldr	r6, [r4, #4]
 80048c0:	2e00      	cmp	r6, #0
 80048c2:	bfa8      	it	ge
 80048c4:	6821      	ldrge	r1, [r4, #0]
 80048c6:	60a6      	str	r6, [r4, #8]
 80048c8:	bfa4      	itt	ge
 80048ca:	f021 0104 	bicge.w	r1, r1, #4
 80048ce:	6021      	strge	r1, [r4, #0]
 80048d0:	b90d      	cbnz	r5, 80048d6 <_printf_i+0x112>
 80048d2:	2e00      	cmp	r6, #0
 80048d4:	d04b      	beq.n	800496e <_printf_i+0x1aa>
 80048d6:	4616      	mov	r6, r2
 80048d8:	fbb5 f1f3 	udiv	r1, r5, r3
 80048dc:	fb03 5711 	mls	r7, r3, r1, r5
 80048e0:	5dc7      	ldrb	r7, [r0, r7]
 80048e2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80048e6:	462f      	mov	r7, r5
 80048e8:	42bb      	cmp	r3, r7
 80048ea:	460d      	mov	r5, r1
 80048ec:	d9f4      	bls.n	80048d8 <_printf_i+0x114>
 80048ee:	2b08      	cmp	r3, #8
 80048f0:	d10b      	bne.n	800490a <_printf_i+0x146>
 80048f2:	6823      	ldr	r3, [r4, #0]
 80048f4:	07df      	lsls	r7, r3, #31
 80048f6:	d508      	bpl.n	800490a <_printf_i+0x146>
 80048f8:	6923      	ldr	r3, [r4, #16]
 80048fa:	6861      	ldr	r1, [r4, #4]
 80048fc:	4299      	cmp	r1, r3
 80048fe:	bfde      	ittt	le
 8004900:	2330      	movle	r3, #48	@ 0x30
 8004902:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004906:	f106 36ff 	addle.w	r6, r6, #4294967295
 800490a:	1b92      	subs	r2, r2, r6
 800490c:	6122      	str	r2, [r4, #16]
 800490e:	464b      	mov	r3, r9
 8004910:	4621      	mov	r1, r4
 8004912:	4640      	mov	r0, r8
 8004914:	f8cd a000 	str.w	sl, [sp]
 8004918:	aa03      	add	r2, sp, #12
 800491a:	f7ff fee1 	bl	80046e0 <_printf_common>
 800491e:	3001      	adds	r0, #1
 8004920:	d14a      	bne.n	80049b8 <_printf_i+0x1f4>
 8004922:	f04f 30ff 	mov.w	r0, #4294967295
 8004926:	b004      	add	sp, #16
 8004928:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800492c:	6823      	ldr	r3, [r4, #0]
 800492e:	f043 0320 	orr.w	r3, r3, #32
 8004932:	6023      	str	r3, [r4, #0]
 8004934:	2778      	movs	r7, #120	@ 0x78
 8004936:	4832      	ldr	r0, [pc, #200]	@ (8004a00 <_printf_i+0x23c>)
 8004938:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800493c:	6823      	ldr	r3, [r4, #0]
 800493e:	6831      	ldr	r1, [r6, #0]
 8004940:	061f      	lsls	r7, r3, #24
 8004942:	f851 5b04 	ldr.w	r5, [r1], #4
 8004946:	d402      	bmi.n	800494e <_printf_i+0x18a>
 8004948:	065f      	lsls	r7, r3, #25
 800494a:	bf48      	it	mi
 800494c:	b2ad      	uxthmi	r5, r5
 800494e:	6031      	str	r1, [r6, #0]
 8004950:	07d9      	lsls	r1, r3, #31
 8004952:	bf44      	itt	mi
 8004954:	f043 0320 	orrmi.w	r3, r3, #32
 8004958:	6023      	strmi	r3, [r4, #0]
 800495a:	b11d      	cbz	r5, 8004964 <_printf_i+0x1a0>
 800495c:	2310      	movs	r3, #16
 800495e:	e7ab      	b.n	80048b8 <_printf_i+0xf4>
 8004960:	4826      	ldr	r0, [pc, #152]	@ (80049fc <_printf_i+0x238>)
 8004962:	e7e9      	b.n	8004938 <_printf_i+0x174>
 8004964:	6823      	ldr	r3, [r4, #0]
 8004966:	f023 0320 	bic.w	r3, r3, #32
 800496a:	6023      	str	r3, [r4, #0]
 800496c:	e7f6      	b.n	800495c <_printf_i+0x198>
 800496e:	4616      	mov	r6, r2
 8004970:	e7bd      	b.n	80048ee <_printf_i+0x12a>
 8004972:	6833      	ldr	r3, [r6, #0]
 8004974:	6825      	ldr	r5, [r4, #0]
 8004976:	1d18      	adds	r0, r3, #4
 8004978:	6961      	ldr	r1, [r4, #20]
 800497a:	6030      	str	r0, [r6, #0]
 800497c:	062e      	lsls	r6, r5, #24
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	d501      	bpl.n	8004986 <_printf_i+0x1c2>
 8004982:	6019      	str	r1, [r3, #0]
 8004984:	e002      	b.n	800498c <_printf_i+0x1c8>
 8004986:	0668      	lsls	r0, r5, #25
 8004988:	d5fb      	bpl.n	8004982 <_printf_i+0x1be>
 800498a:	8019      	strh	r1, [r3, #0]
 800498c:	2300      	movs	r3, #0
 800498e:	4616      	mov	r6, r2
 8004990:	6123      	str	r3, [r4, #16]
 8004992:	e7bc      	b.n	800490e <_printf_i+0x14a>
 8004994:	6833      	ldr	r3, [r6, #0]
 8004996:	2100      	movs	r1, #0
 8004998:	1d1a      	adds	r2, r3, #4
 800499a:	6032      	str	r2, [r6, #0]
 800499c:	681e      	ldr	r6, [r3, #0]
 800499e:	6862      	ldr	r2, [r4, #4]
 80049a0:	4630      	mov	r0, r6
 80049a2:	f000 f985 	bl	8004cb0 <memchr>
 80049a6:	b108      	cbz	r0, 80049ac <_printf_i+0x1e8>
 80049a8:	1b80      	subs	r0, r0, r6
 80049aa:	6060      	str	r0, [r4, #4]
 80049ac:	6863      	ldr	r3, [r4, #4]
 80049ae:	6123      	str	r3, [r4, #16]
 80049b0:	2300      	movs	r3, #0
 80049b2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80049b6:	e7aa      	b.n	800490e <_printf_i+0x14a>
 80049b8:	4632      	mov	r2, r6
 80049ba:	4649      	mov	r1, r9
 80049bc:	4640      	mov	r0, r8
 80049be:	6923      	ldr	r3, [r4, #16]
 80049c0:	47d0      	blx	sl
 80049c2:	3001      	adds	r0, #1
 80049c4:	d0ad      	beq.n	8004922 <_printf_i+0x15e>
 80049c6:	6823      	ldr	r3, [r4, #0]
 80049c8:	079b      	lsls	r3, r3, #30
 80049ca:	d413      	bmi.n	80049f4 <_printf_i+0x230>
 80049cc:	68e0      	ldr	r0, [r4, #12]
 80049ce:	9b03      	ldr	r3, [sp, #12]
 80049d0:	4298      	cmp	r0, r3
 80049d2:	bfb8      	it	lt
 80049d4:	4618      	movlt	r0, r3
 80049d6:	e7a6      	b.n	8004926 <_printf_i+0x162>
 80049d8:	2301      	movs	r3, #1
 80049da:	4632      	mov	r2, r6
 80049dc:	4649      	mov	r1, r9
 80049de:	4640      	mov	r0, r8
 80049e0:	47d0      	blx	sl
 80049e2:	3001      	adds	r0, #1
 80049e4:	d09d      	beq.n	8004922 <_printf_i+0x15e>
 80049e6:	3501      	adds	r5, #1
 80049e8:	68e3      	ldr	r3, [r4, #12]
 80049ea:	9903      	ldr	r1, [sp, #12]
 80049ec:	1a5b      	subs	r3, r3, r1
 80049ee:	42ab      	cmp	r3, r5
 80049f0:	dcf2      	bgt.n	80049d8 <_printf_i+0x214>
 80049f2:	e7eb      	b.n	80049cc <_printf_i+0x208>
 80049f4:	2500      	movs	r5, #0
 80049f6:	f104 0619 	add.w	r6, r4, #25
 80049fa:	e7f5      	b.n	80049e8 <_printf_i+0x224>
 80049fc:	08005090 	.word	0x08005090
 8004a00:	080050a1 	.word	0x080050a1

08004a04 <__sflush_r>:
 8004a04:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a0a:	0716      	lsls	r6, r2, #28
 8004a0c:	4605      	mov	r5, r0
 8004a0e:	460c      	mov	r4, r1
 8004a10:	d454      	bmi.n	8004abc <__sflush_r+0xb8>
 8004a12:	684b      	ldr	r3, [r1, #4]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	dc02      	bgt.n	8004a1e <__sflush_r+0x1a>
 8004a18:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	dd48      	ble.n	8004ab0 <__sflush_r+0xac>
 8004a1e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004a20:	2e00      	cmp	r6, #0
 8004a22:	d045      	beq.n	8004ab0 <__sflush_r+0xac>
 8004a24:	2300      	movs	r3, #0
 8004a26:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004a2a:	682f      	ldr	r7, [r5, #0]
 8004a2c:	6a21      	ldr	r1, [r4, #32]
 8004a2e:	602b      	str	r3, [r5, #0]
 8004a30:	d030      	beq.n	8004a94 <__sflush_r+0x90>
 8004a32:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004a34:	89a3      	ldrh	r3, [r4, #12]
 8004a36:	0759      	lsls	r1, r3, #29
 8004a38:	d505      	bpl.n	8004a46 <__sflush_r+0x42>
 8004a3a:	6863      	ldr	r3, [r4, #4]
 8004a3c:	1ad2      	subs	r2, r2, r3
 8004a3e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004a40:	b10b      	cbz	r3, 8004a46 <__sflush_r+0x42>
 8004a42:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004a44:	1ad2      	subs	r2, r2, r3
 8004a46:	2300      	movs	r3, #0
 8004a48:	4628      	mov	r0, r5
 8004a4a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004a4c:	6a21      	ldr	r1, [r4, #32]
 8004a4e:	47b0      	blx	r6
 8004a50:	1c43      	adds	r3, r0, #1
 8004a52:	89a3      	ldrh	r3, [r4, #12]
 8004a54:	d106      	bne.n	8004a64 <__sflush_r+0x60>
 8004a56:	6829      	ldr	r1, [r5, #0]
 8004a58:	291d      	cmp	r1, #29
 8004a5a:	d82b      	bhi.n	8004ab4 <__sflush_r+0xb0>
 8004a5c:	4a28      	ldr	r2, [pc, #160]	@ (8004b00 <__sflush_r+0xfc>)
 8004a5e:	410a      	asrs	r2, r1
 8004a60:	07d6      	lsls	r6, r2, #31
 8004a62:	d427      	bmi.n	8004ab4 <__sflush_r+0xb0>
 8004a64:	2200      	movs	r2, #0
 8004a66:	6062      	str	r2, [r4, #4]
 8004a68:	6922      	ldr	r2, [r4, #16]
 8004a6a:	04d9      	lsls	r1, r3, #19
 8004a6c:	6022      	str	r2, [r4, #0]
 8004a6e:	d504      	bpl.n	8004a7a <__sflush_r+0x76>
 8004a70:	1c42      	adds	r2, r0, #1
 8004a72:	d101      	bne.n	8004a78 <__sflush_r+0x74>
 8004a74:	682b      	ldr	r3, [r5, #0]
 8004a76:	b903      	cbnz	r3, 8004a7a <__sflush_r+0x76>
 8004a78:	6560      	str	r0, [r4, #84]	@ 0x54
 8004a7a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004a7c:	602f      	str	r7, [r5, #0]
 8004a7e:	b1b9      	cbz	r1, 8004ab0 <__sflush_r+0xac>
 8004a80:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004a84:	4299      	cmp	r1, r3
 8004a86:	d002      	beq.n	8004a8e <__sflush_r+0x8a>
 8004a88:	4628      	mov	r0, r5
 8004a8a:	f7ff fb49 	bl	8004120 <_free_r>
 8004a8e:	2300      	movs	r3, #0
 8004a90:	6363      	str	r3, [r4, #52]	@ 0x34
 8004a92:	e00d      	b.n	8004ab0 <__sflush_r+0xac>
 8004a94:	2301      	movs	r3, #1
 8004a96:	4628      	mov	r0, r5
 8004a98:	47b0      	blx	r6
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	1c50      	adds	r0, r2, #1
 8004a9e:	d1c9      	bne.n	8004a34 <__sflush_r+0x30>
 8004aa0:	682b      	ldr	r3, [r5, #0]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d0c6      	beq.n	8004a34 <__sflush_r+0x30>
 8004aa6:	2b1d      	cmp	r3, #29
 8004aa8:	d001      	beq.n	8004aae <__sflush_r+0xaa>
 8004aaa:	2b16      	cmp	r3, #22
 8004aac:	d11d      	bne.n	8004aea <__sflush_r+0xe6>
 8004aae:	602f      	str	r7, [r5, #0]
 8004ab0:	2000      	movs	r0, #0
 8004ab2:	e021      	b.n	8004af8 <__sflush_r+0xf4>
 8004ab4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ab8:	b21b      	sxth	r3, r3
 8004aba:	e01a      	b.n	8004af2 <__sflush_r+0xee>
 8004abc:	690f      	ldr	r7, [r1, #16]
 8004abe:	2f00      	cmp	r7, #0
 8004ac0:	d0f6      	beq.n	8004ab0 <__sflush_r+0xac>
 8004ac2:	0793      	lsls	r3, r2, #30
 8004ac4:	bf18      	it	ne
 8004ac6:	2300      	movne	r3, #0
 8004ac8:	680e      	ldr	r6, [r1, #0]
 8004aca:	bf08      	it	eq
 8004acc:	694b      	ldreq	r3, [r1, #20]
 8004ace:	1bf6      	subs	r6, r6, r7
 8004ad0:	600f      	str	r7, [r1, #0]
 8004ad2:	608b      	str	r3, [r1, #8]
 8004ad4:	2e00      	cmp	r6, #0
 8004ad6:	ddeb      	ble.n	8004ab0 <__sflush_r+0xac>
 8004ad8:	4633      	mov	r3, r6
 8004ada:	463a      	mov	r2, r7
 8004adc:	4628      	mov	r0, r5
 8004ade:	6a21      	ldr	r1, [r4, #32]
 8004ae0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8004ae4:	47e0      	blx	ip
 8004ae6:	2800      	cmp	r0, #0
 8004ae8:	dc07      	bgt.n	8004afa <__sflush_r+0xf6>
 8004aea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004aee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004af2:	f04f 30ff 	mov.w	r0, #4294967295
 8004af6:	81a3      	strh	r3, [r4, #12]
 8004af8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004afa:	4407      	add	r7, r0
 8004afc:	1a36      	subs	r6, r6, r0
 8004afe:	e7e9      	b.n	8004ad4 <__sflush_r+0xd0>
 8004b00:	dfbffffe 	.word	0xdfbffffe

08004b04 <_fflush_r>:
 8004b04:	b538      	push	{r3, r4, r5, lr}
 8004b06:	690b      	ldr	r3, [r1, #16]
 8004b08:	4605      	mov	r5, r0
 8004b0a:	460c      	mov	r4, r1
 8004b0c:	b913      	cbnz	r3, 8004b14 <_fflush_r+0x10>
 8004b0e:	2500      	movs	r5, #0
 8004b10:	4628      	mov	r0, r5
 8004b12:	bd38      	pop	{r3, r4, r5, pc}
 8004b14:	b118      	cbz	r0, 8004b1e <_fflush_r+0x1a>
 8004b16:	6a03      	ldr	r3, [r0, #32]
 8004b18:	b90b      	cbnz	r3, 8004b1e <_fflush_r+0x1a>
 8004b1a:	f7ff f9b7 	bl	8003e8c <__sinit>
 8004b1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d0f3      	beq.n	8004b0e <_fflush_r+0xa>
 8004b26:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004b28:	07d0      	lsls	r0, r2, #31
 8004b2a:	d404      	bmi.n	8004b36 <_fflush_r+0x32>
 8004b2c:	0599      	lsls	r1, r3, #22
 8004b2e:	d402      	bmi.n	8004b36 <_fflush_r+0x32>
 8004b30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004b32:	f7ff faf2 	bl	800411a <__retarget_lock_acquire_recursive>
 8004b36:	4628      	mov	r0, r5
 8004b38:	4621      	mov	r1, r4
 8004b3a:	f7ff ff63 	bl	8004a04 <__sflush_r>
 8004b3e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004b40:	4605      	mov	r5, r0
 8004b42:	07da      	lsls	r2, r3, #31
 8004b44:	d4e4      	bmi.n	8004b10 <_fflush_r+0xc>
 8004b46:	89a3      	ldrh	r3, [r4, #12]
 8004b48:	059b      	lsls	r3, r3, #22
 8004b4a:	d4e1      	bmi.n	8004b10 <_fflush_r+0xc>
 8004b4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004b4e:	f7ff fae5 	bl	800411c <__retarget_lock_release_recursive>
 8004b52:	e7dd      	b.n	8004b10 <_fflush_r+0xc>

08004b54 <__swbuf_r>:
 8004b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b56:	460e      	mov	r6, r1
 8004b58:	4614      	mov	r4, r2
 8004b5a:	4605      	mov	r5, r0
 8004b5c:	b118      	cbz	r0, 8004b66 <__swbuf_r+0x12>
 8004b5e:	6a03      	ldr	r3, [r0, #32]
 8004b60:	b90b      	cbnz	r3, 8004b66 <__swbuf_r+0x12>
 8004b62:	f7ff f993 	bl	8003e8c <__sinit>
 8004b66:	69a3      	ldr	r3, [r4, #24]
 8004b68:	60a3      	str	r3, [r4, #8]
 8004b6a:	89a3      	ldrh	r3, [r4, #12]
 8004b6c:	071a      	lsls	r2, r3, #28
 8004b6e:	d501      	bpl.n	8004b74 <__swbuf_r+0x20>
 8004b70:	6923      	ldr	r3, [r4, #16]
 8004b72:	b943      	cbnz	r3, 8004b86 <__swbuf_r+0x32>
 8004b74:	4621      	mov	r1, r4
 8004b76:	4628      	mov	r0, r5
 8004b78:	f000 f82a 	bl	8004bd0 <__swsetup_r>
 8004b7c:	b118      	cbz	r0, 8004b86 <__swbuf_r+0x32>
 8004b7e:	f04f 37ff 	mov.w	r7, #4294967295
 8004b82:	4638      	mov	r0, r7
 8004b84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b86:	6823      	ldr	r3, [r4, #0]
 8004b88:	6922      	ldr	r2, [r4, #16]
 8004b8a:	b2f6      	uxtb	r6, r6
 8004b8c:	1a98      	subs	r0, r3, r2
 8004b8e:	6963      	ldr	r3, [r4, #20]
 8004b90:	4637      	mov	r7, r6
 8004b92:	4283      	cmp	r3, r0
 8004b94:	dc05      	bgt.n	8004ba2 <__swbuf_r+0x4e>
 8004b96:	4621      	mov	r1, r4
 8004b98:	4628      	mov	r0, r5
 8004b9a:	f7ff ffb3 	bl	8004b04 <_fflush_r>
 8004b9e:	2800      	cmp	r0, #0
 8004ba0:	d1ed      	bne.n	8004b7e <__swbuf_r+0x2a>
 8004ba2:	68a3      	ldr	r3, [r4, #8]
 8004ba4:	3b01      	subs	r3, #1
 8004ba6:	60a3      	str	r3, [r4, #8]
 8004ba8:	6823      	ldr	r3, [r4, #0]
 8004baa:	1c5a      	adds	r2, r3, #1
 8004bac:	6022      	str	r2, [r4, #0]
 8004bae:	701e      	strb	r6, [r3, #0]
 8004bb0:	6962      	ldr	r2, [r4, #20]
 8004bb2:	1c43      	adds	r3, r0, #1
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d004      	beq.n	8004bc2 <__swbuf_r+0x6e>
 8004bb8:	89a3      	ldrh	r3, [r4, #12]
 8004bba:	07db      	lsls	r3, r3, #31
 8004bbc:	d5e1      	bpl.n	8004b82 <__swbuf_r+0x2e>
 8004bbe:	2e0a      	cmp	r6, #10
 8004bc0:	d1df      	bne.n	8004b82 <__swbuf_r+0x2e>
 8004bc2:	4621      	mov	r1, r4
 8004bc4:	4628      	mov	r0, r5
 8004bc6:	f7ff ff9d 	bl	8004b04 <_fflush_r>
 8004bca:	2800      	cmp	r0, #0
 8004bcc:	d0d9      	beq.n	8004b82 <__swbuf_r+0x2e>
 8004bce:	e7d6      	b.n	8004b7e <__swbuf_r+0x2a>

08004bd0 <__swsetup_r>:
 8004bd0:	b538      	push	{r3, r4, r5, lr}
 8004bd2:	4b29      	ldr	r3, [pc, #164]	@ (8004c78 <__swsetup_r+0xa8>)
 8004bd4:	4605      	mov	r5, r0
 8004bd6:	6818      	ldr	r0, [r3, #0]
 8004bd8:	460c      	mov	r4, r1
 8004bda:	b118      	cbz	r0, 8004be4 <__swsetup_r+0x14>
 8004bdc:	6a03      	ldr	r3, [r0, #32]
 8004bde:	b90b      	cbnz	r3, 8004be4 <__swsetup_r+0x14>
 8004be0:	f7ff f954 	bl	8003e8c <__sinit>
 8004be4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004be8:	0719      	lsls	r1, r3, #28
 8004bea:	d422      	bmi.n	8004c32 <__swsetup_r+0x62>
 8004bec:	06da      	lsls	r2, r3, #27
 8004bee:	d407      	bmi.n	8004c00 <__swsetup_r+0x30>
 8004bf0:	2209      	movs	r2, #9
 8004bf2:	602a      	str	r2, [r5, #0]
 8004bf4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8004bfc:	81a3      	strh	r3, [r4, #12]
 8004bfe:	e033      	b.n	8004c68 <__swsetup_r+0x98>
 8004c00:	0758      	lsls	r0, r3, #29
 8004c02:	d512      	bpl.n	8004c2a <__swsetup_r+0x5a>
 8004c04:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004c06:	b141      	cbz	r1, 8004c1a <__swsetup_r+0x4a>
 8004c08:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004c0c:	4299      	cmp	r1, r3
 8004c0e:	d002      	beq.n	8004c16 <__swsetup_r+0x46>
 8004c10:	4628      	mov	r0, r5
 8004c12:	f7ff fa85 	bl	8004120 <_free_r>
 8004c16:	2300      	movs	r3, #0
 8004c18:	6363      	str	r3, [r4, #52]	@ 0x34
 8004c1a:	89a3      	ldrh	r3, [r4, #12]
 8004c1c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004c20:	81a3      	strh	r3, [r4, #12]
 8004c22:	2300      	movs	r3, #0
 8004c24:	6063      	str	r3, [r4, #4]
 8004c26:	6923      	ldr	r3, [r4, #16]
 8004c28:	6023      	str	r3, [r4, #0]
 8004c2a:	89a3      	ldrh	r3, [r4, #12]
 8004c2c:	f043 0308 	orr.w	r3, r3, #8
 8004c30:	81a3      	strh	r3, [r4, #12]
 8004c32:	6923      	ldr	r3, [r4, #16]
 8004c34:	b94b      	cbnz	r3, 8004c4a <__swsetup_r+0x7a>
 8004c36:	89a3      	ldrh	r3, [r4, #12]
 8004c38:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004c3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c40:	d003      	beq.n	8004c4a <__swsetup_r+0x7a>
 8004c42:	4621      	mov	r1, r4
 8004c44:	4628      	mov	r0, r5
 8004c46:	f000 f8a2 	bl	8004d8e <__smakebuf_r>
 8004c4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c4e:	f013 0201 	ands.w	r2, r3, #1
 8004c52:	d00a      	beq.n	8004c6a <__swsetup_r+0x9a>
 8004c54:	2200      	movs	r2, #0
 8004c56:	60a2      	str	r2, [r4, #8]
 8004c58:	6962      	ldr	r2, [r4, #20]
 8004c5a:	4252      	negs	r2, r2
 8004c5c:	61a2      	str	r2, [r4, #24]
 8004c5e:	6922      	ldr	r2, [r4, #16]
 8004c60:	b942      	cbnz	r2, 8004c74 <__swsetup_r+0xa4>
 8004c62:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004c66:	d1c5      	bne.n	8004bf4 <__swsetup_r+0x24>
 8004c68:	bd38      	pop	{r3, r4, r5, pc}
 8004c6a:	0799      	lsls	r1, r3, #30
 8004c6c:	bf58      	it	pl
 8004c6e:	6962      	ldrpl	r2, [r4, #20]
 8004c70:	60a2      	str	r2, [r4, #8]
 8004c72:	e7f4      	b.n	8004c5e <__swsetup_r+0x8e>
 8004c74:	2000      	movs	r0, #0
 8004c76:	e7f7      	b.n	8004c68 <__swsetup_r+0x98>
 8004c78:	20000018 	.word	0x20000018

08004c7c <memmove>:
 8004c7c:	4288      	cmp	r0, r1
 8004c7e:	b510      	push	{r4, lr}
 8004c80:	eb01 0402 	add.w	r4, r1, r2
 8004c84:	d902      	bls.n	8004c8c <memmove+0x10>
 8004c86:	4284      	cmp	r4, r0
 8004c88:	4623      	mov	r3, r4
 8004c8a:	d807      	bhi.n	8004c9c <memmove+0x20>
 8004c8c:	1e43      	subs	r3, r0, #1
 8004c8e:	42a1      	cmp	r1, r4
 8004c90:	d008      	beq.n	8004ca4 <memmove+0x28>
 8004c92:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004c96:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004c9a:	e7f8      	b.n	8004c8e <memmove+0x12>
 8004c9c:	4601      	mov	r1, r0
 8004c9e:	4402      	add	r2, r0
 8004ca0:	428a      	cmp	r2, r1
 8004ca2:	d100      	bne.n	8004ca6 <memmove+0x2a>
 8004ca4:	bd10      	pop	{r4, pc}
 8004ca6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004caa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004cae:	e7f7      	b.n	8004ca0 <memmove+0x24>

08004cb0 <memchr>:
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	b510      	push	{r4, lr}
 8004cb4:	b2c9      	uxtb	r1, r1
 8004cb6:	4402      	add	r2, r0
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	4618      	mov	r0, r3
 8004cbc:	d101      	bne.n	8004cc2 <memchr+0x12>
 8004cbe:	2000      	movs	r0, #0
 8004cc0:	e003      	b.n	8004cca <memchr+0x1a>
 8004cc2:	7804      	ldrb	r4, [r0, #0]
 8004cc4:	3301      	adds	r3, #1
 8004cc6:	428c      	cmp	r4, r1
 8004cc8:	d1f6      	bne.n	8004cb8 <memchr+0x8>
 8004cca:	bd10      	pop	{r4, pc}

08004ccc <memcpy>:
 8004ccc:	440a      	add	r2, r1
 8004cce:	4291      	cmp	r1, r2
 8004cd0:	f100 33ff 	add.w	r3, r0, #4294967295
 8004cd4:	d100      	bne.n	8004cd8 <memcpy+0xc>
 8004cd6:	4770      	bx	lr
 8004cd8:	b510      	push	{r4, lr}
 8004cda:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004cde:	4291      	cmp	r1, r2
 8004ce0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004ce4:	d1f9      	bne.n	8004cda <memcpy+0xe>
 8004ce6:	bd10      	pop	{r4, pc}

08004ce8 <_realloc_r>:
 8004ce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cec:	4680      	mov	r8, r0
 8004cee:	4615      	mov	r5, r2
 8004cf0:	460c      	mov	r4, r1
 8004cf2:	b921      	cbnz	r1, 8004cfe <_realloc_r+0x16>
 8004cf4:	4611      	mov	r1, r2
 8004cf6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004cfa:	f7fe bf2b 	b.w	8003b54 <_malloc_r>
 8004cfe:	b92a      	cbnz	r2, 8004d0c <_realloc_r+0x24>
 8004d00:	f7ff fa0e 	bl	8004120 <_free_r>
 8004d04:	2400      	movs	r4, #0
 8004d06:	4620      	mov	r0, r4
 8004d08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d0c:	f000 f89e 	bl	8004e4c <_malloc_usable_size_r>
 8004d10:	4285      	cmp	r5, r0
 8004d12:	4606      	mov	r6, r0
 8004d14:	d802      	bhi.n	8004d1c <_realloc_r+0x34>
 8004d16:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004d1a:	d8f4      	bhi.n	8004d06 <_realloc_r+0x1e>
 8004d1c:	4629      	mov	r1, r5
 8004d1e:	4640      	mov	r0, r8
 8004d20:	f7fe ff18 	bl	8003b54 <_malloc_r>
 8004d24:	4607      	mov	r7, r0
 8004d26:	2800      	cmp	r0, #0
 8004d28:	d0ec      	beq.n	8004d04 <_realloc_r+0x1c>
 8004d2a:	42b5      	cmp	r5, r6
 8004d2c:	462a      	mov	r2, r5
 8004d2e:	4621      	mov	r1, r4
 8004d30:	bf28      	it	cs
 8004d32:	4632      	movcs	r2, r6
 8004d34:	f7ff ffca 	bl	8004ccc <memcpy>
 8004d38:	4621      	mov	r1, r4
 8004d3a:	4640      	mov	r0, r8
 8004d3c:	f7ff f9f0 	bl	8004120 <_free_r>
 8004d40:	463c      	mov	r4, r7
 8004d42:	e7e0      	b.n	8004d06 <_realloc_r+0x1e>

08004d44 <__swhatbuf_r>:
 8004d44:	b570      	push	{r4, r5, r6, lr}
 8004d46:	460c      	mov	r4, r1
 8004d48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d4c:	4615      	mov	r5, r2
 8004d4e:	2900      	cmp	r1, #0
 8004d50:	461e      	mov	r6, r3
 8004d52:	b096      	sub	sp, #88	@ 0x58
 8004d54:	da0c      	bge.n	8004d70 <__swhatbuf_r+0x2c>
 8004d56:	89a3      	ldrh	r3, [r4, #12]
 8004d58:	2100      	movs	r1, #0
 8004d5a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004d5e:	bf14      	ite	ne
 8004d60:	2340      	movne	r3, #64	@ 0x40
 8004d62:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004d66:	2000      	movs	r0, #0
 8004d68:	6031      	str	r1, [r6, #0]
 8004d6a:	602b      	str	r3, [r5, #0]
 8004d6c:	b016      	add	sp, #88	@ 0x58
 8004d6e:	bd70      	pop	{r4, r5, r6, pc}
 8004d70:	466a      	mov	r2, sp
 8004d72:	f000 f849 	bl	8004e08 <_fstat_r>
 8004d76:	2800      	cmp	r0, #0
 8004d78:	dbed      	blt.n	8004d56 <__swhatbuf_r+0x12>
 8004d7a:	9901      	ldr	r1, [sp, #4]
 8004d7c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004d80:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004d84:	4259      	negs	r1, r3
 8004d86:	4159      	adcs	r1, r3
 8004d88:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004d8c:	e7eb      	b.n	8004d66 <__swhatbuf_r+0x22>

08004d8e <__smakebuf_r>:
 8004d8e:	898b      	ldrh	r3, [r1, #12]
 8004d90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004d92:	079d      	lsls	r5, r3, #30
 8004d94:	4606      	mov	r6, r0
 8004d96:	460c      	mov	r4, r1
 8004d98:	d507      	bpl.n	8004daa <__smakebuf_r+0x1c>
 8004d9a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004d9e:	6023      	str	r3, [r4, #0]
 8004da0:	6123      	str	r3, [r4, #16]
 8004da2:	2301      	movs	r3, #1
 8004da4:	6163      	str	r3, [r4, #20]
 8004da6:	b003      	add	sp, #12
 8004da8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004daa:	466a      	mov	r2, sp
 8004dac:	ab01      	add	r3, sp, #4
 8004dae:	f7ff ffc9 	bl	8004d44 <__swhatbuf_r>
 8004db2:	9f00      	ldr	r7, [sp, #0]
 8004db4:	4605      	mov	r5, r0
 8004db6:	4639      	mov	r1, r7
 8004db8:	4630      	mov	r0, r6
 8004dba:	f7fe fecb 	bl	8003b54 <_malloc_r>
 8004dbe:	b948      	cbnz	r0, 8004dd4 <__smakebuf_r+0x46>
 8004dc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004dc4:	059a      	lsls	r2, r3, #22
 8004dc6:	d4ee      	bmi.n	8004da6 <__smakebuf_r+0x18>
 8004dc8:	f023 0303 	bic.w	r3, r3, #3
 8004dcc:	f043 0302 	orr.w	r3, r3, #2
 8004dd0:	81a3      	strh	r3, [r4, #12]
 8004dd2:	e7e2      	b.n	8004d9a <__smakebuf_r+0xc>
 8004dd4:	89a3      	ldrh	r3, [r4, #12]
 8004dd6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004dda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004dde:	81a3      	strh	r3, [r4, #12]
 8004de0:	9b01      	ldr	r3, [sp, #4]
 8004de2:	6020      	str	r0, [r4, #0]
 8004de4:	b15b      	cbz	r3, 8004dfe <__smakebuf_r+0x70>
 8004de6:	4630      	mov	r0, r6
 8004de8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004dec:	f000 f81e 	bl	8004e2c <_isatty_r>
 8004df0:	b128      	cbz	r0, 8004dfe <__smakebuf_r+0x70>
 8004df2:	89a3      	ldrh	r3, [r4, #12]
 8004df4:	f023 0303 	bic.w	r3, r3, #3
 8004df8:	f043 0301 	orr.w	r3, r3, #1
 8004dfc:	81a3      	strh	r3, [r4, #12]
 8004dfe:	89a3      	ldrh	r3, [r4, #12]
 8004e00:	431d      	orrs	r5, r3
 8004e02:	81a5      	strh	r5, [r4, #12]
 8004e04:	e7cf      	b.n	8004da6 <__smakebuf_r+0x18>
	...

08004e08 <_fstat_r>:
 8004e08:	b538      	push	{r3, r4, r5, lr}
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	4d06      	ldr	r5, [pc, #24]	@ (8004e28 <_fstat_r+0x20>)
 8004e0e:	4604      	mov	r4, r0
 8004e10:	4608      	mov	r0, r1
 8004e12:	4611      	mov	r1, r2
 8004e14:	602b      	str	r3, [r5, #0]
 8004e16:	f7fc f87f 	bl	8000f18 <_fstat>
 8004e1a:	1c43      	adds	r3, r0, #1
 8004e1c:	d102      	bne.n	8004e24 <_fstat_r+0x1c>
 8004e1e:	682b      	ldr	r3, [r5, #0]
 8004e20:	b103      	cbz	r3, 8004e24 <_fstat_r+0x1c>
 8004e22:	6023      	str	r3, [r4, #0]
 8004e24:	bd38      	pop	{r3, r4, r5, pc}
 8004e26:	bf00      	nop
 8004e28:	20000808 	.word	0x20000808

08004e2c <_isatty_r>:
 8004e2c:	b538      	push	{r3, r4, r5, lr}
 8004e2e:	2300      	movs	r3, #0
 8004e30:	4d05      	ldr	r5, [pc, #20]	@ (8004e48 <_isatty_r+0x1c>)
 8004e32:	4604      	mov	r4, r0
 8004e34:	4608      	mov	r0, r1
 8004e36:	602b      	str	r3, [r5, #0]
 8004e38:	f7fc f87d 	bl	8000f36 <_isatty>
 8004e3c:	1c43      	adds	r3, r0, #1
 8004e3e:	d102      	bne.n	8004e46 <_isatty_r+0x1a>
 8004e40:	682b      	ldr	r3, [r5, #0]
 8004e42:	b103      	cbz	r3, 8004e46 <_isatty_r+0x1a>
 8004e44:	6023      	str	r3, [r4, #0]
 8004e46:	bd38      	pop	{r3, r4, r5, pc}
 8004e48:	20000808 	.word	0x20000808

08004e4c <_malloc_usable_size_r>:
 8004e4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e50:	1f18      	subs	r0, r3, #4
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	bfbc      	itt	lt
 8004e56:	580b      	ldrlt	r3, [r1, r0]
 8004e58:	18c0      	addlt	r0, r0, r3
 8004e5a:	4770      	bx	lr

08004e5c <_init>:
 8004e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e5e:	bf00      	nop
 8004e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e62:	bc08      	pop	{r3}
 8004e64:	469e      	mov	lr, r3
 8004e66:	4770      	bx	lr

08004e68 <_fini>:
 8004e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e6a:	bf00      	nop
 8004e6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e6e:	bc08      	pop	{r3}
 8004e70:	469e      	mov	lr, r3
 8004e72:	4770      	bx	lr
