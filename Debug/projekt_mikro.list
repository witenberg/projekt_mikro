
projekt_mikro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043a0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001cc  080044ac  080044ac  000054ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004678  08004678  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  08004678  08004678  00005678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004680  08004680  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004680  08004680  00005680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004684  08004684  00005684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004688  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008a4  2000005c  080046e4  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000900  080046e4  00006900  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ca71  00000000  00000000  00006085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021b7  00000000  00000000  00012af6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca8  00000000  00000000  00014cb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009f9  00000000  00000000  00015958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000180fd  00000000  00000000  00016351  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f43a  00000000  00000000  0002e44e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ab0f  00000000  00000000  0003d888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c8397  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039d4  00000000  00000000  000c83dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000cbdb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08004494 	.word	0x08004494

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08004494 	.word	0x08004494

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b088      	sub	sp, #32
 8000160:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000162:	f107 0310 	add.w	r3, r7, #16
 8000166:	2200      	movs	r2, #0
 8000168:	601a      	str	r2, [r3, #0]
 800016a:	605a      	str	r2, [r3, #4]
 800016c:	609a      	str	r2, [r3, #8]
 800016e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000170:	4b2d      	ldr	r3, [pc, #180]	@ (8000228 <MX_GPIO_Init+0xcc>)
 8000172:	699b      	ldr	r3, [r3, #24]
 8000174:	4a2c      	ldr	r2, [pc, #176]	@ (8000228 <MX_GPIO_Init+0xcc>)
 8000176:	f043 0310 	orr.w	r3, r3, #16
 800017a:	6193      	str	r3, [r2, #24]
 800017c:	4b2a      	ldr	r3, [pc, #168]	@ (8000228 <MX_GPIO_Init+0xcc>)
 800017e:	699b      	ldr	r3, [r3, #24]
 8000180:	f003 0310 	and.w	r3, r3, #16
 8000184:	60fb      	str	r3, [r7, #12]
 8000186:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000188:	4b27      	ldr	r3, [pc, #156]	@ (8000228 <MX_GPIO_Init+0xcc>)
 800018a:	699b      	ldr	r3, [r3, #24]
 800018c:	4a26      	ldr	r2, [pc, #152]	@ (8000228 <MX_GPIO_Init+0xcc>)
 800018e:	f043 0320 	orr.w	r3, r3, #32
 8000192:	6193      	str	r3, [r2, #24]
 8000194:	4b24      	ldr	r3, [pc, #144]	@ (8000228 <MX_GPIO_Init+0xcc>)
 8000196:	699b      	ldr	r3, [r3, #24]
 8000198:	f003 0320 	and.w	r3, r3, #32
 800019c:	60bb      	str	r3, [r7, #8]
 800019e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001a0:	4b21      	ldr	r3, [pc, #132]	@ (8000228 <MX_GPIO_Init+0xcc>)
 80001a2:	699b      	ldr	r3, [r3, #24]
 80001a4:	4a20      	ldr	r2, [pc, #128]	@ (8000228 <MX_GPIO_Init+0xcc>)
 80001a6:	f043 0304 	orr.w	r3, r3, #4
 80001aa:	6193      	str	r3, [r2, #24]
 80001ac:	4b1e      	ldr	r3, [pc, #120]	@ (8000228 <MX_GPIO_Init+0xcc>)
 80001ae:	699b      	ldr	r3, [r3, #24]
 80001b0:	f003 0304 	and.w	r3, r3, #4
 80001b4:	607b      	str	r3, [r7, #4]
 80001b6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001b8:	4b1b      	ldr	r3, [pc, #108]	@ (8000228 <MX_GPIO_Init+0xcc>)
 80001ba:	699b      	ldr	r3, [r3, #24]
 80001bc:	4a1a      	ldr	r2, [pc, #104]	@ (8000228 <MX_GPIO_Init+0xcc>)
 80001be:	f043 0308 	orr.w	r3, r3, #8
 80001c2:	6193      	str	r3, [r2, #24]
 80001c4:	4b18      	ldr	r3, [pc, #96]	@ (8000228 <MX_GPIO_Init+0xcc>)
 80001c6:	699b      	ldr	r3, [r3, #24]
 80001c8:	f003 0308 	and.w	r3, r3, #8
 80001cc:	603b      	str	r3, [r7, #0]
 80001ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80001d0:	2200      	movs	r2, #0
 80001d2:	2120      	movs	r1, #32
 80001d4:	4815      	ldr	r0, [pc, #84]	@ (800022c <MX_GPIO_Init+0xd0>)
 80001d6:	f001 fb99 	bl	800190c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80001da:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80001de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80001e0:	4b13      	ldr	r3, [pc, #76]	@ (8000230 <MX_GPIO_Init+0xd4>)
 80001e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001e4:	2300      	movs	r3, #0
 80001e6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80001e8:	f107 0310 	add.w	r3, r7, #16
 80001ec:	4619      	mov	r1, r3
 80001ee:	4811      	ldr	r0, [pc, #68]	@ (8000234 <MX_GPIO_Init+0xd8>)
 80001f0:	f001 fa08 	bl	8001604 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80001f4:	2320      	movs	r3, #32
 80001f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001f8:	2301      	movs	r3, #1
 80001fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001fc:	2300      	movs	r3, #0
 80001fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000200:	2302      	movs	r3, #2
 8000202:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000204:	f107 0310 	add.w	r3, r7, #16
 8000208:	4619      	mov	r1, r3
 800020a:	4808      	ldr	r0, [pc, #32]	@ (800022c <MX_GPIO_Init+0xd0>)
 800020c:	f001 f9fa 	bl	8001604 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000210:	2200      	movs	r2, #0
 8000212:	2100      	movs	r1, #0
 8000214:	2028      	movs	r0, #40	@ 0x28
 8000216:	f001 f90c 	bl	8001432 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800021a:	2028      	movs	r0, #40	@ 0x28
 800021c:	f001 f925 	bl	800146a <HAL_NVIC_EnableIRQ>

}
 8000220:	bf00      	nop
 8000222:	3720      	adds	r7, #32
 8000224:	46bd      	mov	sp, r7
 8000226:	bd80      	pop	{r7, pc}
 8000228:	40021000 	.word	0x40021000
 800022c:	40010800 	.word	0x40010800
 8000230:	10110000 	.word	0x10110000
 8000234:	40011000 	.word	0x40011000

08000238 <calculate_crc>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* === CRC === */
uint16_t calculate_crc(const char *data, size_t length) {
 8000238:	b480      	push	{r7}
 800023a:	b087      	sub	sp, #28
 800023c:	af00      	add	r7, sp, #0
 800023e:	6078      	str	r0, [r7, #4]
 8000240:	6039      	str	r1, [r7, #0]
	uint16_t crc = 0x0000; // początkowa wartość
 8000242:	2300      	movs	r3, #0
 8000244:	82fb      	strh	r3, [r7, #22]
	uint16_t polynomial = 0xA001; // polinom (odwrócony 0x8005)
 8000246:	f24a 0301 	movw	r3, #40961	@ 0xa001
 800024a:	81bb      	strh	r3, [r7, #12]

	for (size_t i = 0; i < length; i++) {
 800024c:	2300      	movs	r3, #0
 800024e:	613b      	str	r3, [r7, #16]
 8000250:	e022      	b.n	8000298 <calculate_crc+0x60>
		crc ^= (uint8_t)data[i]; // XOR z bieżącym bajtem
 8000252:	687a      	ldr	r2, [r7, #4]
 8000254:	693b      	ldr	r3, [r7, #16]
 8000256:	4413      	add	r3, r2
 8000258:	781b      	ldrb	r3, [r3, #0]
 800025a:	461a      	mov	r2, r3
 800025c:	8afb      	ldrh	r3, [r7, #22]
 800025e:	4053      	eors	r3, r2
 8000260:	82fb      	strh	r3, [r7, #22]
		for (uint8_t bit = 0; bit < 8; bit++) {
 8000262:	2300      	movs	r3, #0
 8000264:	73fb      	strb	r3, [r7, #15]
 8000266:	e011      	b.n	800028c <calculate_crc+0x54>
			if (crc & 0x0001) crc = (crc >> 1) ^ polynomial;
 8000268:	8afb      	ldrh	r3, [r7, #22]
 800026a:	f003 0301 	and.w	r3, r3, #1
 800026e:	2b00      	cmp	r3, #0
 8000270:	d006      	beq.n	8000280 <calculate_crc+0x48>
 8000272:	8afb      	ldrh	r3, [r7, #22]
 8000274:	085b      	lsrs	r3, r3, #1
 8000276:	b29a      	uxth	r2, r3
 8000278:	89bb      	ldrh	r3, [r7, #12]
 800027a:	4053      	eors	r3, r2
 800027c:	82fb      	strh	r3, [r7, #22]
 800027e:	e002      	b.n	8000286 <calculate_crc+0x4e>
			else crc >>= 1;
 8000280:	8afb      	ldrh	r3, [r7, #22]
 8000282:	085b      	lsrs	r3, r3, #1
 8000284:	82fb      	strh	r3, [r7, #22]
		for (uint8_t bit = 0; bit < 8; bit++) {
 8000286:	7bfb      	ldrb	r3, [r7, #15]
 8000288:	3301      	adds	r3, #1
 800028a:	73fb      	strb	r3, [r7, #15]
 800028c:	7bfb      	ldrb	r3, [r7, #15]
 800028e:	2b07      	cmp	r3, #7
 8000290:	d9ea      	bls.n	8000268 <calculate_crc+0x30>
	for (size_t i = 0; i < length; i++) {
 8000292:	693b      	ldr	r3, [r7, #16]
 8000294:	3301      	adds	r3, #1
 8000296:	613b      	str	r3, [r7, #16]
 8000298:	693a      	ldr	r2, [r7, #16]
 800029a:	683b      	ldr	r3, [r7, #0]
 800029c:	429a      	cmp	r2, r3
 800029e:	d3d8      	bcc.n	8000252 <calculate_crc+0x1a>
		}
	}
	return crc;
 80002a0:	8afb      	ldrh	r3, [r7, #22]
}
 80002a2:	4618      	mov	r0, r3
 80002a4:	371c      	adds	r7, #28
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bc80      	pop	{r7}
 80002aa:	4770      	bx	lr

080002ac <calculate_frame_crc>:

uint16_t calculate_frame_crc(Frame *frame) {
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b084      	sub	sp, #16
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
    uint16_t crc = 0x0000; // Początkowa wartość CRC
 80002b4:	2300      	movs	r3, #0
 80002b6:	81fb      	strh	r3, [r7, #14]

    // Oblicz CRC dla pola receiver
    crc = calculate_crc((const char *)frame->receiver, sizeof(frame->receiver)) ^ crc;
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	3303      	adds	r3, #3
 80002bc:	2103      	movs	r1, #3
 80002be:	4618      	mov	r0, r3
 80002c0:	f7ff ffba 	bl	8000238 <calculate_crc>
 80002c4:	4603      	mov	r3, r0
 80002c6:	461a      	mov	r2, r3
 80002c8:	89fb      	ldrh	r3, [r7, #14]
 80002ca:	4053      	eors	r3, r2
 80002cc:	81fb      	strh	r3, [r7, #14]

    // Oblicz CRC dla pola sender
    crc = calculate_crc((const char *)frame->sender, sizeof(frame->sender)) ^ crc;
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	2103      	movs	r1, #3
 80002d2:	4618      	mov	r0, r3
 80002d4:	f7ff ffb0 	bl	8000238 <calculate_crc>
 80002d8:	4603      	mov	r3, r0
 80002da:	461a      	mov	r2, r3
 80002dc:	89fb      	ldrh	r3, [r7, #14]
 80002de:	4053      	eors	r3, r2
 80002e0:	81fb      	strh	r3, [r7, #14]

    // Oblicz CRC dla pola length
    crc = calculate_crc((const char *)frame->length, sizeof(frame->length)) ^ crc;
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	3306      	adds	r3, #6
 80002e6:	2104      	movs	r1, #4
 80002e8:	4618      	mov	r0, r3
 80002ea:	f7ff ffa5 	bl	8000238 <calculate_crc>
 80002ee:	4603      	mov	r3, r0
 80002f0:	461a      	mov	r2, r3
 80002f2:	89fb      	ldrh	r3, [r7, #14]
 80002f4:	4053      	eors	r3, r2
 80002f6:	81fb      	strh	r3, [r7, #14]

    // Oblicz CRC dla pola data
    crc = calculate_crc((const char *)frame->data_raw, sizeof(frame->data_raw)) ^ crc;
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	330a      	adds	r3, #10
 80002fc:	f240 1101 	movw	r1, #257	@ 0x101
 8000300:	4618      	mov	r0, r3
 8000302:	f7ff ff99 	bl	8000238 <calculate_crc>
 8000306:	4603      	mov	r3, r0
 8000308:	461a      	mov	r2, r3
 800030a:	89fb      	ldrh	r3, [r7, #14]
 800030c:	4053      	eors	r3, r2
 800030e:	81fb      	strh	r3, [r7, #14]

    return crc;
 8000310:	89fb      	ldrh	r3, [r7, #14]
}
 8000312:	4618      	mov	r0, r3
 8000314:	3710      	adds	r7, #16
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}
	...

0800031c <USART_fsend>:
	} else {
		return 1;
	}
}

void USART_fsend(char* format, ...) {
 800031c:	b40f      	push	{r0, r1, r2, r3}
 800031e:	b580      	push	{r7, lr}
 8000320:	b0c4      	sub	sp, #272	@ 0x110
 8000322:	af00      	add	r7, sp, #0
	char tmp[256];
	va_list arglist;
	va_start(arglist, format);
 8000324:	f507 728e 	add.w	r2, r7, #284	@ 0x11c
 8000328:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800032c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000330:	601a      	str	r2, [r3, #0]
	vsprintf(tmp, format, arglist);
 8000332:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000336:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800033a:	f107 000c 	add.w	r0, r7, #12
 800033e:	681a      	ldr	r2, [r3, #0]
 8000340:	f8d7 1118 	ldr.w	r1, [r7, #280]	@ 0x118
 8000344:	f003 fca8 	bl	8003c98 <vsiprintf>
	va_end(arglist);
	volatile int idx = USART_TX_EMPTY;
 8000348:	4b44      	ldr	r3, [pc, #272]	@ (800045c <USART_fsend+0x140>)
 800034a:	881b      	ldrh	r3, [r3, #0]
 800034c:	b29b      	uxth	r3, r3
 800034e:	461a      	mov	r2, r3
 8000350:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000354:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000358:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < strlen(tmp); i++) {
 800035a:	2300      	movs	r3, #0
 800035c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8000360:	e025      	b.n	80003ae <USART_fsend+0x92>
		USART_BUF_TX[idx] = tmp[i];
 8000362:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000366:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000370:	f5a2 7182 	sub.w	r1, r2, #260	@ 0x104
 8000374:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8000378:	440a      	add	r2, r1
 800037a:	7811      	ldrb	r1, [r2, #0]
 800037c:	4a38      	ldr	r2, [pc, #224]	@ (8000460 <USART_fsend+0x144>)
 800037e:	54d1      	strb	r1, [r2, r3]
		idx = (idx + 1) % USART_TXBUF_SIZE;
 8000380:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000384:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	3301      	adds	r3, #1
 800038c:	425a      	negs	r2, r3
 800038e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000392:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8000396:	bf58      	it	pl
 8000398:	4253      	negpl	r3, r2
 800039a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800039e:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80003a2:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < strlen(tmp); i++) {
 80003a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80003a8:	3301      	adds	r3, #1
 80003aa:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80003ae:	f107 030c 	add.w	r3, r7, #12
 80003b2:	4618      	mov	r0, r3
 80003b4:	f7ff feca 	bl	800014c <strlen>
 80003b8:	4602      	mov	r2, r0
 80003ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80003be:	429a      	cmp	r2, r3
 80003c0:	d8cf      	bhi.n	8000362 <USART_fsend+0x46>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003c2:	b672      	cpsid	i
}
 80003c4:	bf00      	nop
	}

	__disable_irq();
	if (USART_TX_EMPTY == USART_TX_BUSY && __HAL_UART_GET_FLAG(&huart2, UART_FLAG_TXE) == SET) {
 80003c6:	4b25      	ldr	r3, [pc, #148]	@ (800045c <USART_fsend+0x140>)
 80003c8:	881b      	ldrh	r3, [r3, #0]
 80003ca:	b29a      	uxth	r2, r3
 80003cc:	4b25      	ldr	r3, [pc, #148]	@ (8000464 <USART_fsend+0x148>)
 80003ce:	881b      	ldrh	r3, [r3, #0]
 80003d0:	b29b      	uxth	r3, r3
 80003d2:	429a      	cmp	r2, r3
 80003d4:	d130      	bne.n	8000438 <USART_fsend+0x11c>
 80003d6:	4b24      	ldr	r3, [pc, #144]	@ (8000468 <USART_fsend+0x14c>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80003e0:	2b80      	cmp	r3, #128	@ 0x80
 80003e2:	d129      	bne.n	8000438 <USART_fsend+0x11c>
		USART_TX_EMPTY = idx;
 80003e4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80003e8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	b29a      	uxth	r2, r3
 80003f0:	4b1a      	ldr	r3, [pc, #104]	@ (800045c <USART_fsend+0x140>)
 80003f2:	801a      	strh	r2, [r3, #0]
		uint8_t tmp = USART_BUF_TX[USART_TX_BUSY];
 80003f4:	4b1b      	ldr	r3, [pc, #108]	@ (8000464 <USART_fsend+0x148>)
 80003f6:	881b      	ldrh	r3, [r3, #0]
 80003f8:	b29b      	uxth	r3, r3
 80003fa:	461a      	mov	r2, r3
 80003fc:	4b18      	ldr	r3, [pc, #96]	@ (8000460 <USART_fsend+0x144>)
 80003fe:	5c9a      	ldrb	r2, [r3, r2]
 8000400:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000404:	f2a3 130d 	subw	r3, r3, #269	@ 0x10d
 8000408:	701a      	strb	r2, [r3, #0]
		USART_TX_BUSY++;
 800040a:	4b16      	ldr	r3, [pc, #88]	@ (8000464 <USART_fsend+0x148>)
 800040c:	881b      	ldrh	r3, [r3, #0]
 800040e:	b29b      	uxth	r3, r3
 8000410:	3301      	adds	r3, #1
 8000412:	b29a      	uxth	r2, r3
 8000414:	4b13      	ldr	r3, [pc, #76]	@ (8000464 <USART_fsend+0x148>)
 8000416:	801a      	strh	r2, [r3, #0]
		if (USART_TX_BUSY >= USART_TXBUF_SIZE) USART_TX_BUSY = 0;
 8000418:	4b12      	ldr	r3, [pc, #72]	@ (8000464 <USART_fsend+0x148>)
 800041a:	881b      	ldrh	r3, [r3, #0]
 800041c:	b29b      	uxth	r3, r3
 800041e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000422:	d302      	bcc.n	800042a <USART_fsend+0x10e>
 8000424:	4b0f      	ldr	r3, [pc, #60]	@ (8000464 <USART_fsend+0x148>)
 8000426:	2200      	movs	r2, #0
 8000428:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart2, &tmp, 1);
 800042a:	1cfb      	adds	r3, r7, #3
 800042c:	2201      	movs	r2, #1
 800042e:	4619      	mov	r1, r3
 8000430:	480d      	ldr	r0, [pc, #52]	@ (8000468 <USART_fsend+0x14c>)
 8000432:	f002 fd83 	bl	8002f3c <HAL_UART_Transmit_IT>
	if (USART_TX_EMPTY == USART_TX_BUSY && __HAL_UART_GET_FLAG(&huart2, UART_FLAG_TXE) == SET) {
 8000436:	e007      	b.n	8000448 <USART_fsend+0x12c>
	}
	else USART_TX_EMPTY = idx;
 8000438:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800043c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	b29a      	uxth	r2, r3
 8000444:	4b05      	ldr	r3, [pc, #20]	@ (800045c <USART_fsend+0x140>)
 8000446:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000448:	b662      	cpsie	i
}
 800044a:	bf00      	nop
	__enable_irq();
}
 800044c:	bf00      	nop
 800044e:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8000452:	46bd      	mov	sp, r7
 8000454:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000458:	b004      	add	sp, #16
 800045a:	4770      	bx	lr
 800045c:	200004fc 	.word	0x200004fc
 8000460:	200000fc 	.word	0x200000fc
 8000464:	200004fe 	.word	0x200004fe
 8000468:	2000076c 	.word	0x2000076c

0800046c <HAL_UART_RxCpltCallback>:

/* === USART CALLBACK RECEIVE === */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800046c:	b580      	push	{r7, lr}
 800046e:	b082      	sub	sp, #8
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
	if (huart == &huart2) {
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	4a10      	ldr	r2, [pc, #64]	@ (80004b8 <HAL_UART_RxCpltCallback+0x4c>)
 8000478:	4293      	cmp	r3, r2
 800047a:	d119      	bne.n	80004b0 <HAL_UART_RxCpltCallback+0x44>
		USART_RX_EMPTY++;
 800047c:	4b0f      	ldr	r3, [pc, #60]	@ (80004bc <HAL_UART_RxCpltCallback+0x50>)
 800047e:	881b      	ldrh	r3, [r3, #0]
 8000480:	b29b      	uxth	r3, r3
 8000482:	3301      	adds	r3, #1
 8000484:	b29a      	uxth	r2, r3
 8000486:	4b0d      	ldr	r3, [pc, #52]	@ (80004bc <HAL_UART_RxCpltCallback+0x50>)
 8000488:	801a      	strh	r2, [r3, #0]
		if (USART_RX_EMPTY >= USART_RXBUF_SIZE) USART_RX_EMPTY = 0;
 800048a:	4b0c      	ldr	r3, [pc, #48]	@ (80004bc <HAL_UART_RxCpltCallback+0x50>)
 800048c:	881b      	ldrh	r3, [r3, #0]
 800048e:	b29b      	uxth	r3, r3
 8000490:	2b7f      	cmp	r3, #127	@ 0x7f
 8000492:	d902      	bls.n	800049a <HAL_UART_RxCpltCallback+0x2e>
 8000494:	4b09      	ldr	r3, [pc, #36]	@ (80004bc <HAL_UART_RxCpltCallback+0x50>)
 8000496:	2200      	movs	r2, #0
 8000498:	801a      	strh	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, &USART_BUF_RX[USART_RX_EMPTY], 1);
 800049a:	4b08      	ldr	r3, [pc, #32]	@ (80004bc <HAL_UART_RxCpltCallback+0x50>)
 800049c:	881b      	ldrh	r3, [r3, #0]
 800049e:	b29b      	uxth	r3, r3
 80004a0:	461a      	mov	r2, r3
 80004a2:	4b07      	ldr	r3, [pc, #28]	@ (80004c0 <HAL_UART_RxCpltCallback+0x54>)
 80004a4:	4413      	add	r3, r2
 80004a6:	2201      	movs	r2, #1
 80004a8:	4619      	mov	r1, r3
 80004aa:	4803      	ldr	r0, [pc, #12]	@ (80004b8 <HAL_UART_RxCpltCallback+0x4c>)
 80004ac:	f002 fd7b 	bl	8002fa6 <HAL_UART_Receive_IT>
	}
}
 80004b0:	bf00      	nop
 80004b2:	3708      	adds	r7, #8
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	2000076c 	.word	0x2000076c
 80004bc:	200000f8 	.word	0x200000f8
 80004c0:	20000078 	.word	0x20000078

080004c4 <HAL_UART_TxCpltCallback>:

/* === USART TRANSMIT CALLBACK === */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b084      	sub	sp, #16
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
    if (huart == &huart2) {
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	4a16      	ldr	r2, [pc, #88]	@ (8000528 <HAL_UART_TxCpltCallback+0x64>)
 80004d0:	4293      	cmp	r3, r2
 80004d2:	d125      	bne.n	8000520 <HAL_UART_TxCpltCallback+0x5c>
        // sprawdzenie, czy są dane do wysłania
        if (USART_TX_EMPTY != USART_TX_BUSY) {
 80004d4:	4b15      	ldr	r3, [pc, #84]	@ (800052c <HAL_UART_TxCpltCallback+0x68>)
 80004d6:	881b      	ldrh	r3, [r3, #0]
 80004d8:	b29a      	uxth	r2, r3
 80004da:	4b15      	ldr	r3, [pc, #84]	@ (8000530 <HAL_UART_TxCpltCallback+0x6c>)
 80004dc:	881b      	ldrh	r3, [r3, #0]
 80004de:	b29b      	uxth	r3, r3
 80004e0:	429a      	cmp	r2, r3
 80004e2:	d01d      	beq.n	8000520 <HAL_UART_TxCpltCallback+0x5c>
        	uint8_t tmp = USART_BUF_TX[USART_TX_BUSY];
 80004e4:	4b12      	ldr	r3, [pc, #72]	@ (8000530 <HAL_UART_TxCpltCallback+0x6c>)
 80004e6:	881b      	ldrh	r3, [r3, #0]
 80004e8:	b29b      	uxth	r3, r3
 80004ea:	461a      	mov	r2, r3
 80004ec:	4b11      	ldr	r3, [pc, #68]	@ (8000534 <HAL_UART_TxCpltCallback+0x70>)
 80004ee:	5c9b      	ldrb	r3, [r3, r2]
 80004f0:	73fb      	strb	r3, [r7, #15]
        	USART_TX_BUSY++;
 80004f2:	4b0f      	ldr	r3, [pc, #60]	@ (8000530 <HAL_UART_TxCpltCallback+0x6c>)
 80004f4:	881b      	ldrh	r3, [r3, #0]
 80004f6:	b29b      	uxth	r3, r3
 80004f8:	3301      	adds	r3, #1
 80004fa:	b29a      	uxth	r2, r3
 80004fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000530 <HAL_UART_TxCpltCallback+0x6c>)
 80004fe:	801a      	strh	r2, [r3, #0]
        	if (USART_TX_BUSY >= USART_TXBUF_SIZE) USART_TX_BUSY = 0;
 8000500:	4b0b      	ldr	r3, [pc, #44]	@ (8000530 <HAL_UART_TxCpltCallback+0x6c>)
 8000502:	881b      	ldrh	r3, [r3, #0]
 8000504:	b29b      	uxth	r3, r3
 8000506:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800050a:	d302      	bcc.n	8000512 <HAL_UART_TxCpltCallback+0x4e>
 800050c:	4b08      	ldr	r3, [pc, #32]	@ (8000530 <HAL_UART_TxCpltCallback+0x6c>)
 800050e:	2200      	movs	r2, #0
 8000510:	801a      	strh	r2, [r3, #0]
            HAL_UART_Transmit_IT(&huart2, &tmp, 1); // bajt wysłany, można wysłać następny
 8000512:	f107 030f 	add.w	r3, r7, #15
 8000516:	2201      	movs	r2, #1
 8000518:	4619      	mov	r1, r3
 800051a:	4803      	ldr	r0, [pc, #12]	@ (8000528 <HAL_UART_TxCpltCallback+0x64>)
 800051c:	f002 fd0e 	bl	8002f3c <HAL_UART_Transmit_IT>
        }
    }
}
 8000520:	bf00      	nop
 8000522:	3710      	adds	r7, #16
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}
 8000528:	2000076c 	.word	0x2000076c
 800052c:	200004fc 	.word	0x200004fc
 8000530:	200004fe 	.word	0x200004fe
 8000534:	200000fc 	.word	0x200000fc

08000538 <USART_getchar>:

int16_t USART_getchar(){
 8000538:	b480      	push	{r7}
 800053a:	b083      	sub	sp, #12
 800053c:	af00      	add	r7, sp, #0
	int16_t tmp;
	if (USART_RX_EMPTY != USART_RX_BUSY) {
 800053e:	4b14      	ldr	r3, [pc, #80]	@ (8000590 <USART_getchar+0x58>)
 8000540:	881b      	ldrh	r3, [r3, #0]
 8000542:	b29a      	uxth	r2, r3
 8000544:	4b13      	ldr	r3, [pc, #76]	@ (8000594 <USART_getchar+0x5c>)
 8000546:	881b      	ldrh	r3, [r3, #0]
 8000548:	b29b      	uxth	r3, r3
 800054a:	429a      	cmp	r2, r3
 800054c:	d018      	beq.n	8000580 <USART_getchar+0x48>
		 tmp = USART_BUF_RX[USART_RX_BUSY];
 800054e:	4b11      	ldr	r3, [pc, #68]	@ (8000594 <USART_getchar+0x5c>)
 8000550:	881b      	ldrh	r3, [r3, #0]
 8000552:	b29b      	uxth	r3, r3
 8000554:	461a      	mov	r2, r3
 8000556:	4b10      	ldr	r3, [pc, #64]	@ (8000598 <USART_getchar+0x60>)
 8000558:	5c9b      	ldrb	r3, [r3, r2]
 800055a:	80fb      	strh	r3, [r7, #6]
		 USART_RX_BUSY++;
 800055c:	4b0d      	ldr	r3, [pc, #52]	@ (8000594 <USART_getchar+0x5c>)
 800055e:	881b      	ldrh	r3, [r3, #0]
 8000560:	b29b      	uxth	r3, r3
 8000562:	3301      	adds	r3, #1
 8000564:	b29a      	uxth	r2, r3
 8000566:	4b0b      	ldr	r3, [pc, #44]	@ (8000594 <USART_getchar+0x5c>)
 8000568:	801a      	strh	r2, [r3, #0]
		 if (USART_RX_BUSY >= USART_RXBUF_SIZE) USART_RX_BUSY = 0;
 800056a:	4b0a      	ldr	r3, [pc, #40]	@ (8000594 <USART_getchar+0x5c>)
 800056c:	881b      	ldrh	r3, [r3, #0]
 800056e:	b29b      	uxth	r3, r3
 8000570:	2b7f      	cmp	r3, #127	@ 0x7f
 8000572:	d902      	bls.n	800057a <USART_getchar+0x42>
 8000574:	4b07      	ldr	r3, [pc, #28]	@ (8000594 <USART_getchar+0x5c>)
 8000576:	2200      	movs	r2, #0
 8000578:	801a      	strh	r2, [r3, #0]
		 return tmp;
 800057a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800057e:	e001      	b.n	8000584 <USART_getchar+0x4c>
	} else return -1;
 8000580:	f04f 33ff 	mov.w	r3, #4294967295

}
 8000584:	4618      	mov	r0, r3
 8000586:	370c      	adds	r7, #12
 8000588:	46bd      	mov	sp, r7
 800058a:	bc80      	pop	{r7}
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop
 8000590:	200000f8 	.word	0x200000f8
 8000594:	200000fa 	.word	0x200000fa
 8000598:	20000078 	.word	0x20000078

0800059c <validate_and_atoi>:





uint16_t validate_and_atoi(const char *str, size_t length) {
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
 80005a4:	6039      	str	r1, [r7, #0]
    uint16_t result = 0;
 80005a6:	2300      	movs	r3, #0
 80005a8:	81fb      	strh	r3, [r7, #14]

    // sprawdzanie czy kazdy znak to cyfra
    for (size_t i = 0; i < length; i++) {
 80005aa:	2300      	movs	r3, #0
 80005ac:	60bb      	str	r3, [r7, #8]
 80005ae:	e027      	b.n	8000600 <validate_and_atoi+0x64>
        if (str[i] < '0' || str[i] > '9') {
 80005b0:	687a      	ldr	r2, [r7, #4]
 80005b2:	68bb      	ldr	r3, [r7, #8]
 80005b4:	4413      	add	r3, r2
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	2b2f      	cmp	r3, #47	@ 0x2f
 80005ba:	d905      	bls.n	80005c8 <validate_and_atoi+0x2c>
 80005bc:	687a      	ldr	r2, [r7, #4]
 80005be:	68bb      	ldr	r3, [r7, #8]
 80005c0:	4413      	add	r3, r2
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	2b39      	cmp	r3, #57	@ 0x39
 80005c6:	d90a      	bls.n	80005de <validate_and_atoi+0x42>
            USART_fsend("invalid char '%c' during atoi\n", str[i]);
 80005c8:	687a      	ldr	r2, [r7, #4]
 80005ca:	68bb      	ldr	r3, [r7, #8]
 80005cc:	4413      	add	r3, r2
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	4619      	mov	r1, r3
 80005d2:	4810      	ldr	r0, [pc, #64]	@ (8000614 <validate_and_atoi+0x78>)
 80005d4:	f7ff fea2 	bl	800031c <USART_fsend>
            return 65535; // maksymalna wartosc uint16 jako kod bledu
 80005d8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80005dc:	e015      	b.n	800060a <validate_and_atoi+0x6e>
        }
        result = (result * 10) + (str[i] - '0');
 80005de:	89fb      	ldrh	r3, [r7, #14]
 80005e0:	461a      	mov	r2, r3
 80005e2:	0092      	lsls	r2, r2, #2
 80005e4:	4413      	add	r3, r2
 80005e6:	005b      	lsls	r3, r3, #1
 80005e8:	b29b      	uxth	r3, r3
 80005ea:	6879      	ldr	r1, [r7, #4]
 80005ec:	68ba      	ldr	r2, [r7, #8]
 80005ee:	440a      	add	r2, r1
 80005f0:	7812      	ldrb	r2, [r2, #0]
 80005f2:	4413      	add	r3, r2
 80005f4:	b29b      	uxth	r3, r3
 80005f6:	3b30      	subs	r3, #48	@ 0x30
 80005f8:	81fb      	strh	r3, [r7, #14]
    for (size_t i = 0; i < length; i++) {
 80005fa:	68bb      	ldr	r3, [r7, #8]
 80005fc:	3301      	adds	r3, #1
 80005fe:	60bb      	str	r3, [r7, #8]
 8000600:	68ba      	ldr	r2, [r7, #8]
 8000602:	683b      	ldr	r3, [r7, #0]
 8000604:	429a      	cmp	r2, r3
 8000606:	d3d3      	bcc.n	80005b0 <validate_and_atoi+0x14>
    }

    return result;
 8000608:	89fb      	ldrh	r3, [r7, #14]
}
 800060a:	4618      	mov	r0, r3
 800060c:	3710      	adds	r7, #16
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	080044b4 	.word	0x080044b4

08000618 <process_frame>:

void process_frame() {
 8000618:	b590      	push	{r4, r7, lr}
 800061a:	b087      	sub	sp, #28
 800061c:	af00      	add	r7, sp, #0

	if (frame.crc != calculate_frame_crc(&frame)) return;
 800061e:	4b57      	ldr	r3, [pc, #348]	@ (800077c <process_frame+0x164>)
 8000620:	f8b3 420c 	ldrh.w	r4, [r3, #524]	@ 0x20c
 8000624:	4855      	ldr	r0, [pc, #340]	@ (800077c <process_frame+0x164>)
 8000626:	f7ff fe41 	bl	80002ac <calculate_frame_crc>
 800062a:	4603      	mov	r3, r0
 800062c:	429c      	cmp	r4, r3
 800062e:	f040 8096 	bne.w	800075e <process_frame+0x146>

	//uint16_t length = (atoi(frame.length[0]) * 100) + (atoi(frame.length[1] * 10)) + atoi(frame.length[3]);

	char length_str[4] = {frame.length[0], frame.length[1], frame.length[3], '\0'};
 8000632:	4b52      	ldr	r3, [pc, #328]	@ (800077c <process_frame+0x164>)
 8000634:	799b      	ldrb	r3, [r3, #6]
 8000636:	733b      	strb	r3, [r7, #12]
 8000638:	4b50      	ldr	r3, [pc, #320]	@ (800077c <process_frame+0x164>)
 800063a:	79db      	ldrb	r3, [r3, #7]
 800063c:	737b      	strb	r3, [r7, #13]
 800063e:	4b4f      	ldr	r3, [pc, #316]	@ (800077c <process_frame+0x164>)
 8000640:	7a5b      	ldrb	r3, [r3, #9]
 8000642:	73bb      	strb	r3, [r7, #14]
 8000644:	2300      	movs	r3, #0
 8000646:	73fb      	strb	r3, [r7, #15]
	uint16_t length = atoi(length_str);
 8000648:	f107 030c 	add.w	r3, r7, #12
 800064c:	4618      	mov	r0, r3
 800064e:	f003 f9d7 	bl	8003a00 <atoi>
 8000652:	4603      	mov	r3, r0
 8000654:	82fb      	strh	r3, [r7, #22]

	if (length < 5 || length > 256) {
 8000656:	8afb      	ldrh	r3, [r7, #22]
 8000658:	2b04      	cmp	r3, #4
 800065a:	f240 8082 	bls.w	8000762 <process_frame+0x14a>
 800065e:	8afb      	ldrh	r3, [r7, #22]
 8000660:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000664:	d87d      	bhi.n	8000762 <process_frame+0x14a>
		//USART_fsend("wrong length");
		//err01();
		return;
	}

	length -= frame.masked_counter; // dla odkodowanej ramki dlugosc musi byc pomniejszona o ilosc zamaskowanych znakow
 8000666:	4b45      	ldr	r3, [pc, #276]	@ (800077c <process_frame+0x164>)
 8000668:	f8b3 321a 	ldrh.w	r3, [r3, #538]	@ 0x21a
 800066c:	8afa      	ldrh	r2, [r7, #22]
 800066e:	1ad3      	subs	r3, r2, r3
 8000670:	82fb      	strh	r3, [r7, #22]


	if (strncmp((char *)frame.data, "READ", 4) == 0) {
 8000672:	2204      	movs	r2, #4
 8000674:	4942      	ldr	r1, [pc, #264]	@ (8000780 <process_frame+0x168>)
 8000676:	4843      	ldr	r0, [pc, #268]	@ (8000784 <process_frame+0x16c>)
 8000678:	f003 fb20 	bl	8003cbc <strncmp>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d120      	bne.n	80006c4 <process_frame+0xac>
		if (length != 7) {
 8000682:	8afb      	ldrh	r3, [r7, #22]
 8000684:	2b07      	cmp	r3, #7
 8000686:	d16e      	bne.n	8000766 <process_frame+0x14e>
			//USART_fsend("wrong parameter");
			//err03();
			return;
		}

		char parameter_str[4] = {frame.data[4], frame.data[5], frame.data[6]};
 8000688:	2300      	movs	r3, #0
 800068a:	60bb      	str	r3, [r7, #8]
 800068c:	4b3b      	ldr	r3, [pc, #236]	@ (800077c <process_frame+0x164>)
 800068e:	f893 310f 	ldrb.w	r3, [r3, #271]	@ 0x10f
 8000692:	723b      	strb	r3, [r7, #8]
 8000694:	4b39      	ldr	r3, [pc, #228]	@ (800077c <process_frame+0x164>)
 8000696:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 800069a:	727b      	strb	r3, [r7, #9]
 800069c:	4b37      	ldr	r3, [pc, #220]	@ (800077c <process_frame+0x164>)
 800069e:	f893 3111 	ldrb.w	r3, [r3, #273]	@ 0x111
 80006a2:	72bb      	strb	r3, [r7, #10]
		uint16_t parameter = validate_and_atoi(parameter_str, 3);
 80006a4:	f107 0308 	add.w	r3, r7, #8
 80006a8:	2103      	movs	r1, #3
 80006aa:	4618      	mov	r0, r3
 80006ac:	f7ff ff76 	bl	800059c <validate_and_atoi>
 80006b0:	4603      	mov	r3, r0
 80006b2:	827b      	strh	r3, [r7, #18]

		if (parameter < 1 || parameter > 750) {
 80006b4:	8a7b      	ldrh	r3, [r7, #18]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d057      	beq.n	800076a <process_frame+0x152>
 80006ba:	8a7b      	ldrh	r3, [r7, #18]
 80006bc:	f240 22ee 	movw	r2, #750	@ 0x2ee
 80006c0:	4293      	cmp	r3, r2
 80006c2:	e057      	b.n	8000774 <process_frame+0x15c>
//		else {
//			read(length);
//			return;
//		}
	}
	else if (strncmp((char *)frame.data, "COUNT_DATA", 10) == 0) {
 80006c4:	220a      	movs	r2, #10
 80006c6:	4930      	ldr	r1, [pc, #192]	@ (8000788 <process_frame+0x170>)
 80006c8:	482e      	ldr	r0, [pc, #184]	@ (8000784 <process_frame+0x16c>)
 80006ca:	f003 faf7 	bl	8003cbc <strncmp>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d104      	bne.n	80006de <process_frame+0xc6>
		if (frame.length_int != 10) {
 80006d4:	4b29      	ldr	r3, [pc, #164]	@ (800077c <process_frame+0x164>)
 80006d6:	f8b3 3218 	ldrh.w	r3, [r3, #536]	@ 0x218
 80006da:	2b0a      	cmp	r3, #10
 80006dc:	e04a      	b.n	8000774 <process_frame+0x15c>
//			count_data();
//			return;
//		}
	}

	else if (strncmp((char *)frame.data, "SET_INTERVAL", 12) == 0) {
 80006de:	220c      	movs	r2, #12
 80006e0:	492a      	ldr	r1, [pc, #168]	@ (800078c <process_frame+0x174>)
 80006e2:	4828      	ldr	r0, [pc, #160]	@ (8000784 <process_frame+0x16c>)
 80006e4:	f003 faea 	bl	8003cbc <strncmp>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d12a      	bne.n	8000744 <process_frame+0x12c>
		if (frame.length_int != 17) {
 80006ee:	4b23      	ldr	r3, [pc, #140]	@ (800077c <process_frame+0x164>)
 80006f0:	f8b3 3218 	ldrh.w	r3, [r3, #536]	@ 0x218
 80006f4:	2b11      	cmp	r3, #17
 80006f6:	d13a      	bne.n	800076e <process_frame+0x156>
			//USART_fsend("wrong command");
			//err02();
			return;
		}

		char parameter_str[6] = { frame.data[12], frame.data[13], frame.data[14], frame.data[15], frame.data[16], '\0' };
 80006f8:	4b20      	ldr	r3, [pc, #128]	@ (800077c <process_frame+0x164>)
 80006fa:	f893 3117 	ldrb.w	r3, [r3, #279]	@ 0x117
 80006fe:	703b      	strb	r3, [r7, #0]
 8000700:	4b1e      	ldr	r3, [pc, #120]	@ (800077c <process_frame+0x164>)
 8000702:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8000706:	707b      	strb	r3, [r7, #1]
 8000708:	4b1c      	ldr	r3, [pc, #112]	@ (800077c <process_frame+0x164>)
 800070a:	f893 3119 	ldrb.w	r3, [r3, #281]	@ 0x119
 800070e:	70bb      	strb	r3, [r7, #2]
 8000710:	4b1a      	ldr	r3, [pc, #104]	@ (800077c <process_frame+0x164>)
 8000712:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 8000716:	70fb      	strb	r3, [r7, #3]
 8000718:	4b18      	ldr	r3, [pc, #96]	@ (800077c <process_frame+0x164>)
 800071a:	f893 311b 	ldrb.w	r3, [r3, #283]	@ 0x11b
 800071e:	713b      	strb	r3, [r7, #4]
 8000720:	2300      	movs	r3, #0
 8000722:	717b      	strb	r3, [r7, #5]
		uint16_t parameter = validate_and_atoi(parameter_str, 5);
 8000724:	463b      	mov	r3, r7
 8000726:	2105      	movs	r1, #5
 8000728:	4618      	mov	r0, r3
 800072a:	f7ff ff37 	bl	800059c <validate_and_atoi>
 800072e:	4603      	mov	r3, r0
 8000730:	82bb      	strh	r3, [r7, #20]

		if (parameter < 2000 || parameter > 20000) {
 8000732:	8abb      	ldrh	r3, [r7, #20]
 8000734:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000738:	d31b      	bcc.n	8000772 <process_frame+0x15a>
 800073a:	8abb      	ldrh	r3, [r7, #20]
 800073c:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8000740:	4293      	cmp	r3, r2
 8000742:	e017      	b.n	8000774 <process_frame+0x15c>
//			set_interval(parameter);
//			return;
//		}
	}

	else if (strncmp((char *)frame.data, "GET_INTERVAL", 12) == 0) {
 8000744:	220c      	movs	r2, #12
 8000746:	4912      	ldr	r1, [pc, #72]	@ (8000790 <process_frame+0x178>)
 8000748:	480e      	ldr	r0, [pc, #56]	@ (8000784 <process_frame+0x16c>)
 800074a:	f003 fab7 	bl	8003cbc <strncmp>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d10f      	bne.n	8000774 <process_frame+0x15c>
		if (frame.length_int != 12) {
 8000754:	4b09      	ldr	r3, [pc, #36]	@ (800077c <process_frame+0x164>)
 8000756:	f8b3 3218 	ldrh.w	r3, [r3, #536]	@ 0x218
 800075a:	2b0c      	cmp	r3, #12
 800075c:	e00a      	b.n	8000774 <process_frame+0x15c>
	if (frame.crc != calculate_frame_crc(&frame)) return;
 800075e:	bf00      	nop
 8000760:	e008      	b.n	8000774 <process_frame+0x15c>
		return;
 8000762:	bf00      	nop
 8000764:	e006      	b.n	8000774 <process_frame+0x15c>
			return;
 8000766:	bf00      	nop
 8000768:	e004      	b.n	8000774 <process_frame+0x15c>
			return;
 800076a:	bf00      	nop
 800076c:	e002      	b.n	8000774 <process_frame+0x15c>
			return;
 800076e:	bf00      	nop
 8000770:	e000      	b.n	8000774 <process_frame+0x15c>
			return;
 8000772:	bf00      	nop
//		else {
//			get_interval();
//			return
//		}
	}
}
 8000774:	371c      	adds	r7, #28
 8000776:	46bd      	mov	sp, r7
 8000778:	bd90      	pop	{r4, r7, pc}
 800077a:	bf00      	nop
 800077c:	20000500 	.word	0x20000500
 8000780:	080044d4 	.word	0x080044d4
 8000784:	2000060b 	.word	0x2000060b
 8000788:	080044dc 	.word	0x080044dc
 800078c:	080044e8 	.word	0x080044e8
 8000790:	080044f8 	.word	0x080044f8

08000794 <reset_frame>:

void reset_frame() {
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
	memset(&frame, 0, sizeof(Frame));
 8000798:	f240 221e 	movw	r2, #542	@ 0x21e
 800079c:	2100      	movs	r1, #0
 800079e:	4804      	ldr	r0, [pc, #16]	@ (80007b0 <reset_frame+0x1c>)
 80007a0:	f003 fa84 	bl	8003cac <memset>
	frame.state = FIND_START;
 80007a4:	4b02      	ldr	r3, [pc, #8]	@ (80007b0 <reset_frame+0x1c>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	f883 221c 	strb.w	r2, [r3, #540]	@ 0x21c
}
 80007ac:	bf00      	nop
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	20000500 	.word	0x20000500

080007b4 <get_frame>:

void get_frame(uint8_t ch) {
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b084      	sub	sp, #16
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	4603      	mov	r3, r0
 80007bc:	71fb      	strb	r3, [r7, #7]

	if (ch == '\0') {
 80007be:	79fb      	ldrb	r3, [r7, #7]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d104      	bne.n	80007ce <get_frame+0x1a>
		frame.state = FIND_START;
 80007c4:	4b98      	ldr	r3, [pc, #608]	@ (8000a28 <get_frame+0x274>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	f883 221c 	strb.w	r2, [r3, #540]	@ 0x21c
		return;
 80007cc:	e237      	b.n	8000c3e <get_frame+0x48a>
	}

	switch (frame.state) {
 80007ce:	4b96      	ldr	r3, [pc, #600]	@ (8000a28 <get_frame+0x274>)
 80007d0:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 80007d4:	2b08      	cmp	r3, #8
 80007d6:	f200 8232 	bhi.w	8000c3e <get_frame+0x48a>
 80007da:	a201      	add	r2, pc, #4	@ (adr r2, 80007e0 <get_frame+0x2c>)
 80007dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007e0:	08000805 	.word	0x08000805
 80007e4:	0800081b 	.word	0x0800081b
 80007e8:	0800089d 	.word	0x0800089d
 80007ec:	0800090b 	.word	0x0800090b
 80007f0:	0800096f 	.word	0x0800096f
 80007f4:	08000b19 	.word	0x08000b19
 80007f8:	08000c05 	.word	0x08000c05
 80007fc:	08000a3d 	.word	0x08000a3d
 8000800:	08000c33 	.word	0x08000c33
	case FIND_START: {
		if (ch == FRAME_START) {
 8000804:	79fb      	ldrb	r3, [r7, #7]
 8000806:	2b3a      	cmp	r3, #58	@ 0x3a
 8000808:	f040 8218 	bne.w	8000c3c <get_frame+0x488>
			reset_frame();
 800080c:	f7ff ffc2 	bl	8000794 <reset_frame>
			frame.state = FIND_SENDER;
 8000810:	4b85      	ldr	r3, [pc, #532]	@ (8000a28 <get_frame+0x274>)
 8000812:	2201      	movs	r2, #1
 8000814:	f883 221c 	strb.w	r2, [r3, #540]	@ 0x21c
		}
		return;
 8000818:	e210      	b.n	8000c3c <get_frame+0x488>
	}

	case FIND_SENDER: {
		if (ch >= 'A' && ch <= 'Z') {
 800081a:	79fb      	ldrb	r3, [r7, #7]
 800081c:	2b40      	cmp	r3, #64	@ 0x40
 800081e:	d92c      	bls.n	800087a <get_frame+0xc6>
 8000820:	79fb      	ldrb	r3, [r7, #7]
 8000822:	2b5a      	cmp	r3, #90	@ 0x5a
 8000824:	d829      	bhi.n	800087a <get_frame+0xc6>
			frame.sender[frame.sender_id] = ch;
 8000826:	4b80      	ldr	r3, [pc, #512]	@ (8000a28 <get_frame+0x274>)
 8000828:	f893 320e 	ldrb.w	r3, [r3, #526]	@ 0x20e
 800082c:	4619      	mov	r1, r3
 800082e:	4a7e      	ldr	r2, [pc, #504]	@ (8000a28 <get_frame+0x274>)
 8000830:	79fb      	ldrb	r3, [r7, #7]
 8000832:	5453      	strb	r3, [r2, r1]
			if (frame.sender_id == 1) {
 8000834:	4b7c      	ldr	r3, [pc, #496]	@ (8000a28 <get_frame+0x274>)
 8000836:	f893 320e 	ldrb.w	r3, [r3, #526]	@ 0x20e
 800083a:	2b01      	cmp	r3, #1
 800083c:	d114      	bne.n	8000868 <get_frame+0xb4>
				frame.sender[2] = '\0';
 800083e:	4b7a      	ldr	r3, [pc, #488]	@ (8000a28 <get_frame+0x274>)
 8000840:	2200      	movs	r2, #0
 8000842:	709a      	strb	r2, [r3, #2]
				if (strncmp((char *)frame.sender, SENDER, 2) == 0){
 8000844:	2202      	movs	r2, #2
 8000846:	4979      	ldr	r1, [pc, #484]	@ (8000a2c <get_frame+0x278>)
 8000848:	4877      	ldr	r0, [pc, #476]	@ (8000a28 <get_frame+0x274>)
 800084a:	f003 fa37 	bl	8003cbc <strncmp>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d104      	bne.n	800085e <get_frame+0xaa>
//					USART_fsend("sender ok");
					frame.state = FIND_RECEIVER;
 8000854:	4b74      	ldr	r3, [pc, #464]	@ (8000a28 <get_frame+0x274>)
 8000856:	2202      	movs	r2, #2
 8000858:	f883 221c 	strb.w	r2, [r3, #540]	@ 0x21c
					return;
 800085c:	e1ef      	b.n	8000c3e <get_frame+0x48a>
				}
				else frame.state = FRAME_ERROR;
 800085e:	4b72      	ldr	r3, [pc, #456]	@ (8000a28 <get_frame+0x274>)
 8000860:	2208      	movs	r2, #8
 8000862:	f883 221c 	strb.w	r2, [r3, #540]	@ 0x21c
			if (frame.sender_id == 1) {
 8000866:	e018      	b.n	800089a <get_frame+0xe6>
			}
			else frame.sender_id++;
 8000868:	4b6f      	ldr	r3, [pc, #444]	@ (8000a28 <get_frame+0x274>)
 800086a:	f893 320e 	ldrb.w	r3, [r3, #526]	@ 0x20e
 800086e:	3301      	adds	r3, #1
 8000870:	b2da      	uxtb	r2, r3
 8000872:	4b6d      	ldr	r3, [pc, #436]	@ (8000a28 <get_frame+0x274>)
 8000874:	f883 220e 	strb.w	r2, [r3, #526]	@ 0x20e
			if (frame.sender_id == 1) {
 8000878:	e00f      	b.n	800089a <get_frame+0xe6>
		}
		else if (ch == FRAME_START || ch == FRAME_END) frame.state = FIND_START;
 800087a:	79fb      	ldrb	r3, [r7, #7]
 800087c:	2b3a      	cmp	r3, #58	@ 0x3a
 800087e:	d002      	beq.n	8000886 <get_frame+0xd2>
 8000880:	79fb      	ldrb	r3, [r7, #7]
 8000882:	2b3b      	cmp	r3, #59	@ 0x3b
 8000884:	d104      	bne.n	8000890 <get_frame+0xdc>
 8000886:	4b68      	ldr	r3, [pc, #416]	@ (8000a28 <get_frame+0x274>)
 8000888:	2200      	movs	r2, #0
 800088a:	f883 221c 	strb.w	r2, [r3, #540]	@ 0x21c
 800088e:	e004      	b.n	800089a <get_frame+0xe6>
		else frame.state = FRAME_START;
 8000890:	4b65      	ldr	r3, [pc, #404]	@ (8000a28 <get_frame+0x274>)
 8000892:	223a      	movs	r2, #58	@ 0x3a
 8000894:	f883 221c 	strb.w	r2, [r3, #540]	@ 0x21c
		break;
 8000898:	e1d1      	b.n	8000c3e <get_frame+0x48a>
 800089a:	e1d0      	b.n	8000c3e <get_frame+0x48a>
	}

	case FIND_RECEIVER: {
		if (ch >= 'A' && ch <= 'Z') {
 800089c:	79fb      	ldrb	r3, [r7, #7]
 800089e:	2b40      	cmp	r3, #64	@ 0x40
 80008a0:	d92d      	bls.n	80008fe <get_frame+0x14a>
 80008a2:	79fb      	ldrb	r3, [r7, #7]
 80008a4:	2b5a      	cmp	r3, #90	@ 0x5a
 80008a6:	d82a      	bhi.n	80008fe <get_frame+0x14a>
			frame.receiver[frame.receiver_id] = ch;
 80008a8:	4b5f      	ldr	r3, [pc, #380]	@ (8000a28 <get_frame+0x274>)
 80008aa:	f893 320f 	ldrb.w	r3, [r3, #527]	@ 0x20f
 80008ae:	461a      	mov	r2, r3
 80008b0:	4b5d      	ldr	r3, [pc, #372]	@ (8000a28 <get_frame+0x274>)
 80008b2:	4413      	add	r3, r2
 80008b4:	79fa      	ldrb	r2, [r7, #7]
 80008b6:	70da      	strb	r2, [r3, #3]
			if (frame.receiver_id == 1) {
 80008b8:	4b5b      	ldr	r3, [pc, #364]	@ (8000a28 <get_frame+0x274>)
 80008ba:	f893 320f 	ldrb.w	r3, [r3, #527]	@ 0x20f
 80008be:	2b01      	cmp	r3, #1
 80008c0:	d114      	bne.n	80008ec <get_frame+0x138>
				frame.receiver[2] = '\0';
 80008c2:	4b59      	ldr	r3, [pc, #356]	@ (8000a28 <get_frame+0x274>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	715a      	strb	r2, [r3, #5]
				if (strncmp((char *)frame.receiver, RECEIVER, 2) == 0) {
 80008c8:	2202      	movs	r2, #2
 80008ca:	4959      	ldr	r1, [pc, #356]	@ (8000a30 <get_frame+0x27c>)
 80008cc:	4859      	ldr	r0, [pc, #356]	@ (8000a34 <get_frame+0x280>)
 80008ce:	f003 f9f5 	bl	8003cbc <strncmp>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d104      	bne.n	80008e2 <get_frame+0x12e>
//					USART_fsend("receiver ok");
					frame.state = FIND_LENGTH;
 80008d8:	4b53      	ldr	r3, [pc, #332]	@ (8000a28 <get_frame+0x274>)
 80008da:	2203      	movs	r2, #3
 80008dc:	f883 221c 	strb.w	r2, [r3, #540]	@ 0x21c
					return;
 80008e0:	e1ad      	b.n	8000c3e <get_frame+0x48a>
				}
				else frame.state = FRAME_ERROR;
 80008e2:	4b51      	ldr	r3, [pc, #324]	@ (8000a28 <get_frame+0x274>)
 80008e4:	2208      	movs	r2, #8
 80008e6:	f883 221c 	strb.w	r2, [r3, #540]	@ 0x21c
			if (frame.receiver_id == 1) {
 80008ea:	e00d      	b.n	8000908 <get_frame+0x154>
			}
			else frame.receiver_id++;
 80008ec:	4b4e      	ldr	r3, [pc, #312]	@ (8000a28 <get_frame+0x274>)
 80008ee:	f893 320f 	ldrb.w	r3, [r3, #527]	@ 0x20f
 80008f2:	3301      	adds	r3, #1
 80008f4:	b2da      	uxtb	r2, r3
 80008f6:	4b4c      	ldr	r3, [pc, #304]	@ (8000a28 <get_frame+0x274>)
 80008f8:	f883 220f 	strb.w	r2, [r3, #527]	@ 0x20f
			if (frame.receiver_id == 1) {
 80008fc:	e004      	b.n	8000908 <get_frame+0x154>
		}
		//else if (ch == FRAME_START || ch == FRAME_END) frame.state = FIND_START;
		else frame.state = FRAME_START;
 80008fe:	4b4a      	ldr	r3, [pc, #296]	@ (8000a28 <get_frame+0x274>)
 8000900:	223a      	movs	r2, #58	@ 0x3a
 8000902:	f883 221c 	strb.w	r2, [r3, #540]	@ 0x21c
		break;
 8000906:	e19a      	b.n	8000c3e <get_frame+0x48a>
 8000908:	e199      	b.n	8000c3e <get_frame+0x48a>
	}

	case FIND_LENGTH: {
		if (ch >= '0' && ch <= '9') {
 800090a:	79fb      	ldrb	r3, [r7, #7]
 800090c:	2b2f      	cmp	r3, #47	@ 0x2f
 800090e:	d929      	bls.n	8000964 <get_frame+0x1b0>
 8000910:	79fb      	ldrb	r3, [r7, #7]
 8000912:	2b39      	cmp	r3, #57	@ 0x39
 8000914:	d826      	bhi.n	8000964 <get_frame+0x1b0>
			frame.length[frame.length_id] = ch;
 8000916:	4b44      	ldr	r3, [pc, #272]	@ (8000a28 <get_frame+0x274>)
 8000918:	f893 3210 	ldrb.w	r3, [r3, #528]	@ 0x210
 800091c:	461a      	mov	r2, r3
 800091e:	4b42      	ldr	r3, [pc, #264]	@ (8000a28 <get_frame+0x274>)
 8000920:	4413      	add	r3, r2
 8000922:	79fa      	ldrb	r2, [r7, #7]
 8000924:	719a      	strb	r2, [r3, #6]
			if (frame.length_id == 2) {
 8000926:	4b40      	ldr	r3, [pc, #256]	@ (8000a28 <get_frame+0x274>)
 8000928:	f893 3210 	ldrb.w	r3, [r3, #528]	@ 0x210
 800092c:	2b02      	cmp	r3, #2
 800092e:	d10f      	bne.n	8000950 <get_frame+0x19c>
				frame.length[3] = '\0';
 8000930:	4b3d      	ldr	r3, [pc, #244]	@ (8000a28 <get_frame+0x274>)
 8000932:	2200      	movs	r2, #0
 8000934:	725a      	strb	r2, [r3, #9]
				frame.length_int = atoi((char *)frame.length);
 8000936:	4840      	ldr	r0, [pc, #256]	@ (8000a38 <get_frame+0x284>)
 8000938:	f003 f862 	bl	8003a00 <atoi>
 800093c:	4603      	mov	r3, r0
 800093e:	b29a      	uxth	r2, r3
 8000940:	4b39      	ldr	r3, [pc, #228]	@ (8000a28 <get_frame+0x274>)
 8000942:	f8a3 2218 	strh.w	r2, [r3, #536]	@ 0x218
				frame.state = FIND_DATA;
 8000946:	4b38      	ldr	r3, [pc, #224]	@ (8000a28 <get_frame+0x274>)
 8000948:	2204      	movs	r2, #4
 800094a:	f883 221c 	strb.w	r2, [r3, #540]	@ 0x21c
				return;
 800094e:	e176      	b.n	8000c3e <get_frame+0x48a>
			}
			else frame.length_id++;
 8000950:	4b35      	ldr	r3, [pc, #212]	@ (8000a28 <get_frame+0x274>)
 8000952:	f893 3210 	ldrb.w	r3, [r3, #528]	@ 0x210
 8000956:	3301      	adds	r3, #1
 8000958:	b2da      	uxtb	r2, r3
 800095a:	4b33      	ldr	r3, [pc, #204]	@ (8000a28 <get_frame+0x274>)
 800095c:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
			if (frame.length_id == 2) {
 8000960:	bf00      	nop
		}
		//else if (ch == FRAME_START || ch == FRAME_END) frame.state = FIND_START;
		else frame.state = FRAME_START;
		break;
 8000962:	e16c      	b.n	8000c3e <get_frame+0x48a>
		else frame.state = FRAME_START;
 8000964:	4b30      	ldr	r3, [pc, #192]	@ (8000a28 <get_frame+0x274>)
 8000966:	223a      	movs	r2, #58	@ 0x3a
 8000968:	f883 221c 	strb.w	r2, [r3, #540]	@ 0x21c
		break;
 800096c:	e167      	b.n	8000c3e <get_frame+0x48a>
	}

	case FIND_DATA: {
		frame.data_raw[frame.data_raw_id++] = ch;
 800096e:	4b2e      	ldr	r3, [pc, #184]	@ (8000a28 <get_frame+0x274>)
 8000970:	f8b3 3214 	ldrh.w	r3, [r3, #532]	@ 0x214
 8000974:	1c5a      	adds	r2, r3, #1
 8000976:	b291      	uxth	r1, r2
 8000978:	4a2b      	ldr	r2, [pc, #172]	@ (8000a28 <get_frame+0x274>)
 800097a:	f8a2 1214 	strh.w	r1, [r2, #532]	@ 0x214
 800097e:	461a      	mov	r2, r3
 8000980:	4b29      	ldr	r3, [pc, #164]	@ (8000a28 <get_frame+0x274>)
 8000982:	4413      	add	r3, r2
 8000984:	79fa      	ldrb	r2, [r7, #7]
 8000986:	729a      	strb	r2, [r3, #10]

		if (frame.data_id < frame.length_int) {
 8000988:	4b27      	ldr	r3, [pc, #156]	@ (8000a28 <get_frame+0x274>)
 800098a:	f8b3 2212 	ldrh.w	r2, [r3, #530]	@ 0x212
 800098e:	4b26      	ldr	r3, [pc, #152]	@ (8000a28 <get_frame+0x274>)
 8000990:	f8b3 3218 	ldrh.w	r3, [r3, #536]	@ 0x218
 8000994:	429a      	cmp	r2, r3
 8000996:	d230      	bcs.n	80009fa <get_frame+0x246>
			if (ch == MASK) {
 8000998:	79fb      	ldrb	r3, [r7, #7]
 800099a:	2b2f      	cmp	r3, #47	@ 0x2f
 800099c:	d113      	bne.n	80009c6 <get_frame+0x212>
				if (frame.data_id < frame.length_int - 1) {
 800099e:	4b22      	ldr	r3, [pc, #136]	@ (8000a28 <get_frame+0x274>)
 80009a0:	f8b3 3212 	ldrh.w	r3, [r3, #530]	@ 0x212
 80009a4:	461a      	mov	r2, r3
 80009a6:	4b20      	ldr	r3, [pc, #128]	@ (8000a28 <get_frame+0x274>)
 80009a8:	f8b3 3218 	ldrh.w	r3, [r3, #536]	@ 0x218
 80009ac:	3b01      	subs	r3, #1
 80009ae:	429a      	cmp	r2, r3
 80009b0:	da04      	bge.n	80009bc <get_frame+0x208>
					frame.state = FIND_MASKED;
 80009b2:	4b1d      	ldr	r3, [pc, #116]	@ (8000a28 <get_frame+0x274>)
 80009b4:	2207      	movs	r2, #7
 80009b6:	f883 221c 	strb.w	r2, [r3, #540]	@ 0x21c
					return;
 80009ba:	e140      	b.n	8000c3e <get_frame+0x48a>
				}
				else {	// jeśli znak maskujący jest ostatnim w danych, wtedy błąd
					frame.state = FRAME_ERROR;
 80009bc:	4b1a      	ldr	r3, [pc, #104]	@ (8000a28 <get_frame+0x274>)
 80009be:	2208      	movs	r2, #8
 80009c0:	f883 221c 	strb.w	r2, [r3, #540]	@ 0x21c
 80009c4:	e03a      	b.n	8000a3c <get_frame+0x288>
				}
			}
			else if (ch == FRAME_START || ch == FRAME_END) {
 80009c6:	79fb      	ldrb	r3, [r7, #7]
 80009c8:	2b3a      	cmp	r3, #58	@ 0x3a
 80009ca:	d002      	beq.n	80009d2 <get_frame+0x21e>
 80009cc:	79fb      	ldrb	r3, [r7, #7]
 80009ce:	2b3b      	cmp	r3, #59	@ 0x3b
 80009d0:	d104      	bne.n	80009dc <get_frame+0x228>
				frame.state = FIND_START;
 80009d2:	4b15      	ldr	r3, [pc, #84]	@ (8000a28 <get_frame+0x274>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	f883 221c 	strb.w	r2, [r3, #540]	@ 0x21c
				return;
 80009da:	e130      	b.n	8000c3e <get_frame+0x48a>
			}
			else {
				frame.data[frame.data_id++] = ch;
 80009dc:	4b12      	ldr	r3, [pc, #72]	@ (8000a28 <get_frame+0x274>)
 80009de:	f8b3 3212 	ldrh.w	r3, [r3, #530]	@ 0x212
 80009e2:	1c5a      	adds	r2, r3, #1
 80009e4:	b291      	uxth	r1, r2
 80009e6:	4a10      	ldr	r2, [pc, #64]	@ (8000a28 <get_frame+0x274>)
 80009e8:	f8a2 1212 	strh.w	r1, [r2, #530]	@ 0x212
 80009ec:	461a      	mov	r2, r3
 80009ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000a28 <get_frame+0x274>)
 80009f0:	4413      	add	r3, r2
 80009f2:	79fa      	ldrb	r2, [r7, #7]
 80009f4:	f883 210b 	strb.w	r2, [r3, #267]	@ 0x10b
				break;
 80009f8:	e121      	b.n	8000c3e <get_frame+0x48a>
			}
		}
		else {
			frame.data_raw[frame.data_raw_id] = '\0';
 80009fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000a28 <get_frame+0x274>)
 80009fc:	f8b3 3214 	ldrh.w	r3, [r3, #532]	@ 0x214
 8000a00:	461a      	mov	r2, r3
 8000a02:	4b09      	ldr	r3, [pc, #36]	@ (8000a28 <get_frame+0x274>)
 8000a04:	4413      	add	r3, r2
 8000a06:	2200      	movs	r2, #0
 8000a08:	729a      	strb	r2, [r3, #10]
			frame.data[frame.data_id] = '\0';
 8000a0a:	4b07      	ldr	r3, [pc, #28]	@ (8000a28 <get_frame+0x274>)
 8000a0c:	f8b3 3212 	ldrh.w	r3, [r3, #530]	@ 0x212
 8000a10:	461a      	mov	r2, r3
 8000a12:	4b05      	ldr	r3, [pc, #20]	@ (8000a28 <get_frame+0x274>)
 8000a14:	4413      	add	r3, r2
 8000a16:	2200      	movs	r2, #0
 8000a18:	f883 210b 	strb.w	r2, [r3, #267]	@ 0x10b
			frame.state = FIND_CRC;
 8000a1c:	4b02      	ldr	r3, [pc, #8]	@ (8000a28 <get_frame+0x274>)
 8000a1e:	2205      	movs	r2, #5
 8000a20:	f883 221c 	strb.w	r2, [r3, #540]	@ 0x21c
			return;
 8000a24:	e10b      	b.n	8000c3e <get_frame+0x48a>
 8000a26:	bf00      	nop
 8000a28:	20000500 	.word	0x20000500
 8000a2c:	08004508 	.word	0x08004508
 8000a30:	0800450c 	.word	0x0800450c
 8000a34:	20000503 	.word	0x20000503
 8000a38:	20000506 	.word	0x20000506
		}
	}

	case FIND_MASKED: {
		frame.masked_counter++;
 8000a3c:	4b81      	ldr	r3, [pc, #516]	@ (8000c44 <get_frame+0x490>)
 8000a3e:	f8b3 321a 	ldrh.w	r3, [r3, #538]	@ 0x21a
 8000a42:	3301      	adds	r3, #1
 8000a44:	b29a      	uxth	r2, r3
 8000a46:	4b7f      	ldr	r3, [pc, #508]	@ (8000c44 <get_frame+0x490>)
 8000a48:	f8a3 221a 	strh.w	r2, [r3, #538]	@ 0x21a
		frame.data_raw[frame.data_raw_id++] = ch;
 8000a4c:	4b7d      	ldr	r3, [pc, #500]	@ (8000c44 <get_frame+0x490>)
 8000a4e:	f8b3 3214 	ldrh.w	r3, [r3, #532]	@ 0x214
 8000a52:	1c5a      	adds	r2, r3, #1
 8000a54:	b291      	uxth	r1, r2
 8000a56:	4a7b      	ldr	r2, [pc, #492]	@ (8000c44 <get_frame+0x490>)
 8000a58:	f8a2 1214 	strh.w	r1, [r2, #532]	@ 0x214
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	4b79      	ldr	r3, [pc, #484]	@ (8000c44 <get_frame+0x490>)
 8000a60:	4413      	add	r3, r2
 8000a62:	79fa      	ldrb	r2, [r7, #7]
 8000a64:	729a      	strb	r2, [r3, #10]
		switch(ch) {
 8000a66:	79fb      	ldrb	r3, [r7, #7]
 8000a68:	2b2f      	cmp	r3, #47	@ 0x2f
 8000a6a:	d037      	beq.n	8000adc <get_frame+0x328>
 8000a6c:	2b2f      	cmp	r3, #47	@ 0x2f
 8000a6e:	dc4e      	bgt.n	8000b0e <get_frame+0x35a>
 8000a70:	2b2c      	cmp	r3, #44	@ 0x2c
 8000a72:	d01a      	beq.n	8000aaa <get_frame+0x2f6>
 8000a74:	2b2e      	cmp	r3, #46	@ 0x2e
 8000a76:	d14a      	bne.n	8000b0e <get_frame+0x35a>
		case MASKED_START: {
			frame.data[frame.data_id - frame.masked_counter] = FRAME_START;
 8000a78:	4b72      	ldr	r3, [pc, #456]	@ (8000c44 <get_frame+0x490>)
 8000a7a:	f8b3 3212 	ldrh.w	r3, [r3, #530]	@ 0x212
 8000a7e:	461a      	mov	r2, r3
 8000a80:	4b70      	ldr	r3, [pc, #448]	@ (8000c44 <get_frame+0x490>)
 8000a82:	f8b3 321a 	ldrh.w	r3, [r3, #538]	@ 0x21a
 8000a86:	1ad3      	subs	r3, r2, r3
 8000a88:	4a6e      	ldr	r2, [pc, #440]	@ (8000c44 <get_frame+0x490>)
 8000a8a:	4413      	add	r3, r2
 8000a8c:	223a      	movs	r2, #58	@ 0x3a
 8000a8e:	f883 210b 	strb.w	r2, [r3, #267]	@ 0x10b
			frame.data_id++;
 8000a92:	4b6c      	ldr	r3, [pc, #432]	@ (8000c44 <get_frame+0x490>)
 8000a94:	f8b3 3212 	ldrh.w	r3, [r3, #530]	@ 0x212
 8000a98:	3301      	adds	r3, #1
 8000a9a:	b29a      	uxth	r2, r3
 8000a9c:	4b69      	ldr	r3, [pc, #420]	@ (8000c44 <get_frame+0x490>)
 8000a9e:	f8a3 2212 	strh.w	r2, [r3, #530]	@ 0x212
			frame.state = FIND_DATA;
 8000aa2:	4b68      	ldr	r3, [pc, #416]	@ (8000c44 <get_frame+0x490>)
 8000aa4:	2204      	movs	r2, #4
 8000aa6:	f883 221c 	strb.w	r2, [r3, #540]	@ 0x21c
		}
		case MASKED_END: {
			frame.data[frame.data_id - frame.masked_counter] = FRAME_END;
 8000aaa:	4b66      	ldr	r3, [pc, #408]	@ (8000c44 <get_frame+0x490>)
 8000aac:	f8b3 3212 	ldrh.w	r3, [r3, #530]	@ 0x212
 8000ab0:	461a      	mov	r2, r3
 8000ab2:	4b64      	ldr	r3, [pc, #400]	@ (8000c44 <get_frame+0x490>)
 8000ab4:	f8b3 321a 	ldrh.w	r3, [r3, #538]	@ 0x21a
 8000ab8:	1ad3      	subs	r3, r2, r3
 8000aba:	4a62      	ldr	r2, [pc, #392]	@ (8000c44 <get_frame+0x490>)
 8000abc:	4413      	add	r3, r2
 8000abe:	223b      	movs	r2, #59	@ 0x3b
 8000ac0:	f883 210b 	strb.w	r2, [r3, #267]	@ 0x10b
			frame.data_id++;
 8000ac4:	4b5f      	ldr	r3, [pc, #380]	@ (8000c44 <get_frame+0x490>)
 8000ac6:	f8b3 3212 	ldrh.w	r3, [r3, #530]	@ 0x212
 8000aca:	3301      	adds	r3, #1
 8000acc:	b29a      	uxth	r2, r3
 8000ace:	4b5d      	ldr	r3, [pc, #372]	@ (8000c44 <get_frame+0x490>)
 8000ad0:	f8a3 2212 	strh.w	r2, [r3, #530]	@ 0x212
			frame.state = FIND_DATA;
 8000ad4:	4b5b      	ldr	r3, [pc, #364]	@ (8000c44 <get_frame+0x490>)
 8000ad6:	2204      	movs	r2, #4
 8000ad8:	f883 221c 	strb.w	r2, [r3, #540]	@ 0x21c
		}
		case MASK: {
			frame.data[frame.data_id - frame.masked_counter] = MASK;
 8000adc:	4b59      	ldr	r3, [pc, #356]	@ (8000c44 <get_frame+0x490>)
 8000ade:	f8b3 3212 	ldrh.w	r3, [r3, #530]	@ 0x212
 8000ae2:	461a      	mov	r2, r3
 8000ae4:	4b57      	ldr	r3, [pc, #348]	@ (8000c44 <get_frame+0x490>)
 8000ae6:	f8b3 321a 	ldrh.w	r3, [r3, #538]	@ 0x21a
 8000aea:	1ad3      	subs	r3, r2, r3
 8000aec:	4a55      	ldr	r2, [pc, #340]	@ (8000c44 <get_frame+0x490>)
 8000aee:	4413      	add	r3, r2
 8000af0:	222f      	movs	r2, #47	@ 0x2f
 8000af2:	f883 210b 	strb.w	r2, [r3, #267]	@ 0x10b
			frame.data_id++;
 8000af6:	4b53      	ldr	r3, [pc, #332]	@ (8000c44 <get_frame+0x490>)
 8000af8:	f8b3 3212 	ldrh.w	r3, [r3, #530]	@ 0x212
 8000afc:	3301      	adds	r3, #1
 8000afe:	b29a      	uxth	r2, r3
 8000b00:	4b50      	ldr	r3, [pc, #320]	@ (8000c44 <get_frame+0x490>)
 8000b02:	f8a3 2212 	strh.w	r2, [r3, #530]	@ 0x212
			frame.state = FIND_DATA;
 8000b06:	4b4f      	ldr	r3, [pc, #316]	@ (8000c44 <get_frame+0x490>)
 8000b08:	2204      	movs	r2, #4
 8000b0a:	f883 221c 	strb.w	r2, [r3, #540]	@ 0x21c
		}
		default: { // błąd, powrót do początku
			frame.state = FIND_START;
 8000b0e:	4b4d      	ldr	r3, [pc, #308]	@ (8000c44 <get_frame+0x490>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	f883 221c 	strb.w	r2, [r3, #540]	@ 0x21c
			return;
 8000b16:	e092      	b.n	8000c3e <get_frame+0x48a>
			return;
		}
	}

	case FIND_CRC: {
		if ((ch >= '0' && ch <= '9') || (ch >= 'A' && ch <= 'F')) {
 8000b18:	79fb      	ldrb	r3, [r7, #7]
 8000b1a:	2b2f      	cmp	r3, #47	@ 0x2f
 8000b1c:	d902      	bls.n	8000b24 <get_frame+0x370>
 8000b1e:	79fb      	ldrb	r3, [r7, #7]
 8000b20:	2b39      	cmp	r3, #57	@ 0x39
 8000b22:	d905      	bls.n	8000b30 <get_frame+0x37c>
 8000b24:	79fb      	ldrb	r3, [r7, #7]
 8000b26:	2b40      	cmp	r3, #64	@ 0x40
 8000b28:	d95c      	bls.n	8000be4 <get_frame+0x430>
 8000b2a:	79fb      	ldrb	r3, [r7, #7]
 8000b2c:	2b46      	cmp	r3, #70	@ 0x46
 8000b2e:	d859      	bhi.n	8000be4 <get_frame+0x430>
			uint8_t value;
			if (ch >= '0' && ch <= '9') value = ch - '0';
 8000b30:	79fb      	ldrb	r3, [r7, #7]
 8000b32:	2b2f      	cmp	r3, #47	@ 0x2f
 8000b34:	d906      	bls.n	8000b44 <get_frame+0x390>
 8000b36:	79fb      	ldrb	r3, [r7, #7]
 8000b38:	2b39      	cmp	r3, #57	@ 0x39
 8000b3a:	d803      	bhi.n	8000b44 <get_frame+0x390>
 8000b3c:	79fb      	ldrb	r3, [r7, #7]
 8000b3e:	3b30      	subs	r3, #48	@ 0x30
 8000b40:	73fb      	strb	r3, [r7, #15]
 8000b42:	e002      	b.n	8000b4a <get_frame+0x396>
			else value = ch - 'A' + 10;
 8000b44:	79fb      	ldrb	r3, [r7, #7]
 8000b46:	3b37      	subs	r3, #55	@ 0x37
 8000b48:	73fb      	strb	r3, [r7, #15]

			switch(frame.crc_id) {
 8000b4a:	4b3e      	ldr	r3, [pc, #248]	@ (8000c44 <get_frame+0x490>)
 8000b4c:	f893 3216 	ldrb.w	r3, [r3, #534]	@ 0x216
 8000b50:	2b03      	cmp	r3, #3
 8000b52:	d83e      	bhi.n	8000bd2 <get_frame+0x41e>
 8000b54:	a201      	add	r2, pc, #4	@ (adr r2, 8000b5c <get_frame+0x3a8>)
 8000b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b5a:	bf00      	nop
 8000b5c:	08000b6d 	.word	0x08000b6d
 8000b60:	08000b7d 	.word	0x08000b7d
 8000b64:	08000b99 	.word	0x08000b99
 8000b68:	08000bb5 	.word	0x08000bb5
			case 0: {
				frame.crc = value << 12;
 8000b6c:	7bfb      	ldrb	r3, [r7, #15]
 8000b6e:	b29b      	uxth	r3, r3
 8000b70:	031b      	lsls	r3, r3, #12
 8000b72:	b29a      	uxth	r2, r3
 8000b74:	4b33      	ldr	r3, [pc, #204]	@ (8000c44 <get_frame+0x490>)
 8000b76:	f8a3 220c 	strh.w	r2, [r3, #524]	@ 0x20c
				break;
 8000b7a:	e02a      	b.n	8000bd2 <get_frame+0x41e>
			}
			case 1: {
				frame.crc |= value << 8;
 8000b7c:	4b31      	ldr	r3, [pc, #196]	@ (8000c44 <get_frame+0x490>)
 8000b7e:	f8b3 320c 	ldrh.w	r3, [r3, #524]	@ 0x20c
 8000b82:	b21a      	sxth	r2, r3
 8000b84:	7bfb      	ldrb	r3, [r7, #15]
 8000b86:	021b      	lsls	r3, r3, #8
 8000b88:	b21b      	sxth	r3, r3
 8000b8a:	4313      	orrs	r3, r2
 8000b8c:	b21b      	sxth	r3, r3
 8000b8e:	b29a      	uxth	r2, r3
 8000b90:	4b2c      	ldr	r3, [pc, #176]	@ (8000c44 <get_frame+0x490>)
 8000b92:	f8a3 220c 	strh.w	r2, [r3, #524]	@ 0x20c
				break;
 8000b96:	e01c      	b.n	8000bd2 <get_frame+0x41e>
			}
			case 2: {
				frame.crc |= value << 4;
 8000b98:	4b2a      	ldr	r3, [pc, #168]	@ (8000c44 <get_frame+0x490>)
 8000b9a:	f8b3 320c 	ldrh.w	r3, [r3, #524]	@ 0x20c
 8000b9e:	b21a      	sxth	r2, r3
 8000ba0:	7bfb      	ldrb	r3, [r7, #15]
 8000ba2:	011b      	lsls	r3, r3, #4
 8000ba4:	b21b      	sxth	r3, r3
 8000ba6:	4313      	orrs	r3, r2
 8000ba8:	b21b      	sxth	r3, r3
 8000baa:	b29a      	uxth	r2, r3
 8000bac:	4b25      	ldr	r3, [pc, #148]	@ (8000c44 <get_frame+0x490>)
 8000bae:	f8a3 220c 	strh.w	r2, [r3, #524]	@ 0x20c
				break;
 8000bb2:	e00e      	b.n	8000bd2 <get_frame+0x41e>
			}
			case 3: {
				frame.crc |= value;
 8000bb4:	4b23      	ldr	r3, [pc, #140]	@ (8000c44 <get_frame+0x490>)
 8000bb6:	f8b3 220c 	ldrh.w	r2, [r3, #524]	@ 0x20c
 8000bba:	7bfb      	ldrb	r3, [r7, #15]
 8000bbc:	b29b      	uxth	r3, r3
 8000bbe:	4313      	orrs	r3, r2
 8000bc0:	b29a      	uxth	r2, r3
 8000bc2:	4b20      	ldr	r3, [pc, #128]	@ (8000c44 <get_frame+0x490>)
 8000bc4:	f8a3 220c 	strh.w	r2, [r3, #524]	@ 0x20c
				frame.state = FIND_END;
 8000bc8:	4b1e      	ldr	r3, [pc, #120]	@ (8000c44 <get_frame+0x490>)
 8000bca:	2206      	movs	r2, #6
 8000bcc:	f883 221c 	strb.w	r2, [r3, #540]	@ 0x21c
				return;
 8000bd0:	e035      	b.n	8000c3e <get_frame+0x48a>
			}
			}
			frame.crc_id++;
 8000bd2:	4b1c      	ldr	r3, [pc, #112]	@ (8000c44 <get_frame+0x490>)
 8000bd4:	f893 3216 	ldrb.w	r3, [r3, #534]	@ 0x216
 8000bd8:	3301      	adds	r3, #1
 8000bda:	b2da      	uxtb	r2, r3
 8000bdc:	4b19      	ldr	r3, [pc, #100]	@ (8000c44 <get_frame+0x490>)
 8000bde:	f883 2216 	strb.w	r2, [r3, #534]	@ 0x216
			break;
 8000be2:	e02c      	b.n	8000c3e <get_frame+0x48a>
		}
		else if (ch == FRAME_START || ch == FRAME_END) frame.state = FIND_START;
 8000be4:	79fb      	ldrb	r3, [r7, #7]
 8000be6:	2b3a      	cmp	r3, #58	@ 0x3a
 8000be8:	d002      	beq.n	8000bf0 <get_frame+0x43c>
 8000bea:	79fb      	ldrb	r3, [r7, #7]
 8000bec:	2b3b      	cmp	r3, #59	@ 0x3b
 8000bee:	d104      	bne.n	8000bfa <get_frame+0x446>
 8000bf0:	4b14      	ldr	r3, [pc, #80]	@ (8000c44 <get_frame+0x490>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	f883 221c 	strb.w	r2, [r3, #540]	@ 0x21c
		else frame.state = FRAME_ERROR;
		break;
 8000bf8:	e021      	b.n	8000c3e <get_frame+0x48a>
		else frame.state = FRAME_ERROR;
 8000bfa:	4b12      	ldr	r3, [pc, #72]	@ (8000c44 <get_frame+0x490>)
 8000bfc:	2208      	movs	r2, #8
 8000bfe:	f883 221c 	strb.w	r2, [r3, #540]	@ 0x21c
		break;
 8000c02:	e01c      	b.n	8000c3e <get_frame+0x48a>
	}

	case FIND_END: {
		if (ch == FRAME_END) {
 8000c04:	79fb      	ldrb	r3, [r7, #7]
 8000c06:	2b3b      	cmp	r3, #59	@ 0x3b
 8000c08:	d106      	bne.n	8000c18 <get_frame+0x464>
			frame.complete = true;
 8000c0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c44 <get_frame+0x490>)
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	f883 221d 	strb.w	r2, [r3, #541]	@ 0x21d
			process_frame();
 8000c12:	f7ff fd01 	bl	8000618 <process_frame>
			return;
 8000c16:	e012      	b.n	8000c3e <get_frame+0x48a>
		}
		else if (ch == FRAME_START) frame.state = FIND_START;
 8000c18:	79fb      	ldrb	r3, [r7, #7]
 8000c1a:	2b3a      	cmp	r3, #58	@ 0x3a
 8000c1c:	d104      	bne.n	8000c28 <get_frame+0x474>
 8000c1e:	4b09      	ldr	r3, [pc, #36]	@ (8000c44 <get_frame+0x490>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	f883 221c 	strb.w	r2, [r3, #540]	@ 0x21c
		else frame.state = FRAME_ERROR;
		break;
 8000c26:	e00a      	b.n	8000c3e <get_frame+0x48a>
		else frame.state = FRAME_ERROR;
 8000c28:	4b06      	ldr	r3, [pc, #24]	@ (8000c44 <get_frame+0x490>)
 8000c2a:	2208      	movs	r2, #8
 8000c2c:	f883 221c 	strb.w	r2, [r3, #540]	@ 0x21c
		break;
 8000c30:	e005      	b.n	8000c3e <get_frame+0x48a>
	}

	case FRAME_ERROR: {
//		USART_fsend("error during frame processing");
		frame.state = FIND_START;
 8000c32:	4b04      	ldr	r3, [pc, #16]	@ (8000c44 <get_frame+0x490>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	f883 221c 	strb.w	r2, [r3, #540]	@ 0x21c
		return;
 8000c3a:	e000      	b.n	8000c3e <get_frame+0x48a>
		return;
 8000c3c:	bf00      	nop
	}

	}
}
 8000c3e:	3710      	adds	r7, #16
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	20000500 	.word	0x20000500

08000c48 <handle_char>:

void handle_char() {
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0

//	is_handling = 1;

	int16_t ch;
	if ((ch = USART_getchar()) >= 0 && ch <= 255) {
 8000c4e:	f7ff fc73 	bl	8000538 <USART_getchar>
 8000c52:	4603      	mov	r3, r0
 8000c54:	80fb      	strh	r3, [r7, #6]
 8000c56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	db08      	blt.n	8000c70 <handle_char+0x28>
 8000c5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c62:	2bff      	cmp	r3, #255	@ 0xff
 8000c64:	dc04      	bgt.n	8000c70 <handle_char+0x28>
		//USART_fsend("  |%c|  ", ch);
		get_frame((uint8_t)ch);
 8000c66:	88fb      	ldrh	r3, [r7, #6]
 8000c68:	b2db      	uxtb	r3, r3
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f7ff fda2 	bl	80007b4 <get_frame>
	}

//	is_handling = 0;
}
 8000c70:	bf00      	nop
 8000c72:	3708      	adds	r7, #8
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}

08000c78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c7c:	f000 faa0 	bl	80011c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c80:	f000 f824 	bl	8000ccc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c84:	f7ff fa6a 	bl	800015c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000c88:	f000 fa04 	bl	8001094 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000c8c:	f000 f922 	bl	8000ed4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &USART_BUF_RX[USART_RX_EMPTY], 1);
 8000c90:	4b0a      	ldr	r3, [pc, #40]	@ (8000cbc <main+0x44>)
 8000c92:	881b      	ldrh	r3, [r3, #0]
 8000c94:	b29b      	uxth	r3, r3
 8000c96:	461a      	mov	r2, r3
 8000c98:	4b09      	ldr	r3, [pc, #36]	@ (8000cc0 <main+0x48>)
 8000c9a:	4413      	add	r3, r2
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4808      	ldr	r0, [pc, #32]	@ (8000cc4 <main+0x4c>)
 8000ca2:	f002 f980 	bl	8002fa6 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // jeśli bufor nie jest pusty
	  if (USART_RX_EMPTY != USART_RX_BUSY) {
 8000ca6:	4b05      	ldr	r3, [pc, #20]	@ (8000cbc <main+0x44>)
 8000ca8:	881b      	ldrh	r3, [r3, #0]
 8000caa:	b29a      	uxth	r2, r3
 8000cac:	4b06      	ldr	r3, [pc, #24]	@ (8000cc8 <main+0x50>)
 8000cae:	881b      	ldrh	r3, [r3, #0]
 8000cb0:	b29b      	uxth	r3, r3
 8000cb2:	429a      	cmp	r2, r3
 8000cb4:	d0f7      	beq.n	8000ca6 <main+0x2e>
		  handle_char();
 8000cb6:	f7ff ffc7 	bl	8000c48 <handle_char>
	  if (USART_RX_EMPTY != USART_RX_BUSY) {
 8000cba:	e7f4      	b.n	8000ca6 <main+0x2e>
 8000cbc:	200000f8 	.word	0x200000f8
 8000cc0:	20000078 	.word	0x20000078
 8000cc4:	2000076c 	.word	0x2000076c
 8000cc8:	200000fa 	.word	0x200000fa

08000ccc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b090      	sub	sp, #64	@ 0x40
 8000cd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cd2:	f107 0318 	add.w	r3, r7, #24
 8000cd6:	2228      	movs	r2, #40	@ 0x28
 8000cd8:	2100      	movs	r1, #0
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f002 ffe6 	bl	8003cac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ce0:	1d3b      	adds	r3, r7, #4
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	601a      	str	r2, [r3, #0]
 8000ce6:	605a      	str	r2, [r3, #4]
 8000ce8:	609a      	str	r2, [r3, #8]
 8000cea:	60da      	str	r2, [r3, #12]
 8000cec:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cee:	2302      	movs	r3, #2
 8000cf0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cf6:	2310      	movs	r3, #16
 8000cf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000d02:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000d06:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d08:	f107 0318 	add.w	r3, r7, #24
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f000 fe37 	bl	8001980 <HAL_RCC_OscConfig>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000d18:	f000 f81a 	bl	8000d50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d1c:	230f      	movs	r3, #15
 8000d1e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d20:	2302      	movs	r3, #2
 8000d22:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d24:	2300      	movs	r3, #0
 8000d26:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d28:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d2c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d32:	1d3b      	adds	r3, r7, #4
 8000d34:	2102      	movs	r1, #2
 8000d36:	4618      	mov	r0, r3
 8000d38:	f001 f8a4 	bl	8001e84 <HAL_RCC_ClockConfig>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000d42:	f000 f805 	bl	8000d50 <Error_Handler>
  }
}
 8000d46:	bf00      	nop
 8000d48:	3740      	adds	r7, #64	@ 0x40
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
	...

08000d50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	USART_fsend("problem");
 8000d54:	4803      	ldr	r0, [pc, #12]	@ (8000d64 <Error_Handler+0x14>)
 8000d56:	f7ff fae1 	bl	800031c <USART_fsend>
  __ASM volatile ("cpsid i" : : : "memory");
 8000d5a:	b672      	cpsid	i
}
 8000d5c:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d5e:	bf00      	nop
 8000d60:	e7fd      	b.n	8000d5e <Error_Handler+0xe>
 8000d62:	bf00      	nop
 8000d64:	08004510 	.word	0x08004510

08000d68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b085      	sub	sp, #20
 8000d6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d6e:	4b15      	ldr	r3, [pc, #84]	@ (8000dc4 <HAL_MspInit+0x5c>)
 8000d70:	699b      	ldr	r3, [r3, #24]
 8000d72:	4a14      	ldr	r2, [pc, #80]	@ (8000dc4 <HAL_MspInit+0x5c>)
 8000d74:	f043 0301 	orr.w	r3, r3, #1
 8000d78:	6193      	str	r3, [r2, #24]
 8000d7a:	4b12      	ldr	r3, [pc, #72]	@ (8000dc4 <HAL_MspInit+0x5c>)
 8000d7c:	699b      	ldr	r3, [r3, #24]
 8000d7e:	f003 0301 	and.w	r3, r3, #1
 8000d82:	60bb      	str	r3, [r7, #8]
 8000d84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d86:	4b0f      	ldr	r3, [pc, #60]	@ (8000dc4 <HAL_MspInit+0x5c>)
 8000d88:	69db      	ldr	r3, [r3, #28]
 8000d8a:	4a0e      	ldr	r2, [pc, #56]	@ (8000dc4 <HAL_MspInit+0x5c>)
 8000d8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d90:	61d3      	str	r3, [r2, #28]
 8000d92:	4b0c      	ldr	r3, [pc, #48]	@ (8000dc4 <HAL_MspInit+0x5c>)
 8000d94:	69db      	ldr	r3, [r3, #28]
 8000d96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d9a:	607b      	str	r3, [r7, #4]
 8000d9c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d9e:	4b0a      	ldr	r3, [pc, #40]	@ (8000dc8 <HAL_MspInit+0x60>)
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000daa:	60fb      	str	r3, [r7, #12]
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000db2:	60fb      	str	r3, [r7, #12]
 8000db4:	4a04      	ldr	r2, [pc, #16]	@ (8000dc8 <HAL_MspInit+0x60>)
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dba:	bf00      	nop
 8000dbc:	3714      	adds	r7, #20
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bc80      	pop	{r7}
 8000dc2:	4770      	bx	lr
 8000dc4:	40021000 	.word	0x40021000
 8000dc8:	40010000 	.word	0x40010000

08000dcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000dd0:	bf00      	nop
 8000dd2:	e7fd      	b.n	8000dd0 <NMI_Handler+0x4>

08000dd4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dd8:	bf00      	nop
 8000dda:	e7fd      	b.n	8000dd8 <HardFault_Handler+0x4>

08000ddc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000de0:	bf00      	nop
 8000de2:	e7fd      	b.n	8000de0 <MemManage_Handler+0x4>

08000de4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000de8:	bf00      	nop
 8000dea:	e7fd      	b.n	8000de8 <BusFault_Handler+0x4>

08000dec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000df0:	bf00      	nop
 8000df2:	e7fd      	b.n	8000df0 <UsageFault_Handler+0x4>

08000df4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000df8:	bf00      	nop
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bc80      	pop	{r7}
 8000dfe:	4770      	bx	lr

08000e00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e04:	bf00      	nop
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bc80      	pop	{r7}
 8000e0a:	4770      	bx	lr

08000e0c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e10:	bf00      	nop
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bc80      	pop	{r7}
 8000e16:	4770      	bx	lr

08000e18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e1c:	f000 fa16 	bl	800124c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e20:	bf00      	nop
 8000e22:	bd80      	pop	{r7, pc}

08000e24 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e28:	4802      	ldr	r0, [pc, #8]	@ (8000e34 <TIM2_IRQHandler+0x10>)
 8000e2a:	f001 fa60 	bl	80022ee <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000e2e:	bf00      	nop
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	20000724 	.word	0x20000724

08000e38 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e3c:	4802      	ldr	r0, [pc, #8]	@ (8000e48 <USART2_IRQHandler+0x10>)
 8000e3e:	f002 f8d7 	bl	8002ff0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e42:	bf00      	nop
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	2000076c 	.word	0x2000076c

08000e4c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000e50:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000e54:	f000 fd72 	bl	800193c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000e58:	bf00      	nop
 8000e5a:	bd80      	pop	{r7, pc}

08000e5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b086      	sub	sp, #24
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e64:	4a14      	ldr	r2, [pc, #80]	@ (8000eb8 <_sbrk+0x5c>)
 8000e66:	4b15      	ldr	r3, [pc, #84]	@ (8000ebc <_sbrk+0x60>)
 8000e68:	1ad3      	subs	r3, r2, r3
 8000e6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e70:	4b13      	ldr	r3, [pc, #76]	@ (8000ec0 <_sbrk+0x64>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d102      	bne.n	8000e7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e78:	4b11      	ldr	r3, [pc, #68]	@ (8000ec0 <_sbrk+0x64>)
 8000e7a:	4a12      	ldr	r2, [pc, #72]	@ (8000ec4 <_sbrk+0x68>)
 8000e7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e7e:	4b10      	ldr	r3, [pc, #64]	@ (8000ec0 <_sbrk+0x64>)
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4413      	add	r3, r2
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	d207      	bcs.n	8000e9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e8c:	f002 ff38 	bl	8003d00 <__errno>
 8000e90:	4603      	mov	r3, r0
 8000e92:	220c      	movs	r2, #12
 8000e94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e96:	f04f 33ff 	mov.w	r3, #4294967295
 8000e9a:	e009      	b.n	8000eb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e9c:	4b08      	ldr	r3, [pc, #32]	@ (8000ec0 <_sbrk+0x64>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ea2:	4b07      	ldr	r3, [pc, #28]	@ (8000ec0 <_sbrk+0x64>)
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4413      	add	r3, r2
 8000eaa:	4a05      	ldr	r2, [pc, #20]	@ (8000ec0 <_sbrk+0x64>)
 8000eac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eae:	68fb      	ldr	r3, [r7, #12]
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	3718      	adds	r7, #24
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	20005000 	.word	0x20005000
 8000ebc:	00000400 	.word	0x00000400
 8000ec0:	20000720 	.word	0x20000720
 8000ec4:	20000900 	.word	0x20000900

08000ec8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ecc:	bf00      	nop
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bc80      	pop	{r7}
 8000ed2:	4770      	bx	lr

08000ed4 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b090      	sub	sp, #64	@ 0x40
 8000ed8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eda:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000ede:	2200      	movs	r2, #0
 8000ee0:	601a      	str	r2, [r3, #0]
 8000ee2:	605a      	str	r2, [r3, #4]
 8000ee4:	609a      	str	r2, [r3, #8]
 8000ee6:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000ee8:	f107 031c 	add.w	r3, r7, #28
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	605a      	str	r2, [r3, #4]
 8000ef2:	609a      	str	r2, [r3, #8]
 8000ef4:	60da      	str	r2, [r3, #12]
 8000ef6:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000ef8:	f107 030c 	add.w	r3, r7, #12
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	605a      	str	r2, [r3, #4]
 8000f02:	609a      	str	r2, [r3, #8]
 8000f04:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f06:	1d3b      	adds	r3, r7, #4
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f0e:	4b3e      	ldr	r3, [pc, #248]	@ (8001008 <MX_TIM2_Init+0x134>)
 8000f10:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f14:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31;
 8000f16:	4b3c      	ldr	r3, [pc, #240]	@ (8001008 <MX_TIM2_Init+0x134>)
 8000f18:	221f      	movs	r2, #31
 8000f1a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f1c:	4b3a      	ldr	r3, [pc, #232]	@ (8001008 <MX_TIM2_Init+0x134>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000f22:	4b39      	ldr	r3, [pc, #228]	@ (8001008 <MX_TIM2_Init+0x134>)
 8000f24:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f28:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f2a:	4b37      	ldr	r3, [pc, #220]	@ (8001008 <MX_TIM2_Init+0x134>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f30:	4b35      	ldr	r3, [pc, #212]	@ (8001008 <MX_TIM2_Init+0x134>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f36:	4834      	ldr	r0, [pc, #208]	@ (8001008 <MX_TIM2_Init+0x134>)
 8000f38:	f001 f932 	bl	80021a0 <HAL_TIM_Base_Init>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000f42:	f7ff ff05 	bl	8000d50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f46:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f4a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f4c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000f50:	4619      	mov	r1, r3
 8000f52:	482d      	ldr	r0, [pc, #180]	@ (8001008 <MX_TIM2_Init+0x134>)
 8000f54:	f001 fb57 	bl	8002606 <HAL_TIM_ConfigClockSource>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000f5e:	f7ff fef7 	bl	8000d50 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000f62:	4829      	ldr	r0, [pc, #164]	@ (8001008 <MX_TIM2_Init+0x134>)
 8000f64:	f001 f96b 	bl	800223e <HAL_TIM_IC_Init>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000f6e:	f7ff feef 	bl	8000d50 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000f72:	2304      	movs	r3, #4
 8000f74:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000f76:	2350      	movs	r3, #80	@ 0x50
 8000f78:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 8000f82:	2300      	movs	r3, #0
 8000f84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000f86:	f107 031c 	add.w	r3, r7, #28
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	481e      	ldr	r0, [pc, #120]	@ (8001008 <MX_TIM2_Init+0x134>)
 8000f8e:	f001 fc01 	bl	8002794 <HAL_TIM_SlaveConfigSynchro>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_TIM2_Init+0xc8>
  {
    Error_Handler();
 8000f98:	f7ff feda 	bl	8000d50 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000fac:	f107 030c 	add.w	r3, r7, #12
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4814      	ldr	r0, [pc, #80]	@ (8001008 <MX_TIM2_Init+0x134>)
 8000fb6:	f001 fa8a 	bl	80024ce <HAL_TIM_IC_ConfigChannel>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8000fc0:	f7ff fec6 	bl	8000d50 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000fcc:	f107 030c 	add.w	r3, r7, #12
 8000fd0:	2204      	movs	r2, #4
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	480c      	ldr	r0, [pc, #48]	@ (8001008 <MX_TIM2_Init+0x134>)
 8000fd6:	f001 fa7a 	bl	80024ce <HAL_TIM_IC_ConfigChannel>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_TIM2_Init+0x110>
  {
    Error_Handler();
 8000fe0:	f7ff feb6 	bl	8000d50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fec:	1d3b      	adds	r3, r7, #4
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4805      	ldr	r0, [pc, #20]	@ (8001008 <MX_TIM2_Init+0x134>)
 8000ff2:	f001 fee3 	bl	8002dbc <HAL_TIMEx_MasterConfigSynchronization>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <MX_TIM2_Init+0x12c>
  {
    Error_Handler();
 8000ffc:	f7ff fea8 	bl	8000d50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001000:	bf00      	nop
 8001002:	3740      	adds	r7, #64	@ 0x40
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	20000724 	.word	0x20000724

0800100c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b088      	sub	sp, #32
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001014:	f107 0310 	add.w	r3, r7, #16
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	605a      	str	r2, [r3, #4]
 800101e:	609a      	str	r2, [r3, #8]
 8001020:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM2)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800102a:	d12b      	bne.n	8001084 <HAL_TIM_Base_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800102c:	4b17      	ldr	r3, [pc, #92]	@ (800108c <HAL_TIM_Base_MspInit+0x80>)
 800102e:	69db      	ldr	r3, [r3, #28]
 8001030:	4a16      	ldr	r2, [pc, #88]	@ (800108c <HAL_TIM_Base_MspInit+0x80>)
 8001032:	f043 0301 	orr.w	r3, r3, #1
 8001036:	61d3      	str	r3, [r2, #28]
 8001038:	4b14      	ldr	r3, [pc, #80]	@ (800108c <HAL_TIM_Base_MspInit+0x80>)
 800103a:	69db      	ldr	r3, [r3, #28]
 800103c:	f003 0301 	and.w	r3, r3, #1
 8001040:	60fb      	str	r3, [r7, #12]
 8001042:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001044:	4b11      	ldr	r3, [pc, #68]	@ (800108c <HAL_TIM_Base_MspInit+0x80>)
 8001046:	699b      	ldr	r3, [r3, #24]
 8001048:	4a10      	ldr	r2, [pc, #64]	@ (800108c <HAL_TIM_Base_MspInit+0x80>)
 800104a:	f043 0304 	orr.w	r3, r3, #4
 800104e:	6193      	str	r3, [r2, #24]
 8001050:	4b0e      	ldr	r3, [pc, #56]	@ (800108c <HAL_TIM_Base_MspInit+0x80>)
 8001052:	699b      	ldr	r3, [r3, #24]
 8001054:	f003 0304 	and.w	r3, r3, #4
 8001058:	60bb      	str	r3, [r7, #8]
 800105a:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800105c:	2301      	movs	r3, #1
 800105e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001060:	2300      	movs	r3, #0
 8001062:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001064:	2300      	movs	r3, #0
 8001066:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001068:	f107 0310 	add.w	r3, r7, #16
 800106c:	4619      	mov	r1, r3
 800106e:	4808      	ldr	r0, [pc, #32]	@ (8001090 <HAL_TIM_Base_MspInit+0x84>)
 8001070:	f000 fac8 	bl	8001604 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001074:	2200      	movs	r2, #0
 8001076:	2100      	movs	r1, #0
 8001078:	201c      	movs	r0, #28
 800107a:	f000 f9da 	bl	8001432 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800107e:	201c      	movs	r0, #28
 8001080:	f000 f9f3 	bl	800146a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001084:	bf00      	nop
 8001086:	3720      	adds	r7, #32
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	40021000 	.word	0x40021000
 8001090:	40010800 	.word	0x40010800

08001094 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001098:	4b11      	ldr	r3, [pc, #68]	@ (80010e0 <MX_USART2_UART_Init+0x4c>)
 800109a:	4a12      	ldr	r2, [pc, #72]	@ (80010e4 <MX_USART2_UART_Init+0x50>)
 800109c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800109e:	4b10      	ldr	r3, [pc, #64]	@ (80010e0 <MX_USART2_UART_Init+0x4c>)
 80010a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010a6:	4b0e      	ldr	r3, [pc, #56]	@ (80010e0 <MX_USART2_UART_Init+0x4c>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010ac:	4b0c      	ldr	r3, [pc, #48]	@ (80010e0 <MX_USART2_UART_Init+0x4c>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010b2:	4b0b      	ldr	r3, [pc, #44]	@ (80010e0 <MX_USART2_UART_Init+0x4c>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010b8:	4b09      	ldr	r3, [pc, #36]	@ (80010e0 <MX_USART2_UART_Init+0x4c>)
 80010ba:	220c      	movs	r2, #12
 80010bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010be:	4b08      	ldr	r3, [pc, #32]	@ (80010e0 <MX_USART2_UART_Init+0x4c>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010c4:	4b06      	ldr	r3, [pc, #24]	@ (80010e0 <MX_USART2_UART_Init+0x4c>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010ca:	4805      	ldr	r0, [pc, #20]	@ (80010e0 <MX_USART2_UART_Init+0x4c>)
 80010cc:	f001 fee6 	bl	8002e9c <HAL_UART_Init>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80010d6:	f7ff fe3b 	bl	8000d50 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010da:	bf00      	nop
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	2000076c 	.word	0x2000076c
 80010e4:	40004400 	.word	0x40004400

080010e8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b088      	sub	sp, #32
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f0:	f107 0310 	add.w	r3, r7, #16
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a19      	ldr	r2, [pc, #100]	@ (8001168 <HAL_UART_MspInit+0x80>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d12b      	bne.n	8001160 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001108:	4b18      	ldr	r3, [pc, #96]	@ (800116c <HAL_UART_MspInit+0x84>)
 800110a:	69db      	ldr	r3, [r3, #28]
 800110c:	4a17      	ldr	r2, [pc, #92]	@ (800116c <HAL_UART_MspInit+0x84>)
 800110e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001112:	61d3      	str	r3, [r2, #28]
 8001114:	4b15      	ldr	r3, [pc, #84]	@ (800116c <HAL_UART_MspInit+0x84>)
 8001116:	69db      	ldr	r3, [r3, #28]
 8001118:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800111c:	60fb      	str	r3, [r7, #12]
 800111e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001120:	4b12      	ldr	r3, [pc, #72]	@ (800116c <HAL_UART_MspInit+0x84>)
 8001122:	699b      	ldr	r3, [r3, #24]
 8001124:	4a11      	ldr	r2, [pc, #68]	@ (800116c <HAL_UART_MspInit+0x84>)
 8001126:	f043 0304 	orr.w	r3, r3, #4
 800112a:	6193      	str	r3, [r2, #24]
 800112c:	4b0f      	ldr	r3, [pc, #60]	@ (800116c <HAL_UART_MspInit+0x84>)
 800112e:	699b      	ldr	r3, [r3, #24]
 8001130:	f003 0304 	and.w	r3, r3, #4
 8001134:	60bb      	str	r3, [r7, #8]
 8001136:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001138:	230c      	movs	r3, #12
 800113a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113c:	2302      	movs	r3, #2
 800113e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001140:	2302      	movs	r3, #2
 8001142:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001144:	f107 0310 	add.w	r3, r7, #16
 8001148:	4619      	mov	r1, r3
 800114a:	4809      	ldr	r0, [pc, #36]	@ (8001170 <HAL_UART_MspInit+0x88>)
 800114c:	f000 fa5a 	bl	8001604 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001150:	2200      	movs	r2, #0
 8001152:	2100      	movs	r1, #0
 8001154:	2026      	movs	r0, #38	@ 0x26
 8001156:	f000 f96c 	bl	8001432 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800115a:	2026      	movs	r0, #38	@ 0x26
 800115c:	f000 f985 	bl	800146a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001160:	bf00      	nop
 8001162:	3720      	adds	r7, #32
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	40004400 	.word	0x40004400
 800116c:	40021000 	.word	0x40021000
 8001170:	40010800 	.word	0x40010800

08001174 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001174:	f7ff fea8 	bl	8000ec8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001178:	480b      	ldr	r0, [pc, #44]	@ (80011a8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800117a:	490c      	ldr	r1, [pc, #48]	@ (80011ac <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800117c:	4a0c      	ldr	r2, [pc, #48]	@ (80011b0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800117e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001180:	e002      	b.n	8001188 <LoopCopyDataInit>

08001182 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001182:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001184:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001186:	3304      	adds	r3, #4

08001188 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001188:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800118a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800118c:	d3f9      	bcc.n	8001182 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800118e:	4a09      	ldr	r2, [pc, #36]	@ (80011b4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001190:	4c09      	ldr	r4, [pc, #36]	@ (80011b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001192:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001194:	e001      	b.n	800119a <LoopFillZerobss>

08001196 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001196:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001198:	3204      	adds	r2, #4

0800119a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800119a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800119c:	d3fb      	bcc.n	8001196 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800119e:	f002 fdb5 	bl	8003d0c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011a2:	f7ff fd69 	bl	8000c78 <main>
  bx lr
 80011a6:	4770      	bx	lr
  ldr r0, =_sdata
 80011a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011ac:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80011b0:	08004688 	.word	0x08004688
  ldr r2, =_sbss
 80011b4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80011b8:	20000900 	.word	0x20000900

080011bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011bc:	e7fe      	b.n	80011bc <ADC1_2_IRQHandler>
	...

080011c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011c4:	4b08      	ldr	r3, [pc, #32]	@ (80011e8 <HAL_Init+0x28>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a07      	ldr	r2, [pc, #28]	@ (80011e8 <HAL_Init+0x28>)
 80011ca:	f043 0310 	orr.w	r3, r3, #16
 80011ce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011d0:	2003      	movs	r0, #3
 80011d2:	f000 f923 	bl	800141c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011d6:	2000      	movs	r0, #0
 80011d8:	f000 f808 	bl	80011ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011dc:	f7ff fdc4 	bl	8000d68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011e0:	2300      	movs	r3, #0
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	40022000 	.word	0x40022000

080011ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011f4:	4b12      	ldr	r3, [pc, #72]	@ (8001240 <HAL_InitTick+0x54>)
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	4b12      	ldr	r3, [pc, #72]	@ (8001244 <HAL_InitTick+0x58>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	4619      	mov	r1, r3
 80011fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001202:	fbb3 f3f1 	udiv	r3, r3, r1
 8001206:	fbb2 f3f3 	udiv	r3, r2, r3
 800120a:	4618      	mov	r0, r3
 800120c:	f000 f93b 	bl	8001486 <HAL_SYSTICK_Config>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	e00e      	b.n	8001238 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2b0f      	cmp	r3, #15
 800121e:	d80a      	bhi.n	8001236 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001220:	2200      	movs	r2, #0
 8001222:	6879      	ldr	r1, [r7, #4]
 8001224:	f04f 30ff 	mov.w	r0, #4294967295
 8001228:	f000 f903 	bl	8001432 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800122c:	4a06      	ldr	r2, [pc, #24]	@ (8001248 <HAL_InitTick+0x5c>)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001232:	2300      	movs	r3, #0
 8001234:	e000      	b.n	8001238 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
}
 8001238:	4618      	mov	r0, r3
 800123a:	3708      	adds	r7, #8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	20000000 	.word	0x20000000
 8001244:	20000008 	.word	0x20000008
 8001248:	20000004 	.word	0x20000004

0800124c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001250:	4b05      	ldr	r3, [pc, #20]	@ (8001268 <HAL_IncTick+0x1c>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	461a      	mov	r2, r3
 8001256:	4b05      	ldr	r3, [pc, #20]	@ (800126c <HAL_IncTick+0x20>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4413      	add	r3, r2
 800125c:	4a03      	ldr	r2, [pc, #12]	@ (800126c <HAL_IncTick+0x20>)
 800125e:	6013      	str	r3, [r2, #0]
}
 8001260:	bf00      	nop
 8001262:	46bd      	mov	sp, r7
 8001264:	bc80      	pop	{r7}
 8001266:	4770      	bx	lr
 8001268:	20000008 	.word	0x20000008
 800126c:	200007b4 	.word	0x200007b4

08001270 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  return uwTick;
 8001274:	4b02      	ldr	r3, [pc, #8]	@ (8001280 <HAL_GetTick+0x10>)
 8001276:	681b      	ldr	r3, [r3, #0]
}
 8001278:	4618      	mov	r0, r3
 800127a:	46bd      	mov	sp, r7
 800127c:	bc80      	pop	{r7}
 800127e:	4770      	bx	lr
 8001280:	200007b4 	.word	0x200007b4

08001284 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001284:	b480      	push	{r7}
 8001286:	b085      	sub	sp, #20
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	f003 0307 	and.w	r3, r3, #7
 8001292:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001294:	4b0c      	ldr	r3, [pc, #48]	@ (80012c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800129a:	68ba      	ldr	r2, [r7, #8]
 800129c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012a0:	4013      	ands	r3, r2
 80012a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012b6:	4a04      	ldr	r2, [pc, #16]	@ (80012c8 <__NVIC_SetPriorityGrouping+0x44>)
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	60d3      	str	r3, [r2, #12]
}
 80012bc:	bf00      	nop
 80012be:	3714      	adds	r7, #20
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bc80      	pop	{r7}
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	e000ed00 	.word	0xe000ed00

080012cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012d0:	4b04      	ldr	r3, [pc, #16]	@ (80012e4 <__NVIC_GetPriorityGrouping+0x18>)
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	0a1b      	lsrs	r3, r3, #8
 80012d6:	f003 0307 	and.w	r3, r3, #7
}
 80012da:	4618      	mov	r0, r3
 80012dc:	46bd      	mov	sp, r7
 80012de:	bc80      	pop	{r7}
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	e000ed00 	.word	0xe000ed00

080012e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	db0b      	blt.n	8001312 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012fa:	79fb      	ldrb	r3, [r7, #7]
 80012fc:	f003 021f 	and.w	r2, r3, #31
 8001300:	4906      	ldr	r1, [pc, #24]	@ (800131c <__NVIC_EnableIRQ+0x34>)
 8001302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001306:	095b      	lsrs	r3, r3, #5
 8001308:	2001      	movs	r0, #1
 800130a:	fa00 f202 	lsl.w	r2, r0, r2
 800130e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001312:	bf00      	nop
 8001314:	370c      	adds	r7, #12
 8001316:	46bd      	mov	sp, r7
 8001318:	bc80      	pop	{r7}
 800131a:	4770      	bx	lr
 800131c:	e000e100 	.word	0xe000e100

08001320 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	4603      	mov	r3, r0
 8001328:	6039      	str	r1, [r7, #0]
 800132a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800132c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001330:	2b00      	cmp	r3, #0
 8001332:	db0a      	blt.n	800134a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	b2da      	uxtb	r2, r3
 8001338:	490c      	ldr	r1, [pc, #48]	@ (800136c <__NVIC_SetPriority+0x4c>)
 800133a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133e:	0112      	lsls	r2, r2, #4
 8001340:	b2d2      	uxtb	r2, r2
 8001342:	440b      	add	r3, r1
 8001344:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001348:	e00a      	b.n	8001360 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	b2da      	uxtb	r2, r3
 800134e:	4908      	ldr	r1, [pc, #32]	@ (8001370 <__NVIC_SetPriority+0x50>)
 8001350:	79fb      	ldrb	r3, [r7, #7]
 8001352:	f003 030f 	and.w	r3, r3, #15
 8001356:	3b04      	subs	r3, #4
 8001358:	0112      	lsls	r2, r2, #4
 800135a:	b2d2      	uxtb	r2, r2
 800135c:	440b      	add	r3, r1
 800135e:	761a      	strb	r2, [r3, #24]
}
 8001360:	bf00      	nop
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	bc80      	pop	{r7}
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	e000e100 	.word	0xe000e100
 8001370:	e000ed00 	.word	0xe000ed00

08001374 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001374:	b480      	push	{r7}
 8001376:	b089      	sub	sp, #36	@ 0x24
 8001378:	af00      	add	r7, sp, #0
 800137a:	60f8      	str	r0, [r7, #12]
 800137c:	60b9      	str	r1, [r7, #8]
 800137e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	f003 0307 	and.w	r3, r3, #7
 8001386:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	f1c3 0307 	rsb	r3, r3, #7
 800138e:	2b04      	cmp	r3, #4
 8001390:	bf28      	it	cs
 8001392:	2304      	movcs	r3, #4
 8001394:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	3304      	adds	r3, #4
 800139a:	2b06      	cmp	r3, #6
 800139c:	d902      	bls.n	80013a4 <NVIC_EncodePriority+0x30>
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	3b03      	subs	r3, #3
 80013a2:	e000      	b.n	80013a6 <NVIC_EncodePriority+0x32>
 80013a4:	2300      	movs	r3, #0
 80013a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013a8:	f04f 32ff 	mov.w	r2, #4294967295
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	fa02 f303 	lsl.w	r3, r2, r3
 80013b2:	43da      	mvns	r2, r3
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	401a      	ands	r2, r3
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013bc:	f04f 31ff 	mov.w	r1, #4294967295
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	fa01 f303 	lsl.w	r3, r1, r3
 80013c6:	43d9      	mvns	r1, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013cc:	4313      	orrs	r3, r2
         );
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3724      	adds	r7, #36	@ 0x24
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bc80      	pop	{r7}
 80013d6:	4770      	bx	lr

080013d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	3b01      	subs	r3, #1
 80013e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013e8:	d301      	bcc.n	80013ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013ea:	2301      	movs	r3, #1
 80013ec:	e00f      	b.n	800140e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001418 <SysTick_Config+0x40>)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	3b01      	subs	r3, #1
 80013f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013f6:	210f      	movs	r1, #15
 80013f8:	f04f 30ff 	mov.w	r0, #4294967295
 80013fc:	f7ff ff90 	bl	8001320 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001400:	4b05      	ldr	r3, [pc, #20]	@ (8001418 <SysTick_Config+0x40>)
 8001402:	2200      	movs	r2, #0
 8001404:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001406:	4b04      	ldr	r3, [pc, #16]	@ (8001418 <SysTick_Config+0x40>)
 8001408:	2207      	movs	r2, #7
 800140a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800140c:	2300      	movs	r3, #0
}
 800140e:	4618      	mov	r0, r3
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	e000e010 	.word	0xe000e010

0800141c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f7ff ff2d 	bl	8001284 <__NVIC_SetPriorityGrouping>
}
 800142a:	bf00      	nop
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}

08001432 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001432:	b580      	push	{r7, lr}
 8001434:	b086      	sub	sp, #24
 8001436:	af00      	add	r7, sp, #0
 8001438:	4603      	mov	r3, r0
 800143a:	60b9      	str	r1, [r7, #8]
 800143c:	607a      	str	r2, [r7, #4]
 800143e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001440:	2300      	movs	r3, #0
 8001442:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001444:	f7ff ff42 	bl	80012cc <__NVIC_GetPriorityGrouping>
 8001448:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800144a:	687a      	ldr	r2, [r7, #4]
 800144c:	68b9      	ldr	r1, [r7, #8]
 800144e:	6978      	ldr	r0, [r7, #20]
 8001450:	f7ff ff90 	bl	8001374 <NVIC_EncodePriority>
 8001454:	4602      	mov	r2, r0
 8001456:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800145a:	4611      	mov	r1, r2
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff ff5f 	bl	8001320 <__NVIC_SetPriority>
}
 8001462:	bf00      	nop
 8001464:	3718      	adds	r7, #24
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}

0800146a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800146a:	b580      	push	{r7, lr}
 800146c:	b082      	sub	sp, #8
 800146e:	af00      	add	r7, sp, #0
 8001470:	4603      	mov	r3, r0
 8001472:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001474:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff ff35 	bl	80012e8 <__NVIC_EnableIRQ>
}
 800147e:	bf00      	nop
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}

08001486 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001486:	b580      	push	{r7, lr}
 8001488:	b082      	sub	sp, #8
 800148a:	af00      	add	r7, sp, #0
 800148c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f7ff ffa2 	bl	80013d8 <SysTick_Config>
 8001494:	4603      	mov	r3, r0
}
 8001496:	4618      	mov	r0, r3
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}

0800149e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800149e:	b480      	push	{r7}
 80014a0:	b085      	sub	sp, #20
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014a6:	2300      	movs	r3, #0
 80014a8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d008      	beq.n	80014c8 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2204      	movs	r2, #4
 80014ba:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2200      	movs	r2, #0
 80014c0:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80014c4:	2301      	movs	r3, #1
 80014c6:	e020      	b.n	800150a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f022 020e 	bic.w	r2, r2, #14
 80014d6:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f022 0201 	bic.w	r2, r2, #1
 80014e6:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014f0:	2101      	movs	r1, #1
 80014f2:	fa01 f202 	lsl.w	r2, r1, r2
 80014f6:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2201      	movs	r2, #1
 80014fc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2200      	movs	r2, #0
 8001504:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001508:	7bfb      	ldrb	r3, [r7, #15]
}
 800150a:	4618      	mov	r0, r3
 800150c:	3714      	adds	r7, #20
 800150e:	46bd      	mov	sp, r7
 8001510:	bc80      	pop	{r7}
 8001512:	4770      	bx	lr

08001514 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800151c:	2300      	movs	r3, #0
 800151e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001526:	b2db      	uxtb	r3, r3
 8001528:	2b02      	cmp	r3, #2
 800152a:	d005      	beq.n	8001538 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2204      	movs	r2, #4
 8001530:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	73fb      	strb	r3, [r7, #15]
 8001536:	e051      	b.n	80015dc <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f022 020e 	bic.w	r2, r2, #14
 8001546:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f022 0201 	bic.w	r2, r2, #1
 8001556:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a22      	ldr	r2, [pc, #136]	@ (80015e8 <HAL_DMA_Abort_IT+0xd4>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d029      	beq.n	80015b6 <HAL_DMA_Abort_IT+0xa2>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a21      	ldr	r2, [pc, #132]	@ (80015ec <HAL_DMA_Abort_IT+0xd8>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d022      	beq.n	80015b2 <HAL_DMA_Abort_IT+0x9e>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a1f      	ldr	r2, [pc, #124]	@ (80015f0 <HAL_DMA_Abort_IT+0xdc>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d01a      	beq.n	80015ac <HAL_DMA_Abort_IT+0x98>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a1e      	ldr	r2, [pc, #120]	@ (80015f4 <HAL_DMA_Abort_IT+0xe0>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d012      	beq.n	80015a6 <HAL_DMA_Abort_IT+0x92>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a1c      	ldr	r2, [pc, #112]	@ (80015f8 <HAL_DMA_Abort_IT+0xe4>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d00a      	beq.n	80015a0 <HAL_DMA_Abort_IT+0x8c>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a1b      	ldr	r2, [pc, #108]	@ (80015fc <HAL_DMA_Abort_IT+0xe8>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d102      	bne.n	800159a <HAL_DMA_Abort_IT+0x86>
 8001594:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001598:	e00e      	b.n	80015b8 <HAL_DMA_Abort_IT+0xa4>
 800159a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800159e:	e00b      	b.n	80015b8 <HAL_DMA_Abort_IT+0xa4>
 80015a0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80015a4:	e008      	b.n	80015b8 <HAL_DMA_Abort_IT+0xa4>
 80015a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015aa:	e005      	b.n	80015b8 <HAL_DMA_Abort_IT+0xa4>
 80015ac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80015b0:	e002      	b.n	80015b8 <HAL_DMA_Abort_IT+0xa4>
 80015b2:	2310      	movs	r3, #16
 80015b4:	e000      	b.n	80015b8 <HAL_DMA_Abort_IT+0xa4>
 80015b6:	2301      	movs	r3, #1
 80015b8:	4a11      	ldr	r2, [pc, #68]	@ (8001600 <HAL_DMA_Abort_IT+0xec>)
 80015ba:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2201      	movs	r2, #1
 80015c0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2200      	movs	r2, #0
 80015c8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d003      	beq.n	80015dc <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	4798      	blx	r3
    } 
  }
  return status;
 80015dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3710      	adds	r7, #16
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	40020008 	.word	0x40020008
 80015ec:	4002001c 	.word	0x4002001c
 80015f0:	40020030 	.word	0x40020030
 80015f4:	40020044 	.word	0x40020044
 80015f8:	40020058 	.word	0x40020058
 80015fc:	4002006c 	.word	0x4002006c
 8001600:	40020000 	.word	0x40020000

08001604 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001604:	b480      	push	{r7}
 8001606:	b08b      	sub	sp, #44	@ 0x2c
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800160e:	2300      	movs	r3, #0
 8001610:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001612:	2300      	movs	r3, #0
 8001614:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001616:	e169      	b.n	80018ec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001618:	2201      	movs	r2, #1
 800161a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800161c:	fa02 f303 	lsl.w	r3, r2, r3
 8001620:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	69fa      	ldr	r2, [r7, #28]
 8001628:	4013      	ands	r3, r2
 800162a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	429a      	cmp	r2, r3
 8001632:	f040 8158 	bne.w	80018e6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	4a9a      	ldr	r2, [pc, #616]	@ (80018a4 <HAL_GPIO_Init+0x2a0>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d05e      	beq.n	80016fe <HAL_GPIO_Init+0xfa>
 8001640:	4a98      	ldr	r2, [pc, #608]	@ (80018a4 <HAL_GPIO_Init+0x2a0>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d875      	bhi.n	8001732 <HAL_GPIO_Init+0x12e>
 8001646:	4a98      	ldr	r2, [pc, #608]	@ (80018a8 <HAL_GPIO_Init+0x2a4>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d058      	beq.n	80016fe <HAL_GPIO_Init+0xfa>
 800164c:	4a96      	ldr	r2, [pc, #600]	@ (80018a8 <HAL_GPIO_Init+0x2a4>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d86f      	bhi.n	8001732 <HAL_GPIO_Init+0x12e>
 8001652:	4a96      	ldr	r2, [pc, #600]	@ (80018ac <HAL_GPIO_Init+0x2a8>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d052      	beq.n	80016fe <HAL_GPIO_Init+0xfa>
 8001658:	4a94      	ldr	r2, [pc, #592]	@ (80018ac <HAL_GPIO_Init+0x2a8>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d869      	bhi.n	8001732 <HAL_GPIO_Init+0x12e>
 800165e:	4a94      	ldr	r2, [pc, #592]	@ (80018b0 <HAL_GPIO_Init+0x2ac>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d04c      	beq.n	80016fe <HAL_GPIO_Init+0xfa>
 8001664:	4a92      	ldr	r2, [pc, #584]	@ (80018b0 <HAL_GPIO_Init+0x2ac>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d863      	bhi.n	8001732 <HAL_GPIO_Init+0x12e>
 800166a:	4a92      	ldr	r2, [pc, #584]	@ (80018b4 <HAL_GPIO_Init+0x2b0>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d046      	beq.n	80016fe <HAL_GPIO_Init+0xfa>
 8001670:	4a90      	ldr	r2, [pc, #576]	@ (80018b4 <HAL_GPIO_Init+0x2b0>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d85d      	bhi.n	8001732 <HAL_GPIO_Init+0x12e>
 8001676:	2b12      	cmp	r3, #18
 8001678:	d82a      	bhi.n	80016d0 <HAL_GPIO_Init+0xcc>
 800167a:	2b12      	cmp	r3, #18
 800167c:	d859      	bhi.n	8001732 <HAL_GPIO_Init+0x12e>
 800167e:	a201      	add	r2, pc, #4	@ (adr r2, 8001684 <HAL_GPIO_Init+0x80>)
 8001680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001684:	080016ff 	.word	0x080016ff
 8001688:	080016d9 	.word	0x080016d9
 800168c:	080016eb 	.word	0x080016eb
 8001690:	0800172d 	.word	0x0800172d
 8001694:	08001733 	.word	0x08001733
 8001698:	08001733 	.word	0x08001733
 800169c:	08001733 	.word	0x08001733
 80016a0:	08001733 	.word	0x08001733
 80016a4:	08001733 	.word	0x08001733
 80016a8:	08001733 	.word	0x08001733
 80016ac:	08001733 	.word	0x08001733
 80016b0:	08001733 	.word	0x08001733
 80016b4:	08001733 	.word	0x08001733
 80016b8:	08001733 	.word	0x08001733
 80016bc:	08001733 	.word	0x08001733
 80016c0:	08001733 	.word	0x08001733
 80016c4:	08001733 	.word	0x08001733
 80016c8:	080016e1 	.word	0x080016e1
 80016cc:	080016f5 	.word	0x080016f5
 80016d0:	4a79      	ldr	r2, [pc, #484]	@ (80018b8 <HAL_GPIO_Init+0x2b4>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d013      	beq.n	80016fe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80016d6:	e02c      	b.n	8001732 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	623b      	str	r3, [r7, #32]
          break;
 80016de:	e029      	b.n	8001734 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	3304      	adds	r3, #4
 80016e6:	623b      	str	r3, [r7, #32]
          break;
 80016e8:	e024      	b.n	8001734 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	68db      	ldr	r3, [r3, #12]
 80016ee:	3308      	adds	r3, #8
 80016f0:	623b      	str	r3, [r7, #32]
          break;
 80016f2:	e01f      	b.n	8001734 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	330c      	adds	r3, #12
 80016fa:	623b      	str	r3, [r7, #32]
          break;
 80016fc:	e01a      	b.n	8001734 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d102      	bne.n	800170c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001706:	2304      	movs	r3, #4
 8001708:	623b      	str	r3, [r7, #32]
          break;
 800170a:	e013      	b.n	8001734 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	2b01      	cmp	r3, #1
 8001712:	d105      	bne.n	8001720 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001714:	2308      	movs	r3, #8
 8001716:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	69fa      	ldr	r2, [r7, #28]
 800171c:	611a      	str	r2, [r3, #16]
          break;
 800171e:	e009      	b.n	8001734 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001720:	2308      	movs	r3, #8
 8001722:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	69fa      	ldr	r2, [r7, #28]
 8001728:	615a      	str	r2, [r3, #20]
          break;
 800172a:	e003      	b.n	8001734 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800172c:	2300      	movs	r3, #0
 800172e:	623b      	str	r3, [r7, #32]
          break;
 8001730:	e000      	b.n	8001734 <HAL_GPIO_Init+0x130>
          break;
 8001732:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001734:	69bb      	ldr	r3, [r7, #24]
 8001736:	2bff      	cmp	r3, #255	@ 0xff
 8001738:	d801      	bhi.n	800173e <HAL_GPIO_Init+0x13a>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	e001      	b.n	8001742 <HAL_GPIO_Init+0x13e>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	3304      	adds	r3, #4
 8001742:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001744:	69bb      	ldr	r3, [r7, #24]
 8001746:	2bff      	cmp	r3, #255	@ 0xff
 8001748:	d802      	bhi.n	8001750 <HAL_GPIO_Init+0x14c>
 800174a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	e002      	b.n	8001756 <HAL_GPIO_Init+0x152>
 8001750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001752:	3b08      	subs	r3, #8
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	210f      	movs	r1, #15
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	fa01 f303 	lsl.w	r3, r1, r3
 8001764:	43db      	mvns	r3, r3
 8001766:	401a      	ands	r2, r3
 8001768:	6a39      	ldr	r1, [r7, #32]
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	fa01 f303 	lsl.w	r3, r1, r3
 8001770:	431a      	orrs	r2, r3
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800177e:	2b00      	cmp	r3, #0
 8001780:	f000 80b1 	beq.w	80018e6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001784:	4b4d      	ldr	r3, [pc, #308]	@ (80018bc <HAL_GPIO_Init+0x2b8>)
 8001786:	699b      	ldr	r3, [r3, #24]
 8001788:	4a4c      	ldr	r2, [pc, #304]	@ (80018bc <HAL_GPIO_Init+0x2b8>)
 800178a:	f043 0301 	orr.w	r3, r3, #1
 800178e:	6193      	str	r3, [r2, #24]
 8001790:	4b4a      	ldr	r3, [pc, #296]	@ (80018bc <HAL_GPIO_Init+0x2b8>)
 8001792:	699b      	ldr	r3, [r3, #24]
 8001794:	f003 0301 	and.w	r3, r3, #1
 8001798:	60bb      	str	r3, [r7, #8]
 800179a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800179c:	4a48      	ldr	r2, [pc, #288]	@ (80018c0 <HAL_GPIO_Init+0x2bc>)
 800179e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017a0:	089b      	lsrs	r3, r3, #2
 80017a2:	3302      	adds	r3, #2
 80017a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017a8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80017aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ac:	f003 0303 	and.w	r3, r3, #3
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	220f      	movs	r2, #15
 80017b4:	fa02 f303 	lsl.w	r3, r2, r3
 80017b8:	43db      	mvns	r3, r3
 80017ba:	68fa      	ldr	r2, [r7, #12]
 80017bc:	4013      	ands	r3, r2
 80017be:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	4a40      	ldr	r2, [pc, #256]	@ (80018c4 <HAL_GPIO_Init+0x2c0>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d013      	beq.n	80017f0 <HAL_GPIO_Init+0x1ec>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	4a3f      	ldr	r2, [pc, #252]	@ (80018c8 <HAL_GPIO_Init+0x2c4>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d00d      	beq.n	80017ec <HAL_GPIO_Init+0x1e8>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	4a3e      	ldr	r2, [pc, #248]	@ (80018cc <HAL_GPIO_Init+0x2c8>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d007      	beq.n	80017e8 <HAL_GPIO_Init+0x1e4>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	4a3d      	ldr	r2, [pc, #244]	@ (80018d0 <HAL_GPIO_Init+0x2cc>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d101      	bne.n	80017e4 <HAL_GPIO_Init+0x1e0>
 80017e0:	2303      	movs	r3, #3
 80017e2:	e006      	b.n	80017f2 <HAL_GPIO_Init+0x1ee>
 80017e4:	2304      	movs	r3, #4
 80017e6:	e004      	b.n	80017f2 <HAL_GPIO_Init+0x1ee>
 80017e8:	2302      	movs	r3, #2
 80017ea:	e002      	b.n	80017f2 <HAL_GPIO_Init+0x1ee>
 80017ec:	2301      	movs	r3, #1
 80017ee:	e000      	b.n	80017f2 <HAL_GPIO_Init+0x1ee>
 80017f0:	2300      	movs	r3, #0
 80017f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017f4:	f002 0203 	and.w	r2, r2, #3
 80017f8:	0092      	lsls	r2, r2, #2
 80017fa:	4093      	lsls	r3, r2
 80017fc:	68fa      	ldr	r2, [r7, #12]
 80017fe:	4313      	orrs	r3, r2
 8001800:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001802:	492f      	ldr	r1, [pc, #188]	@ (80018c0 <HAL_GPIO_Init+0x2bc>)
 8001804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001806:	089b      	lsrs	r3, r3, #2
 8001808:	3302      	adds	r3, #2
 800180a:	68fa      	ldr	r2, [r7, #12]
 800180c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001818:	2b00      	cmp	r3, #0
 800181a:	d006      	beq.n	800182a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800181c:	4b2d      	ldr	r3, [pc, #180]	@ (80018d4 <HAL_GPIO_Init+0x2d0>)
 800181e:	689a      	ldr	r2, [r3, #8]
 8001820:	492c      	ldr	r1, [pc, #176]	@ (80018d4 <HAL_GPIO_Init+0x2d0>)
 8001822:	69bb      	ldr	r3, [r7, #24]
 8001824:	4313      	orrs	r3, r2
 8001826:	608b      	str	r3, [r1, #8]
 8001828:	e006      	b.n	8001838 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800182a:	4b2a      	ldr	r3, [pc, #168]	@ (80018d4 <HAL_GPIO_Init+0x2d0>)
 800182c:	689a      	ldr	r2, [r3, #8]
 800182e:	69bb      	ldr	r3, [r7, #24]
 8001830:	43db      	mvns	r3, r3
 8001832:	4928      	ldr	r1, [pc, #160]	@ (80018d4 <HAL_GPIO_Init+0x2d0>)
 8001834:	4013      	ands	r3, r2
 8001836:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001840:	2b00      	cmp	r3, #0
 8001842:	d006      	beq.n	8001852 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001844:	4b23      	ldr	r3, [pc, #140]	@ (80018d4 <HAL_GPIO_Init+0x2d0>)
 8001846:	68da      	ldr	r2, [r3, #12]
 8001848:	4922      	ldr	r1, [pc, #136]	@ (80018d4 <HAL_GPIO_Init+0x2d0>)
 800184a:	69bb      	ldr	r3, [r7, #24]
 800184c:	4313      	orrs	r3, r2
 800184e:	60cb      	str	r3, [r1, #12]
 8001850:	e006      	b.n	8001860 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001852:	4b20      	ldr	r3, [pc, #128]	@ (80018d4 <HAL_GPIO_Init+0x2d0>)
 8001854:	68da      	ldr	r2, [r3, #12]
 8001856:	69bb      	ldr	r3, [r7, #24]
 8001858:	43db      	mvns	r3, r3
 800185a:	491e      	ldr	r1, [pc, #120]	@ (80018d4 <HAL_GPIO_Init+0x2d0>)
 800185c:	4013      	ands	r3, r2
 800185e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001868:	2b00      	cmp	r3, #0
 800186a:	d006      	beq.n	800187a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800186c:	4b19      	ldr	r3, [pc, #100]	@ (80018d4 <HAL_GPIO_Init+0x2d0>)
 800186e:	685a      	ldr	r2, [r3, #4]
 8001870:	4918      	ldr	r1, [pc, #96]	@ (80018d4 <HAL_GPIO_Init+0x2d0>)
 8001872:	69bb      	ldr	r3, [r7, #24]
 8001874:	4313      	orrs	r3, r2
 8001876:	604b      	str	r3, [r1, #4]
 8001878:	e006      	b.n	8001888 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800187a:	4b16      	ldr	r3, [pc, #88]	@ (80018d4 <HAL_GPIO_Init+0x2d0>)
 800187c:	685a      	ldr	r2, [r3, #4]
 800187e:	69bb      	ldr	r3, [r7, #24]
 8001880:	43db      	mvns	r3, r3
 8001882:	4914      	ldr	r1, [pc, #80]	@ (80018d4 <HAL_GPIO_Init+0x2d0>)
 8001884:	4013      	ands	r3, r2
 8001886:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001890:	2b00      	cmp	r3, #0
 8001892:	d021      	beq.n	80018d8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001894:	4b0f      	ldr	r3, [pc, #60]	@ (80018d4 <HAL_GPIO_Init+0x2d0>)
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	490e      	ldr	r1, [pc, #56]	@ (80018d4 <HAL_GPIO_Init+0x2d0>)
 800189a:	69bb      	ldr	r3, [r7, #24]
 800189c:	4313      	orrs	r3, r2
 800189e:	600b      	str	r3, [r1, #0]
 80018a0:	e021      	b.n	80018e6 <HAL_GPIO_Init+0x2e2>
 80018a2:	bf00      	nop
 80018a4:	10320000 	.word	0x10320000
 80018a8:	10310000 	.word	0x10310000
 80018ac:	10220000 	.word	0x10220000
 80018b0:	10210000 	.word	0x10210000
 80018b4:	10120000 	.word	0x10120000
 80018b8:	10110000 	.word	0x10110000
 80018bc:	40021000 	.word	0x40021000
 80018c0:	40010000 	.word	0x40010000
 80018c4:	40010800 	.word	0x40010800
 80018c8:	40010c00 	.word	0x40010c00
 80018cc:	40011000 	.word	0x40011000
 80018d0:	40011400 	.word	0x40011400
 80018d4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80018d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001908 <HAL_GPIO_Init+0x304>)
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	69bb      	ldr	r3, [r7, #24]
 80018de:	43db      	mvns	r3, r3
 80018e0:	4909      	ldr	r1, [pc, #36]	@ (8001908 <HAL_GPIO_Init+0x304>)
 80018e2:	4013      	ands	r3, r2
 80018e4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80018e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018e8:	3301      	adds	r3, #1
 80018ea:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018f2:	fa22 f303 	lsr.w	r3, r2, r3
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	f47f ae8e 	bne.w	8001618 <HAL_GPIO_Init+0x14>
  }
}
 80018fc:	bf00      	nop
 80018fe:	bf00      	nop
 8001900:	372c      	adds	r7, #44	@ 0x2c
 8001902:	46bd      	mov	sp, r7
 8001904:	bc80      	pop	{r7}
 8001906:	4770      	bx	lr
 8001908:	40010400 	.word	0x40010400

0800190c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	460b      	mov	r3, r1
 8001916:	807b      	strh	r3, [r7, #2]
 8001918:	4613      	mov	r3, r2
 800191a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800191c:	787b      	ldrb	r3, [r7, #1]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d003      	beq.n	800192a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001922:	887a      	ldrh	r2, [r7, #2]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001928:	e003      	b.n	8001932 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800192a:	887b      	ldrh	r3, [r7, #2]
 800192c:	041a      	lsls	r2, r3, #16
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	611a      	str	r2, [r3, #16]
}
 8001932:	bf00      	nop
 8001934:	370c      	adds	r7, #12
 8001936:	46bd      	mov	sp, r7
 8001938:	bc80      	pop	{r7}
 800193a:	4770      	bx	lr

0800193c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	4603      	mov	r3, r0
 8001944:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001946:	4b08      	ldr	r3, [pc, #32]	@ (8001968 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001948:	695a      	ldr	r2, [r3, #20]
 800194a:	88fb      	ldrh	r3, [r7, #6]
 800194c:	4013      	ands	r3, r2
 800194e:	2b00      	cmp	r3, #0
 8001950:	d006      	beq.n	8001960 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001952:	4a05      	ldr	r2, [pc, #20]	@ (8001968 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001954:	88fb      	ldrh	r3, [r7, #6]
 8001956:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001958:	88fb      	ldrh	r3, [r7, #6]
 800195a:	4618      	mov	r0, r3
 800195c:	f000 f806 	bl	800196c <HAL_GPIO_EXTI_Callback>
  }
}
 8001960:	bf00      	nop
 8001962:	3708      	adds	r7, #8
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	40010400 	.word	0x40010400

0800196c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	4603      	mov	r3, r0
 8001974:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001976:	bf00      	nop
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	bc80      	pop	{r7}
 800197e:	4770      	bx	lr

08001980 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b086      	sub	sp, #24
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d101      	bne.n	8001992 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e272      	b.n	8001e78 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0301 	and.w	r3, r3, #1
 800199a:	2b00      	cmp	r3, #0
 800199c:	f000 8087 	beq.w	8001aae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019a0:	4b92      	ldr	r3, [pc, #584]	@ (8001bec <HAL_RCC_OscConfig+0x26c>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f003 030c 	and.w	r3, r3, #12
 80019a8:	2b04      	cmp	r3, #4
 80019aa:	d00c      	beq.n	80019c6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019ac:	4b8f      	ldr	r3, [pc, #572]	@ (8001bec <HAL_RCC_OscConfig+0x26c>)
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f003 030c 	and.w	r3, r3, #12
 80019b4:	2b08      	cmp	r3, #8
 80019b6:	d112      	bne.n	80019de <HAL_RCC_OscConfig+0x5e>
 80019b8:	4b8c      	ldr	r3, [pc, #560]	@ (8001bec <HAL_RCC_OscConfig+0x26c>)
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019c4:	d10b      	bne.n	80019de <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019c6:	4b89      	ldr	r3, [pc, #548]	@ (8001bec <HAL_RCC_OscConfig+0x26c>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d06c      	beq.n	8001aac <HAL_RCC_OscConfig+0x12c>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d168      	bne.n	8001aac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e24c      	b.n	8001e78 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019e6:	d106      	bne.n	80019f6 <HAL_RCC_OscConfig+0x76>
 80019e8:	4b80      	ldr	r3, [pc, #512]	@ (8001bec <HAL_RCC_OscConfig+0x26c>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a7f      	ldr	r2, [pc, #508]	@ (8001bec <HAL_RCC_OscConfig+0x26c>)
 80019ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019f2:	6013      	str	r3, [r2, #0]
 80019f4:	e02e      	b.n	8001a54 <HAL_RCC_OscConfig+0xd4>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d10c      	bne.n	8001a18 <HAL_RCC_OscConfig+0x98>
 80019fe:	4b7b      	ldr	r3, [pc, #492]	@ (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a7a      	ldr	r2, [pc, #488]	@ (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001a04:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a08:	6013      	str	r3, [r2, #0]
 8001a0a:	4b78      	ldr	r3, [pc, #480]	@ (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a77      	ldr	r2, [pc, #476]	@ (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001a10:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a14:	6013      	str	r3, [r2, #0]
 8001a16:	e01d      	b.n	8001a54 <HAL_RCC_OscConfig+0xd4>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a20:	d10c      	bne.n	8001a3c <HAL_RCC_OscConfig+0xbc>
 8001a22:	4b72      	ldr	r3, [pc, #456]	@ (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a71      	ldr	r2, [pc, #452]	@ (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001a28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a2c:	6013      	str	r3, [r2, #0]
 8001a2e:	4b6f      	ldr	r3, [pc, #444]	@ (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a6e      	ldr	r2, [pc, #440]	@ (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001a34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a38:	6013      	str	r3, [r2, #0]
 8001a3a:	e00b      	b.n	8001a54 <HAL_RCC_OscConfig+0xd4>
 8001a3c:	4b6b      	ldr	r3, [pc, #428]	@ (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a6a      	ldr	r2, [pc, #424]	@ (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001a42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a46:	6013      	str	r3, [r2, #0]
 8001a48:	4b68      	ldr	r3, [pc, #416]	@ (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a67      	ldr	r2, [pc, #412]	@ (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001a4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a52:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d013      	beq.n	8001a84 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a5c:	f7ff fc08 	bl	8001270 <HAL_GetTick>
 8001a60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a62:	e008      	b.n	8001a76 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a64:	f7ff fc04 	bl	8001270 <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	2b64      	cmp	r3, #100	@ 0x64
 8001a70:	d901      	bls.n	8001a76 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e200      	b.n	8001e78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a76:	4b5d      	ldr	r3, [pc, #372]	@ (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d0f0      	beq.n	8001a64 <HAL_RCC_OscConfig+0xe4>
 8001a82:	e014      	b.n	8001aae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a84:	f7ff fbf4 	bl	8001270 <HAL_GetTick>
 8001a88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a8a:	e008      	b.n	8001a9e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a8c:	f7ff fbf0 	bl	8001270 <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	2b64      	cmp	r3, #100	@ 0x64
 8001a98:	d901      	bls.n	8001a9e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e1ec      	b.n	8001e78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a9e:	4b53      	ldr	r3, [pc, #332]	@ (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d1f0      	bne.n	8001a8c <HAL_RCC_OscConfig+0x10c>
 8001aaa:	e000      	b.n	8001aae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 0302 	and.w	r3, r3, #2
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d063      	beq.n	8001b82 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001aba:	4b4c      	ldr	r3, [pc, #304]	@ (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f003 030c 	and.w	r3, r3, #12
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d00b      	beq.n	8001ade <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ac6:	4b49      	ldr	r3, [pc, #292]	@ (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f003 030c 	and.w	r3, r3, #12
 8001ace:	2b08      	cmp	r3, #8
 8001ad0:	d11c      	bne.n	8001b0c <HAL_RCC_OscConfig+0x18c>
 8001ad2:	4b46      	ldr	r3, [pc, #280]	@ (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d116      	bne.n	8001b0c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ade:	4b43      	ldr	r3, [pc, #268]	@ (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0302 	and.w	r3, r3, #2
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d005      	beq.n	8001af6 <HAL_RCC_OscConfig+0x176>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	691b      	ldr	r3, [r3, #16]
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d001      	beq.n	8001af6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e1c0      	b.n	8001e78 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001af6:	4b3d      	ldr	r3, [pc, #244]	@ (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	695b      	ldr	r3, [r3, #20]
 8001b02:	00db      	lsls	r3, r3, #3
 8001b04:	4939      	ldr	r1, [pc, #228]	@ (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001b06:	4313      	orrs	r3, r2
 8001b08:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b0a:	e03a      	b.n	8001b82 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	691b      	ldr	r3, [r3, #16]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d020      	beq.n	8001b56 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b14:	4b36      	ldr	r3, [pc, #216]	@ (8001bf0 <HAL_RCC_OscConfig+0x270>)
 8001b16:	2201      	movs	r2, #1
 8001b18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b1a:	f7ff fba9 	bl	8001270 <HAL_GetTick>
 8001b1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b20:	e008      	b.n	8001b34 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b22:	f7ff fba5 	bl	8001270 <HAL_GetTick>
 8001b26:	4602      	mov	r2, r0
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d901      	bls.n	8001b34 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b30:	2303      	movs	r3, #3
 8001b32:	e1a1      	b.n	8001e78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b34:	4b2d      	ldr	r3, [pc, #180]	@ (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 0302 	and.w	r3, r3, #2
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d0f0      	beq.n	8001b22 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b40:	4b2a      	ldr	r3, [pc, #168]	@ (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	695b      	ldr	r3, [r3, #20]
 8001b4c:	00db      	lsls	r3, r3, #3
 8001b4e:	4927      	ldr	r1, [pc, #156]	@ (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001b50:	4313      	orrs	r3, r2
 8001b52:	600b      	str	r3, [r1, #0]
 8001b54:	e015      	b.n	8001b82 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b56:	4b26      	ldr	r3, [pc, #152]	@ (8001bf0 <HAL_RCC_OscConfig+0x270>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b5c:	f7ff fb88 	bl	8001270 <HAL_GetTick>
 8001b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b62:	e008      	b.n	8001b76 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b64:	f7ff fb84 	bl	8001270 <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d901      	bls.n	8001b76 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e180      	b.n	8001e78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b76:	4b1d      	ldr	r3, [pc, #116]	@ (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0302 	and.w	r3, r3, #2
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d1f0      	bne.n	8001b64 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0308 	and.w	r3, r3, #8
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d03a      	beq.n	8001c04 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	699b      	ldr	r3, [r3, #24]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d019      	beq.n	8001bca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b96:	4b17      	ldr	r3, [pc, #92]	@ (8001bf4 <HAL_RCC_OscConfig+0x274>)
 8001b98:	2201      	movs	r2, #1
 8001b9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b9c:	f7ff fb68 	bl	8001270 <HAL_GetTick>
 8001ba0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ba2:	e008      	b.n	8001bb6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ba4:	f7ff fb64 	bl	8001270 <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d901      	bls.n	8001bb6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e160      	b.n	8001e78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bb6:	4b0d      	ldr	r3, [pc, #52]	@ (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001bb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bba:	f003 0302 	and.w	r3, r3, #2
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d0f0      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001bc2:	2001      	movs	r0, #1
 8001bc4:	f000 face 	bl	8002164 <RCC_Delay>
 8001bc8:	e01c      	b.n	8001c04 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bca:	4b0a      	ldr	r3, [pc, #40]	@ (8001bf4 <HAL_RCC_OscConfig+0x274>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bd0:	f7ff fb4e 	bl	8001270 <HAL_GetTick>
 8001bd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bd6:	e00f      	b.n	8001bf8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bd8:	f7ff fb4a 	bl	8001270 <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d908      	bls.n	8001bf8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001be6:	2303      	movs	r3, #3
 8001be8:	e146      	b.n	8001e78 <HAL_RCC_OscConfig+0x4f8>
 8001bea:	bf00      	nop
 8001bec:	40021000 	.word	0x40021000
 8001bf0:	42420000 	.word	0x42420000
 8001bf4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bf8:	4b92      	ldr	r3, [pc, #584]	@ (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bfc:	f003 0302 	and.w	r3, r3, #2
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d1e9      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0304 	and.w	r3, r3, #4
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	f000 80a6 	beq.w	8001d5e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c12:	2300      	movs	r3, #0
 8001c14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c16:	4b8b      	ldr	r3, [pc, #556]	@ (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001c18:	69db      	ldr	r3, [r3, #28]
 8001c1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d10d      	bne.n	8001c3e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c22:	4b88      	ldr	r3, [pc, #544]	@ (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001c24:	69db      	ldr	r3, [r3, #28]
 8001c26:	4a87      	ldr	r2, [pc, #540]	@ (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001c28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c2c:	61d3      	str	r3, [r2, #28]
 8001c2e:	4b85      	ldr	r3, [pc, #532]	@ (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001c30:	69db      	ldr	r3, [r3, #28]
 8001c32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c36:	60bb      	str	r3, [r7, #8]
 8001c38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c3e:	4b82      	ldr	r3, [pc, #520]	@ (8001e48 <HAL_RCC_OscConfig+0x4c8>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d118      	bne.n	8001c7c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c4a:	4b7f      	ldr	r3, [pc, #508]	@ (8001e48 <HAL_RCC_OscConfig+0x4c8>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a7e      	ldr	r2, [pc, #504]	@ (8001e48 <HAL_RCC_OscConfig+0x4c8>)
 8001c50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c56:	f7ff fb0b 	bl	8001270 <HAL_GetTick>
 8001c5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c5c:	e008      	b.n	8001c70 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c5e:	f7ff fb07 	bl	8001270 <HAL_GetTick>
 8001c62:	4602      	mov	r2, r0
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	2b64      	cmp	r3, #100	@ 0x64
 8001c6a:	d901      	bls.n	8001c70 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	e103      	b.n	8001e78 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c70:	4b75      	ldr	r3, [pc, #468]	@ (8001e48 <HAL_RCC_OscConfig+0x4c8>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d0f0      	beq.n	8001c5e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d106      	bne.n	8001c92 <HAL_RCC_OscConfig+0x312>
 8001c84:	4b6f      	ldr	r3, [pc, #444]	@ (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001c86:	6a1b      	ldr	r3, [r3, #32]
 8001c88:	4a6e      	ldr	r2, [pc, #440]	@ (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001c8a:	f043 0301 	orr.w	r3, r3, #1
 8001c8e:	6213      	str	r3, [r2, #32]
 8001c90:	e02d      	b.n	8001cee <HAL_RCC_OscConfig+0x36e>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	68db      	ldr	r3, [r3, #12]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d10c      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x334>
 8001c9a:	4b6a      	ldr	r3, [pc, #424]	@ (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001c9c:	6a1b      	ldr	r3, [r3, #32]
 8001c9e:	4a69      	ldr	r2, [pc, #420]	@ (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001ca0:	f023 0301 	bic.w	r3, r3, #1
 8001ca4:	6213      	str	r3, [r2, #32]
 8001ca6:	4b67      	ldr	r3, [pc, #412]	@ (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001ca8:	6a1b      	ldr	r3, [r3, #32]
 8001caa:	4a66      	ldr	r2, [pc, #408]	@ (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001cac:	f023 0304 	bic.w	r3, r3, #4
 8001cb0:	6213      	str	r3, [r2, #32]
 8001cb2:	e01c      	b.n	8001cee <HAL_RCC_OscConfig+0x36e>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	2b05      	cmp	r3, #5
 8001cba:	d10c      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x356>
 8001cbc:	4b61      	ldr	r3, [pc, #388]	@ (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001cbe:	6a1b      	ldr	r3, [r3, #32]
 8001cc0:	4a60      	ldr	r2, [pc, #384]	@ (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001cc2:	f043 0304 	orr.w	r3, r3, #4
 8001cc6:	6213      	str	r3, [r2, #32]
 8001cc8:	4b5e      	ldr	r3, [pc, #376]	@ (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001cca:	6a1b      	ldr	r3, [r3, #32]
 8001ccc:	4a5d      	ldr	r2, [pc, #372]	@ (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001cce:	f043 0301 	orr.w	r3, r3, #1
 8001cd2:	6213      	str	r3, [r2, #32]
 8001cd4:	e00b      	b.n	8001cee <HAL_RCC_OscConfig+0x36e>
 8001cd6:	4b5b      	ldr	r3, [pc, #364]	@ (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001cd8:	6a1b      	ldr	r3, [r3, #32]
 8001cda:	4a5a      	ldr	r2, [pc, #360]	@ (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001cdc:	f023 0301 	bic.w	r3, r3, #1
 8001ce0:	6213      	str	r3, [r2, #32]
 8001ce2:	4b58      	ldr	r3, [pc, #352]	@ (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001ce4:	6a1b      	ldr	r3, [r3, #32]
 8001ce6:	4a57      	ldr	r2, [pc, #348]	@ (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001ce8:	f023 0304 	bic.w	r3, r3, #4
 8001cec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	68db      	ldr	r3, [r3, #12]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d015      	beq.n	8001d22 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cf6:	f7ff fabb 	bl	8001270 <HAL_GetTick>
 8001cfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cfc:	e00a      	b.n	8001d14 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cfe:	f7ff fab7 	bl	8001270 <HAL_GetTick>
 8001d02:	4602      	mov	r2, r0
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d901      	bls.n	8001d14 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d10:	2303      	movs	r3, #3
 8001d12:	e0b1      	b.n	8001e78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d14:	4b4b      	ldr	r3, [pc, #300]	@ (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001d16:	6a1b      	ldr	r3, [r3, #32]
 8001d18:	f003 0302 	and.w	r3, r3, #2
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d0ee      	beq.n	8001cfe <HAL_RCC_OscConfig+0x37e>
 8001d20:	e014      	b.n	8001d4c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d22:	f7ff faa5 	bl	8001270 <HAL_GetTick>
 8001d26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d28:	e00a      	b.n	8001d40 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d2a:	f7ff faa1 	bl	8001270 <HAL_GetTick>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	1ad3      	subs	r3, r2, r3
 8001d34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d901      	bls.n	8001d40 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	e09b      	b.n	8001e78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d40:	4b40      	ldr	r3, [pc, #256]	@ (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001d42:	6a1b      	ldr	r3, [r3, #32]
 8001d44:	f003 0302 	and.w	r3, r3, #2
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d1ee      	bne.n	8001d2a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d4c:	7dfb      	ldrb	r3, [r7, #23]
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d105      	bne.n	8001d5e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d52:	4b3c      	ldr	r3, [pc, #240]	@ (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001d54:	69db      	ldr	r3, [r3, #28]
 8001d56:	4a3b      	ldr	r2, [pc, #236]	@ (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001d58:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d5c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	69db      	ldr	r3, [r3, #28]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	f000 8087 	beq.w	8001e76 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d68:	4b36      	ldr	r3, [pc, #216]	@ (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f003 030c 	and.w	r3, r3, #12
 8001d70:	2b08      	cmp	r3, #8
 8001d72:	d061      	beq.n	8001e38 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	69db      	ldr	r3, [r3, #28]
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d146      	bne.n	8001e0a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d7c:	4b33      	ldr	r3, [pc, #204]	@ (8001e4c <HAL_RCC_OscConfig+0x4cc>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d82:	f7ff fa75 	bl	8001270 <HAL_GetTick>
 8001d86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d88:	e008      	b.n	8001d9c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d8a:	f7ff fa71 	bl	8001270 <HAL_GetTick>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d901      	bls.n	8001d9c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	e06d      	b.n	8001e78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d9c:	4b29      	ldr	r3, [pc, #164]	@ (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d1f0      	bne.n	8001d8a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6a1b      	ldr	r3, [r3, #32]
 8001dac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001db0:	d108      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001db2:	4b24      	ldr	r3, [pc, #144]	@ (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	4921      	ldr	r1, [pc, #132]	@ (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dc4:	4b1f      	ldr	r3, [pc, #124]	@ (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6a19      	ldr	r1, [r3, #32]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dd4:	430b      	orrs	r3, r1
 8001dd6:	491b      	ldr	r1, [pc, #108]	@ (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ddc:	4b1b      	ldr	r3, [pc, #108]	@ (8001e4c <HAL_RCC_OscConfig+0x4cc>)
 8001dde:	2201      	movs	r2, #1
 8001de0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de2:	f7ff fa45 	bl	8001270 <HAL_GetTick>
 8001de6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001de8:	e008      	b.n	8001dfc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dea:	f7ff fa41 	bl	8001270 <HAL_GetTick>
 8001dee:	4602      	mov	r2, r0
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	d901      	bls.n	8001dfc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	e03d      	b.n	8001e78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001dfc:	4b11      	ldr	r3, [pc, #68]	@ (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d0f0      	beq.n	8001dea <HAL_RCC_OscConfig+0x46a>
 8001e08:	e035      	b.n	8001e76 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e0a:	4b10      	ldr	r3, [pc, #64]	@ (8001e4c <HAL_RCC_OscConfig+0x4cc>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e10:	f7ff fa2e 	bl	8001270 <HAL_GetTick>
 8001e14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e16:	e008      	b.n	8001e2a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e18:	f7ff fa2a 	bl	8001270 <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d901      	bls.n	8001e2a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e026      	b.n	8001e78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e2a:	4b06      	ldr	r3, [pc, #24]	@ (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d1f0      	bne.n	8001e18 <HAL_RCC_OscConfig+0x498>
 8001e36:	e01e      	b.n	8001e76 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	69db      	ldr	r3, [r3, #28]
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d107      	bne.n	8001e50 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e019      	b.n	8001e78 <HAL_RCC_OscConfig+0x4f8>
 8001e44:	40021000 	.word	0x40021000
 8001e48:	40007000 	.word	0x40007000
 8001e4c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e50:	4b0b      	ldr	r3, [pc, #44]	@ (8001e80 <HAL_RCC_OscConfig+0x500>)
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6a1b      	ldr	r3, [r3, #32]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d106      	bne.n	8001e72 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d001      	beq.n	8001e76 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e000      	b.n	8001e78 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001e76:	2300      	movs	r3, #0
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3718      	adds	r7, #24
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	40021000 	.word	0x40021000

08001e84 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d101      	bne.n	8001e98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e0d0      	b.n	800203a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e98:	4b6a      	ldr	r3, [pc, #424]	@ (8002044 <HAL_RCC_ClockConfig+0x1c0>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0307 	and.w	r3, r3, #7
 8001ea0:	683a      	ldr	r2, [r7, #0]
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d910      	bls.n	8001ec8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ea6:	4b67      	ldr	r3, [pc, #412]	@ (8002044 <HAL_RCC_ClockConfig+0x1c0>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f023 0207 	bic.w	r2, r3, #7
 8001eae:	4965      	ldr	r1, [pc, #404]	@ (8002044 <HAL_RCC_ClockConfig+0x1c0>)
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eb6:	4b63      	ldr	r3, [pc, #396]	@ (8002044 <HAL_RCC_ClockConfig+0x1c0>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0307 	and.w	r3, r3, #7
 8001ebe:	683a      	ldr	r2, [r7, #0]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d001      	beq.n	8001ec8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e0b8      	b.n	800203a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0302 	and.w	r3, r3, #2
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d020      	beq.n	8001f16 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0304 	and.w	r3, r3, #4
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d005      	beq.n	8001eec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ee0:	4b59      	ldr	r3, [pc, #356]	@ (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	4a58      	ldr	r2, [pc, #352]	@ (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001ee6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001eea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0308 	and.w	r3, r3, #8
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d005      	beq.n	8001f04 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ef8:	4b53      	ldr	r3, [pc, #332]	@ (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	4a52      	ldr	r2, [pc, #328]	@ (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001efe:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001f02:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f04:	4b50      	ldr	r3, [pc, #320]	@ (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	494d      	ldr	r1, [pc, #308]	@ (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001f12:	4313      	orrs	r3, r2
 8001f14:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0301 	and.w	r3, r3, #1
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d040      	beq.n	8001fa4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d107      	bne.n	8001f3a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f2a:	4b47      	ldr	r3, [pc, #284]	@ (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d115      	bne.n	8001f62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e07f      	b.n	800203a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d107      	bne.n	8001f52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f42:	4b41      	ldr	r3, [pc, #260]	@ (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d109      	bne.n	8001f62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e073      	b.n	800203a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f52:	4b3d      	ldr	r3, [pc, #244]	@ (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0302 	and.w	r3, r3, #2
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d101      	bne.n	8001f62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e06b      	b.n	800203a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f62:	4b39      	ldr	r3, [pc, #228]	@ (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f023 0203 	bic.w	r2, r3, #3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	4936      	ldr	r1, [pc, #216]	@ (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001f70:	4313      	orrs	r3, r2
 8001f72:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f74:	f7ff f97c 	bl	8001270 <HAL_GetTick>
 8001f78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f7a:	e00a      	b.n	8001f92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f7c:	f7ff f978 	bl	8001270 <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e053      	b.n	800203a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f92:	4b2d      	ldr	r3, [pc, #180]	@ (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f003 020c 	and.w	r2, r3, #12
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d1eb      	bne.n	8001f7c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fa4:	4b27      	ldr	r3, [pc, #156]	@ (8002044 <HAL_RCC_ClockConfig+0x1c0>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0307 	and.w	r3, r3, #7
 8001fac:	683a      	ldr	r2, [r7, #0]
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d210      	bcs.n	8001fd4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fb2:	4b24      	ldr	r3, [pc, #144]	@ (8002044 <HAL_RCC_ClockConfig+0x1c0>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f023 0207 	bic.w	r2, r3, #7
 8001fba:	4922      	ldr	r1, [pc, #136]	@ (8002044 <HAL_RCC_ClockConfig+0x1c0>)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fc2:	4b20      	ldr	r3, [pc, #128]	@ (8002044 <HAL_RCC_ClockConfig+0x1c0>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0307 	and.w	r3, r3, #7
 8001fca:	683a      	ldr	r2, [r7, #0]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d001      	beq.n	8001fd4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e032      	b.n	800203a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0304 	and.w	r3, r3, #4
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d008      	beq.n	8001ff2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fe0:	4b19      	ldr	r3, [pc, #100]	@ (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	4916      	ldr	r1, [pc, #88]	@ (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0308 	and.w	r3, r3, #8
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d009      	beq.n	8002012 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ffe:	4b12      	ldr	r3, [pc, #72]	@ (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	691b      	ldr	r3, [r3, #16]
 800200a:	00db      	lsls	r3, r3, #3
 800200c:	490e      	ldr	r1, [pc, #56]	@ (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 800200e:	4313      	orrs	r3, r2
 8002010:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002012:	f000 f821 	bl	8002058 <HAL_RCC_GetSysClockFreq>
 8002016:	4602      	mov	r2, r0
 8002018:	4b0b      	ldr	r3, [pc, #44]	@ (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	091b      	lsrs	r3, r3, #4
 800201e:	f003 030f 	and.w	r3, r3, #15
 8002022:	490a      	ldr	r1, [pc, #40]	@ (800204c <HAL_RCC_ClockConfig+0x1c8>)
 8002024:	5ccb      	ldrb	r3, [r1, r3]
 8002026:	fa22 f303 	lsr.w	r3, r2, r3
 800202a:	4a09      	ldr	r2, [pc, #36]	@ (8002050 <HAL_RCC_ClockConfig+0x1cc>)
 800202c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800202e:	4b09      	ldr	r3, [pc, #36]	@ (8002054 <HAL_RCC_ClockConfig+0x1d0>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4618      	mov	r0, r3
 8002034:	f7ff f8da 	bl	80011ec <HAL_InitTick>

  return HAL_OK;
 8002038:	2300      	movs	r3, #0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3710      	adds	r7, #16
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	40022000 	.word	0x40022000
 8002048:	40021000 	.word	0x40021000
 800204c:	08004518 	.word	0x08004518
 8002050:	20000000 	.word	0x20000000
 8002054:	20000004 	.word	0x20000004

08002058 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002058:	b480      	push	{r7}
 800205a:	b087      	sub	sp, #28
 800205c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800205e:	2300      	movs	r3, #0
 8002060:	60fb      	str	r3, [r7, #12]
 8002062:	2300      	movs	r3, #0
 8002064:	60bb      	str	r3, [r7, #8]
 8002066:	2300      	movs	r3, #0
 8002068:	617b      	str	r3, [r7, #20]
 800206a:	2300      	movs	r3, #0
 800206c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800206e:	2300      	movs	r3, #0
 8002070:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002072:	4b1e      	ldr	r3, [pc, #120]	@ (80020ec <HAL_RCC_GetSysClockFreq+0x94>)
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	f003 030c 	and.w	r3, r3, #12
 800207e:	2b04      	cmp	r3, #4
 8002080:	d002      	beq.n	8002088 <HAL_RCC_GetSysClockFreq+0x30>
 8002082:	2b08      	cmp	r3, #8
 8002084:	d003      	beq.n	800208e <HAL_RCC_GetSysClockFreq+0x36>
 8002086:	e027      	b.n	80020d8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002088:	4b19      	ldr	r3, [pc, #100]	@ (80020f0 <HAL_RCC_GetSysClockFreq+0x98>)
 800208a:	613b      	str	r3, [r7, #16]
      break;
 800208c:	e027      	b.n	80020de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	0c9b      	lsrs	r3, r3, #18
 8002092:	f003 030f 	and.w	r3, r3, #15
 8002096:	4a17      	ldr	r2, [pc, #92]	@ (80020f4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002098:	5cd3      	ldrb	r3, [r2, r3]
 800209a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d010      	beq.n	80020c8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80020a6:	4b11      	ldr	r3, [pc, #68]	@ (80020ec <HAL_RCC_GetSysClockFreq+0x94>)
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	0c5b      	lsrs	r3, r3, #17
 80020ac:	f003 0301 	and.w	r3, r3, #1
 80020b0:	4a11      	ldr	r2, [pc, #68]	@ (80020f8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80020b2:	5cd3      	ldrb	r3, [r2, r3]
 80020b4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a0d      	ldr	r2, [pc, #52]	@ (80020f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80020ba:	fb03 f202 	mul.w	r2, r3, r2
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80020c4:	617b      	str	r3, [r7, #20]
 80020c6:	e004      	b.n	80020d2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	4a0c      	ldr	r2, [pc, #48]	@ (80020fc <HAL_RCC_GetSysClockFreq+0xa4>)
 80020cc:	fb02 f303 	mul.w	r3, r2, r3
 80020d0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	613b      	str	r3, [r7, #16]
      break;
 80020d6:	e002      	b.n	80020de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80020d8:	4b05      	ldr	r3, [pc, #20]	@ (80020f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80020da:	613b      	str	r3, [r7, #16]
      break;
 80020dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020de:	693b      	ldr	r3, [r7, #16]
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	371c      	adds	r7, #28
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bc80      	pop	{r7}
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	40021000 	.word	0x40021000
 80020f0:	007a1200 	.word	0x007a1200
 80020f4:	08004530 	.word	0x08004530
 80020f8:	08004540 	.word	0x08004540
 80020fc:	003d0900 	.word	0x003d0900

08002100 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002104:	4b02      	ldr	r3, [pc, #8]	@ (8002110 <HAL_RCC_GetHCLKFreq+0x10>)
 8002106:	681b      	ldr	r3, [r3, #0]
}
 8002108:	4618      	mov	r0, r3
 800210a:	46bd      	mov	sp, r7
 800210c:	bc80      	pop	{r7}
 800210e:	4770      	bx	lr
 8002110:	20000000 	.word	0x20000000

08002114 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002118:	f7ff fff2 	bl	8002100 <HAL_RCC_GetHCLKFreq>
 800211c:	4602      	mov	r2, r0
 800211e:	4b05      	ldr	r3, [pc, #20]	@ (8002134 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	0a1b      	lsrs	r3, r3, #8
 8002124:	f003 0307 	and.w	r3, r3, #7
 8002128:	4903      	ldr	r1, [pc, #12]	@ (8002138 <HAL_RCC_GetPCLK1Freq+0x24>)
 800212a:	5ccb      	ldrb	r3, [r1, r3]
 800212c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002130:	4618      	mov	r0, r3
 8002132:	bd80      	pop	{r7, pc}
 8002134:	40021000 	.word	0x40021000
 8002138:	08004528 	.word	0x08004528

0800213c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002140:	f7ff ffde 	bl	8002100 <HAL_RCC_GetHCLKFreq>
 8002144:	4602      	mov	r2, r0
 8002146:	4b05      	ldr	r3, [pc, #20]	@ (800215c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	0adb      	lsrs	r3, r3, #11
 800214c:	f003 0307 	and.w	r3, r3, #7
 8002150:	4903      	ldr	r1, [pc, #12]	@ (8002160 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002152:	5ccb      	ldrb	r3, [r1, r3]
 8002154:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002158:	4618      	mov	r0, r3
 800215a:	bd80      	pop	{r7, pc}
 800215c:	40021000 	.word	0x40021000
 8002160:	08004528 	.word	0x08004528

08002164 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002164:	b480      	push	{r7}
 8002166:	b085      	sub	sp, #20
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800216c:	4b0a      	ldr	r3, [pc, #40]	@ (8002198 <RCC_Delay+0x34>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a0a      	ldr	r2, [pc, #40]	@ (800219c <RCC_Delay+0x38>)
 8002172:	fba2 2303 	umull	r2, r3, r2, r3
 8002176:	0a5b      	lsrs	r3, r3, #9
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	fb02 f303 	mul.w	r3, r2, r3
 800217e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002180:	bf00      	nop
  }
  while (Delay --);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	1e5a      	subs	r2, r3, #1
 8002186:	60fa      	str	r2, [r7, #12]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d1f9      	bne.n	8002180 <RCC_Delay+0x1c>
}
 800218c:	bf00      	nop
 800218e:	bf00      	nop
 8002190:	3714      	adds	r7, #20
 8002192:	46bd      	mov	sp, r7
 8002194:	bc80      	pop	{r7}
 8002196:	4770      	bx	lr
 8002198:	20000000 	.word	0x20000000
 800219c:	10624dd3 	.word	0x10624dd3

080021a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d101      	bne.n	80021b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e041      	b.n	8002236 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d106      	bne.n	80021cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2200      	movs	r2, #0
 80021c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f7fe ff20 	bl	800100c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2202      	movs	r2, #2
 80021d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	3304      	adds	r3, #4
 80021dc:	4619      	mov	r1, r3
 80021de:	4610      	mov	r0, r2
 80021e0:	f000 fb48 	bl	8002874 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2201      	movs	r2, #1
 80021e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2201      	movs	r2, #1
 80021f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2201      	movs	r2, #1
 80021f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2201      	movs	r2, #1
 8002200:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2201      	movs	r2, #1
 8002208:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2201      	movs	r2, #1
 8002210:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2201      	movs	r2, #1
 8002218:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2201      	movs	r2, #1
 8002220:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2201      	movs	r2, #1
 8002228:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2201      	movs	r2, #1
 8002230:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002234:	2300      	movs	r3, #0
}
 8002236:	4618      	mov	r0, r3
 8002238:	3708      	adds	r7, #8
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}

0800223e <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800223e:	b580      	push	{r7, lr}
 8002240:	b082      	sub	sp, #8
 8002242:	af00      	add	r7, sp, #0
 8002244:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d101      	bne.n	8002250 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e041      	b.n	80022d4 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002256:	b2db      	uxtb	r3, r3
 8002258:	2b00      	cmp	r3, #0
 800225a:	d106      	bne.n	800226a <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f000 f839 	bl	80022dc <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2202      	movs	r2, #2
 800226e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	3304      	adds	r3, #4
 800227a:	4619      	mov	r1, r3
 800227c:	4610      	mov	r0, r2
 800227e:	f000 faf9 	bl	8002874 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2201      	movs	r2, #1
 8002286:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2201      	movs	r2, #1
 800228e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2201      	movs	r2, #1
 8002296:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2201      	movs	r2, #1
 800229e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2201      	movs	r2, #1
 80022a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2201      	movs	r2, #1
 80022ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2201      	movs	r2, #1
 80022b6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2201      	movs	r2, #1
 80022be:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2201      	movs	r2, #1
 80022c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2201      	movs	r2, #1
 80022ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80022d2:	2300      	movs	r3, #0
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3708      	adds	r7, #8
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}

080022dc <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80022e4:	bf00      	nop
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bc80      	pop	{r7}
 80022ec:	4770      	bx	lr

080022ee <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80022ee:	b580      	push	{r7, lr}
 80022f0:	b084      	sub	sp, #16
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	691b      	ldr	r3, [r3, #16]
 8002304:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	f003 0302 	and.w	r3, r3, #2
 800230c:	2b00      	cmp	r3, #0
 800230e:	d020      	beq.n	8002352 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	f003 0302 	and.w	r3, r3, #2
 8002316:	2b00      	cmp	r3, #0
 8002318:	d01b      	beq.n	8002352 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f06f 0202 	mvn.w	r2, #2
 8002322:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2201      	movs	r2, #1
 8002328:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	699b      	ldr	r3, [r3, #24]
 8002330:	f003 0303 	and.w	r3, r3, #3
 8002334:	2b00      	cmp	r3, #0
 8002336:	d003      	beq.n	8002340 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f000 fa7f 	bl	800283c <HAL_TIM_IC_CaptureCallback>
 800233e:	e005      	b.n	800234c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f000 fa72 	bl	800282a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f000 fa81 	bl	800284e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2200      	movs	r2, #0
 8002350:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	f003 0304 	and.w	r3, r3, #4
 8002358:	2b00      	cmp	r3, #0
 800235a:	d020      	beq.n	800239e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	f003 0304 	and.w	r3, r3, #4
 8002362:	2b00      	cmp	r3, #0
 8002364:	d01b      	beq.n	800239e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f06f 0204 	mvn.w	r2, #4
 800236e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2202      	movs	r2, #2
 8002374:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	699b      	ldr	r3, [r3, #24]
 800237c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002380:	2b00      	cmp	r3, #0
 8002382:	d003      	beq.n	800238c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	f000 fa59 	bl	800283c <HAL_TIM_IC_CaptureCallback>
 800238a:	e005      	b.n	8002398 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f000 fa4c 	bl	800282a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f000 fa5b 	bl	800284e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2200      	movs	r2, #0
 800239c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	f003 0308 	and.w	r3, r3, #8
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d020      	beq.n	80023ea <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f003 0308 	and.w	r3, r3, #8
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d01b      	beq.n	80023ea <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f06f 0208 	mvn.w	r2, #8
 80023ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2204      	movs	r2, #4
 80023c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	69db      	ldr	r3, [r3, #28]
 80023c8:	f003 0303 	and.w	r3, r3, #3
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d003      	beq.n	80023d8 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f000 fa33 	bl	800283c <HAL_TIM_IC_CaptureCallback>
 80023d6:	e005      	b.n	80023e4 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f000 fa26 	bl	800282a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f000 fa35 	bl	800284e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2200      	movs	r2, #0
 80023e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	f003 0310 	and.w	r3, r3, #16
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d020      	beq.n	8002436 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f003 0310 	and.w	r3, r3, #16
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d01b      	beq.n	8002436 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f06f 0210 	mvn.w	r2, #16
 8002406:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2208      	movs	r2, #8
 800240c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	69db      	ldr	r3, [r3, #28]
 8002414:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002418:	2b00      	cmp	r3, #0
 800241a:	d003      	beq.n	8002424 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f000 fa0d 	bl	800283c <HAL_TIM_IC_CaptureCallback>
 8002422:	e005      	b.n	8002430 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f000 fa00 	bl	800282a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f000 fa0f 	bl	800284e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2200      	movs	r2, #0
 8002434:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	f003 0301 	and.w	r3, r3, #1
 800243c:	2b00      	cmp	r3, #0
 800243e:	d00c      	beq.n	800245a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f003 0301 	and.w	r3, r3, #1
 8002446:	2b00      	cmp	r3, #0
 8002448:	d007      	beq.n	800245a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f06f 0201 	mvn.w	r2, #1
 8002452:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002454:	6878      	ldr	r0, [r7, #4]
 8002456:	f000 f9df 	bl	8002818 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002460:	2b00      	cmp	r3, #0
 8002462:	d00c      	beq.n	800247e <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800246a:	2b00      	cmp	r3, #0
 800246c:	d007      	beq.n	800247e <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002476:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f000 fd06 	bl	8002e8a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002484:	2b00      	cmp	r3, #0
 8002486:	d00c      	beq.n	80024a2 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800248e:	2b00      	cmp	r3, #0
 8002490:	d007      	beq.n	80024a2 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800249a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f000 f9df 	bl	8002860 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	f003 0320 	and.w	r3, r3, #32
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d00c      	beq.n	80024c6 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	f003 0320 	and.w	r3, r3, #32
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d007      	beq.n	80024c6 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f06f 0220 	mvn.w	r2, #32
 80024be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f000 fcd9 	bl	8002e78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80024c6:	bf00      	nop
 80024c8:	3710      	adds	r7, #16
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}

080024ce <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80024ce:	b580      	push	{r7, lr}
 80024d0:	b086      	sub	sp, #24
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	60f8      	str	r0, [r7, #12]
 80024d6:	60b9      	str	r1, [r7, #8]
 80024d8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024da:	2300      	movs	r3, #0
 80024dc:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d101      	bne.n	80024ec <HAL_TIM_IC_ConfigChannel+0x1e>
 80024e8:	2302      	movs	r3, #2
 80024ea:	e088      	b.n	80025fe <HAL_TIM_IC_ConfigChannel+0x130>
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2201      	movs	r2, #1
 80024f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d11b      	bne.n	8002532 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800250a:	f000 fab3 	bl	8002a74 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	699a      	ldr	r2, [r3, #24]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f022 020c 	bic.w	r2, r2, #12
 800251c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	6999      	ldr	r1, [r3, #24]
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	689a      	ldr	r2, [r3, #8]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	430a      	orrs	r2, r1
 800252e:	619a      	str	r2, [r3, #24]
 8002530:	e060      	b.n	80025f4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2b04      	cmp	r3, #4
 8002536:	d11c      	bne.n	8002572 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8002548:	f000 fb1c 	bl	8002b84 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	699a      	ldr	r2, [r3, #24]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800255a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	6999      	ldr	r1, [r3, #24]
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	021a      	lsls	r2, r3, #8
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	430a      	orrs	r2, r1
 800256e:	619a      	str	r2, [r3, #24]
 8002570:	e040      	b.n	80025f4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2b08      	cmp	r3, #8
 8002576:	d11b      	bne.n	80025b0 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8002588:	f000 fb67 	bl	8002c5a <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	69da      	ldr	r2, [r3, #28]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f022 020c 	bic.w	r2, r2, #12
 800259a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	69d9      	ldr	r1, [r3, #28]
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	689a      	ldr	r2, [r3, #8]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	430a      	orrs	r2, r1
 80025ac:	61da      	str	r2, [r3, #28]
 80025ae:	e021      	b.n	80025f4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2b0c      	cmp	r3, #12
 80025b4:	d11c      	bne.n	80025f0 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80025c6:	f000 fb83 	bl	8002cd0 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	69da      	ldr	r2, [r3, #28]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80025d8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	69d9      	ldr	r1, [r3, #28]
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	021a      	lsls	r2, r3, #8
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	430a      	orrs	r2, r1
 80025ec:	61da      	str	r2, [r3, #28]
 80025ee:	e001      	b.n	80025f4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2200      	movs	r2, #0
 80025f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80025fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3718      	adds	r7, #24
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}

08002606 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002606:	b580      	push	{r7, lr}
 8002608:	b084      	sub	sp, #16
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]
 800260e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002610:	2300      	movs	r3, #0
 8002612:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800261a:	2b01      	cmp	r3, #1
 800261c:	d101      	bne.n	8002622 <HAL_TIM_ConfigClockSource+0x1c>
 800261e:	2302      	movs	r3, #2
 8002620:	e0b4      	b.n	800278c <HAL_TIM_ConfigClockSource+0x186>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2201      	movs	r2, #1
 8002626:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2202      	movs	r2, #2
 800262e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002640:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002648:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	68ba      	ldr	r2, [r7, #8]
 8002650:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800265a:	d03e      	beq.n	80026da <HAL_TIM_ConfigClockSource+0xd4>
 800265c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002660:	f200 8087 	bhi.w	8002772 <HAL_TIM_ConfigClockSource+0x16c>
 8002664:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002668:	f000 8086 	beq.w	8002778 <HAL_TIM_ConfigClockSource+0x172>
 800266c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002670:	d87f      	bhi.n	8002772 <HAL_TIM_ConfigClockSource+0x16c>
 8002672:	2b70      	cmp	r3, #112	@ 0x70
 8002674:	d01a      	beq.n	80026ac <HAL_TIM_ConfigClockSource+0xa6>
 8002676:	2b70      	cmp	r3, #112	@ 0x70
 8002678:	d87b      	bhi.n	8002772 <HAL_TIM_ConfigClockSource+0x16c>
 800267a:	2b60      	cmp	r3, #96	@ 0x60
 800267c:	d050      	beq.n	8002720 <HAL_TIM_ConfigClockSource+0x11a>
 800267e:	2b60      	cmp	r3, #96	@ 0x60
 8002680:	d877      	bhi.n	8002772 <HAL_TIM_ConfigClockSource+0x16c>
 8002682:	2b50      	cmp	r3, #80	@ 0x50
 8002684:	d03c      	beq.n	8002700 <HAL_TIM_ConfigClockSource+0xfa>
 8002686:	2b50      	cmp	r3, #80	@ 0x50
 8002688:	d873      	bhi.n	8002772 <HAL_TIM_ConfigClockSource+0x16c>
 800268a:	2b40      	cmp	r3, #64	@ 0x40
 800268c:	d058      	beq.n	8002740 <HAL_TIM_ConfigClockSource+0x13a>
 800268e:	2b40      	cmp	r3, #64	@ 0x40
 8002690:	d86f      	bhi.n	8002772 <HAL_TIM_ConfigClockSource+0x16c>
 8002692:	2b30      	cmp	r3, #48	@ 0x30
 8002694:	d064      	beq.n	8002760 <HAL_TIM_ConfigClockSource+0x15a>
 8002696:	2b30      	cmp	r3, #48	@ 0x30
 8002698:	d86b      	bhi.n	8002772 <HAL_TIM_ConfigClockSource+0x16c>
 800269a:	2b20      	cmp	r3, #32
 800269c:	d060      	beq.n	8002760 <HAL_TIM_ConfigClockSource+0x15a>
 800269e:	2b20      	cmp	r3, #32
 80026a0:	d867      	bhi.n	8002772 <HAL_TIM_ConfigClockSource+0x16c>
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d05c      	beq.n	8002760 <HAL_TIM_ConfigClockSource+0x15a>
 80026a6:	2b10      	cmp	r3, #16
 80026a8:	d05a      	beq.n	8002760 <HAL_TIM_ConfigClockSource+0x15a>
 80026aa:	e062      	b.n	8002772 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80026bc:	f000 fb5e 	bl	8002d7c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80026ce:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	68ba      	ldr	r2, [r7, #8]
 80026d6:	609a      	str	r2, [r3, #8]
      break;
 80026d8:	e04f      	b.n	800277a <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80026ea:	f000 fb47 	bl	8002d7c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	689a      	ldr	r2, [r3, #8]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80026fc:	609a      	str	r2, [r3, #8]
      break;
 80026fe:	e03c      	b.n	800277a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800270c:	461a      	mov	r2, r3
 800270e:	f000 fa0b 	bl	8002b28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	2150      	movs	r1, #80	@ 0x50
 8002718:	4618      	mov	r0, r3
 800271a:	f000 fb15 	bl	8002d48 <TIM_ITRx_SetConfig>
      break;
 800271e:	e02c      	b.n	800277a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800272c:	461a      	mov	r2, r3
 800272e:	f000 fa65 	bl	8002bfc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	2160      	movs	r1, #96	@ 0x60
 8002738:	4618      	mov	r0, r3
 800273a:	f000 fb05 	bl	8002d48 <TIM_ITRx_SetConfig>
      break;
 800273e:	e01c      	b.n	800277a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800274c:	461a      	mov	r2, r3
 800274e:	f000 f9eb 	bl	8002b28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2140      	movs	r1, #64	@ 0x40
 8002758:	4618      	mov	r0, r3
 800275a:	f000 faf5 	bl	8002d48 <TIM_ITRx_SetConfig>
      break;
 800275e:	e00c      	b.n	800277a <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4619      	mov	r1, r3
 800276a:	4610      	mov	r0, r2
 800276c:	f000 faec 	bl	8002d48 <TIM_ITRx_SetConfig>
      break;
 8002770:	e003      	b.n	800277a <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	73fb      	strb	r3, [r7, #15]
      break;
 8002776:	e000      	b.n	800277a <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002778:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2201      	movs	r2, #1
 800277e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2200      	movs	r2, #0
 8002786:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800278a:	7bfb      	ldrb	r3, [r7, #15]
}
 800278c:	4618      	mov	r0, r3
 800278e:	3710      	adds	r7, #16
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}

08002794 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d101      	bne.n	80027ac <HAL_TIM_SlaveConfigSynchro+0x18>
 80027a8:	2302      	movs	r3, #2
 80027aa:	e031      	b.n	8002810 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2201      	movs	r2, #1
 80027b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2202      	movs	r2, #2
 80027b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80027bc:	6839      	ldr	r1, [r7, #0]
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f000 f8c6 	bl	8002950 <TIM_SlaveTimer_SetConfig>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d009      	beq.n	80027de <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2201      	movs	r2, #1
 80027ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e018      	b.n	8002810 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	68da      	ldr	r2, [r3, #12]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80027ec:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	68da      	ldr	r2, [r3, #12]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80027fc:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2201      	movs	r2, #1
 8002802:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800280e:	2300      	movs	r3, #0
}
 8002810:	4618      	mov	r0, r3
 8002812:	3708      	adds	r7, #8
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}

08002818 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002820:	bf00      	nop
 8002822:	370c      	adds	r7, #12
 8002824:	46bd      	mov	sp, r7
 8002826:	bc80      	pop	{r7}
 8002828:	4770      	bx	lr

0800282a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800282a:	b480      	push	{r7}
 800282c:	b083      	sub	sp, #12
 800282e:	af00      	add	r7, sp, #0
 8002830:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002832:	bf00      	nop
 8002834:	370c      	adds	r7, #12
 8002836:	46bd      	mov	sp, r7
 8002838:	bc80      	pop	{r7}
 800283a:	4770      	bx	lr

0800283c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002844:	bf00      	nop
 8002846:	370c      	adds	r7, #12
 8002848:	46bd      	mov	sp, r7
 800284a:	bc80      	pop	{r7}
 800284c:	4770      	bx	lr

0800284e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800284e:	b480      	push	{r7}
 8002850:	b083      	sub	sp, #12
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002856:	bf00      	nop
 8002858:	370c      	adds	r7, #12
 800285a:	46bd      	mov	sp, r7
 800285c:	bc80      	pop	{r7}
 800285e:	4770      	bx	lr

08002860 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002868:	bf00      	nop
 800286a:	370c      	adds	r7, #12
 800286c:	46bd      	mov	sp, r7
 800286e:	bc80      	pop	{r7}
 8002870:	4770      	bx	lr
	...

08002874 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002874:	b480      	push	{r7}
 8002876:	b085      	sub	sp, #20
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	4a2f      	ldr	r2, [pc, #188]	@ (8002944 <TIM_Base_SetConfig+0xd0>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d00b      	beq.n	80028a4 <TIM_Base_SetConfig+0x30>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002892:	d007      	beq.n	80028a4 <TIM_Base_SetConfig+0x30>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	4a2c      	ldr	r2, [pc, #176]	@ (8002948 <TIM_Base_SetConfig+0xd4>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d003      	beq.n	80028a4 <TIM_Base_SetConfig+0x30>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	4a2b      	ldr	r2, [pc, #172]	@ (800294c <TIM_Base_SetConfig+0xd8>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d108      	bne.n	80028b6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	68fa      	ldr	r2, [r7, #12]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4a22      	ldr	r2, [pc, #136]	@ (8002944 <TIM_Base_SetConfig+0xd0>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d00b      	beq.n	80028d6 <TIM_Base_SetConfig+0x62>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028c4:	d007      	beq.n	80028d6 <TIM_Base_SetConfig+0x62>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4a1f      	ldr	r2, [pc, #124]	@ (8002948 <TIM_Base_SetConfig+0xd4>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d003      	beq.n	80028d6 <TIM_Base_SetConfig+0x62>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4a1e      	ldr	r2, [pc, #120]	@ (800294c <TIM_Base_SetConfig+0xd8>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d108      	bne.n	80028e8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80028dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	68fa      	ldr	r2, [r7, #12]
 80028e4:	4313      	orrs	r3, r2
 80028e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	695b      	ldr	r3, [r3, #20]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	68fa      	ldr	r2, [r7, #12]
 80028fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	689a      	ldr	r2, [r3, #8]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	4a0d      	ldr	r2, [pc, #52]	@ (8002944 <TIM_Base_SetConfig+0xd0>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d103      	bne.n	800291c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	691a      	ldr	r2, [r3, #16]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	691b      	ldr	r3, [r3, #16]
 8002926:	f003 0301 	and.w	r3, r3, #1
 800292a:	2b00      	cmp	r3, #0
 800292c:	d005      	beq.n	800293a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	691b      	ldr	r3, [r3, #16]
 8002932:	f023 0201 	bic.w	r2, r3, #1
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	611a      	str	r2, [r3, #16]
  }
}
 800293a:	bf00      	nop
 800293c:	3714      	adds	r7, #20
 800293e:	46bd      	mov	sp, r7
 8002940:	bc80      	pop	{r7}
 8002942:	4770      	bx	lr
 8002944:	40012c00 	.word	0x40012c00
 8002948:	40000400 	.word	0x40000400
 800294c:	40000800 	.word	0x40000800

08002950 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b086      	sub	sp, #24
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800295a:	2300      	movs	r3, #0
 800295c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800296c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	693a      	ldr	r2, [r7, #16]
 8002974:	4313      	orrs	r3, r2
 8002976:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	f023 0307 	bic.w	r3, r3, #7
 800297e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	693a      	ldr	r2, [r7, #16]
 8002986:	4313      	orrs	r3, r2
 8002988:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	693a      	ldr	r2, [r7, #16]
 8002990:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	2b70      	cmp	r3, #112	@ 0x70
 8002998:	d01a      	beq.n	80029d0 <TIM_SlaveTimer_SetConfig+0x80>
 800299a:	2b70      	cmp	r3, #112	@ 0x70
 800299c:	d860      	bhi.n	8002a60 <TIM_SlaveTimer_SetConfig+0x110>
 800299e:	2b60      	cmp	r3, #96	@ 0x60
 80029a0:	d054      	beq.n	8002a4c <TIM_SlaveTimer_SetConfig+0xfc>
 80029a2:	2b60      	cmp	r3, #96	@ 0x60
 80029a4:	d85c      	bhi.n	8002a60 <TIM_SlaveTimer_SetConfig+0x110>
 80029a6:	2b50      	cmp	r3, #80	@ 0x50
 80029a8:	d046      	beq.n	8002a38 <TIM_SlaveTimer_SetConfig+0xe8>
 80029aa:	2b50      	cmp	r3, #80	@ 0x50
 80029ac:	d858      	bhi.n	8002a60 <TIM_SlaveTimer_SetConfig+0x110>
 80029ae:	2b40      	cmp	r3, #64	@ 0x40
 80029b0:	d019      	beq.n	80029e6 <TIM_SlaveTimer_SetConfig+0x96>
 80029b2:	2b40      	cmp	r3, #64	@ 0x40
 80029b4:	d854      	bhi.n	8002a60 <TIM_SlaveTimer_SetConfig+0x110>
 80029b6:	2b30      	cmp	r3, #48	@ 0x30
 80029b8:	d055      	beq.n	8002a66 <TIM_SlaveTimer_SetConfig+0x116>
 80029ba:	2b30      	cmp	r3, #48	@ 0x30
 80029bc:	d850      	bhi.n	8002a60 <TIM_SlaveTimer_SetConfig+0x110>
 80029be:	2b20      	cmp	r3, #32
 80029c0:	d051      	beq.n	8002a66 <TIM_SlaveTimer_SetConfig+0x116>
 80029c2:	2b20      	cmp	r3, #32
 80029c4:	d84c      	bhi.n	8002a60 <TIM_SlaveTimer_SetConfig+0x110>
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d04d      	beq.n	8002a66 <TIM_SlaveTimer_SetConfig+0x116>
 80029ca:	2b10      	cmp	r3, #16
 80029cc:	d04b      	beq.n	8002a66 <TIM_SlaveTimer_SetConfig+0x116>
 80029ce:	e047      	b.n	8002a60 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80029e0:	f000 f9cc 	bl	8002d7c <TIM_ETR_SetConfig>
      break;
 80029e4:	e040      	b.n	8002a68 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	2b05      	cmp	r3, #5
 80029ec:	d101      	bne.n	80029f2 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e03b      	b.n	8002a6a <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	6a1b      	ldr	r3, [r3, #32]
 80029f8:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	6a1a      	ldr	r2, [r3, #32]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f022 0201 	bic.w	r2, r2, #1
 8002a08:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	699b      	ldr	r3, [r3, #24]
 8002a10:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002a18:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	691b      	ldr	r3, [r3, #16]
 8002a1e:	011b      	lsls	r3, r3, #4
 8002a20:	68ba      	ldr	r2, [r7, #8]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	68ba      	ldr	r2, [r7, #8]
 8002a2c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	68fa      	ldr	r2, [r7, #12]
 8002a34:	621a      	str	r2, [r3, #32]
      break;
 8002a36:	e017      	b.n	8002a68 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a44:	461a      	mov	r2, r3
 8002a46:	f000 f86f 	bl	8002b28 <TIM_TI1_ConfigInputStage>
      break;
 8002a4a:	e00d      	b.n	8002a68 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a58:	461a      	mov	r2, r3
 8002a5a:	f000 f8cf 	bl	8002bfc <TIM_TI2_ConfigInputStage>
      break;
 8002a5e:	e003      	b.n	8002a68 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	75fb      	strb	r3, [r7, #23]
      break;
 8002a64:	e000      	b.n	8002a68 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8002a66:	bf00      	nop
  }

  return status;
 8002a68:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3718      	adds	r7, #24
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
	...

08002a74 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b087      	sub	sp, #28
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	607a      	str	r2, [r7, #4]
 8002a80:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	6a1b      	ldr	r3, [r3, #32]
 8002a86:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	6a1b      	ldr	r3, [r3, #32]
 8002a8c:	f023 0201 	bic.w	r2, r3, #1
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	699b      	ldr	r3, [r3, #24]
 8002a98:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	4a1f      	ldr	r2, [pc, #124]	@ (8002b1c <TIM_TI1_SetConfig+0xa8>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d00b      	beq.n	8002aba <TIM_TI1_SetConfig+0x46>
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002aa8:	d007      	beq.n	8002aba <TIM_TI1_SetConfig+0x46>
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	4a1c      	ldr	r2, [pc, #112]	@ (8002b20 <TIM_TI1_SetConfig+0xac>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d003      	beq.n	8002aba <TIM_TI1_SetConfig+0x46>
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	4a1b      	ldr	r2, [pc, #108]	@ (8002b24 <TIM_TI1_SetConfig+0xb0>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d101      	bne.n	8002abe <TIM_TI1_SetConfig+0x4a>
 8002aba:	2301      	movs	r3, #1
 8002abc:	e000      	b.n	8002ac0 <TIM_TI1_SetConfig+0x4c>
 8002abe:	2300      	movs	r3, #0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d008      	beq.n	8002ad6 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	f023 0303 	bic.w	r3, r3, #3
 8002aca:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002acc:	697a      	ldr	r2, [r7, #20]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	617b      	str	r3, [r7, #20]
 8002ad4:	e003      	b.n	8002ade <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	f043 0301 	orr.w	r3, r3, #1
 8002adc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002ae4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	011b      	lsls	r3, r3, #4
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	697a      	ldr	r2, [r7, #20]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	f023 030a 	bic.w	r3, r3, #10
 8002af8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	f003 030a 	and.w	r3, r3, #10
 8002b00:	693a      	ldr	r2, [r7, #16]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	697a      	ldr	r2, [r7, #20]
 8002b0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	693a      	ldr	r2, [r7, #16]
 8002b10:	621a      	str	r2, [r3, #32]
}
 8002b12:	bf00      	nop
 8002b14:	371c      	adds	r7, #28
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bc80      	pop	{r7}
 8002b1a:	4770      	bx	lr
 8002b1c:	40012c00 	.word	0x40012c00
 8002b20:	40000400 	.word	0x40000400
 8002b24:	40000800 	.word	0x40000800

08002b28 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b087      	sub	sp, #28
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	60f8      	str	r0, [r7, #12]
 8002b30:	60b9      	str	r1, [r7, #8]
 8002b32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6a1b      	ldr	r3, [r3, #32]
 8002b38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	6a1b      	ldr	r3, [r3, #32]
 8002b3e:	f023 0201 	bic.w	r2, r3, #1
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	699b      	ldr	r3, [r3, #24]
 8002b4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002b52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	011b      	lsls	r3, r3, #4
 8002b58:	693a      	ldr	r2, [r7, #16]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	f023 030a 	bic.w	r3, r3, #10
 8002b64:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002b66:	697a      	ldr	r2, [r7, #20]
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	693a      	ldr	r2, [r7, #16]
 8002b72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	697a      	ldr	r2, [r7, #20]
 8002b78:	621a      	str	r2, [r3, #32]
}
 8002b7a:	bf00      	nop
 8002b7c:	371c      	adds	r7, #28
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bc80      	pop	{r7}
 8002b82:	4770      	bx	lr

08002b84 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b087      	sub	sp, #28
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	60f8      	str	r0, [r7, #12]
 8002b8c:	60b9      	str	r1, [r7, #8]
 8002b8e:	607a      	str	r2, [r7, #4]
 8002b90:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	6a1b      	ldr	r3, [r3, #32]
 8002b96:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6a1b      	ldr	r3, [r3, #32]
 8002b9c:	f023 0210 	bic.w	r2, r3, #16
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	699b      	ldr	r3, [r3, #24]
 8002ba8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002bb0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	021b      	lsls	r3, r3, #8
 8002bb6:	693a      	ldr	r2, [r7, #16]
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002bc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	031b      	lsls	r3, r3, #12
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	693a      	ldr	r2, [r7, #16]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002bd6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	011b      	lsls	r3, r3, #4
 8002bdc:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8002be0:	697a      	ldr	r2, [r7, #20]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	693a      	ldr	r2, [r7, #16]
 8002bea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	697a      	ldr	r2, [r7, #20]
 8002bf0:	621a      	str	r2, [r3, #32]
}
 8002bf2:	bf00      	nop
 8002bf4:	371c      	adds	r7, #28
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bc80      	pop	{r7}
 8002bfa:	4770      	bx	lr

08002bfc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b087      	sub	sp, #28
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	60f8      	str	r0, [r7, #12]
 8002c04:	60b9      	str	r1, [r7, #8]
 8002c06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	6a1b      	ldr	r3, [r3, #32]
 8002c0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	6a1b      	ldr	r3, [r3, #32]
 8002c12:	f023 0210 	bic.w	r2, r3, #16
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	699b      	ldr	r3, [r3, #24]
 8002c1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002c26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	031b      	lsls	r3, r3, #12
 8002c2c:	693a      	ldr	r2, [r7, #16]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002c38:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	011b      	lsls	r3, r3, #4
 8002c3e:	697a      	ldr	r2, [r7, #20]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	693a      	ldr	r2, [r7, #16]
 8002c48:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	697a      	ldr	r2, [r7, #20]
 8002c4e:	621a      	str	r2, [r3, #32]
}
 8002c50:	bf00      	nop
 8002c52:	371c      	adds	r7, #28
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bc80      	pop	{r7}
 8002c58:	4770      	bx	lr

08002c5a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002c5a:	b480      	push	{r7}
 8002c5c:	b087      	sub	sp, #28
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	60f8      	str	r0, [r7, #12]
 8002c62:	60b9      	str	r1, [r7, #8]
 8002c64:	607a      	str	r2, [r7, #4]
 8002c66:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6a1b      	ldr	r3, [r3, #32]
 8002c6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6a1b      	ldr	r3, [r3, #32]
 8002c72:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	69db      	ldr	r3, [r3, #28]
 8002c7e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	f023 0303 	bic.w	r3, r3, #3
 8002c86:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8002c88:	693a      	ldr	r2, [r7, #16]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002c96:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	011b      	lsls	r3, r3, #4
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	693a      	ldr	r2, [r7, #16]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002caa:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	021b      	lsls	r3, r3, #8
 8002cb0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002cb4:	697a      	ldr	r2, [r7, #20]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	693a      	ldr	r2, [r7, #16]
 8002cbe:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	697a      	ldr	r2, [r7, #20]
 8002cc4:	621a      	str	r2, [r3, #32]
}
 8002cc6:	bf00      	nop
 8002cc8:	371c      	adds	r7, #28
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bc80      	pop	{r7}
 8002cce:	4770      	bx	lr

08002cd0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b087      	sub	sp, #28
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	60f8      	str	r0, [r7, #12]
 8002cd8:	60b9      	str	r1, [r7, #8]
 8002cda:	607a      	str	r2, [r7, #4]
 8002cdc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6a1b      	ldr	r3, [r3, #32]
 8002ce2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	6a1b      	ldr	r3, [r3, #32]
 8002ce8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	69db      	ldr	r3, [r3, #28]
 8002cf4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002cfc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	021b      	lsls	r3, r3, #8
 8002d02:	693a      	ldr	r2, [r7, #16]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002d0e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	031b      	lsls	r3, r3, #12
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	693a      	ldr	r2, [r7, #16]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002d22:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	031b      	lsls	r3, r3, #12
 8002d28:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d2c:	697a      	ldr	r2, [r7, #20]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	693a      	ldr	r2, [r7, #16]
 8002d36:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	697a      	ldr	r2, [r7, #20]
 8002d3c:	621a      	str	r2, [r3, #32]
}
 8002d3e:	bf00      	nop
 8002d40:	371c      	adds	r7, #28
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bc80      	pop	{r7}
 8002d46:	4770      	bx	lr

08002d48 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b085      	sub	sp, #20
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d5e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d60:	683a      	ldr	r2, [r7, #0]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	f043 0307 	orr.w	r3, r3, #7
 8002d6a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	68fa      	ldr	r2, [r7, #12]
 8002d70:	609a      	str	r2, [r3, #8]
}
 8002d72:	bf00      	nop
 8002d74:	3714      	adds	r7, #20
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bc80      	pop	{r7}
 8002d7a:	4770      	bx	lr

08002d7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b087      	sub	sp, #28
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	60f8      	str	r0, [r7, #12]
 8002d84:	60b9      	str	r1, [r7, #8]
 8002d86:	607a      	str	r2, [r7, #4]
 8002d88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002d96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	021a      	lsls	r2, r3, #8
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	431a      	orrs	r2, r3
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	697a      	ldr	r2, [r7, #20]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	697a      	ldr	r2, [r7, #20]
 8002dae:	609a      	str	r2, [r3, #8]
}
 8002db0:	bf00      	nop
 8002db2:	371c      	adds	r7, #28
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bc80      	pop	{r7}
 8002db8:	4770      	bx	lr
	...

08002dbc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b085      	sub	sp, #20
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d101      	bne.n	8002dd4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002dd0:	2302      	movs	r3, #2
 8002dd2:	e046      	b.n	8002e62 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2202      	movs	r2, #2
 8002de0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002dfa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	68fa      	ldr	r2, [r7, #12]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	68fa      	ldr	r2, [r7, #12]
 8002e0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a16      	ldr	r2, [pc, #88]	@ (8002e6c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d00e      	beq.n	8002e36 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e20:	d009      	beq.n	8002e36 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a12      	ldr	r2, [pc, #72]	@ (8002e70 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d004      	beq.n	8002e36 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a10      	ldr	r2, [pc, #64]	@ (8002e74 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d10c      	bne.n	8002e50 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002e3c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	68ba      	ldr	r2, [r7, #8]
 8002e44:	4313      	orrs	r3, r2
 8002e46:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	68ba      	ldr	r2, [r7, #8]
 8002e4e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002e60:	2300      	movs	r3, #0
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3714      	adds	r7, #20
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bc80      	pop	{r7}
 8002e6a:	4770      	bx	lr
 8002e6c:	40012c00 	.word	0x40012c00
 8002e70:	40000400 	.word	0x40000400
 8002e74:	40000800 	.word	0x40000800

08002e78 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e80:	bf00      	nop
 8002e82:	370c      	adds	r7, #12
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bc80      	pop	{r7}
 8002e88:	4770      	bx	lr

08002e8a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e8a:	b480      	push	{r7}
 8002e8c:	b083      	sub	sp, #12
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e92:	bf00      	nop
 8002e94:	370c      	adds	r7, #12
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bc80      	pop	{r7}
 8002e9a:	4770      	bx	lr

08002e9c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d101      	bne.n	8002eae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e042      	b.n	8002f34 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d106      	bne.n	8002ec8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f7fe f910 	bl	80010e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2224      	movs	r2, #36	@ 0x24
 8002ecc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	68da      	ldr	r2, [r3, #12]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002ede:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	f000 fcff 	bl	80038e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	691a      	ldr	r2, [r3, #16]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002ef4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	695a      	ldr	r2, [r3, #20]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002f04:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	68da      	ldr	r2, [r3, #12]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002f14:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2220      	movs	r2, #32
 8002f20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2220      	movs	r2, #32
 8002f28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002f32:	2300      	movs	r3, #0
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3708      	adds	r7, #8
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}

08002f3c <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b085      	sub	sp, #20
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	60f8      	str	r0, [r7, #12]
 8002f44:	60b9      	str	r1, [r7, #8]
 8002f46:	4613      	mov	r3, r2
 8002f48:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	2b20      	cmp	r3, #32
 8002f54:	d121      	bne.n	8002f9a <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d002      	beq.n	8002f62 <HAL_UART_Transmit_IT+0x26>
 8002f5c:	88fb      	ldrh	r3, [r7, #6]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d101      	bne.n	8002f66 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e01a      	b.n	8002f9c <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	68ba      	ldr	r2, [r7, #8]
 8002f6a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	88fa      	ldrh	r2, [r7, #6]
 8002f70:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	88fa      	ldrh	r2, [r7, #6]
 8002f76:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2221      	movs	r2, #33	@ 0x21
 8002f82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	68da      	ldr	r2, [r3, #12]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002f94:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002f96:	2300      	movs	r3, #0
 8002f98:	e000      	b.n	8002f9c <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8002f9a:	2302      	movs	r3, #2
  }
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3714      	adds	r7, #20
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bc80      	pop	{r7}
 8002fa4:	4770      	bx	lr

08002fa6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002fa6:	b580      	push	{r7, lr}
 8002fa8:	b084      	sub	sp, #16
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	60f8      	str	r0, [r7, #12]
 8002fae:	60b9      	str	r1, [r7, #8]
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	2b20      	cmp	r3, #32
 8002fbe:	d112      	bne.n	8002fe6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d002      	beq.n	8002fcc <HAL_UART_Receive_IT+0x26>
 8002fc6:	88fb      	ldrh	r3, [r7, #6]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d101      	bne.n	8002fd0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e00b      	b.n	8002fe8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002fd6:	88fb      	ldrh	r3, [r7, #6]
 8002fd8:	461a      	mov	r2, r3
 8002fda:	68b9      	ldr	r1, [r7, #8]
 8002fdc:	68f8      	ldr	r0, [r7, #12]
 8002fde:	f000 faad 	bl	800353c <UART_Start_Receive_IT>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	e000      	b.n	8002fe8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002fe6:	2302      	movs	r3, #2
  }
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3710      	adds	r7, #16
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}

08002ff0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b0ba      	sub	sp, #232	@ 0xe8
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	695b      	ldr	r3, [r3, #20]
 8003012:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003016:	2300      	movs	r3, #0
 8003018:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800301c:	2300      	movs	r3, #0
 800301e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003026:	f003 030f 	and.w	r3, r3, #15
 800302a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800302e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003032:	2b00      	cmp	r3, #0
 8003034:	d10f      	bne.n	8003056 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003036:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800303a:	f003 0320 	and.w	r3, r3, #32
 800303e:	2b00      	cmp	r3, #0
 8003040:	d009      	beq.n	8003056 <HAL_UART_IRQHandler+0x66>
 8003042:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003046:	f003 0320 	and.w	r3, r3, #32
 800304a:	2b00      	cmp	r3, #0
 800304c:	d003      	beq.n	8003056 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f000 fb8a 	bl	8003768 <UART_Receive_IT>
      return;
 8003054:	e25b      	b.n	800350e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003056:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800305a:	2b00      	cmp	r3, #0
 800305c:	f000 80de 	beq.w	800321c <HAL_UART_IRQHandler+0x22c>
 8003060:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003064:	f003 0301 	and.w	r3, r3, #1
 8003068:	2b00      	cmp	r3, #0
 800306a:	d106      	bne.n	800307a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800306c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003070:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003074:	2b00      	cmp	r3, #0
 8003076:	f000 80d1 	beq.w	800321c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800307a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800307e:	f003 0301 	and.w	r3, r3, #1
 8003082:	2b00      	cmp	r3, #0
 8003084:	d00b      	beq.n	800309e <HAL_UART_IRQHandler+0xae>
 8003086:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800308a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800308e:	2b00      	cmp	r3, #0
 8003090:	d005      	beq.n	800309e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003096:	f043 0201 	orr.w	r2, r3, #1
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800309e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030a2:	f003 0304 	and.w	r3, r3, #4
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d00b      	beq.n	80030c2 <HAL_UART_IRQHandler+0xd2>
 80030aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80030ae:	f003 0301 	and.w	r3, r3, #1
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d005      	beq.n	80030c2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030ba:	f043 0202 	orr.w	r2, r3, #2
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80030c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030c6:	f003 0302 	and.w	r3, r3, #2
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d00b      	beq.n	80030e6 <HAL_UART_IRQHandler+0xf6>
 80030ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80030d2:	f003 0301 	and.w	r3, r3, #1
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d005      	beq.n	80030e6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030de:	f043 0204 	orr.w	r2, r3, #4
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80030e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030ea:	f003 0308 	and.w	r3, r3, #8
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d011      	beq.n	8003116 <HAL_UART_IRQHandler+0x126>
 80030f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80030f6:	f003 0320 	and.w	r3, r3, #32
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d105      	bne.n	800310a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80030fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003102:	f003 0301 	and.w	r3, r3, #1
 8003106:	2b00      	cmp	r3, #0
 8003108:	d005      	beq.n	8003116 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800310e:	f043 0208 	orr.w	r2, r3, #8
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800311a:	2b00      	cmp	r3, #0
 800311c:	f000 81f2 	beq.w	8003504 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003120:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003124:	f003 0320 	and.w	r3, r3, #32
 8003128:	2b00      	cmp	r3, #0
 800312a:	d008      	beq.n	800313e <HAL_UART_IRQHandler+0x14e>
 800312c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003130:	f003 0320 	and.w	r3, r3, #32
 8003134:	2b00      	cmp	r3, #0
 8003136:	d002      	beq.n	800313e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f000 fb15 	bl	8003768 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	695b      	ldr	r3, [r3, #20]
 8003144:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003148:	2b00      	cmp	r3, #0
 800314a:	bf14      	ite	ne
 800314c:	2301      	movne	r3, #1
 800314e:	2300      	moveq	r3, #0
 8003150:	b2db      	uxtb	r3, r3
 8003152:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800315a:	f003 0308 	and.w	r3, r3, #8
 800315e:	2b00      	cmp	r3, #0
 8003160:	d103      	bne.n	800316a <HAL_UART_IRQHandler+0x17a>
 8003162:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003166:	2b00      	cmp	r3, #0
 8003168:	d04f      	beq.n	800320a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f000 fa1f 	bl	80035ae <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	695b      	ldr	r3, [r3, #20]
 8003176:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800317a:	2b00      	cmp	r3, #0
 800317c:	d041      	beq.n	8003202 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	3314      	adds	r3, #20
 8003184:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003188:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800318c:	e853 3f00 	ldrex	r3, [r3]
 8003190:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003194:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003198:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800319c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	3314      	adds	r3, #20
 80031a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80031aa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80031ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80031b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80031ba:	e841 2300 	strex	r3, r2, [r1]
 80031be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80031c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d1d9      	bne.n	800317e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d013      	beq.n	80031fa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031d6:	4a7e      	ldr	r2, [pc, #504]	@ (80033d0 <HAL_UART_IRQHandler+0x3e0>)
 80031d8:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031de:	4618      	mov	r0, r3
 80031e0:	f7fe f998 	bl	8001514 <HAL_DMA_Abort_IT>
 80031e4:	4603      	mov	r3, r0
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d016      	beq.n	8003218 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031f0:	687a      	ldr	r2, [r7, #4]
 80031f2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80031f4:	4610      	mov	r0, r2
 80031f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031f8:	e00e      	b.n	8003218 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f000 f98a 	bl	8003514 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003200:	e00a      	b.n	8003218 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f000 f986 	bl	8003514 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003208:	e006      	b.n	8003218 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f000 f982 	bl	8003514 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2200      	movs	r2, #0
 8003214:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003216:	e175      	b.n	8003504 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003218:	bf00      	nop
    return;
 800321a:	e173      	b.n	8003504 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003220:	2b01      	cmp	r3, #1
 8003222:	f040 814f 	bne.w	80034c4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003226:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800322a:	f003 0310 	and.w	r3, r3, #16
 800322e:	2b00      	cmp	r3, #0
 8003230:	f000 8148 	beq.w	80034c4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003234:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003238:	f003 0310 	and.w	r3, r3, #16
 800323c:	2b00      	cmp	r3, #0
 800323e:	f000 8141 	beq.w	80034c4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003242:	2300      	movs	r3, #0
 8003244:	60bb      	str	r3, [r7, #8]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	60bb      	str	r3, [r7, #8]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	60bb      	str	r3, [r7, #8]
 8003256:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	695b      	ldr	r3, [r3, #20]
 800325e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003262:	2b00      	cmp	r3, #0
 8003264:	f000 80b6 	beq.w	80033d4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003274:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003278:	2b00      	cmp	r3, #0
 800327a:	f000 8145 	beq.w	8003508 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003282:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003286:	429a      	cmp	r2, r3
 8003288:	f080 813e 	bcs.w	8003508 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003292:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003298:	699b      	ldr	r3, [r3, #24]
 800329a:	2b20      	cmp	r3, #32
 800329c:	f000 8088 	beq.w	80033b0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	330c      	adds	r3, #12
 80032a6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80032ae:	e853 3f00 	ldrex	r3, [r3]
 80032b2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80032b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80032ba:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80032be:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	330c      	adds	r3, #12
 80032c8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80032cc:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80032d0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032d4:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80032d8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80032dc:	e841 2300 	strex	r3, r2, [r1]
 80032e0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80032e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d1d9      	bne.n	80032a0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	3314      	adds	r3, #20
 80032f2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032f4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80032f6:	e853 3f00 	ldrex	r3, [r3]
 80032fa:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80032fc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80032fe:	f023 0301 	bic.w	r3, r3, #1
 8003302:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	3314      	adds	r3, #20
 800330c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003310:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003314:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003316:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003318:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800331c:	e841 2300 	strex	r3, r2, [r1]
 8003320:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003322:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003324:	2b00      	cmp	r3, #0
 8003326:	d1e1      	bne.n	80032ec <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	3314      	adds	r3, #20
 800332e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003330:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003332:	e853 3f00 	ldrex	r3, [r3]
 8003336:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003338:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800333a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800333e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	3314      	adds	r3, #20
 8003348:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800334c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800334e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003350:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003352:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003354:	e841 2300 	strex	r3, r2, [r1]
 8003358:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800335a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800335c:	2b00      	cmp	r3, #0
 800335e:	d1e3      	bne.n	8003328 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2220      	movs	r2, #32
 8003364:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	330c      	adds	r3, #12
 8003374:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003376:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003378:	e853 3f00 	ldrex	r3, [r3]
 800337c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800337e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003380:	f023 0310 	bic.w	r3, r3, #16
 8003384:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	330c      	adds	r3, #12
 800338e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003392:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003394:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003396:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003398:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800339a:	e841 2300 	strex	r3, r2, [r1]
 800339e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80033a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d1e3      	bne.n	800336e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033aa:	4618      	mov	r0, r3
 80033ac:	f7fe f877 	bl	800149e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2202      	movs	r2, #2
 80033b4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80033be:	b29b      	uxth	r3, r3
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	4619      	mov	r1, r3
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f000 f8ad 	bl	8003526 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80033cc:	e09c      	b.n	8003508 <HAL_UART_IRQHandler+0x518>
 80033ce:	bf00      	nop
 80033d0:	08003673 	.word	0x08003673
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80033dc:	b29b      	uxth	r3, r3
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	f000 808e 	beq.w	800350c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80033f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	f000 8089 	beq.w	800350c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	330c      	adds	r3, #12
 8003400:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003402:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003404:	e853 3f00 	ldrex	r3, [r3]
 8003408:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800340a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800340c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003410:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	330c      	adds	r3, #12
 800341a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800341e:	647a      	str	r2, [r7, #68]	@ 0x44
 8003420:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003422:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003424:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003426:	e841 2300 	strex	r3, r2, [r1]
 800342a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800342c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800342e:	2b00      	cmp	r3, #0
 8003430:	d1e3      	bne.n	80033fa <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	3314      	adds	r3, #20
 8003438:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800343a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800343c:	e853 3f00 	ldrex	r3, [r3]
 8003440:	623b      	str	r3, [r7, #32]
   return(result);
 8003442:	6a3b      	ldr	r3, [r7, #32]
 8003444:	f023 0301 	bic.w	r3, r3, #1
 8003448:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	3314      	adds	r3, #20
 8003452:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003456:	633a      	str	r2, [r7, #48]	@ 0x30
 8003458:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800345a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800345c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800345e:	e841 2300 	strex	r3, r2, [r1]
 8003462:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003466:	2b00      	cmp	r3, #0
 8003468:	d1e3      	bne.n	8003432 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2220      	movs	r2, #32
 800346e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	330c      	adds	r3, #12
 800347e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	e853 3f00 	ldrex	r3, [r3]
 8003486:	60fb      	str	r3, [r7, #12]
   return(result);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f023 0310 	bic.w	r3, r3, #16
 800348e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	330c      	adds	r3, #12
 8003498:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800349c:	61fa      	str	r2, [r7, #28]
 800349e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034a0:	69b9      	ldr	r1, [r7, #24]
 80034a2:	69fa      	ldr	r2, [r7, #28]
 80034a4:	e841 2300 	strex	r3, r2, [r1]
 80034a8:	617b      	str	r3, [r7, #20]
   return(result);
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d1e3      	bne.n	8003478 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2202      	movs	r2, #2
 80034b4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80034b6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80034ba:	4619      	mov	r1, r3
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f000 f832 	bl	8003526 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80034c2:	e023      	b.n	800350c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80034c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d009      	beq.n	80034e4 <HAL_UART_IRQHandler+0x4f4>
 80034d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80034d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d003      	beq.n	80034e4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f000 f8dc 	bl	800369a <UART_Transmit_IT>
    return;
 80034e2:	e014      	b.n	800350e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80034e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d00e      	beq.n	800350e <HAL_UART_IRQHandler+0x51e>
 80034f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80034f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d008      	beq.n	800350e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f000 f91b 	bl	8003738 <UART_EndTransmit_IT>
    return;
 8003502:	e004      	b.n	800350e <HAL_UART_IRQHandler+0x51e>
    return;
 8003504:	bf00      	nop
 8003506:	e002      	b.n	800350e <HAL_UART_IRQHandler+0x51e>
      return;
 8003508:	bf00      	nop
 800350a:	e000      	b.n	800350e <HAL_UART_IRQHandler+0x51e>
      return;
 800350c:	bf00      	nop
  }
}
 800350e:	37e8      	adds	r7, #232	@ 0xe8
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}

08003514 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800351c:	bf00      	nop
 800351e:	370c      	adds	r7, #12
 8003520:	46bd      	mov	sp, r7
 8003522:	bc80      	pop	{r7}
 8003524:	4770      	bx	lr

08003526 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003526:	b480      	push	{r7}
 8003528:	b083      	sub	sp, #12
 800352a:	af00      	add	r7, sp, #0
 800352c:	6078      	str	r0, [r7, #4]
 800352e:	460b      	mov	r3, r1
 8003530:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003532:	bf00      	nop
 8003534:	370c      	adds	r7, #12
 8003536:	46bd      	mov	sp, r7
 8003538:	bc80      	pop	{r7}
 800353a:	4770      	bx	lr

0800353c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800353c:	b480      	push	{r7}
 800353e:	b085      	sub	sp, #20
 8003540:	af00      	add	r7, sp, #0
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	60b9      	str	r1, [r7, #8]
 8003546:	4613      	mov	r3, r2
 8003548:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	68ba      	ldr	r2, [r7, #8]
 800354e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	88fa      	ldrh	r2, [r7, #6]
 8003554:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	88fa      	ldrh	r2, [r7, #6]
 800355a:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2200      	movs	r2, #0
 8003560:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2222      	movs	r2, #34	@ 0x22
 8003566:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	691b      	ldr	r3, [r3, #16]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d007      	beq.n	8003582 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	68da      	ldr	r2, [r3, #12]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003580:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	695a      	ldr	r2, [r3, #20]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f042 0201 	orr.w	r2, r2, #1
 8003590:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	68da      	ldr	r2, [r3, #12]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f042 0220 	orr.w	r2, r2, #32
 80035a0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80035a2:	2300      	movs	r3, #0
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3714      	adds	r7, #20
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bc80      	pop	{r7}
 80035ac:	4770      	bx	lr

080035ae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80035ae:	b480      	push	{r7}
 80035b0:	b095      	sub	sp, #84	@ 0x54
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	330c      	adds	r3, #12
 80035bc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035c0:	e853 3f00 	ldrex	r3, [r3]
 80035c4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80035c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80035cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	330c      	adds	r3, #12
 80035d4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80035d6:	643a      	str	r2, [r7, #64]	@ 0x40
 80035d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035da:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80035dc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80035de:	e841 2300 	strex	r3, r2, [r1]
 80035e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80035e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d1e5      	bne.n	80035b6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	3314      	adds	r3, #20
 80035f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035f2:	6a3b      	ldr	r3, [r7, #32]
 80035f4:	e853 3f00 	ldrex	r3, [r3]
 80035f8:	61fb      	str	r3, [r7, #28]
   return(result);
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	f023 0301 	bic.w	r3, r3, #1
 8003600:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	3314      	adds	r3, #20
 8003608:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800360a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800360c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800360e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003610:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003612:	e841 2300 	strex	r3, r2, [r1]
 8003616:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800361a:	2b00      	cmp	r3, #0
 800361c:	d1e5      	bne.n	80035ea <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003622:	2b01      	cmp	r3, #1
 8003624:	d119      	bne.n	800365a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	330c      	adds	r3, #12
 800362c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	e853 3f00 	ldrex	r3, [r3]
 8003634:	60bb      	str	r3, [r7, #8]
   return(result);
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	f023 0310 	bic.w	r3, r3, #16
 800363c:	647b      	str	r3, [r7, #68]	@ 0x44
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	330c      	adds	r3, #12
 8003644:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003646:	61ba      	str	r2, [r7, #24]
 8003648:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800364a:	6979      	ldr	r1, [r7, #20]
 800364c:	69ba      	ldr	r2, [r7, #24]
 800364e:	e841 2300 	strex	r3, r2, [r1]
 8003652:	613b      	str	r3, [r7, #16]
   return(result);
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d1e5      	bne.n	8003626 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2220      	movs	r2, #32
 800365e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2200      	movs	r2, #0
 8003666:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003668:	bf00      	nop
 800366a:	3754      	adds	r7, #84	@ 0x54
 800366c:	46bd      	mov	sp, r7
 800366e:	bc80      	pop	{r7}
 8003670:	4770      	bx	lr

08003672 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003672:	b580      	push	{r7, lr}
 8003674:	b084      	sub	sp, #16
 8003676:	af00      	add	r7, sp, #0
 8003678:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800367e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2200      	movs	r2, #0
 8003684:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2200      	movs	r2, #0
 800368a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800368c:	68f8      	ldr	r0, [r7, #12]
 800368e:	f7ff ff41 	bl	8003514 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003692:	bf00      	nop
 8003694:	3710      	adds	r7, #16
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}

0800369a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800369a:	b480      	push	{r7}
 800369c:	b085      	sub	sp, #20
 800369e:	af00      	add	r7, sp, #0
 80036a0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	2b21      	cmp	r3, #33	@ 0x21
 80036ac:	d13e      	bne.n	800372c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036b6:	d114      	bne.n	80036e2 <UART_Transmit_IT+0x48>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	691b      	ldr	r3, [r3, #16]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d110      	bne.n	80036e2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6a1b      	ldr	r3, [r3, #32]
 80036c4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	881b      	ldrh	r3, [r3, #0]
 80036ca:	461a      	mov	r2, r3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036d4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6a1b      	ldr	r3, [r3, #32]
 80036da:	1c9a      	adds	r2, r3, #2
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	621a      	str	r2, [r3, #32]
 80036e0:	e008      	b.n	80036f4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6a1b      	ldr	r3, [r3, #32]
 80036e6:	1c59      	adds	r1, r3, #1
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	6211      	str	r1, [r2, #32]
 80036ec:	781a      	ldrb	r2, [r3, #0]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80036f8:	b29b      	uxth	r3, r3
 80036fa:	3b01      	subs	r3, #1
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	4619      	mov	r1, r3
 8003702:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003704:	2b00      	cmp	r3, #0
 8003706:	d10f      	bne.n	8003728 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	68da      	ldr	r2, [r3, #12]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003716:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	68da      	ldr	r2, [r3, #12]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003726:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003728:	2300      	movs	r3, #0
 800372a:	e000      	b.n	800372e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800372c:	2302      	movs	r3, #2
  }
}
 800372e:	4618      	mov	r0, r3
 8003730:	3714      	adds	r7, #20
 8003732:	46bd      	mov	sp, r7
 8003734:	bc80      	pop	{r7}
 8003736:	4770      	bx	lr

08003738 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	68da      	ldr	r2, [r3, #12]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800374e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2220      	movs	r2, #32
 8003754:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f7fc feb3 	bl	80004c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800375e:	2300      	movs	r3, #0
}
 8003760:	4618      	mov	r0, r3
 8003762:	3708      	adds	r7, #8
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}

08003768 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b08c      	sub	sp, #48	@ 0x30
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003776:	b2db      	uxtb	r3, r3
 8003778:	2b22      	cmp	r3, #34	@ 0x22
 800377a:	f040 80ae 	bne.w	80038da <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003786:	d117      	bne.n	80037b8 <UART_Receive_IT+0x50>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	691b      	ldr	r3, [r3, #16]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d113      	bne.n	80037b8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003790:	2300      	movs	r3, #0
 8003792:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003798:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037a6:	b29a      	uxth	r2, r3
 80037a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037aa:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037b0:	1c9a      	adds	r2, r3, #2
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	629a      	str	r2, [r3, #40]	@ 0x28
 80037b6:	e026      	b.n	8003806 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80037be:	2300      	movs	r3, #0
 80037c0:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037ca:	d007      	beq.n	80037dc <UART_Receive_IT+0x74>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d10a      	bne.n	80037ea <UART_Receive_IT+0x82>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	691b      	ldr	r3, [r3, #16]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d106      	bne.n	80037ea <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	b2da      	uxtb	r2, r3
 80037e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037e6:	701a      	strb	r2, [r3, #0]
 80037e8:	e008      	b.n	80037fc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80037f6:	b2da      	uxtb	r2, r3
 80037f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037fa:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003800:	1c5a      	adds	r2, r3, #1
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800380a:	b29b      	uxth	r3, r3
 800380c:	3b01      	subs	r3, #1
 800380e:	b29b      	uxth	r3, r3
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	4619      	mov	r1, r3
 8003814:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003816:	2b00      	cmp	r3, #0
 8003818:	d15d      	bne.n	80038d6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	68da      	ldr	r2, [r3, #12]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f022 0220 	bic.w	r2, r2, #32
 8003828:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	68da      	ldr	r2, [r3, #12]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003838:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	695a      	ldr	r2, [r3, #20]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f022 0201 	bic.w	r2, r2, #1
 8003848:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2220      	movs	r2, #32
 800384e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800385c:	2b01      	cmp	r3, #1
 800385e:	d135      	bne.n	80038cc <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	330c      	adds	r3, #12
 800386c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	e853 3f00 	ldrex	r3, [r3]
 8003874:	613b      	str	r3, [r7, #16]
   return(result);
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	f023 0310 	bic.w	r3, r3, #16
 800387c:	627b      	str	r3, [r7, #36]	@ 0x24
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	330c      	adds	r3, #12
 8003884:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003886:	623a      	str	r2, [r7, #32]
 8003888:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800388a:	69f9      	ldr	r1, [r7, #28]
 800388c:	6a3a      	ldr	r2, [r7, #32]
 800388e:	e841 2300 	strex	r3, r2, [r1]
 8003892:	61bb      	str	r3, [r7, #24]
   return(result);
 8003894:	69bb      	ldr	r3, [r7, #24]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d1e5      	bne.n	8003866 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0310 	and.w	r3, r3, #16
 80038a4:	2b10      	cmp	r3, #16
 80038a6:	d10a      	bne.n	80038be <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80038a8:	2300      	movs	r3, #0
 80038aa:	60fb      	str	r3, [r7, #12]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	60fb      	str	r3, [r7, #12]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	60fb      	str	r3, [r7, #12]
 80038bc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80038c2:	4619      	mov	r1, r3
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f7ff fe2e 	bl	8003526 <HAL_UARTEx_RxEventCallback>
 80038ca:	e002      	b.n	80038d2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f7fc fdcd 	bl	800046c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80038d2:	2300      	movs	r3, #0
 80038d4:	e002      	b.n	80038dc <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80038d6:	2300      	movs	r3, #0
 80038d8:	e000      	b.n	80038dc <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80038da:	2302      	movs	r3, #2
  }
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3730      	adds	r7, #48	@ 0x30
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	691b      	ldr	r3, [r3, #16]
 80038f2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	68da      	ldr	r2, [r3, #12]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	430a      	orrs	r2, r1
 8003900:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	689a      	ldr	r2, [r3, #8]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	691b      	ldr	r3, [r3, #16]
 800390a:	431a      	orrs	r2, r3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	695b      	ldr	r3, [r3, #20]
 8003910:	4313      	orrs	r3, r2
 8003912:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800391e:	f023 030c 	bic.w	r3, r3, #12
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	6812      	ldr	r2, [r2, #0]
 8003926:	68b9      	ldr	r1, [r7, #8]
 8003928:	430b      	orrs	r3, r1
 800392a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	695b      	ldr	r3, [r3, #20]
 8003932:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	699a      	ldr	r2, [r3, #24]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	430a      	orrs	r2, r1
 8003940:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a2c      	ldr	r2, [pc, #176]	@ (80039f8 <UART_SetConfig+0x114>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d103      	bne.n	8003954 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800394c:	f7fe fbf6 	bl	800213c <HAL_RCC_GetPCLK2Freq>
 8003950:	60f8      	str	r0, [r7, #12]
 8003952:	e002      	b.n	800395a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003954:	f7fe fbde 	bl	8002114 <HAL_RCC_GetPCLK1Freq>
 8003958:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800395a:	68fa      	ldr	r2, [r7, #12]
 800395c:	4613      	mov	r3, r2
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	4413      	add	r3, r2
 8003962:	009a      	lsls	r2, r3, #2
 8003964:	441a      	add	r2, r3
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003970:	4a22      	ldr	r2, [pc, #136]	@ (80039fc <UART_SetConfig+0x118>)
 8003972:	fba2 2303 	umull	r2, r3, r2, r3
 8003976:	095b      	lsrs	r3, r3, #5
 8003978:	0119      	lsls	r1, r3, #4
 800397a:	68fa      	ldr	r2, [r7, #12]
 800397c:	4613      	mov	r3, r2
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	4413      	add	r3, r2
 8003982:	009a      	lsls	r2, r3, #2
 8003984:	441a      	add	r2, r3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003990:	4b1a      	ldr	r3, [pc, #104]	@ (80039fc <UART_SetConfig+0x118>)
 8003992:	fba3 0302 	umull	r0, r3, r3, r2
 8003996:	095b      	lsrs	r3, r3, #5
 8003998:	2064      	movs	r0, #100	@ 0x64
 800399a:	fb00 f303 	mul.w	r3, r0, r3
 800399e:	1ad3      	subs	r3, r2, r3
 80039a0:	011b      	lsls	r3, r3, #4
 80039a2:	3332      	adds	r3, #50	@ 0x32
 80039a4:	4a15      	ldr	r2, [pc, #84]	@ (80039fc <UART_SetConfig+0x118>)
 80039a6:	fba2 2303 	umull	r2, r3, r2, r3
 80039aa:	095b      	lsrs	r3, r3, #5
 80039ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80039b0:	4419      	add	r1, r3
 80039b2:	68fa      	ldr	r2, [r7, #12]
 80039b4:	4613      	mov	r3, r2
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	4413      	add	r3, r2
 80039ba:	009a      	lsls	r2, r3, #2
 80039bc:	441a      	add	r2, r3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80039c8:	4b0c      	ldr	r3, [pc, #48]	@ (80039fc <UART_SetConfig+0x118>)
 80039ca:	fba3 0302 	umull	r0, r3, r3, r2
 80039ce:	095b      	lsrs	r3, r3, #5
 80039d0:	2064      	movs	r0, #100	@ 0x64
 80039d2:	fb00 f303 	mul.w	r3, r0, r3
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	011b      	lsls	r3, r3, #4
 80039da:	3332      	adds	r3, #50	@ 0x32
 80039dc:	4a07      	ldr	r2, [pc, #28]	@ (80039fc <UART_SetConfig+0x118>)
 80039de:	fba2 2303 	umull	r2, r3, r2, r3
 80039e2:	095b      	lsrs	r3, r3, #5
 80039e4:	f003 020f 	and.w	r2, r3, #15
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	440a      	add	r2, r1
 80039ee:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80039f0:	bf00      	nop
 80039f2:	3710      	adds	r7, #16
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	40013800 	.word	0x40013800
 80039fc:	51eb851f 	.word	0x51eb851f

08003a00 <atoi>:
 8003a00:	220a      	movs	r2, #10
 8003a02:	2100      	movs	r1, #0
 8003a04:	f000 b928 	b.w	8003c58 <strtol>

08003a08 <sbrk_aligned>:
 8003a08:	b570      	push	{r4, r5, r6, lr}
 8003a0a:	4e0f      	ldr	r6, [pc, #60]	@ (8003a48 <sbrk_aligned+0x40>)
 8003a0c:	460c      	mov	r4, r1
 8003a0e:	6831      	ldr	r1, [r6, #0]
 8003a10:	4605      	mov	r5, r0
 8003a12:	b911      	cbnz	r1, 8003a1a <sbrk_aligned+0x12>
 8003a14:	f000 f964 	bl	8003ce0 <_sbrk_r>
 8003a18:	6030      	str	r0, [r6, #0]
 8003a1a:	4621      	mov	r1, r4
 8003a1c:	4628      	mov	r0, r5
 8003a1e:	f000 f95f 	bl	8003ce0 <_sbrk_r>
 8003a22:	1c43      	adds	r3, r0, #1
 8003a24:	d103      	bne.n	8003a2e <sbrk_aligned+0x26>
 8003a26:	f04f 34ff 	mov.w	r4, #4294967295
 8003a2a:	4620      	mov	r0, r4
 8003a2c:	bd70      	pop	{r4, r5, r6, pc}
 8003a2e:	1cc4      	adds	r4, r0, #3
 8003a30:	f024 0403 	bic.w	r4, r4, #3
 8003a34:	42a0      	cmp	r0, r4
 8003a36:	d0f8      	beq.n	8003a2a <sbrk_aligned+0x22>
 8003a38:	1a21      	subs	r1, r4, r0
 8003a3a:	4628      	mov	r0, r5
 8003a3c:	f000 f950 	bl	8003ce0 <_sbrk_r>
 8003a40:	3001      	adds	r0, #1
 8003a42:	d1f2      	bne.n	8003a2a <sbrk_aligned+0x22>
 8003a44:	e7ef      	b.n	8003a26 <sbrk_aligned+0x1e>
 8003a46:	bf00      	nop
 8003a48:	200007b8 	.word	0x200007b8

08003a4c <_malloc_r>:
 8003a4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a50:	1ccd      	adds	r5, r1, #3
 8003a52:	f025 0503 	bic.w	r5, r5, #3
 8003a56:	3508      	adds	r5, #8
 8003a58:	2d0c      	cmp	r5, #12
 8003a5a:	bf38      	it	cc
 8003a5c:	250c      	movcc	r5, #12
 8003a5e:	2d00      	cmp	r5, #0
 8003a60:	4606      	mov	r6, r0
 8003a62:	db01      	blt.n	8003a68 <_malloc_r+0x1c>
 8003a64:	42a9      	cmp	r1, r5
 8003a66:	d904      	bls.n	8003a72 <_malloc_r+0x26>
 8003a68:	230c      	movs	r3, #12
 8003a6a:	6033      	str	r3, [r6, #0]
 8003a6c:	2000      	movs	r0, #0
 8003a6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a72:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003b48 <_malloc_r+0xfc>
 8003a76:	f000 f869 	bl	8003b4c <__malloc_lock>
 8003a7a:	f8d8 3000 	ldr.w	r3, [r8]
 8003a7e:	461c      	mov	r4, r3
 8003a80:	bb44      	cbnz	r4, 8003ad4 <_malloc_r+0x88>
 8003a82:	4629      	mov	r1, r5
 8003a84:	4630      	mov	r0, r6
 8003a86:	f7ff ffbf 	bl	8003a08 <sbrk_aligned>
 8003a8a:	1c43      	adds	r3, r0, #1
 8003a8c:	4604      	mov	r4, r0
 8003a8e:	d158      	bne.n	8003b42 <_malloc_r+0xf6>
 8003a90:	f8d8 4000 	ldr.w	r4, [r8]
 8003a94:	4627      	mov	r7, r4
 8003a96:	2f00      	cmp	r7, #0
 8003a98:	d143      	bne.n	8003b22 <_malloc_r+0xd6>
 8003a9a:	2c00      	cmp	r4, #0
 8003a9c:	d04b      	beq.n	8003b36 <_malloc_r+0xea>
 8003a9e:	6823      	ldr	r3, [r4, #0]
 8003aa0:	4639      	mov	r1, r7
 8003aa2:	4630      	mov	r0, r6
 8003aa4:	eb04 0903 	add.w	r9, r4, r3
 8003aa8:	f000 f91a 	bl	8003ce0 <_sbrk_r>
 8003aac:	4581      	cmp	r9, r0
 8003aae:	d142      	bne.n	8003b36 <_malloc_r+0xea>
 8003ab0:	6821      	ldr	r1, [r4, #0]
 8003ab2:	4630      	mov	r0, r6
 8003ab4:	1a6d      	subs	r5, r5, r1
 8003ab6:	4629      	mov	r1, r5
 8003ab8:	f7ff ffa6 	bl	8003a08 <sbrk_aligned>
 8003abc:	3001      	adds	r0, #1
 8003abe:	d03a      	beq.n	8003b36 <_malloc_r+0xea>
 8003ac0:	6823      	ldr	r3, [r4, #0]
 8003ac2:	442b      	add	r3, r5
 8003ac4:	6023      	str	r3, [r4, #0]
 8003ac6:	f8d8 3000 	ldr.w	r3, [r8]
 8003aca:	685a      	ldr	r2, [r3, #4]
 8003acc:	bb62      	cbnz	r2, 8003b28 <_malloc_r+0xdc>
 8003ace:	f8c8 7000 	str.w	r7, [r8]
 8003ad2:	e00f      	b.n	8003af4 <_malloc_r+0xa8>
 8003ad4:	6822      	ldr	r2, [r4, #0]
 8003ad6:	1b52      	subs	r2, r2, r5
 8003ad8:	d420      	bmi.n	8003b1c <_malloc_r+0xd0>
 8003ada:	2a0b      	cmp	r2, #11
 8003adc:	d917      	bls.n	8003b0e <_malloc_r+0xc2>
 8003ade:	1961      	adds	r1, r4, r5
 8003ae0:	42a3      	cmp	r3, r4
 8003ae2:	6025      	str	r5, [r4, #0]
 8003ae4:	bf18      	it	ne
 8003ae6:	6059      	strne	r1, [r3, #4]
 8003ae8:	6863      	ldr	r3, [r4, #4]
 8003aea:	bf08      	it	eq
 8003aec:	f8c8 1000 	streq.w	r1, [r8]
 8003af0:	5162      	str	r2, [r4, r5]
 8003af2:	604b      	str	r3, [r1, #4]
 8003af4:	4630      	mov	r0, r6
 8003af6:	f000 f82f 	bl	8003b58 <__malloc_unlock>
 8003afa:	f104 000b 	add.w	r0, r4, #11
 8003afe:	1d23      	adds	r3, r4, #4
 8003b00:	f020 0007 	bic.w	r0, r0, #7
 8003b04:	1ac2      	subs	r2, r0, r3
 8003b06:	bf1c      	itt	ne
 8003b08:	1a1b      	subne	r3, r3, r0
 8003b0a:	50a3      	strne	r3, [r4, r2]
 8003b0c:	e7af      	b.n	8003a6e <_malloc_r+0x22>
 8003b0e:	6862      	ldr	r2, [r4, #4]
 8003b10:	42a3      	cmp	r3, r4
 8003b12:	bf0c      	ite	eq
 8003b14:	f8c8 2000 	streq.w	r2, [r8]
 8003b18:	605a      	strne	r2, [r3, #4]
 8003b1a:	e7eb      	b.n	8003af4 <_malloc_r+0xa8>
 8003b1c:	4623      	mov	r3, r4
 8003b1e:	6864      	ldr	r4, [r4, #4]
 8003b20:	e7ae      	b.n	8003a80 <_malloc_r+0x34>
 8003b22:	463c      	mov	r4, r7
 8003b24:	687f      	ldr	r7, [r7, #4]
 8003b26:	e7b6      	b.n	8003a96 <_malloc_r+0x4a>
 8003b28:	461a      	mov	r2, r3
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	42a3      	cmp	r3, r4
 8003b2e:	d1fb      	bne.n	8003b28 <_malloc_r+0xdc>
 8003b30:	2300      	movs	r3, #0
 8003b32:	6053      	str	r3, [r2, #4]
 8003b34:	e7de      	b.n	8003af4 <_malloc_r+0xa8>
 8003b36:	230c      	movs	r3, #12
 8003b38:	4630      	mov	r0, r6
 8003b3a:	6033      	str	r3, [r6, #0]
 8003b3c:	f000 f80c 	bl	8003b58 <__malloc_unlock>
 8003b40:	e794      	b.n	8003a6c <_malloc_r+0x20>
 8003b42:	6005      	str	r5, [r0, #0]
 8003b44:	e7d6      	b.n	8003af4 <_malloc_r+0xa8>
 8003b46:	bf00      	nop
 8003b48:	200007bc 	.word	0x200007bc

08003b4c <__malloc_lock>:
 8003b4c:	4801      	ldr	r0, [pc, #4]	@ (8003b54 <__malloc_lock+0x8>)
 8003b4e:	f000 b901 	b.w	8003d54 <__retarget_lock_acquire_recursive>
 8003b52:	bf00      	nop
 8003b54:	200008fc 	.word	0x200008fc

08003b58 <__malloc_unlock>:
 8003b58:	4801      	ldr	r0, [pc, #4]	@ (8003b60 <__malloc_unlock+0x8>)
 8003b5a:	f000 b8fc 	b.w	8003d56 <__retarget_lock_release_recursive>
 8003b5e:	bf00      	nop
 8003b60:	200008fc 	.word	0x200008fc

08003b64 <_strtol_l.constprop.0>:
 8003b64:	2b24      	cmp	r3, #36	@ 0x24
 8003b66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b6a:	4686      	mov	lr, r0
 8003b6c:	4690      	mov	r8, r2
 8003b6e:	d801      	bhi.n	8003b74 <_strtol_l.constprop.0+0x10>
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d106      	bne.n	8003b82 <_strtol_l.constprop.0+0x1e>
 8003b74:	f000 f8c4 	bl	8003d00 <__errno>
 8003b78:	2316      	movs	r3, #22
 8003b7a:	6003      	str	r3, [r0, #0]
 8003b7c:	2000      	movs	r0, #0
 8003b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b82:	460d      	mov	r5, r1
 8003b84:	4833      	ldr	r0, [pc, #204]	@ (8003c54 <_strtol_l.constprop.0+0xf0>)
 8003b86:	462a      	mov	r2, r5
 8003b88:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003b8c:	5d06      	ldrb	r6, [r0, r4]
 8003b8e:	f016 0608 	ands.w	r6, r6, #8
 8003b92:	d1f8      	bne.n	8003b86 <_strtol_l.constprop.0+0x22>
 8003b94:	2c2d      	cmp	r4, #45	@ 0x2d
 8003b96:	d12d      	bne.n	8003bf4 <_strtol_l.constprop.0+0x90>
 8003b98:	2601      	movs	r6, #1
 8003b9a:	782c      	ldrb	r4, [r5, #0]
 8003b9c:	1c95      	adds	r5, r2, #2
 8003b9e:	f033 0210 	bics.w	r2, r3, #16
 8003ba2:	d109      	bne.n	8003bb8 <_strtol_l.constprop.0+0x54>
 8003ba4:	2c30      	cmp	r4, #48	@ 0x30
 8003ba6:	d12a      	bne.n	8003bfe <_strtol_l.constprop.0+0x9a>
 8003ba8:	782a      	ldrb	r2, [r5, #0]
 8003baa:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8003bae:	2a58      	cmp	r2, #88	@ 0x58
 8003bb0:	d125      	bne.n	8003bfe <_strtol_l.constprop.0+0x9a>
 8003bb2:	2310      	movs	r3, #16
 8003bb4:	786c      	ldrb	r4, [r5, #1]
 8003bb6:	3502      	adds	r5, #2
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8003bbe:	f10c 3cff 	add.w	ip, ip, #4294967295
 8003bc2:	fbbc f9f3 	udiv	r9, ip, r3
 8003bc6:	4610      	mov	r0, r2
 8003bc8:	fb03 ca19 	mls	sl, r3, r9, ip
 8003bcc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8003bd0:	2f09      	cmp	r7, #9
 8003bd2:	d81b      	bhi.n	8003c0c <_strtol_l.constprop.0+0xa8>
 8003bd4:	463c      	mov	r4, r7
 8003bd6:	42a3      	cmp	r3, r4
 8003bd8:	dd27      	ble.n	8003c2a <_strtol_l.constprop.0+0xc6>
 8003bda:	1c57      	adds	r7, r2, #1
 8003bdc:	d007      	beq.n	8003bee <_strtol_l.constprop.0+0x8a>
 8003bde:	4581      	cmp	r9, r0
 8003be0:	d320      	bcc.n	8003c24 <_strtol_l.constprop.0+0xc0>
 8003be2:	d101      	bne.n	8003be8 <_strtol_l.constprop.0+0x84>
 8003be4:	45a2      	cmp	sl, r4
 8003be6:	db1d      	blt.n	8003c24 <_strtol_l.constprop.0+0xc0>
 8003be8:	2201      	movs	r2, #1
 8003bea:	fb00 4003 	mla	r0, r0, r3, r4
 8003bee:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003bf2:	e7eb      	b.n	8003bcc <_strtol_l.constprop.0+0x68>
 8003bf4:	2c2b      	cmp	r4, #43	@ 0x2b
 8003bf6:	bf04      	itt	eq
 8003bf8:	782c      	ldrbeq	r4, [r5, #0]
 8003bfa:	1c95      	addeq	r5, r2, #2
 8003bfc:	e7cf      	b.n	8003b9e <_strtol_l.constprop.0+0x3a>
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d1da      	bne.n	8003bb8 <_strtol_l.constprop.0+0x54>
 8003c02:	2c30      	cmp	r4, #48	@ 0x30
 8003c04:	bf0c      	ite	eq
 8003c06:	2308      	moveq	r3, #8
 8003c08:	230a      	movne	r3, #10
 8003c0a:	e7d5      	b.n	8003bb8 <_strtol_l.constprop.0+0x54>
 8003c0c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8003c10:	2f19      	cmp	r7, #25
 8003c12:	d801      	bhi.n	8003c18 <_strtol_l.constprop.0+0xb4>
 8003c14:	3c37      	subs	r4, #55	@ 0x37
 8003c16:	e7de      	b.n	8003bd6 <_strtol_l.constprop.0+0x72>
 8003c18:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8003c1c:	2f19      	cmp	r7, #25
 8003c1e:	d804      	bhi.n	8003c2a <_strtol_l.constprop.0+0xc6>
 8003c20:	3c57      	subs	r4, #87	@ 0x57
 8003c22:	e7d8      	b.n	8003bd6 <_strtol_l.constprop.0+0x72>
 8003c24:	f04f 32ff 	mov.w	r2, #4294967295
 8003c28:	e7e1      	b.n	8003bee <_strtol_l.constprop.0+0x8a>
 8003c2a:	1c53      	adds	r3, r2, #1
 8003c2c:	d108      	bne.n	8003c40 <_strtol_l.constprop.0+0xdc>
 8003c2e:	2322      	movs	r3, #34	@ 0x22
 8003c30:	4660      	mov	r0, ip
 8003c32:	f8ce 3000 	str.w	r3, [lr]
 8003c36:	f1b8 0f00 	cmp.w	r8, #0
 8003c3a:	d0a0      	beq.n	8003b7e <_strtol_l.constprop.0+0x1a>
 8003c3c:	1e69      	subs	r1, r5, #1
 8003c3e:	e006      	b.n	8003c4e <_strtol_l.constprop.0+0xea>
 8003c40:	b106      	cbz	r6, 8003c44 <_strtol_l.constprop.0+0xe0>
 8003c42:	4240      	negs	r0, r0
 8003c44:	f1b8 0f00 	cmp.w	r8, #0
 8003c48:	d099      	beq.n	8003b7e <_strtol_l.constprop.0+0x1a>
 8003c4a:	2a00      	cmp	r2, #0
 8003c4c:	d1f6      	bne.n	8003c3c <_strtol_l.constprop.0+0xd8>
 8003c4e:	f8c8 1000 	str.w	r1, [r8]
 8003c52:	e794      	b.n	8003b7e <_strtol_l.constprop.0+0x1a>
 8003c54:	08004543 	.word	0x08004543

08003c58 <strtol>:
 8003c58:	4613      	mov	r3, r2
 8003c5a:	460a      	mov	r2, r1
 8003c5c:	4601      	mov	r1, r0
 8003c5e:	4802      	ldr	r0, [pc, #8]	@ (8003c68 <strtol+0x10>)
 8003c60:	6800      	ldr	r0, [r0, #0]
 8003c62:	f7ff bf7f 	b.w	8003b64 <_strtol_l.constprop.0>
 8003c66:	bf00      	nop
 8003c68:	2000000c 	.word	0x2000000c

08003c6c <_vsiprintf_r>:
 8003c6c:	b500      	push	{lr}
 8003c6e:	b09b      	sub	sp, #108	@ 0x6c
 8003c70:	9100      	str	r1, [sp, #0]
 8003c72:	9104      	str	r1, [sp, #16]
 8003c74:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003c78:	9105      	str	r1, [sp, #20]
 8003c7a:	9102      	str	r1, [sp, #8]
 8003c7c:	4905      	ldr	r1, [pc, #20]	@ (8003c94 <_vsiprintf_r+0x28>)
 8003c7e:	9103      	str	r1, [sp, #12]
 8003c80:	4669      	mov	r1, sp
 8003c82:	f000 f90d 	bl	8003ea0 <_svfiprintf_r>
 8003c86:	2200      	movs	r2, #0
 8003c88:	9b00      	ldr	r3, [sp, #0]
 8003c8a:	701a      	strb	r2, [r3, #0]
 8003c8c:	b01b      	add	sp, #108	@ 0x6c
 8003c8e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003c92:	bf00      	nop
 8003c94:	ffff0208 	.word	0xffff0208

08003c98 <vsiprintf>:
 8003c98:	4613      	mov	r3, r2
 8003c9a:	460a      	mov	r2, r1
 8003c9c:	4601      	mov	r1, r0
 8003c9e:	4802      	ldr	r0, [pc, #8]	@ (8003ca8 <vsiprintf+0x10>)
 8003ca0:	6800      	ldr	r0, [r0, #0]
 8003ca2:	f7ff bfe3 	b.w	8003c6c <_vsiprintf_r>
 8003ca6:	bf00      	nop
 8003ca8:	2000000c 	.word	0x2000000c

08003cac <memset>:
 8003cac:	4603      	mov	r3, r0
 8003cae:	4402      	add	r2, r0
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d100      	bne.n	8003cb6 <memset+0xa>
 8003cb4:	4770      	bx	lr
 8003cb6:	f803 1b01 	strb.w	r1, [r3], #1
 8003cba:	e7f9      	b.n	8003cb0 <memset+0x4>

08003cbc <strncmp>:
 8003cbc:	b510      	push	{r4, lr}
 8003cbe:	b16a      	cbz	r2, 8003cdc <strncmp+0x20>
 8003cc0:	3901      	subs	r1, #1
 8003cc2:	1884      	adds	r4, r0, r2
 8003cc4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003cc8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d103      	bne.n	8003cd8 <strncmp+0x1c>
 8003cd0:	42a0      	cmp	r0, r4
 8003cd2:	d001      	beq.n	8003cd8 <strncmp+0x1c>
 8003cd4:	2a00      	cmp	r2, #0
 8003cd6:	d1f5      	bne.n	8003cc4 <strncmp+0x8>
 8003cd8:	1ad0      	subs	r0, r2, r3
 8003cda:	bd10      	pop	{r4, pc}
 8003cdc:	4610      	mov	r0, r2
 8003cde:	e7fc      	b.n	8003cda <strncmp+0x1e>

08003ce0 <_sbrk_r>:
 8003ce0:	b538      	push	{r3, r4, r5, lr}
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	4d05      	ldr	r5, [pc, #20]	@ (8003cfc <_sbrk_r+0x1c>)
 8003ce6:	4604      	mov	r4, r0
 8003ce8:	4608      	mov	r0, r1
 8003cea:	602b      	str	r3, [r5, #0]
 8003cec:	f7fd f8b6 	bl	8000e5c <_sbrk>
 8003cf0:	1c43      	adds	r3, r0, #1
 8003cf2:	d102      	bne.n	8003cfa <_sbrk_r+0x1a>
 8003cf4:	682b      	ldr	r3, [r5, #0]
 8003cf6:	b103      	cbz	r3, 8003cfa <_sbrk_r+0x1a>
 8003cf8:	6023      	str	r3, [r4, #0]
 8003cfa:	bd38      	pop	{r3, r4, r5, pc}
 8003cfc:	200008f8 	.word	0x200008f8

08003d00 <__errno>:
 8003d00:	4b01      	ldr	r3, [pc, #4]	@ (8003d08 <__errno+0x8>)
 8003d02:	6818      	ldr	r0, [r3, #0]
 8003d04:	4770      	bx	lr
 8003d06:	bf00      	nop
 8003d08:	2000000c 	.word	0x2000000c

08003d0c <__libc_init_array>:
 8003d0c:	b570      	push	{r4, r5, r6, lr}
 8003d0e:	2600      	movs	r6, #0
 8003d10:	4d0c      	ldr	r5, [pc, #48]	@ (8003d44 <__libc_init_array+0x38>)
 8003d12:	4c0d      	ldr	r4, [pc, #52]	@ (8003d48 <__libc_init_array+0x3c>)
 8003d14:	1b64      	subs	r4, r4, r5
 8003d16:	10a4      	asrs	r4, r4, #2
 8003d18:	42a6      	cmp	r6, r4
 8003d1a:	d109      	bne.n	8003d30 <__libc_init_array+0x24>
 8003d1c:	f000 fbba 	bl	8004494 <_init>
 8003d20:	2600      	movs	r6, #0
 8003d22:	4d0a      	ldr	r5, [pc, #40]	@ (8003d4c <__libc_init_array+0x40>)
 8003d24:	4c0a      	ldr	r4, [pc, #40]	@ (8003d50 <__libc_init_array+0x44>)
 8003d26:	1b64      	subs	r4, r4, r5
 8003d28:	10a4      	asrs	r4, r4, #2
 8003d2a:	42a6      	cmp	r6, r4
 8003d2c:	d105      	bne.n	8003d3a <__libc_init_array+0x2e>
 8003d2e:	bd70      	pop	{r4, r5, r6, pc}
 8003d30:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d34:	4798      	blx	r3
 8003d36:	3601      	adds	r6, #1
 8003d38:	e7ee      	b.n	8003d18 <__libc_init_array+0xc>
 8003d3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d3e:	4798      	blx	r3
 8003d40:	3601      	adds	r6, #1
 8003d42:	e7f2      	b.n	8003d2a <__libc_init_array+0x1e>
 8003d44:	08004680 	.word	0x08004680
 8003d48:	08004680 	.word	0x08004680
 8003d4c:	08004680 	.word	0x08004680
 8003d50:	08004684 	.word	0x08004684

08003d54 <__retarget_lock_acquire_recursive>:
 8003d54:	4770      	bx	lr

08003d56 <__retarget_lock_release_recursive>:
 8003d56:	4770      	bx	lr

08003d58 <_free_r>:
 8003d58:	b538      	push	{r3, r4, r5, lr}
 8003d5a:	4605      	mov	r5, r0
 8003d5c:	2900      	cmp	r1, #0
 8003d5e:	d040      	beq.n	8003de2 <_free_r+0x8a>
 8003d60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d64:	1f0c      	subs	r4, r1, #4
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	bfb8      	it	lt
 8003d6a:	18e4      	addlt	r4, r4, r3
 8003d6c:	f7ff feee 	bl	8003b4c <__malloc_lock>
 8003d70:	4a1c      	ldr	r2, [pc, #112]	@ (8003de4 <_free_r+0x8c>)
 8003d72:	6813      	ldr	r3, [r2, #0]
 8003d74:	b933      	cbnz	r3, 8003d84 <_free_r+0x2c>
 8003d76:	6063      	str	r3, [r4, #4]
 8003d78:	6014      	str	r4, [r2, #0]
 8003d7a:	4628      	mov	r0, r5
 8003d7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d80:	f7ff beea 	b.w	8003b58 <__malloc_unlock>
 8003d84:	42a3      	cmp	r3, r4
 8003d86:	d908      	bls.n	8003d9a <_free_r+0x42>
 8003d88:	6820      	ldr	r0, [r4, #0]
 8003d8a:	1821      	adds	r1, r4, r0
 8003d8c:	428b      	cmp	r3, r1
 8003d8e:	bf01      	itttt	eq
 8003d90:	6819      	ldreq	r1, [r3, #0]
 8003d92:	685b      	ldreq	r3, [r3, #4]
 8003d94:	1809      	addeq	r1, r1, r0
 8003d96:	6021      	streq	r1, [r4, #0]
 8003d98:	e7ed      	b.n	8003d76 <_free_r+0x1e>
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	b10b      	cbz	r3, 8003da4 <_free_r+0x4c>
 8003da0:	42a3      	cmp	r3, r4
 8003da2:	d9fa      	bls.n	8003d9a <_free_r+0x42>
 8003da4:	6811      	ldr	r1, [r2, #0]
 8003da6:	1850      	adds	r0, r2, r1
 8003da8:	42a0      	cmp	r0, r4
 8003daa:	d10b      	bne.n	8003dc4 <_free_r+0x6c>
 8003dac:	6820      	ldr	r0, [r4, #0]
 8003dae:	4401      	add	r1, r0
 8003db0:	1850      	adds	r0, r2, r1
 8003db2:	4283      	cmp	r3, r0
 8003db4:	6011      	str	r1, [r2, #0]
 8003db6:	d1e0      	bne.n	8003d7a <_free_r+0x22>
 8003db8:	6818      	ldr	r0, [r3, #0]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	4408      	add	r0, r1
 8003dbe:	6010      	str	r0, [r2, #0]
 8003dc0:	6053      	str	r3, [r2, #4]
 8003dc2:	e7da      	b.n	8003d7a <_free_r+0x22>
 8003dc4:	d902      	bls.n	8003dcc <_free_r+0x74>
 8003dc6:	230c      	movs	r3, #12
 8003dc8:	602b      	str	r3, [r5, #0]
 8003dca:	e7d6      	b.n	8003d7a <_free_r+0x22>
 8003dcc:	6820      	ldr	r0, [r4, #0]
 8003dce:	1821      	adds	r1, r4, r0
 8003dd0:	428b      	cmp	r3, r1
 8003dd2:	bf01      	itttt	eq
 8003dd4:	6819      	ldreq	r1, [r3, #0]
 8003dd6:	685b      	ldreq	r3, [r3, #4]
 8003dd8:	1809      	addeq	r1, r1, r0
 8003dda:	6021      	streq	r1, [r4, #0]
 8003ddc:	6063      	str	r3, [r4, #4]
 8003dde:	6054      	str	r4, [r2, #4]
 8003de0:	e7cb      	b.n	8003d7a <_free_r+0x22>
 8003de2:	bd38      	pop	{r3, r4, r5, pc}
 8003de4:	200007bc 	.word	0x200007bc

08003de8 <__ssputs_r>:
 8003de8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003dec:	461f      	mov	r7, r3
 8003dee:	688e      	ldr	r6, [r1, #8]
 8003df0:	4682      	mov	sl, r0
 8003df2:	42be      	cmp	r6, r7
 8003df4:	460c      	mov	r4, r1
 8003df6:	4690      	mov	r8, r2
 8003df8:	680b      	ldr	r3, [r1, #0]
 8003dfa:	d82d      	bhi.n	8003e58 <__ssputs_r+0x70>
 8003dfc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003e00:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003e04:	d026      	beq.n	8003e54 <__ssputs_r+0x6c>
 8003e06:	6965      	ldr	r5, [r4, #20]
 8003e08:	6909      	ldr	r1, [r1, #16]
 8003e0a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003e0e:	eba3 0901 	sub.w	r9, r3, r1
 8003e12:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003e16:	1c7b      	adds	r3, r7, #1
 8003e18:	444b      	add	r3, r9
 8003e1a:	106d      	asrs	r5, r5, #1
 8003e1c:	429d      	cmp	r5, r3
 8003e1e:	bf38      	it	cc
 8003e20:	461d      	movcc	r5, r3
 8003e22:	0553      	lsls	r3, r2, #21
 8003e24:	d527      	bpl.n	8003e76 <__ssputs_r+0x8e>
 8003e26:	4629      	mov	r1, r5
 8003e28:	f7ff fe10 	bl	8003a4c <_malloc_r>
 8003e2c:	4606      	mov	r6, r0
 8003e2e:	b360      	cbz	r0, 8003e8a <__ssputs_r+0xa2>
 8003e30:	464a      	mov	r2, r9
 8003e32:	6921      	ldr	r1, [r4, #16]
 8003e34:	f000 faea 	bl	800440c <memcpy>
 8003e38:	89a3      	ldrh	r3, [r4, #12]
 8003e3a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003e3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e42:	81a3      	strh	r3, [r4, #12]
 8003e44:	6126      	str	r6, [r4, #16]
 8003e46:	444e      	add	r6, r9
 8003e48:	6026      	str	r6, [r4, #0]
 8003e4a:	463e      	mov	r6, r7
 8003e4c:	6165      	str	r5, [r4, #20]
 8003e4e:	eba5 0509 	sub.w	r5, r5, r9
 8003e52:	60a5      	str	r5, [r4, #8]
 8003e54:	42be      	cmp	r6, r7
 8003e56:	d900      	bls.n	8003e5a <__ssputs_r+0x72>
 8003e58:	463e      	mov	r6, r7
 8003e5a:	4632      	mov	r2, r6
 8003e5c:	4641      	mov	r1, r8
 8003e5e:	6820      	ldr	r0, [r4, #0]
 8003e60:	f000 faac 	bl	80043bc <memmove>
 8003e64:	2000      	movs	r0, #0
 8003e66:	68a3      	ldr	r3, [r4, #8]
 8003e68:	1b9b      	subs	r3, r3, r6
 8003e6a:	60a3      	str	r3, [r4, #8]
 8003e6c:	6823      	ldr	r3, [r4, #0]
 8003e6e:	4433      	add	r3, r6
 8003e70:	6023      	str	r3, [r4, #0]
 8003e72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e76:	462a      	mov	r2, r5
 8003e78:	f000 fad6 	bl	8004428 <_realloc_r>
 8003e7c:	4606      	mov	r6, r0
 8003e7e:	2800      	cmp	r0, #0
 8003e80:	d1e0      	bne.n	8003e44 <__ssputs_r+0x5c>
 8003e82:	4650      	mov	r0, sl
 8003e84:	6921      	ldr	r1, [r4, #16]
 8003e86:	f7ff ff67 	bl	8003d58 <_free_r>
 8003e8a:	230c      	movs	r3, #12
 8003e8c:	f8ca 3000 	str.w	r3, [sl]
 8003e90:	89a3      	ldrh	r3, [r4, #12]
 8003e92:	f04f 30ff 	mov.w	r0, #4294967295
 8003e96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003e9a:	81a3      	strh	r3, [r4, #12]
 8003e9c:	e7e9      	b.n	8003e72 <__ssputs_r+0x8a>
	...

08003ea0 <_svfiprintf_r>:
 8003ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ea4:	4698      	mov	r8, r3
 8003ea6:	898b      	ldrh	r3, [r1, #12]
 8003ea8:	4607      	mov	r7, r0
 8003eaa:	061b      	lsls	r3, r3, #24
 8003eac:	460d      	mov	r5, r1
 8003eae:	4614      	mov	r4, r2
 8003eb0:	b09d      	sub	sp, #116	@ 0x74
 8003eb2:	d510      	bpl.n	8003ed6 <_svfiprintf_r+0x36>
 8003eb4:	690b      	ldr	r3, [r1, #16]
 8003eb6:	b973      	cbnz	r3, 8003ed6 <_svfiprintf_r+0x36>
 8003eb8:	2140      	movs	r1, #64	@ 0x40
 8003eba:	f7ff fdc7 	bl	8003a4c <_malloc_r>
 8003ebe:	6028      	str	r0, [r5, #0]
 8003ec0:	6128      	str	r0, [r5, #16]
 8003ec2:	b930      	cbnz	r0, 8003ed2 <_svfiprintf_r+0x32>
 8003ec4:	230c      	movs	r3, #12
 8003ec6:	603b      	str	r3, [r7, #0]
 8003ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8003ecc:	b01d      	add	sp, #116	@ 0x74
 8003ece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ed2:	2340      	movs	r3, #64	@ 0x40
 8003ed4:	616b      	str	r3, [r5, #20]
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	9309      	str	r3, [sp, #36]	@ 0x24
 8003eda:	2320      	movs	r3, #32
 8003edc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003ee0:	2330      	movs	r3, #48	@ 0x30
 8003ee2:	f04f 0901 	mov.w	r9, #1
 8003ee6:	f8cd 800c 	str.w	r8, [sp, #12]
 8003eea:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8004084 <_svfiprintf_r+0x1e4>
 8003eee:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003ef2:	4623      	mov	r3, r4
 8003ef4:	469a      	mov	sl, r3
 8003ef6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003efa:	b10a      	cbz	r2, 8003f00 <_svfiprintf_r+0x60>
 8003efc:	2a25      	cmp	r2, #37	@ 0x25
 8003efe:	d1f9      	bne.n	8003ef4 <_svfiprintf_r+0x54>
 8003f00:	ebba 0b04 	subs.w	fp, sl, r4
 8003f04:	d00b      	beq.n	8003f1e <_svfiprintf_r+0x7e>
 8003f06:	465b      	mov	r3, fp
 8003f08:	4622      	mov	r2, r4
 8003f0a:	4629      	mov	r1, r5
 8003f0c:	4638      	mov	r0, r7
 8003f0e:	f7ff ff6b 	bl	8003de8 <__ssputs_r>
 8003f12:	3001      	adds	r0, #1
 8003f14:	f000 80a7 	beq.w	8004066 <_svfiprintf_r+0x1c6>
 8003f18:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003f1a:	445a      	add	r2, fp
 8003f1c:	9209      	str	r2, [sp, #36]	@ 0x24
 8003f1e:	f89a 3000 	ldrb.w	r3, [sl]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	f000 809f 	beq.w	8004066 <_svfiprintf_r+0x1c6>
 8003f28:	2300      	movs	r3, #0
 8003f2a:	f04f 32ff 	mov.w	r2, #4294967295
 8003f2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f32:	f10a 0a01 	add.w	sl, sl, #1
 8003f36:	9304      	str	r3, [sp, #16]
 8003f38:	9307      	str	r3, [sp, #28]
 8003f3a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003f3e:	931a      	str	r3, [sp, #104]	@ 0x68
 8003f40:	4654      	mov	r4, sl
 8003f42:	2205      	movs	r2, #5
 8003f44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f48:	484e      	ldr	r0, [pc, #312]	@ (8004084 <_svfiprintf_r+0x1e4>)
 8003f4a:	f000 fa51 	bl	80043f0 <memchr>
 8003f4e:	9a04      	ldr	r2, [sp, #16]
 8003f50:	b9d8      	cbnz	r0, 8003f8a <_svfiprintf_r+0xea>
 8003f52:	06d0      	lsls	r0, r2, #27
 8003f54:	bf44      	itt	mi
 8003f56:	2320      	movmi	r3, #32
 8003f58:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003f5c:	0711      	lsls	r1, r2, #28
 8003f5e:	bf44      	itt	mi
 8003f60:	232b      	movmi	r3, #43	@ 0x2b
 8003f62:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003f66:	f89a 3000 	ldrb.w	r3, [sl]
 8003f6a:	2b2a      	cmp	r3, #42	@ 0x2a
 8003f6c:	d015      	beq.n	8003f9a <_svfiprintf_r+0xfa>
 8003f6e:	4654      	mov	r4, sl
 8003f70:	2000      	movs	r0, #0
 8003f72:	f04f 0c0a 	mov.w	ip, #10
 8003f76:	9a07      	ldr	r2, [sp, #28]
 8003f78:	4621      	mov	r1, r4
 8003f7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003f7e:	3b30      	subs	r3, #48	@ 0x30
 8003f80:	2b09      	cmp	r3, #9
 8003f82:	d94b      	bls.n	800401c <_svfiprintf_r+0x17c>
 8003f84:	b1b0      	cbz	r0, 8003fb4 <_svfiprintf_r+0x114>
 8003f86:	9207      	str	r2, [sp, #28]
 8003f88:	e014      	b.n	8003fb4 <_svfiprintf_r+0x114>
 8003f8a:	eba0 0308 	sub.w	r3, r0, r8
 8003f8e:	fa09 f303 	lsl.w	r3, r9, r3
 8003f92:	4313      	orrs	r3, r2
 8003f94:	46a2      	mov	sl, r4
 8003f96:	9304      	str	r3, [sp, #16]
 8003f98:	e7d2      	b.n	8003f40 <_svfiprintf_r+0xa0>
 8003f9a:	9b03      	ldr	r3, [sp, #12]
 8003f9c:	1d19      	adds	r1, r3, #4
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	9103      	str	r1, [sp, #12]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	bfbb      	ittet	lt
 8003fa6:	425b      	neglt	r3, r3
 8003fa8:	f042 0202 	orrlt.w	r2, r2, #2
 8003fac:	9307      	strge	r3, [sp, #28]
 8003fae:	9307      	strlt	r3, [sp, #28]
 8003fb0:	bfb8      	it	lt
 8003fb2:	9204      	strlt	r2, [sp, #16]
 8003fb4:	7823      	ldrb	r3, [r4, #0]
 8003fb6:	2b2e      	cmp	r3, #46	@ 0x2e
 8003fb8:	d10a      	bne.n	8003fd0 <_svfiprintf_r+0x130>
 8003fba:	7863      	ldrb	r3, [r4, #1]
 8003fbc:	2b2a      	cmp	r3, #42	@ 0x2a
 8003fbe:	d132      	bne.n	8004026 <_svfiprintf_r+0x186>
 8003fc0:	9b03      	ldr	r3, [sp, #12]
 8003fc2:	3402      	adds	r4, #2
 8003fc4:	1d1a      	adds	r2, r3, #4
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	9203      	str	r2, [sp, #12]
 8003fca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003fce:	9305      	str	r3, [sp, #20]
 8003fd0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8004088 <_svfiprintf_r+0x1e8>
 8003fd4:	2203      	movs	r2, #3
 8003fd6:	4650      	mov	r0, sl
 8003fd8:	7821      	ldrb	r1, [r4, #0]
 8003fda:	f000 fa09 	bl	80043f0 <memchr>
 8003fde:	b138      	cbz	r0, 8003ff0 <_svfiprintf_r+0x150>
 8003fe0:	2240      	movs	r2, #64	@ 0x40
 8003fe2:	9b04      	ldr	r3, [sp, #16]
 8003fe4:	eba0 000a 	sub.w	r0, r0, sl
 8003fe8:	4082      	lsls	r2, r0
 8003fea:	4313      	orrs	r3, r2
 8003fec:	3401      	adds	r4, #1
 8003fee:	9304      	str	r3, [sp, #16]
 8003ff0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ff4:	2206      	movs	r2, #6
 8003ff6:	4825      	ldr	r0, [pc, #148]	@ (800408c <_svfiprintf_r+0x1ec>)
 8003ff8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003ffc:	f000 f9f8 	bl	80043f0 <memchr>
 8004000:	2800      	cmp	r0, #0
 8004002:	d036      	beq.n	8004072 <_svfiprintf_r+0x1d2>
 8004004:	4b22      	ldr	r3, [pc, #136]	@ (8004090 <_svfiprintf_r+0x1f0>)
 8004006:	bb1b      	cbnz	r3, 8004050 <_svfiprintf_r+0x1b0>
 8004008:	9b03      	ldr	r3, [sp, #12]
 800400a:	3307      	adds	r3, #7
 800400c:	f023 0307 	bic.w	r3, r3, #7
 8004010:	3308      	adds	r3, #8
 8004012:	9303      	str	r3, [sp, #12]
 8004014:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004016:	4433      	add	r3, r6
 8004018:	9309      	str	r3, [sp, #36]	@ 0x24
 800401a:	e76a      	b.n	8003ef2 <_svfiprintf_r+0x52>
 800401c:	460c      	mov	r4, r1
 800401e:	2001      	movs	r0, #1
 8004020:	fb0c 3202 	mla	r2, ip, r2, r3
 8004024:	e7a8      	b.n	8003f78 <_svfiprintf_r+0xd8>
 8004026:	2300      	movs	r3, #0
 8004028:	f04f 0c0a 	mov.w	ip, #10
 800402c:	4619      	mov	r1, r3
 800402e:	3401      	adds	r4, #1
 8004030:	9305      	str	r3, [sp, #20]
 8004032:	4620      	mov	r0, r4
 8004034:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004038:	3a30      	subs	r2, #48	@ 0x30
 800403a:	2a09      	cmp	r2, #9
 800403c:	d903      	bls.n	8004046 <_svfiprintf_r+0x1a6>
 800403e:	2b00      	cmp	r3, #0
 8004040:	d0c6      	beq.n	8003fd0 <_svfiprintf_r+0x130>
 8004042:	9105      	str	r1, [sp, #20]
 8004044:	e7c4      	b.n	8003fd0 <_svfiprintf_r+0x130>
 8004046:	4604      	mov	r4, r0
 8004048:	2301      	movs	r3, #1
 800404a:	fb0c 2101 	mla	r1, ip, r1, r2
 800404e:	e7f0      	b.n	8004032 <_svfiprintf_r+0x192>
 8004050:	ab03      	add	r3, sp, #12
 8004052:	9300      	str	r3, [sp, #0]
 8004054:	462a      	mov	r2, r5
 8004056:	4638      	mov	r0, r7
 8004058:	4b0e      	ldr	r3, [pc, #56]	@ (8004094 <_svfiprintf_r+0x1f4>)
 800405a:	a904      	add	r1, sp, #16
 800405c:	f3af 8000 	nop.w
 8004060:	1c42      	adds	r2, r0, #1
 8004062:	4606      	mov	r6, r0
 8004064:	d1d6      	bne.n	8004014 <_svfiprintf_r+0x174>
 8004066:	89ab      	ldrh	r3, [r5, #12]
 8004068:	065b      	lsls	r3, r3, #25
 800406a:	f53f af2d 	bmi.w	8003ec8 <_svfiprintf_r+0x28>
 800406e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004070:	e72c      	b.n	8003ecc <_svfiprintf_r+0x2c>
 8004072:	ab03      	add	r3, sp, #12
 8004074:	9300      	str	r3, [sp, #0]
 8004076:	462a      	mov	r2, r5
 8004078:	4638      	mov	r0, r7
 800407a:	4b06      	ldr	r3, [pc, #24]	@ (8004094 <_svfiprintf_r+0x1f4>)
 800407c:	a904      	add	r1, sp, #16
 800407e:	f000 f87d 	bl	800417c <_printf_i>
 8004082:	e7ed      	b.n	8004060 <_svfiprintf_r+0x1c0>
 8004084:	08004643 	.word	0x08004643
 8004088:	08004649 	.word	0x08004649
 800408c:	0800464d 	.word	0x0800464d
 8004090:	00000000 	.word	0x00000000
 8004094:	08003de9 	.word	0x08003de9

08004098 <_printf_common>:
 8004098:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800409c:	4616      	mov	r6, r2
 800409e:	4698      	mov	r8, r3
 80040a0:	688a      	ldr	r2, [r1, #8]
 80040a2:	690b      	ldr	r3, [r1, #16]
 80040a4:	4607      	mov	r7, r0
 80040a6:	4293      	cmp	r3, r2
 80040a8:	bfb8      	it	lt
 80040aa:	4613      	movlt	r3, r2
 80040ac:	6033      	str	r3, [r6, #0]
 80040ae:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80040b2:	460c      	mov	r4, r1
 80040b4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80040b8:	b10a      	cbz	r2, 80040be <_printf_common+0x26>
 80040ba:	3301      	adds	r3, #1
 80040bc:	6033      	str	r3, [r6, #0]
 80040be:	6823      	ldr	r3, [r4, #0]
 80040c0:	0699      	lsls	r1, r3, #26
 80040c2:	bf42      	ittt	mi
 80040c4:	6833      	ldrmi	r3, [r6, #0]
 80040c6:	3302      	addmi	r3, #2
 80040c8:	6033      	strmi	r3, [r6, #0]
 80040ca:	6825      	ldr	r5, [r4, #0]
 80040cc:	f015 0506 	ands.w	r5, r5, #6
 80040d0:	d106      	bne.n	80040e0 <_printf_common+0x48>
 80040d2:	f104 0a19 	add.w	sl, r4, #25
 80040d6:	68e3      	ldr	r3, [r4, #12]
 80040d8:	6832      	ldr	r2, [r6, #0]
 80040da:	1a9b      	subs	r3, r3, r2
 80040dc:	42ab      	cmp	r3, r5
 80040de:	dc2b      	bgt.n	8004138 <_printf_common+0xa0>
 80040e0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80040e4:	6822      	ldr	r2, [r4, #0]
 80040e6:	3b00      	subs	r3, #0
 80040e8:	bf18      	it	ne
 80040ea:	2301      	movne	r3, #1
 80040ec:	0692      	lsls	r2, r2, #26
 80040ee:	d430      	bmi.n	8004152 <_printf_common+0xba>
 80040f0:	4641      	mov	r1, r8
 80040f2:	4638      	mov	r0, r7
 80040f4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80040f8:	47c8      	blx	r9
 80040fa:	3001      	adds	r0, #1
 80040fc:	d023      	beq.n	8004146 <_printf_common+0xae>
 80040fe:	6823      	ldr	r3, [r4, #0]
 8004100:	6922      	ldr	r2, [r4, #16]
 8004102:	f003 0306 	and.w	r3, r3, #6
 8004106:	2b04      	cmp	r3, #4
 8004108:	bf14      	ite	ne
 800410a:	2500      	movne	r5, #0
 800410c:	6833      	ldreq	r3, [r6, #0]
 800410e:	f04f 0600 	mov.w	r6, #0
 8004112:	bf08      	it	eq
 8004114:	68e5      	ldreq	r5, [r4, #12]
 8004116:	f104 041a 	add.w	r4, r4, #26
 800411a:	bf08      	it	eq
 800411c:	1aed      	subeq	r5, r5, r3
 800411e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004122:	bf08      	it	eq
 8004124:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004128:	4293      	cmp	r3, r2
 800412a:	bfc4      	itt	gt
 800412c:	1a9b      	subgt	r3, r3, r2
 800412e:	18ed      	addgt	r5, r5, r3
 8004130:	42b5      	cmp	r5, r6
 8004132:	d11a      	bne.n	800416a <_printf_common+0xd2>
 8004134:	2000      	movs	r0, #0
 8004136:	e008      	b.n	800414a <_printf_common+0xb2>
 8004138:	2301      	movs	r3, #1
 800413a:	4652      	mov	r2, sl
 800413c:	4641      	mov	r1, r8
 800413e:	4638      	mov	r0, r7
 8004140:	47c8      	blx	r9
 8004142:	3001      	adds	r0, #1
 8004144:	d103      	bne.n	800414e <_printf_common+0xb6>
 8004146:	f04f 30ff 	mov.w	r0, #4294967295
 800414a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800414e:	3501      	adds	r5, #1
 8004150:	e7c1      	b.n	80040d6 <_printf_common+0x3e>
 8004152:	2030      	movs	r0, #48	@ 0x30
 8004154:	18e1      	adds	r1, r4, r3
 8004156:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800415a:	1c5a      	adds	r2, r3, #1
 800415c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004160:	4422      	add	r2, r4
 8004162:	3302      	adds	r3, #2
 8004164:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004168:	e7c2      	b.n	80040f0 <_printf_common+0x58>
 800416a:	2301      	movs	r3, #1
 800416c:	4622      	mov	r2, r4
 800416e:	4641      	mov	r1, r8
 8004170:	4638      	mov	r0, r7
 8004172:	47c8      	blx	r9
 8004174:	3001      	adds	r0, #1
 8004176:	d0e6      	beq.n	8004146 <_printf_common+0xae>
 8004178:	3601      	adds	r6, #1
 800417a:	e7d9      	b.n	8004130 <_printf_common+0x98>

0800417c <_printf_i>:
 800417c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004180:	7e0f      	ldrb	r7, [r1, #24]
 8004182:	4691      	mov	r9, r2
 8004184:	2f78      	cmp	r7, #120	@ 0x78
 8004186:	4680      	mov	r8, r0
 8004188:	460c      	mov	r4, r1
 800418a:	469a      	mov	sl, r3
 800418c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800418e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004192:	d807      	bhi.n	80041a4 <_printf_i+0x28>
 8004194:	2f62      	cmp	r7, #98	@ 0x62
 8004196:	d80a      	bhi.n	80041ae <_printf_i+0x32>
 8004198:	2f00      	cmp	r7, #0
 800419a:	f000 80d3 	beq.w	8004344 <_printf_i+0x1c8>
 800419e:	2f58      	cmp	r7, #88	@ 0x58
 80041a0:	f000 80ba 	beq.w	8004318 <_printf_i+0x19c>
 80041a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80041a8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80041ac:	e03a      	b.n	8004224 <_printf_i+0xa8>
 80041ae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80041b2:	2b15      	cmp	r3, #21
 80041b4:	d8f6      	bhi.n	80041a4 <_printf_i+0x28>
 80041b6:	a101      	add	r1, pc, #4	@ (adr r1, 80041bc <_printf_i+0x40>)
 80041b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80041bc:	08004215 	.word	0x08004215
 80041c0:	08004229 	.word	0x08004229
 80041c4:	080041a5 	.word	0x080041a5
 80041c8:	080041a5 	.word	0x080041a5
 80041cc:	080041a5 	.word	0x080041a5
 80041d0:	080041a5 	.word	0x080041a5
 80041d4:	08004229 	.word	0x08004229
 80041d8:	080041a5 	.word	0x080041a5
 80041dc:	080041a5 	.word	0x080041a5
 80041e0:	080041a5 	.word	0x080041a5
 80041e4:	080041a5 	.word	0x080041a5
 80041e8:	0800432b 	.word	0x0800432b
 80041ec:	08004253 	.word	0x08004253
 80041f0:	080042e5 	.word	0x080042e5
 80041f4:	080041a5 	.word	0x080041a5
 80041f8:	080041a5 	.word	0x080041a5
 80041fc:	0800434d 	.word	0x0800434d
 8004200:	080041a5 	.word	0x080041a5
 8004204:	08004253 	.word	0x08004253
 8004208:	080041a5 	.word	0x080041a5
 800420c:	080041a5 	.word	0x080041a5
 8004210:	080042ed 	.word	0x080042ed
 8004214:	6833      	ldr	r3, [r6, #0]
 8004216:	1d1a      	adds	r2, r3, #4
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	6032      	str	r2, [r6, #0]
 800421c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004220:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004224:	2301      	movs	r3, #1
 8004226:	e09e      	b.n	8004366 <_printf_i+0x1ea>
 8004228:	6833      	ldr	r3, [r6, #0]
 800422a:	6820      	ldr	r0, [r4, #0]
 800422c:	1d19      	adds	r1, r3, #4
 800422e:	6031      	str	r1, [r6, #0]
 8004230:	0606      	lsls	r6, r0, #24
 8004232:	d501      	bpl.n	8004238 <_printf_i+0xbc>
 8004234:	681d      	ldr	r5, [r3, #0]
 8004236:	e003      	b.n	8004240 <_printf_i+0xc4>
 8004238:	0645      	lsls	r5, r0, #25
 800423a:	d5fb      	bpl.n	8004234 <_printf_i+0xb8>
 800423c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004240:	2d00      	cmp	r5, #0
 8004242:	da03      	bge.n	800424c <_printf_i+0xd0>
 8004244:	232d      	movs	r3, #45	@ 0x2d
 8004246:	426d      	negs	r5, r5
 8004248:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800424c:	230a      	movs	r3, #10
 800424e:	4859      	ldr	r0, [pc, #356]	@ (80043b4 <_printf_i+0x238>)
 8004250:	e011      	b.n	8004276 <_printf_i+0xfa>
 8004252:	6821      	ldr	r1, [r4, #0]
 8004254:	6833      	ldr	r3, [r6, #0]
 8004256:	0608      	lsls	r0, r1, #24
 8004258:	f853 5b04 	ldr.w	r5, [r3], #4
 800425c:	d402      	bmi.n	8004264 <_printf_i+0xe8>
 800425e:	0649      	lsls	r1, r1, #25
 8004260:	bf48      	it	mi
 8004262:	b2ad      	uxthmi	r5, r5
 8004264:	2f6f      	cmp	r7, #111	@ 0x6f
 8004266:	6033      	str	r3, [r6, #0]
 8004268:	bf14      	ite	ne
 800426a:	230a      	movne	r3, #10
 800426c:	2308      	moveq	r3, #8
 800426e:	4851      	ldr	r0, [pc, #324]	@ (80043b4 <_printf_i+0x238>)
 8004270:	2100      	movs	r1, #0
 8004272:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004276:	6866      	ldr	r6, [r4, #4]
 8004278:	2e00      	cmp	r6, #0
 800427a:	bfa8      	it	ge
 800427c:	6821      	ldrge	r1, [r4, #0]
 800427e:	60a6      	str	r6, [r4, #8]
 8004280:	bfa4      	itt	ge
 8004282:	f021 0104 	bicge.w	r1, r1, #4
 8004286:	6021      	strge	r1, [r4, #0]
 8004288:	b90d      	cbnz	r5, 800428e <_printf_i+0x112>
 800428a:	2e00      	cmp	r6, #0
 800428c:	d04b      	beq.n	8004326 <_printf_i+0x1aa>
 800428e:	4616      	mov	r6, r2
 8004290:	fbb5 f1f3 	udiv	r1, r5, r3
 8004294:	fb03 5711 	mls	r7, r3, r1, r5
 8004298:	5dc7      	ldrb	r7, [r0, r7]
 800429a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800429e:	462f      	mov	r7, r5
 80042a0:	42bb      	cmp	r3, r7
 80042a2:	460d      	mov	r5, r1
 80042a4:	d9f4      	bls.n	8004290 <_printf_i+0x114>
 80042a6:	2b08      	cmp	r3, #8
 80042a8:	d10b      	bne.n	80042c2 <_printf_i+0x146>
 80042aa:	6823      	ldr	r3, [r4, #0]
 80042ac:	07df      	lsls	r7, r3, #31
 80042ae:	d508      	bpl.n	80042c2 <_printf_i+0x146>
 80042b0:	6923      	ldr	r3, [r4, #16]
 80042b2:	6861      	ldr	r1, [r4, #4]
 80042b4:	4299      	cmp	r1, r3
 80042b6:	bfde      	ittt	le
 80042b8:	2330      	movle	r3, #48	@ 0x30
 80042ba:	f806 3c01 	strble.w	r3, [r6, #-1]
 80042be:	f106 36ff 	addle.w	r6, r6, #4294967295
 80042c2:	1b92      	subs	r2, r2, r6
 80042c4:	6122      	str	r2, [r4, #16]
 80042c6:	464b      	mov	r3, r9
 80042c8:	4621      	mov	r1, r4
 80042ca:	4640      	mov	r0, r8
 80042cc:	f8cd a000 	str.w	sl, [sp]
 80042d0:	aa03      	add	r2, sp, #12
 80042d2:	f7ff fee1 	bl	8004098 <_printf_common>
 80042d6:	3001      	adds	r0, #1
 80042d8:	d14a      	bne.n	8004370 <_printf_i+0x1f4>
 80042da:	f04f 30ff 	mov.w	r0, #4294967295
 80042de:	b004      	add	sp, #16
 80042e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042e4:	6823      	ldr	r3, [r4, #0]
 80042e6:	f043 0320 	orr.w	r3, r3, #32
 80042ea:	6023      	str	r3, [r4, #0]
 80042ec:	2778      	movs	r7, #120	@ 0x78
 80042ee:	4832      	ldr	r0, [pc, #200]	@ (80043b8 <_printf_i+0x23c>)
 80042f0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80042f4:	6823      	ldr	r3, [r4, #0]
 80042f6:	6831      	ldr	r1, [r6, #0]
 80042f8:	061f      	lsls	r7, r3, #24
 80042fa:	f851 5b04 	ldr.w	r5, [r1], #4
 80042fe:	d402      	bmi.n	8004306 <_printf_i+0x18a>
 8004300:	065f      	lsls	r7, r3, #25
 8004302:	bf48      	it	mi
 8004304:	b2ad      	uxthmi	r5, r5
 8004306:	6031      	str	r1, [r6, #0]
 8004308:	07d9      	lsls	r1, r3, #31
 800430a:	bf44      	itt	mi
 800430c:	f043 0320 	orrmi.w	r3, r3, #32
 8004310:	6023      	strmi	r3, [r4, #0]
 8004312:	b11d      	cbz	r5, 800431c <_printf_i+0x1a0>
 8004314:	2310      	movs	r3, #16
 8004316:	e7ab      	b.n	8004270 <_printf_i+0xf4>
 8004318:	4826      	ldr	r0, [pc, #152]	@ (80043b4 <_printf_i+0x238>)
 800431a:	e7e9      	b.n	80042f0 <_printf_i+0x174>
 800431c:	6823      	ldr	r3, [r4, #0]
 800431e:	f023 0320 	bic.w	r3, r3, #32
 8004322:	6023      	str	r3, [r4, #0]
 8004324:	e7f6      	b.n	8004314 <_printf_i+0x198>
 8004326:	4616      	mov	r6, r2
 8004328:	e7bd      	b.n	80042a6 <_printf_i+0x12a>
 800432a:	6833      	ldr	r3, [r6, #0]
 800432c:	6825      	ldr	r5, [r4, #0]
 800432e:	1d18      	adds	r0, r3, #4
 8004330:	6961      	ldr	r1, [r4, #20]
 8004332:	6030      	str	r0, [r6, #0]
 8004334:	062e      	lsls	r6, r5, #24
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	d501      	bpl.n	800433e <_printf_i+0x1c2>
 800433a:	6019      	str	r1, [r3, #0]
 800433c:	e002      	b.n	8004344 <_printf_i+0x1c8>
 800433e:	0668      	lsls	r0, r5, #25
 8004340:	d5fb      	bpl.n	800433a <_printf_i+0x1be>
 8004342:	8019      	strh	r1, [r3, #0]
 8004344:	2300      	movs	r3, #0
 8004346:	4616      	mov	r6, r2
 8004348:	6123      	str	r3, [r4, #16]
 800434a:	e7bc      	b.n	80042c6 <_printf_i+0x14a>
 800434c:	6833      	ldr	r3, [r6, #0]
 800434e:	2100      	movs	r1, #0
 8004350:	1d1a      	adds	r2, r3, #4
 8004352:	6032      	str	r2, [r6, #0]
 8004354:	681e      	ldr	r6, [r3, #0]
 8004356:	6862      	ldr	r2, [r4, #4]
 8004358:	4630      	mov	r0, r6
 800435a:	f000 f849 	bl	80043f0 <memchr>
 800435e:	b108      	cbz	r0, 8004364 <_printf_i+0x1e8>
 8004360:	1b80      	subs	r0, r0, r6
 8004362:	6060      	str	r0, [r4, #4]
 8004364:	6863      	ldr	r3, [r4, #4]
 8004366:	6123      	str	r3, [r4, #16]
 8004368:	2300      	movs	r3, #0
 800436a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800436e:	e7aa      	b.n	80042c6 <_printf_i+0x14a>
 8004370:	4632      	mov	r2, r6
 8004372:	4649      	mov	r1, r9
 8004374:	4640      	mov	r0, r8
 8004376:	6923      	ldr	r3, [r4, #16]
 8004378:	47d0      	blx	sl
 800437a:	3001      	adds	r0, #1
 800437c:	d0ad      	beq.n	80042da <_printf_i+0x15e>
 800437e:	6823      	ldr	r3, [r4, #0]
 8004380:	079b      	lsls	r3, r3, #30
 8004382:	d413      	bmi.n	80043ac <_printf_i+0x230>
 8004384:	68e0      	ldr	r0, [r4, #12]
 8004386:	9b03      	ldr	r3, [sp, #12]
 8004388:	4298      	cmp	r0, r3
 800438a:	bfb8      	it	lt
 800438c:	4618      	movlt	r0, r3
 800438e:	e7a6      	b.n	80042de <_printf_i+0x162>
 8004390:	2301      	movs	r3, #1
 8004392:	4632      	mov	r2, r6
 8004394:	4649      	mov	r1, r9
 8004396:	4640      	mov	r0, r8
 8004398:	47d0      	blx	sl
 800439a:	3001      	adds	r0, #1
 800439c:	d09d      	beq.n	80042da <_printf_i+0x15e>
 800439e:	3501      	adds	r5, #1
 80043a0:	68e3      	ldr	r3, [r4, #12]
 80043a2:	9903      	ldr	r1, [sp, #12]
 80043a4:	1a5b      	subs	r3, r3, r1
 80043a6:	42ab      	cmp	r3, r5
 80043a8:	dcf2      	bgt.n	8004390 <_printf_i+0x214>
 80043aa:	e7eb      	b.n	8004384 <_printf_i+0x208>
 80043ac:	2500      	movs	r5, #0
 80043ae:	f104 0619 	add.w	r6, r4, #25
 80043b2:	e7f5      	b.n	80043a0 <_printf_i+0x224>
 80043b4:	08004654 	.word	0x08004654
 80043b8:	08004665 	.word	0x08004665

080043bc <memmove>:
 80043bc:	4288      	cmp	r0, r1
 80043be:	b510      	push	{r4, lr}
 80043c0:	eb01 0402 	add.w	r4, r1, r2
 80043c4:	d902      	bls.n	80043cc <memmove+0x10>
 80043c6:	4284      	cmp	r4, r0
 80043c8:	4623      	mov	r3, r4
 80043ca:	d807      	bhi.n	80043dc <memmove+0x20>
 80043cc:	1e43      	subs	r3, r0, #1
 80043ce:	42a1      	cmp	r1, r4
 80043d0:	d008      	beq.n	80043e4 <memmove+0x28>
 80043d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80043d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80043da:	e7f8      	b.n	80043ce <memmove+0x12>
 80043dc:	4601      	mov	r1, r0
 80043de:	4402      	add	r2, r0
 80043e0:	428a      	cmp	r2, r1
 80043e2:	d100      	bne.n	80043e6 <memmove+0x2a>
 80043e4:	bd10      	pop	{r4, pc}
 80043e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80043ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80043ee:	e7f7      	b.n	80043e0 <memmove+0x24>

080043f0 <memchr>:
 80043f0:	4603      	mov	r3, r0
 80043f2:	b510      	push	{r4, lr}
 80043f4:	b2c9      	uxtb	r1, r1
 80043f6:	4402      	add	r2, r0
 80043f8:	4293      	cmp	r3, r2
 80043fa:	4618      	mov	r0, r3
 80043fc:	d101      	bne.n	8004402 <memchr+0x12>
 80043fe:	2000      	movs	r0, #0
 8004400:	e003      	b.n	800440a <memchr+0x1a>
 8004402:	7804      	ldrb	r4, [r0, #0]
 8004404:	3301      	adds	r3, #1
 8004406:	428c      	cmp	r4, r1
 8004408:	d1f6      	bne.n	80043f8 <memchr+0x8>
 800440a:	bd10      	pop	{r4, pc}

0800440c <memcpy>:
 800440c:	440a      	add	r2, r1
 800440e:	4291      	cmp	r1, r2
 8004410:	f100 33ff 	add.w	r3, r0, #4294967295
 8004414:	d100      	bne.n	8004418 <memcpy+0xc>
 8004416:	4770      	bx	lr
 8004418:	b510      	push	{r4, lr}
 800441a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800441e:	4291      	cmp	r1, r2
 8004420:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004424:	d1f9      	bne.n	800441a <memcpy+0xe>
 8004426:	bd10      	pop	{r4, pc}

08004428 <_realloc_r>:
 8004428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800442c:	4680      	mov	r8, r0
 800442e:	4615      	mov	r5, r2
 8004430:	460c      	mov	r4, r1
 8004432:	b921      	cbnz	r1, 800443e <_realloc_r+0x16>
 8004434:	4611      	mov	r1, r2
 8004436:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800443a:	f7ff bb07 	b.w	8003a4c <_malloc_r>
 800443e:	b92a      	cbnz	r2, 800444c <_realloc_r+0x24>
 8004440:	f7ff fc8a 	bl	8003d58 <_free_r>
 8004444:	2400      	movs	r4, #0
 8004446:	4620      	mov	r0, r4
 8004448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800444c:	f000 f81a 	bl	8004484 <_malloc_usable_size_r>
 8004450:	4285      	cmp	r5, r0
 8004452:	4606      	mov	r6, r0
 8004454:	d802      	bhi.n	800445c <_realloc_r+0x34>
 8004456:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800445a:	d8f4      	bhi.n	8004446 <_realloc_r+0x1e>
 800445c:	4629      	mov	r1, r5
 800445e:	4640      	mov	r0, r8
 8004460:	f7ff faf4 	bl	8003a4c <_malloc_r>
 8004464:	4607      	mov	r7, r0
 8004466:	2800      	cmp	r0, #0
 8004468:	d0ec      	beq.n	8004444 <_realloc_r+0x1c>
 800446a:	42b5      	cmp	r5, r6
 800446c:	462a      	mov	r2, r5
 800446e:	4621      	mov	r1, r4
 8004470:	bf28      	it	cs
 8004472:	4632      	movcs	r2, r6
 8004474:	f7ff ffca 	bl	800440c <memcpy>
 8004478:	4621      	mov	r1, r4
 800447a:	4640      	mov	r0, r8
 800447c:	f7ff fc6c 	bl	8003d58 <_free_r>
 8004480:	463c      	mov	r4, r7
 8004482:	e7e0      	b.n	8004446 <_realloc_r+0x1e>

08004484 <_malloc_usable_size_r>:
 8004484:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004488:	1f18      	subs	r0, r3, #4
 800448a:	2b00      	cmp	r3, #0
 800448c:	bfbc      	itt	lt
 800448e:	580b      	ldrlt	r3, [r1, r0]
 8004490:	18c0      	addlt	r0, r0, r3
 8004492:	4770      	bx	lr

08004494 <_init>:
 8004494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004496:	bf00      	nop
 8004498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800449a:	bc08      	pop	{r3}
 800449c:	469e      	mov	lr, r3
 800449e:	4770      	bx	lr

080044a0 <_fini>:
 80044a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044a2:	bf00      	nop
 80044a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044a6:	bc08      	pop	{r3}
 80044a8:	469e      	mov	lr, r3
 80044aa:	4770      	bx	lr
