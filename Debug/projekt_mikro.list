
projekt_mikro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003cfc  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000214  08003e08  08003e08  00004e08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800401c  0800401c  00006068  2**0
                  CONTENTS
  4 .ARM          00000000  0800401c  0800401c  00006068  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800401c  0800401c  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800401c  0800401c  0000501c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004020  08004020  00005020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004024  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000724  20000068  0800408c  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000078c  0800408c  0000678c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c6fa  00000000  00000000  00006091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000215f  00000000  00000000  0001278b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cf8  00000000  00000000  000148f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a10  00000000  00000000  000155e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018bbb  00000000  00000000  00015ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ef77  00000000  00000000  0002ebb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c4e2  00000000  00000000  0003db2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ca00c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d98  00000000  00000000  000ca050  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000cdde8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08003df0 	.word	0x08003df0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08003df0 	.word	0x08003df0

0800014c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000152:	f107 0310 	add.w	r3, r7, #16
 8000156:	2200      	movs	r2, #0
 8000158:	601a      	str	r2, [r3, #0]
 800015a:	605a      	str	r2, [r3, #4]
 800015c:	609a      	str	r2, [r3, #8]
 800015e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000160:	4b2d      	ldr	r3, [pc, #180]	@ (8000218 <MX_GPIO_Init+0xcc>)
 8000162:	699b      	ldr	r3, [r3, #24]
 8000164:	4a2c      	ldr	r2, [pc, #176]	@ (8000218 <MX_GPIO_Init+0xcc>)
 8000166:	f043 0310 	orr.w	r3, r3, #16
 800016a:	6193      	str	r3, [r2, #24]
 800016c:	4b2a      	ldr	r3, [pc, #168]	@ (8000218 <MX_GPIO_Init+0xcc>)
 800016e:	699b      	ldr	r3, [r3, #24]
 8000170:	f003 0310 	and.w	r3, r3, #16
 8000174:	60fb      	str	r3, [r7, #12]
 8000176:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000178:	4b27      	ldr	r3, [pc, #156]	@ (8000218 <MX_GPIO_Init+0xcc>)
 800017a:	699b      	ldr	r3, [r3, #24]
 800017c:	4a26      	ldr	r2, [pc, #152]	@ (8000218 <MX_GPIO_Init+0xcc>)
 800017e:	f043 0320 	orr.w	r3, r3, #32
 8000182:	6193      	str	r3, [r2, #24]
 8000184:	4b24      	ldr	r3, [pc, #144]	@ (8000218 <MX_GPIO_Init+0xcc>)
 8000186:	699b      	ldr	r3, [r3, #24]
 8000188:	f003 0320 	and.w	r3, r3, #32
 800018c:	60bb      	str	r3, [r7, #8]
 800018e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000190:	4b21      	ldr	r3, [pc, #132]	@ (8000218 <MX_GPIO_Init+0xcc>)
 8000192:	699b      	ldr	r3, [r3, #24]
 8000194:	4a20      	ldr	r2, [pc, #128]	@ (8000218 <MX_GPIO_Init+0xcc>)
 8000196:	f043 0304 	orr.w	r3, r3, #4
 800019a:	6193      	str	r3, [r2, #24]
 800019c:	4b1e      	ldr	r3, [pc, #120]	@ (8000218 <MX_GPIO_Init+0xcc>)
 800019e:	699b      	ldr	r3, [r3, #24]
 80001a0:	f003 0304 	and.w	r3, r3, #4
 80001a4:	607b      	str	r3, [r7, #4]
 80001a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001a8:	4b1b      	ldr	r3, [pc, #108]	@ (8000218 <MX_GPIO_Init+0xcc>)
 80001aa:	699b      	ldr	r3, [r3, #24]
 80001ac:	4a1a      	ldr	r2, [pc, #104]	@ (8000218 <MX_GPIO_Init+0xcc>)
 80001ae:	f043 0308 	orr.w	r3, r3, #8
 80001b2:	6193      	str	r3, [r2, #24]
 80001b4:	4b18      	ldr	r3, [pc, #96]	@ (8000218 <MX_GPIO_Init+0xcc>)
 80001b6:	699b      	ldr	r3, [r3, #24]
 80001b8:	f003 0308 	and.w	r3, r3, #8
 80001bc:	603b      	str	r3, [r7, #0]
 80001be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80001c0:	2200      	movs	r2, #0
 80001c2:	2120      	movs	r1, #32
 80001c4:	4815      	ldr	r0, [pc, #84]	@ (800021c <MX_GPIO_Init+0xd0>)
 80001c6:	f001 fa3b 	bl	8001640 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80001ca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80001ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80001d0:	4b13      	ldr	r3, [pc, #76]	@ (8000220 <MX_GPIO_Init+0xd4>)
 80001d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001d4:	2300      	movs	r3, #0
 80001d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80001d8:	f107 0310 	add.w	r3, r7, #16
 80001dc:	4619      	mov	r1, r3
 80001de:	4811      	ldr	r0, [pc, #68]	@ (8000224 <MX_GPIO_Init+0xd8>)
 80001e0:	f001 f8aa 	bl	8001338 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80001e4:	2320      	movs	r3, #32
 80001e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001e8:	2301      	movs	r3, #1
 80001ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001ec:	2300      	movs	r3, #0
 80001ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001f0:	2302      	movs	r3, #2
 80001f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80001f4:	f107 0310 	add.w	r3, r7, #16
 80001f8:	4619      	mov	r1, r3
 80001fa:	4808      	ldr	r0, [pc, #32]	@ (800021c <MX_GPIO_Init+0xd0>)
 80001fc:	f001 f89c 	bl	8001338 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000200:	2200      	movs	r2, #0
 8000202:	2100      	movs	r1, #0
 8000204:	2028      	movs	r0, #40	@ 0x28
 8000206:	f001 f860 	bl	80012ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800020a:	2028      	movs	r0, #40	@ 0x28
 800020c:	f001 f879 	bl	8001302 <HAL_NVIC_EnableIRQ>

}
 8000210:	bf00      	nop
 8000212:	3720      	adds	r7, #32
 8000214:	46bd      	mov	sp, r7
 8000216:	bd80      	pop	{r7, pc}
 8000218:	40021000 	.word	0x40021000
 800021c:	40010800 	.word	0x40010800
 8000220:	10110000 	.word	0x10110000
 8000224:	40011000 	.word	0x40011000

08000228 <calculate_crc>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* === CRC === */
uint16_t calculate_crc(const char *data, size_t length) {
 8000228:	b480      	push	{r7}
 800022a:	b087      	sub	sp, #28
 800022c:	af00      	add	r7, sp, #0
 800022e:	6078      	str	r0, [r7, #4]
 8000230:	6039      	str	r1, [r7, #0]
	uint16_t crc = 0x0000; // początkowa wartość
 8000232:	2300      	movs	r3, #0
 8000234:	82fb      	strh	r3, [r7, #22]
	uint16_t polynomial = 0xA001; // polinom (odwrócony 0x8005)
 8000236:	f24a 0301 	movw	r3, #40961	@ 0xa001
 800023a:	81bb      	strh	r3, [r7, #12]

	for (size_t i = 0; i < length; i++) {
 800023c:	2300      	movs	r3, #0
 800023e:	613b      	str	r3, [r7, #16]
 8000240:	e022      	b.n	8000288 <calculate_crc+0x60>
		crc ^= (uint8_t)data[i]; // XOR z bieżącym bajtem
 8000242:	687a      	ldr	r2, [r7, #4]
 8000244:	693b      	ldr	r3, [r7, #16]
 8000246:	4413      	add	r3, r2
 8000248:	781b      	ldrb	r3, [r3, #0]
 800024a:	461a      	mov	r2, r3
 800024c:	8afb      	ldrh	r3, [r7, #22]
 800024e:	4053      	eors	r3, r2
 8000250:	82fb      	strh	r3, [r7, #22]
		for (uint8_t bit = 0; bit < 8; bit++) {
 8000252:	2300      	movs	r3, #0
 8000254:	73fb      	strb	r3, [r7, #15]
 8000256:	e011      	b.n	800027c <calculate_crc+0x54>
			if (crc & 0x0001) crc = (crc >> 1) ^ polynomial;
 8000258:	8afb      	ldrh	r3, [r7, #22]
 800025a:	f003 0301 	and.w	r3, r3, #1
 800025e:	2b00      	cmp	r3, #0
 8000260:	d006      	beq.n	8000270 <calculate_crc+0x48>
 8000262:	8afb      	ldrh	r3, [r7, #22]
 8000264:	085b      	lsrs	r3, r3, #1
 8000266:	b29a      	uxth	r2, r3
 8000268:	89bb      	ldrh	r3, [r7, #12]
 800026a:	4053      	eors	r3, r2
 800026c:	82fb      	strh	r3, [r7, #22]
 800026e:	e002      	b.n	8000276 <calculate_crc+0x4e>
			else crc >>= 1;
 8000270:	8afb      	ldrh	r3, [r7, #22]
 8000272:	085b      	lsrs	r3, r3, #1
 8000274:	82fb      	strh	r3, [r7, #22]
		for (uint8_t bit = 0; bit < 8; bit++) {
 8000276:	7bfb      	ldrb	r3, [r7, #15]
 8000278:	3301      	adds	r3, #1
 800027a:	73fb      	strb	r3, [r7, #15]
 800027c:	7bfb      	ldrb	r3, [r7, #15]
 800027e:	2b07      	cmp	r3, #7
 8000280:	d9ea      	bls.n	8000258 <calculate_crc+0x30>
	for (size_t i = 0; i < length; i++) {
 8000282:	693b      	ldr	r3, [r7, #16]
 8000284:	3301      	adds	r3, #1
 8000286:	613b      	str	r3, [r7, #16]
 8000288:	693a      	ldr	r2, [r7, #16]
 800028a:	683b      	ldr	r3, [r7, #0]
 800028c:	429a      	cmp	r2, r3
 800028e:	d3d8      	bcc.n	8000242 <calculate_crc+0x1a>
		}
	}
	return crc;
 8000290:	8afb      	ldrh	r3, [r7, #22]
}
 8000292:	4618      	mov	r0, r3
 8000294:	371c      	adds	r7, #28
 8000296:	46bd      	mov	sp, r7
 8000298:	bc80      	pop	{r7}
 800029a:	4770      	bx	lr

0800029c <calculate_frame_crc>:

uint16_t calculate_frame_crc(Frame *frame) {
 800029c:	b580      	push	{r7, lr}
 800029e:	b084      	sub	sp, #16
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	6078      	str	r0, [r7, #4]
    uint16_t crc = 0x0000; // Początkowa wartość CRC
 80002a4:	2300      	movs	r3, #0
 80002a6:	81fb      	strh	r3, [r7, #14]

    // Oblicz CRC dla pola receiver
    crc = calculate_crc((const char *)frame->receiver, sizeof(frame->receiver)) ^ crc;
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	3303      	adds	r3, #3
 80002ac:	2103      	movs	r1, #3
 80002ae:	4618      	mov	r0, r3
 80002b0:	f7ff ffba 	bl	8000228 <calculate_crc>
 80002b4:	4603      	mov	r3, r0
 80002b6:	461a      	mov	r2, r3
 80002b8:	89fb      	ldrh	r3, [r7, #14]
 80002ba:	4053      	eors	r3, r2
 80002bc:	81fb      	strh	r3, [r7, #14]

    // Oblicz CRC dla pola sender
    crc = calculate_crc((const char *)frame->sender, sizeof(frame->sender));
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	2103      	movs	r1, #3
 80002c2:	4618      	mov	r0, r3
 80002c4:	f7ff ffb0 	bl	8000228 <calculate_crc>
 80002c8:	4603      	mov	r3, r0
 80002ca:	81fb      	strh	r3, [r7, #14]

    // Oblicz CRC dla pola length
    crc = calculate_crc((const char *)frame->length, sizeof(frame->length)) ^ crc;
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	3306      	adds	r3, #6
 80002d0:	2104      	movs	r1, #4
 80002d2:	4618      	mov	r0, r3
 80002d4:	f7ff ffa8 	bl	8000228 <calculate_crc>
 80002d8:	4603      	mov	r3, r0
 80002da:	461a      	mov	r2, r3
 80002dc:	89fb      	ldrh	r3, [r7, #14]
 80002de:	4053      	eors	r3, r2
 80002e0:	81fb      	strh	r3, [r7, #14]

    // Oblicz CRC dla pola data
    crc = calculate_crc((const char *)frame->data, sizeof(frame->data)) ^ crc;
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	330a      	adds	r3, #10
 80002e6:	f240 1101 	movw	r1, #257	@ 0x101
 80002ea:	4618      	mov	r0, r3
 80002ec:	f7ff ff9c 	bl	8000228 <calculate_crc>
 80002f0:	4603      	mov	r3, r0
 80002f2:	461a      	mov	r2, r3
 80002f4:	89fb      	ldrh	r3, [r7, #14]
 80002f6:	4053      	eors	r3, r2
 80002f8:	81fb      	strh	r3, [r7, #14]

    return crc;
 80002fa:	89fb      	ldrh	r3, [r7, #14]
}
 80002fc:	4618      	mov	r0, r3
 80002fe:	3710      	adds	r7, #16
 8000300:	46bd      	mov	sp, r7
 8000302:	bd80      	pop	{r7, pc}

08000304 <increase_usart_rx_busy>:

void increase_usart_tx_empty() {
    USART_TX_EMPTY = (USART_TX_EMPTY + 1) % USART_TXBUF_SIZE;
}

void increase_usart_rx_busy() {
 8000304:	b480      	push	{r7}
 8000306:	af00      	add	r7, sp, #0
	USART_RX_BUSY = (USART_RX_BUSY + 1) % USART_RXBUF_SIZE;
 8000308:	4b08      	ldr	r3, [pc, #32]	@ (800032c <increase_usart_rx_busy+0x28>)
 800030a:	881b      	ldrh	r3, [r3, #0]
 800030c:	b29b      	uxth	r3, r3
 800030e:	3301      	adds	r3, #1
 8000310:	425a      	negs	r2, r3
 8000312:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000316:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800031a:	bf58      	it	pl
 800031c:	4253      	negpl	r3, r2
 800031e:	b29a      	uxth	r2, r3
 8000320:	4b02      	ldr	r3, [pc, #8]	@ (800032c <increase_usart_rx_busy+0x28>)
 8000322:	801a      	strh	r2, [r3, #0]
}
 8000324:	bf00      	nop
 8000326:	46bd      	mov	sp, r7
 8000328:	bc80      	pop	{r7}
 800032a:	4770      	bx	lr
 800032c:	20000486 	.word	0x20000486

08000330 <usart_rx_has_data>:
/* === BUFFER EMPTY CHECK FUNCTIONS === */
uint8_t usart_tx_has_data() {
    return USART_TX_EMPTY != USART_TX_BUSY;
}

uint8_t usart_rx_has_data() {
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0
    return USART_RX_EMPTY != USART_RX_BUSY;
 8000334:	4b07      	ldr	r3, [pc, #28]	@ (8000354 <usart_rx_has_data+0x24>)
 8000336:	881b      	ldrh	r3, [r3, #0]
 8000338:	b29a      	uxth	r2, r3
 800033a:	4b07      	ldr	r3, [pc, #28]	@ (8000358 <usart_rx_has_data+0x28>)
 800033c:	881b      	ldrh	r3, [r3, #0]
 800033e:	b29b      	uxth	r3, r3
 8000340:	429a      	cmp	r2, r3
 8000342:	bf14      	ite	ne
 8000344:	2301      	movne	r3, #1
 8000346:	2300      	moveq	r3, #0
 8000348:	b2db      	uxtb	r3, r3
}
 800034a:	4618      	mov	r0, r3
 800034c:	46bd      	mov	sp, r7
 800034e:	bc80      	pop	{r7}
 8000350:	4770      	bx	lr
 8000352:	bf00      	nop
 8000354:	20000484 	.word	0x20000484
 8000358:	20000486 	.word	0x20000486

0800035c <USART_getchar>:
            HAL_UART_Transmit_IT(&huart2, &tmp, 1); // bajt wysłany, można wysłać następny
        }
    }
}

int16_t USART_getchar(){
 800035c:	b580      	push	{r7, lr}
 800035e:	b082      	sub	sp, #8
 8000360:	af00      	add	r7, sp, #0
	int16_t tmp;
	if (usart_rx_has_data()) {
 8000362:	f7ff ffe5 	bl	8000330 <usart_rx_has_data>
 8000366:	4603      	mov	r3, r0
 8000368:	2b00      	cmp	r3, #0
 800036a:	d00b      	beq.n	8000384 <USART_getchar+0x28>
		 tmp = USART_BUF_RX[USART_RX_BUSY];
 800036c:	4b08      	ldr	r3, [pc, #32]	@ (8000390 <USART_getchar+0x34>)
 800036e:	881b      	ldrh	r3, [r3, #0]
 8000370:	b29b      	uxth	r3, r3
 8000372:	461a      	mov	r2, r3
 8000374:	4b07      	ldr	r3, [pc, #28]	@ (8000394 <USART_getchar+0x38>)
 8000376:	5c9b      	ldrb	r3, [r3, r2]
 8000378:	80fb      	strh	r3, [r7, #6]
		 increase_usart_rx_busy();
 800037a:	f7ff ffc3 	bl	8000304 <increase_usart_rx_busy>
		 return tmp;
 800037e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000382:	e001      	b.n	8000388 <USART_getchar+0x2c>
	} else return -1;
 8000384:	f04f 33ff 	mov.w	r3, #4294967295

}
 8000388:	4618      	mov	r0, r3
 800038a:	3708      	adds	r7, #8
 800038c:	46bd      	mov	sp, r7
 800038e:	bd80      	pop	{r7, pc}
 8000390:	20000486 	.word	0x20000486
 8000394:	20000084 	.word	0x20000084

08000398 <validate_and_atoi>:
		HAL_UART_Transmit_IT(&huart2, &tmp, 1);
	}
	__enable_irq();
}

uint16_t validate_and_atoi(const char *str, size_t length) {
 8000398:	b580      	push	{r7, lr}
 800039a:	b084      	sub	sp, #16
 800039c:	af00      	add	r7, sp, #0
 800039e:	6078      	str	r0, [r7, #4]
 80003a0:	6039      	str	r1, [r7, #0]
    uint16_t result = 0;
 80003a2:	2300      	movs	r3, #0
 80003a4:	81fb      	strh	r3, [r7, #14]

    // sprawdzanie czy kazdy znak to cyfra
    for (size_t i = 0; i < length; i++) {
 80003a6:	2300      	movs	r3, #0
 80003a8:	60bb      	str	r3, [r7, #8]
 80003aa:	e027      	b.n	80003fc <validate_and_atoi+0x64>
        if (str[i] < '0' || str[i] > '9') {
 80003ac:	687a      	ldr	r2, [r7, #4]
 80003ae:	68bb      	ldr	r3, [r7, #8]
 80003b0:	4413      	add	r3, r2
 80003b2:	781b      	ldrb	r3, [r3, #0]
 80003b4:	2b2f      	cmp	r3, #47	@ 0x2f
 80003b6:	d905      	bls.n	80003c4 <validate_and_atoi+0x2c>
 80003b8:	687a      	ldr	r2, [r7, #4]
 80003ba:	68bb      	ldr	r3, [r7, #8]
 80003bc:	4413      	add	r3, r2
 80003be:	781b      	ldrb	r3, [r3, #0]
 80003c0:	2b39      	cmp	r3, #57	@ 0x39
 80003c2:	d90a      	bls.n	80003da <validate_and_atoi+0x42>
            printf("invalid char '%c' during atoi\n", str[i]);
 80003c4:	687a      	ldr	r2, [r7, #4]
 80003c6:	68bb      	ldr	r3, [r7, #8]
 80003c8:	4413      	add	r3, r2
 80003ca:	781b      	ldrb	r3, [r3, #0]
 80003cc:	4619      	mov	r1, r3
 80003ce:	4810      	ldr	r0, [pc, #64]	@ (8000410 <validate_and_atoi+0x78>)
 80003d0:	f002 ff32 	bl	8003238 <iprintf>
            return 65535; // maksymalna wartosc uint16 jako kod bledu
 80003d4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80003d8:	e015      	b.n	8000406 <validate_and_atoi+0x6e>
        }
        result = (result * 10) + (str[i] - '0');
 80003da:	89fb      	ldrh	r3, [r7, #14]
 80003dc:	461a      	mov	r2, r3
 80003de:	0092      	lsls	r2, r2, #2
 80003e0:	4413      	add	r3, r2
 80003e2:	005b      	lsls	r3, r3, #1
 80003e4:	b29b      	uxth	r3, r3
 80003e6:	6879      	ldr	r1, [r7, #4]
 80003e8:	68ba      	ldr	r2, [r7, #8]
 80003ea:	440a      	add	r2, r1
 80003ec:	7812      	ldrb	r2, [r2, #0]
 80003ee:	4413      	add	r3, r2
 80003f0:	b29b      	uxth	r3, r3
 80003f2:	3b30      	subs	r3, #48	@ 0x30
 80003f4:	81fb      	strh	r3, [r7, #14]
    for (size_t i = 0; i < length; i++) {
 80003f6:	68bb      	ldr	r3, [r7, #8]
 80003f8:	3301      	adds	r3, #1
 80003fa:	60bb      	str	r3, [r7, #8]
 80003fc:	68ba      	ldr	r2, [r7, #8]
 80003fe:	683b      	ldr	r3, [r7, #0]
 8000400:	429a      	cmp	r2, r3
 8000402:	d3d3      	bcc.n	80003ac <validate_and_atoi+0x14>
    }

    return result;
 8000404:	89fb      	ldrh	r3, [r7, #14]
}
 8000406:	4618      	mov	r0, r3
 8000408:	3710      	adds	r7, #16
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	08003e10 	.word	0x08003e10

08000414 <process_frame>:

void process_frame() {
 8000414:	b590      	push	{r4, r7, lr}
 8000416:	b087      	sub	sp, #28
 8000418:	af00      	add	r7, sp, #0

	if (frame.crc != calculate_frame_crc(&frame)) return;
 800041a:	4b5a      	ldr	r3, [pc, #360]	@ (8000584 <process_frame+0x170>)
 800041c:	f8b3 410c 	ldrh.w	r4, [r3, #268]	@ 0x10c
 8000420:	4858      	ldr	r0, [pc, #352]	@ (8000584 <process_frame+0x170>)
 8000422:	f7ff ff3b 	bl	800029c <calculate_frame_crc>
 8000426:	4603      	mov	r3, r0
 8000428:	429c      	cmp	r4, r3
 800042a:	f040 80a6 	bne.w	800057a <process_frame+0x166>

	//uint16_t length = (atoi(frame.length[0]) * 100) + (atoi(frame.length[1] * 10)) + atoi(frame.length[3]);

	char length_str[4] = {frame.length[0], frame.length[1], frame.length[3], '\0'};
 800042e:	4b55      	ldr	r3, [pc, #340]	@ (8000584 <process_frame+0x170>)
 8000430:	799b      	ldrb	r3, [r3, #6]
 8000432:	733b      	strb	r3, [r7, #12]
 8000434:	4b53      	ldr	r3, [pc, #332]	@ (8000584 <process_frame+0x170>)
 8000436:	79db      	ldrb	r3, [r3, #7]
 8000438:	737b      	strb	r3, [r7, #13]
 800043a:	4b52      	ldr	r3, [pc, #328]	@ (8000584 <process_frame+0x170>)
 800043c:	7a5b      	ldrb	r3, [r3, #9]
 800043e:	73bb      	strb	r3, [r7, #14]
 8000440:	2300      	movs	r3, #0
 8000442:	73fb      	strb	r3, [r7, #15]
	uint16_t length = atoi(length_str);
 8000444:	f107 030c 	add.w	r3, r7, #12
 8000448:	4618      	mov	r0, r3
 800044a:	f002 fcfd 	bl	8002e48 <atoi>
 800044e:	4603      	mov	r3, r0
 8000450:	82fb      	strh	r3, [r7, #22]

	if (length < 5 || length > 256) {
 8000452:	8afb      	ldrh	r3, [r7, #22]
 8000454:	2b04      	cmp	r3, #4
 8000456:	d903      	bls.n	8000460 <process_frame+0x4c>
 8000458:	8afb      	ldrh	r3, [r7, #22]
 800045a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800045e:	d903      	bls.n	8000468 <process_frame+0x54>
		printf("wrong length");
 8000460:	4849      	ldr	r0, [pc, #292]	@ (8000588 <process_frame+0x174>)
 8000462:	f002 fee9 	bl	8003238 <iprintf>
		//err01();
		return;
 8000466:	e089      	b.n	800057c <process_frame+0x168>
	}

	length -= frame.masked_counter; // dla odkodowanej ramki dlugosc musi byc pomniejszona o ilosc zamaskowanych znakow
 8000468:	4b46      	ldr	r3, [pc, #280]	@ (8000584 <process_frame+0x170>)
 800046a:	f8b3 3116 	ldrh.w	r3, [r3, #278]	@ 0x116
 800046e:	8afa      	ldrh	r2, [r7, #22]
 8000470:	1ad3      	subs	r3, r2, r3
 8000472:	82fb      	strh	r3, [r7, #22]


	if (strncmp((char *)frame.data, "READ", 4) == 0) {
 8000474:	2204      	movs	r2, #4
 8000476:	4945      	ldr	r1, [pc, #276]	@ (800058c <process_frame+0x178>)
 8000478:	4845      	ldr	r0, [pc, #276]	@ (8000590 <process_frame+0x17c>)
 800047a:	f002 ff3a 	bl	80032f2 <strncmp>
 800047e:	4603      	mov	r3, r0
 8000480:	2b00      	cmp	r3, #0
 8000482:	d125      	bne.n	80004d0 <process_frame+0xbc>
		if (length != 7) {
 8000484:	8afb      	ldrh	r3, [r7, #22]
 8000486:	2b07      	cmp	r3, #7
 8000488:	d003      	beq.n	8000492 <process_frame+0x7e>
			printf("wrong parameter");
 800048a:	4842      	ldr	r0, [pc, #264]	@ (8000594 <process_frame+0x180>)
 800048c:	f002 fed4 	bl	8003238 <iprintf>
			//err03();
			return;
 8000490:	e074      	b.n	800057c <process_frame+0x168>
		}

		char parameter_str[4] = {frame.data[4], frame.data[5], frame.data[6]};
 8000492:	2300      	movs	r3, #0
 8000494:	60bb      	str	r3, [r7, #8]
 8000496:	4b3b      	ldr	r3, [pc, #236]	@ (8000584 <process_frame+0x170>)
 8000498:	7b9b      	ldrb	r3, [r3, #14]
 800049a:	723b      	strb	r3, [r7, #8]
 800049c:	4b39      	ldr	r3, [pc, #228]	@ (8000584 <process_frame+0x170>)
 800049e:	7bdb      	ldrb	r3, [r3, #15]
 80004a0:	727b      	strb	r3, [r7, #9]
 80004a2:	4b38      	ldr	r3, [pc, #224]	@ (8000584 <process_frame+0x170>)
 80004a4:	7c1b      	ldrb	r3, [r3, #16]
 80004a6:	72bb      	strb	r3, [r7, #10]
		uint16_t parameter = validate_and_atoi(parameter_str, 3);
 80004a8:	f107 0308 	add.w	r3, r7, #8
 80004ac:	2103      	movs	r1, #3
 80004ae:	4618      	mov	r0, r3
 80004b0:	f7ff ff72 	bl	8000398 <validate_and_atoi>
 80004b4:	4603      	mov	r3, r0
 80004b6:	827b      	strh	r3, [r7, #18]

		if (parameter < 1 || parameter > 750) {
 80004b8:	8a7b      	ldrh	r3, [r7, #18]
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d004      	beq.n	80004c8 <process_frame+0xb4>
 80004be:	8a7b      	ldrh	r3, [r7, #18]
 80004c0:	f240 22ee 	movw	r2, #750	@ 0x2ee
 80004c4:	4293      	cmp	r3, r2
 80004c6:	d959      	bls.n	800057c <process_frame+0x168>
			printf("wrong parameter");
 80004c8:	4832      	ldr	r0, [pc, #200]	@ (8000594 <process_frame+0x180>)
 80004ca:	f002 feb5 	bl	8003238 <iprintf>
			//err03();
			return;
 80004ce:	e055      	b.n	800057c <process_frame+0x168>
//		else {
//			read(length);
//			return;
//		}
	}
	else if (strncmp((char *)frame.data, "COUNT_DATA", 10) == 0) {
 80004d0:	220a      	movs	r2, #10
 80004d2:	4931      	ldr	r1, [pc, #196]	@ (8000598 <process_frame+0x184>)
 80004d4:	482e      	ldr	r0, [pc, #184]	@ (8000590 <process_frame+0x17c>)
 80004d6:	f002 ff0c 	bl	80032f2 <strncmp>
 80004da:	4603      	mov	r3, r0
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d107      	bne.n	80004f0 <process_frame+0xdc>
		if (*frame.length != 10) {
 80004e0:	4b28      	ldr	r3, [pc, #160]	@ (8000584 <process_frame+0x170>)
 80004e2:	799b      	ldrb	r3, [r3, #6]
 80004e4:	2b0a      	cmp	r3, #10
 80004e6:	d049      	beq.n	800057c <process_frame+0x168>
			printf("wrong command");
 80004e8:	482c      	ldr	r0, [pc, #176]	@ (800059c <process_frame+0x188>)
 80004ea:	f002 fea5 	bl	8003238 <iprintf>
			//err02();
			return;
 80004ee:	e045      	b.n	800057c <process_frame+0x168>
//			count_data();
//			return;
//		}
	}

	else if (strncmp((char *)frame.data, "SET_INTERVAL", 12) == 0) {
 80004f0:	220c      	movs	r2, #12
 80004f2:	492b      	ldr	r1, [pc, #172]	@ (80005a0 <process_frame+0x18c>)
 80004f4:	4826      	ldr	r0, [pc, #152]	@ (8000590 <process_frame+0x17c>)
 80004f6:	f002 fefc 	bl	80032f2 <strncmp>
 80004fa:	4603      	mov	r3, r0
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d12c      	bne.n	800055a <process_frame+0x146>
		if (*frame.length != 17) {
 8000500:	4b20      	ldr	r3, [pc, #128]	@ (8000584 <process_frame+0x170>)
 8000502:	799b      	ldrb	r3, [r3, #6]
 8000504:	2b11      	cmp	r3, #17
 8000506:	d003      	beq.n	8000510 <process_frame+0xfc>
			printf("wrong command");
 8000508:	4824      	ldr	r0, [pc, #144]	@ (800059c <process_frame+0x188>)
 800050a:	f002 fe95 	bl	8003238 <iprintf>
			//err02();
			return;
 800050e:	e035      	b.n	800057c <process_frame+0x168>
		}

		char parameter_str[6] = { frame.data[12], frame.data[13], frame.data[14], frame.data[15], frame.data[16], '\0' };
 8000510:	4b1c      	ldr	r3, [pc, #112]	@ (8000584 <process_frame+0x170>)
 8000512:	7d9b      	ldrb	r3, [r3, #22]
 8000514:	703b      	strb	r3, [r7, #0]
 8000516:	4b1b      	ldr	r3, [pc, #108]	@ (8000584 <process_frame+0x170>)
 8000518:	7ddb      	ldrb	r3, [r3, #23]
 800051a:	707b      	strb	r3, [r7, #1]
 800051c:	4b19      	ldr	r3, [pc, #100]	@ (8000584 <process_frame+0x170>)
 800051e:	7e1b      	ldrb	r3, [r3, #24]
 8000520:	70bb      	strb	r3, [r7, #2]
 8000522:	4b18      	ldr	r3, [pc, #96]	@ (8000584 <process_frame+0x170>)
 8000524:	7e5b      	ldrb	r3, [r3, #25]
 8000526:	70fb      	strb	r3, [r7, #3]
 8000528:	4b16      	ldr	r3, [pc, #88]	@ (8000584 <process_frame+0x170>)
 800052a:	7e9b      	ldrb	r3, [r3, #26]
 800052c:	713b      	strb	r3, [r7, #4]
 800052e:	2300      	movs	r3, #0
 8000530:	717b      	strb	r3, [r7, #5]
		uint16_t parameter = validate_and_atoi(parameter_str, 5);
 8000532:	463b      	mov	r3, r7
 8000534:	2105      	movs	r1, #5
 8000536:	4618      	mov	r0, r3
 8000538:	f7ff ff2e 	bl	8000398 <validate_and_atoi>
 800053c:	4603      	mov	r3, r0
 800053e:	82bb      	strh	r3, [r7, #20]

		if (parameter < 2000 || parameter > 20000) {
 8000540:	8abb      	ldrh	r3, [r7, #20]
 8000542:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000546:	d304      	bcc.n	8000552 <process_frame+0x13e>
 8000548:	8abb      	ldrh	r3, [r7, #20]
 800054a:	f644 6220 	movw	r2, #20000	@ 0x4e20
 800054e:	4293      	cmp	r3, r2
 8000550:	d914      	bls.n	800057c <process_frame+0x168>
			printf("wrong parameter");
 8000552:	4810      	ldr	r0, [pc, #64]	@ (8000594 <process_frame+0x180>)
 8000554:	f002 fe70 	bl	8003238 <iprintf>
			//err03();
			return;
 8000558:	e010      	b.n	800057c <process_frame+0x168>
//			set_interval(parameter);
//			return;
//		}
	}

	else if (strncmp((char *)frame.data, "GET_INTERVAL", 12) == 0) {
 800055a:	220c      	movs	r2, #12
 800055c:	4911      	ldr	r1, [pc, #68]	@ (80005a4 <process_frame+0x190>)
 800055e:	480c      	ldr	r0, [pc, #48]	@ (8000590 <process_frame+0x17c>)
 8000560:	f002 fec7 	bl	80032f2 <strncmp>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d108      	bne.n	800057c <process_frame+0x168>
		if (*frame.length != 12) {
 800056a:	4b06      	ldr	r3, [pc, #24]	@ (8000584 <process_frame+0x170>)
 800056c:	799b      	ldrb	r3, [r3, #6]
 800056e:	2b0c      	cmp	r3, #12
 8000570:	d004      	beq.n	800057c <process_frame+0x168>
			printf("wrong command");
 8000572:	480a      	ldr	r0, [pc, #40]	@ (800059c <process_frame+0x188>)
 8000574:	f002 fe60 	bl	8003238 <iprintf>
			//err02();
			return;
 8000578:	e000      	b.n	800057c <process_frame+0x168>
	if (frame.crc != calculate_frame_crc(&frame)) return;
 800057a:	bf00      	nop
//		else {
//			get_interval();
//			return
//		}
	}
}
 800057c:	371c      	adds	r7, #28
 800057e:	46bd      	mov	sp, r7
 8000580:	bd90      	pop	{r4, r7, pc}
 8000582:	bf00      	nop
 8000584:	2000048c 	.word	0x2000048c
 8000588:	08003e30 	.word	0x08003e30
 800058c:	08003e40 	.word	0x08003e40
 8000590:	20000496 	.word	0x20000496
 8000594:	08003e48 	.word	0x08003e48
 8000598:	08003e58 	.word	0x08003e58
 800059c:	08003e64 	.word	0x08003e64
 80005a0:	08003e74 	.word	0x08003e74
 80005a4:	08003e84 	.word	0x08003e84

080005a8 <reset_frame>:

void reset_frame() {
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
	memset(&frame, 0, sizeof(Frame));
 80005ac:	f44f 728d 	mov.w	r2, #282	@ 0x11a
 80005b0:	2100      	movs	r1, #0
 80005b2:	4804      	ldr	r0, [pc, #16]	@ (80005c4 <reset_frame+0x1c>)
 80005b4:	f002 fe95 	bl	80032e2 <memset>
	frame.state = FIND_START;
 80005b8:	4b02      	ldr	r3, [pc, #8]	@ (80005c4 <reset_frame+0x1c>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	f883 2118 	strb.w	r2, [r3, #280]	@ 0x118
}
 80005c0:	bf00      	nop
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	2000048c 	.word	0x2000048c

080005c8 <get_frame>:

void get_frame(char ch) {
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b084      	sub	sp, #16
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	4603      	mov	r3, r0
 80005d0:	71fb      	strb	r3, [r7, #7]
	switch (frame.state) {
 80005d2:	4ba3      	ldr	r3, [pc, #652]	@ (8000860 <get_frame+0x298>)
 80005d4:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 80005d8:	2b08      	cmp	r3, #8
 80005da:	f200 8225 	bhi.w	8000a28 <get_frame+0x460>
 80005de:	a201      	add	r2, pc, #4	@ (adr r2, 80005e4 <get_frame+0x1c>)
 80005e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005e4:	08000609 	.word	0x08000609
 80005e8:	0800061d 	.word	0x0800061d
 80005ec:	0800069b 	.word	0x0800069b
 80005f0:	0800071b 	.word	0x0800071b
 80005f4:	08000791 	.word	0x08000791
 80005f8:	08000907 	.word	0x08000907
 80005fc:	080009ef 	.word	0x080009ef
 8000600:	08000815 	.word	0x08000815
 8000604:	08000a1b 	.word	0x08000a1b

	case FIND_START: {
		if (ch == FRAME_START) {
 8000608:	79fb      	ldrb	r3, [r7, #7]
 800060a:	2b3a      	cmp	r3, #58	@ 0x3a
 800060c:	d106      	bne.n	800061c <get_frame+0x54>
			reset_frame();
 800060e:	f7ff ffcb 	bl	80005a8 <reset_frame>
			frame.state = FIND_SENDER;
 8000612:	4b93      	ldr	r3, [pc, #588]	@ (8000860 <get_frame+0x298>)
 8000614:	2201      	movs	r2, #1
 8000616:	f883 2118 	strb.w	r2, [r3, #280]	@ 0x118
			return;
 800061a:	e205      	b.n	8000a28 <get_frame+0x460>
		}
	}

	case FIND_SENDER: {
		if (ch >= 'A' && ch <= 'Z') {
 800061c:	79fb      	ldrb	r3, [r7, #7]
 800061e:	2b40      	cmp	r3, #64	@ 0x40
 8000620:	d92c      	bls.n	800067c <get_frame+0xb4>
 8000622:	79fb      	ldrb	r3, [r7, #7]
 8000624:	2b5a      	cmp	r3, #90	@ 0x5a
 8000626:	d829      	bhi.n	800067c <get_frame+0xb4>
			frame.sender[frame.sender_id] = ch;
 8000628:	4b8d      	ldr	r3, [pc, #564]	@ (8000860 <get_frame+0x298>)
 800062a:	f893 310e 	ldrb.w	r3, [r3, #270]	@ 0x10e
 800062e:	4619      	mov	r1, r3
 8000630:	4a8b      	ldr	r2, [pc, #556]	@ (8000860 <get_frame+0x298>)
 8000632:	79fb      	ldrb	r3, [r7, #7]
 8000634:	5453      	strb	r3, [r2, r1]
			if (frame.sender_id == 1) {
 8000636:	4b8a      	ldr	r3, [pc, #552]	@ (8000860 <get_frame+0x298>)
 8000638:	f893 310e 	ldrb.w	r3, [r3, #270]	@ 0x10e
 800063c:	2b01      	cmp	r3, #1
 800063e:	d114      	bne.n	800066a <get_frame+0xa2>
				frame.sender[2] = '\0';
 8000640:	4b87      	ldr	r3, [pc, #540]	@ (8000860 <get_frame+0x298>)
 8000642:	2200      	movs	r2, #0
 8000644:	709a      	strb	r2, [r3, #2]
				if (strncmp((char*)frame.sender, SENDER, 2) == 0){
 8000646:	2202      	movs	r2, #2
 8000648:	4986      	ldr	r1, [pc, #536]	@ (8000864 <get_frame+0x29c>)
 800064a:	4885      	ldr	r0, [pc, #532]	@ (8000860 <get_frame+0x298>)
 800064c:	f002 fe51 	bl	80032f2 <strncmp>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d104      	bne.n	8000660 <get_frame+0x98>
					frame.state = FIND_RECEIVER;
 8000656:	4b82      	ldr	r3, [pc, #520]	@ (8000860 <get_frame+0x298>)
 8000658:	2202      	movs	r2, #2
 800065a:	f883 2118 	strb.w	r2, [r3, #280]	@ 0x118
					return;
 800065e:	e1e3      	b.n	8000a28 <get_frame+0x460>
				}
				else frame.state = FRAME_ERROR;
 8000660:	4b7f      	ldr	r3, [pc, #508]	@ (8000860 <get_frame+0x298>)
 8000662:	2208      	movs	r2, #8
 8000664:	f883 2118 	strb.w	r2, [r3, #280]	@ 0x118
			if (frame.sender_id == 1) {
 8000668:	e017      	b.n	800069a <get_frame+0xd2>
			}
			else frame.sender_id++;
 800066a:	4b7d      	ldr	r3, [pc, #500]	@ (8000860 <get_frame+0x298>)
 800066c:	f893 310e 	ldrb.w	r3, [r3, #270]	@ 0x10e
 8000670:	3301      	adds	r3, #1
 8000672:	b2da      	uxtb	r2, r3
 8000674:	4b7a      	ldr	r3, [pc, #488]	@ (8000860 <get_frame+0x298>)
 8000676:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
			if (frame.sender_id == 1) {
 800067a:	e00e      	b.n	800069a <get_frame+0xd2>
		}
		else if (ch == FRAME_START || ch == FRAME_END) frame.state = FIND_START;
 800067c:	79fb      	ldrb	r3, [r7, #7]
 800067e:	2b3a      	cmp	r3, #58	@ 0x3a
 8000680:	d002      	beq.n	8000688 <get_frame+0xc0>
 8000682:	79fb      	ldrb	r3, [r7, #7]
 8000684:	2b3b      	cmp	r3, #59	@ 0x3b
 8000686:	d104      	bne.n	8000692 <get_frame+0xca>
 8000688:	4b75      	ldr	r3, [pc, #468]	@ (8000860 <get_frame+0x298>)
 800068a:	2200      	movs	r2, #0
 800068c:	f883 2118 	strb.w	r2, [r3, #280]	@ 0x118
 8000690:	e003      	b.n	800069a <get_frame+0xd2>
		else frame.state = FRAME_ERROR;
 8000692:	4b73      	ldr	r3, [pc, #460]	@ (8000860 <get_frame+0x298>)
 8000694:	2208      	movs	r2, #8
 8000696:	f883 2118 	strb.w	r2, [r3, #280]	@ 0x118
	}

	case FIND_RECEIVER: {
		if (ch >= 'A' && ch <= 'Z') {
 800069a:	79fb      	ldrb	r3, [r7, #7]
 800069c:	2b40      	cmp	r3, #64	@ 0x40
 800069e:	d92d      	bls.n	80006fc <get_frame+0x134>
 80006a0:	79fb      	ldrb	r3, [r7, #7]
 80006a2:	2b5a      	cmp	r3, #90	@ 0x5a
 80006a4:	d82a      	bhi.n	80006fc <get_frame+0x134>
			frame.receiver[frame.receiver_id] = ch;
 80006a6:	4b6e      	ldr	r3, [pc, #440]	@ (8000860 <get_frame+0x298>)
 80006a8:	f893 310f 	ldrb.w	r3, [r3, #271]	@ 0x10f
 80006ac:	461a      	mov	r2, r3
 80006ae:	4b6c      	ldr	r3, [pc, #432]	@ (8000860 <get_frame+0x298>)
 80006b0:	4413      	add	r3, r2
 80006b2:	79fa      	ldrb	r2, [r7, #7]
 80006b4:	70da      	strb	r2, [r3, #3]
			if (frame.receiver_id == 1) {
 80006b6:	4b6a      	ldr	r3, [pc, #424]	@ (8000860 <get_frame+0x298>)
 80006b8:	f893 310f 	ldrb.w	r3, [r3, #271]	@ 0x10f
 80006bc:	2b01      	cmp	r3, #1
 80006be:	d114      	bne.n	80006ea <get_frame+0x122>
				frame.receiver[2] = '\0';
 80006c0:	4b67      	ldr	r3, [pc, #412]	@ (8000860 <get_frame+0x298>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	715a      	strb	r2, [r3, #5]
				if (strncmp((char*)frame.receiver, RECEIVER, 2) == 0) {
 80006c6:	2202      	movs	r2, #2
 80006c8:	4967      	ldr	r1, [pc, #412]	@ (8000868 <get_frame+0x2a0>)
 80006ca:	4868      	ldr	r0, [pc, #416]	@ (800086c <get_frame+0x2a4>)
 80006cc:	f002 fe11 	bl	80032f2 <strncmp>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d104      	bne.n	80006e0 <get_frame+0x118>
					frame.state = FIND_LENGTH;
 80006d6:	4b62      	ldr	r3, [pc, #392]	@ (8000860 <get_frame+0x298>)
 80006d8:	2203      	movs	r2, #3
 80006da:	f883 2118 	strb.w	r2, [r3, #280]	@ 0x118
					return;
 80006de:	e1a3      	b.n	8000a28 <get_frame+0x460>
				}
				else frame.state = FRAME_ERROR;
 80006e0:	4b5f      	ldr	r3, [pc, #380]	@ (8000860 <get_frame+0x298>)
 80006e2:	2208      	movs	r2, #8
 80006e4:	f883 2118 	strb.w	r2, [r3, #280]	@ 0x118
			if (frame.receiver_id == 1) {
 80006e8:	e017      	b.n	800071a <get_frame+0x152>
			}
			else frame.receiver_id++;
 80006ea:	4b5d      	ldr	r3, [pc, #372]	@ (8000860 <get_frame+0x298>)
 80006ec:	f893 310f 	ldrb.w	r3, [r3, #271]	@ 0x10f
 80006f0:	3301      	adds	r3, #1
 80006f2:	b2da      	uxtb	r2, r3
 80006f4:	4b5a      	ldr	r3, [pc, #360]	@ (8000860 <get_frame+0x298>)
 80006f6:	f883 210f 	strb.w	r2, [r3, #271]	@ 0x10f
			if (frame.receiver_id == 1) {
 80006fa:	e00e      	b.n	800071a <get_frame+0x152>
		}
		else if (ch == FRAME_START || ch == FRAME_END) frame.state = FIND_START;
 80006fc:	79fb      	ldrb	r3, [r7, #7]
 80006fe:	2b3a      	cmp	r3, #58	@ 0x3a
 8000700:	d002      	beq.n	8000708 <get_frame+0x140>
 8000702:	79fb      	ldrb	r3, [r7, #7]
 8000704:	2b3b      	cmp	r3, #59	@ 0x3b
 8000706:	d104      	bne.n	8000712 <get_frame+0x14a>
 8000708:	4b55      	ldr	r3, [pc, #340]	@ (8000860 <get_frame+0x298>)
 800070a:	2200      	movs	r2, #0
 800070c:	f883 2118 	strb.w	r2, [r3, #280]	@ 0x118
 8000710:	e003      	b.n	800071a <get_frame+0x152>
		else frame.state = FRAME_ERROR;
 8000712:	4b53      	ldr	r3, [pc, #332]	@ (8000860 <get_frame+0x298>)
 8000714:	2208      	movs	r2, #8
 8000716:	f883 2118 	strb.w	r2, [r3, #280]	@ 0x118
	}

	case FIND_LENGTH: {
		if (ch >= '0' && ch <= '9') {
 800071a:	79fb      	ldrb	r3, [r7, #7]
 800071c:	2b2f      	cmp	r3, #47	@ 0x2f
 800071e:	d928      	bls.n	8000772 <get_frame+0x1aa>
 8000720:	79fb      	ldrb	r3, [r7, #7]
 8000722:	2b39      	cmp	r3, #57	@ 0x39
 8000724:	d825      	bhi.n	8000772 <get_frame+0x1aa>
			frame.length[frame.length_id] = ch;
 8000726:	4b4e      	ldr	r3, [pc, #312]	@ (8000860 <get_frame+0x298>)
 8000728:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 800072c:	461a      	mov	r2, r3
 800072e:	4b4c      	ldr	r3, [pc, #304]	@ (8000860 <get_frame+0x298>)
 8000730:	4413      	add	r3, r2
 8000732:	79fa      	ldrb	r2, [r7, #7]
 8000734:	719a      	strb	r2, [r3, #6]
			if (frame.length_id == 2) {
 8000736:	4b4a      	ldr	r3, [pc, #296]	@ (8000860 <get_frame+0x298>)
 8000738:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 800073c:	2b02      	cmp	r3, #2
 800073e:	d10f      	bne.n	8000760 <get_frame+0x198>
				frame.length[3] = '\0';
 8000740:	4b47      	ldr	r3, [pc, #284]	@ (8000860 <get_frame+0x298>)
 8000742:	2200      	movs	r2, #0
 8000744:	725a      	strb	r2, [r3, #9]
				frame.length_int = atoi((char*)frame.length);
 8000746:	484a      	ldr	r0, [pc, #296]	@ (8000870 <get_frame+0x2a8>)
 8000748:	f002 fb7e 	bl	8002e48 <atoi>
 800074c:	4603      	mov	r3, r0
 800074e:	b29a      	uxth	r2, r3
 8000750:	4b43      	ldr	r3, [pc, #268]	@ (8000860 <get_frame+0x298>)
 8000752:	f8a3 2114 	strh.w	r2, [r3, #276]	@ 0x114
				frame.state = FIND_DATA;
 8000756:	4b42      	ldr	r3, [pc, #264]	@ (8000860 <get_frame+0x298>)
 8000758:	2204      	movs	r2, #4
 800075a:	f883 2118 	strb.w	r2, [r3, #280]	@ 0x118
				return;
 800075e:	e163      	b.n	8000a28 <get_frame+0x460>
			}
			else frame.length_id++;
 8000760:	4b3f      	ldr	r3, [pc, #252]	@ (8000860 <get_frame+0x298>)
 8000762:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 8000766:	3301      	adds	r3, #1
 8000768:	b2da      	uxtb	r2, r3
 800076a:	4b3d      	ldr	r3, [pc, #244]	@ (8000860 <get_frame+0x298>)
 800076c:	f883 2110 	strb.w	r2, [r3, #272]	@ 0x110
			if (frame.length_id == 2) {
 8000770:	e00e      	b.n	8000790 <get_frame+0x1c8>
		}
		else if (ch == FRAME_START || ch == FRAME_END) frame.state = FIND_START;
 8000772:	79fb      	ldrb	r3, [r7, #7]
 8000774:	2b3a      	cmp	r3, #58	@ 0x3a
 8000776:	d002      	beq.n	800077e <get_frame+0x1b6>
 8000778:	79fb      	ldrb	r3, [r7, #7]
 800077a:	2b3b      	cmp	r3, #59	@ 0x3b
 800077c:	d104      	bne.n	8000788 <get_frame+0x1c0>
 800077e:	4b38      	ldr	r3, [pc, #224]	@ (8000860 <get_frame+0x298>)
 8000780:	2200      	movs	r2, #0
 8000782:	f883 2118 	strb.w	r2, [r3, #280]	@ 0x118
 8000786:	e003      	b.n	8000790 <get_frame+0x1c8>
		else frame.state = FRAME_ERROR;
 8000788:	4b35      	ldr	r3, [pc, #212]	@ (8000860 <get_frame+0x298>)
 800078a:	2208      	movs	r2, #8
 800078c:	f883 2118 	strb.w	r2, [r3, #280]	@ 0x118
	}

	case FIND_DATA: {
		if (frame.data_id < frame.length_int) {
 8000790:	4b33      	ldr	r3, [pc, #204]	@ (8000860 <get_frame+0x298>)
 8000792:	f893 3111 	ldrb.w	r3, [r3, #273]	@ 0x111
 8000796:	461a      	mov	r2, r3
 8000798:	4b31      	ldr	r3, [pc, #196]	@ (8000860 <get_frame+0x298>)
 800079a:	f8b3 3114 	ldrh.w	r3, [r3, #276]	@ 0x114
 800079e:	429a      	cmp	r2, r3
 80007a0:	d22b      	bcs.n	80007fa <get_frame+0x232>
			if (ch == MASK) {
 80007a2:	79fb      	ldrb	r3, [r7, #7]
 80007a4:	2b2f      	cmp	r3, #47	@ 0x2f
 80007a6:	d10c      	bne.n	80007c2 <get_frame+0x1fa>
				frame.state = FIND_MASKED;
 80007a8:	4b2d      	ldr	r3, [pc, #180]	@ (8000860 <get_frame+0x298>)
 80007aa:	2207      	movs	r2, #7
 80007ac:	f883 2118 	strb.w	r2, [r3, #280]	@ 0x118
				frame.data_id++;
 80007b0:	4b2b      	ldr	r3, [pc, #172]	@ (8000860 <get_frame+0x298>)
 80007b2:	f893 3111 	ldrb.w	r3, [r3, #273]	@ 0x111
 80007b6:	3301      	adds	r3, #1
 80007b8:	b2da      	uxtb	r2, r3
 80007ba:	4b29      	ldr	r3, [pc, #164]	@ (8000860 <get_frame+0x298>)
 80007bc:	f883 2111 	strb.w	r2, [r3, #273]	@ 0x111
				return;
 80007c0:	e132      	b.n	8000a28 <get_frame+0x460>
			}
			else if (ch == FRAME_START || ch == FRAME_END) {
 80007c2:	79fb      	ldrb	r3, [r7, #7]
 80007c4:	2b3a      	cmp	r3, #58	@ 0x3a
 80007c6:	d002      	beq.n	80007ce <get_frame+0x206>
 80007c8:	79fb      	ldrb	r3, [r7, #7]
 80007ca:	2b3b      	cmp	r3, #59	@ 0x3b
 80007cc:	d104      	bne.n	80007d8 <get_frame+0x210>
				frame.state = FIND_START;
 80007ce:	4b24      	ldr	r3, [pc, #144]	@ (8000860 <get_frame+0x298>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	f883 2118 	strb.w	r2, [r3, #280]	@ 0x118
				return;
 80007d6:	e127      	b.n	8000a28 <get_frame+0x460>
			}
			else {
				frame.data[frame.data_id] = ch;
 80007d8:	4b21      	ldr	r3, [pc, #132]	@ (8000860 <get_frame+0x298>)
 80007da:	f893 3111 	ldrb.w	r3, [r3, #273]	@ 0x111
 80007de:	461a      	mov	r2, r3
 80007e0:	4b1f      	ldr	r3, [pc, #124]	@ (8000860 <get_frame+0x298>)
 80007e2:	4413      	add	r3, r2
 80007e4:	79fa      	ldrb	r2, [r7, #7]
 80007e6:	729a      	strb	r2, [r3, #10]
				frame.data_id++;
 80007e8:	4b1d      	ldr	r3, [pc, #116]	@ (8000860 <get_frame+0x298>)
 80007ea:	f893 3111 	ldrb.w	r3, [r3, #273]	@ 0x111
 80007ee:	3301      	adds	r3, #1
 80007f0:	b2da      	uxtb	r2, r3
 80007f2:	4b1b      	ldr	r3, [pc, #108]	@ (8000860 <get_frame+0x298>)
 80007f4:	f883 2111 	strb.w	r2, [r3, #273]	@ 0x111
 80007f8:	e00c      	b.n	8000814 <get_frame+0x24c>
			}
		}
		else {
			frame.data[frame.data_id] = '\0';
 80007fa:	4b19      	ldr	r3, [pc, #100]	@ (8000860 <get_frame+0x298>)
 80007fc:	f893 3111 	ldrb.w	r3, [r3, #273]	@ 0x111
 8000800:	461a      	mov	r2, r3
 8000802:	4b17      	ldr	r3, [pc, #92]	@ (8000860 <get_frame+0x298>)
 8000804:	4413      	add	r3, r2
 8000806:	2200      	movs	r2, #0
 8000808:	729a      	strb	r2, [r3, #10]
			frame.state = FIND_CRC;
 800080a:	4b15      	ldr	r3, [pc, #84]	@ (8000860 <get_frame+0x298>)
 800080c:	2205      	movs	r2, #5
 800080e:	f883 2118 	strb.w	r2, [r3, #280]	@ 0x118
			return;
 8000812:	e109      	b.n	8000a28 <get_frame+0x460>
		}
	}

	case FIND_MASKED: {
		frame.masked_counter++;
 8000814:	4b12      	ldr	r3, [pc, #72]	@ (8000860 <get_frame+0x298>)
 8000816:	f8b3 3116 	ldrh.w	r3, [r3, #278]	@ 0x116
 800081a:	3301      	adds	r3, #1
 800081c:	b29a      	uxth	r2, r3
 800081e:	4b10      	ldr	r3, [pc, #64]	@ (8000860 <get_frame+0x298>)
 8000820:	f8a3 2116 	strh.w	r2, [r3, #278]	@ 0x116
		switch(ch) {
 8000824:	79fb      	ldrb	r3, [r7, #7]
 8000826:	2b2f      	cmp	r3, #47	@ 0x2f
 8000828:	d039      	beq.n	800089e <get_frame+0x2d6>
 800082a:	2b2f      	cmp	r3, #47	@ 0x2f
 800082c:	dc4c      	bgt.n	80008c8 <get_frame+0x300>
 800082e:	2b2c      	cmp	r3, #44	@ 0x2c
 8000830:	d020      	beq.n	8000874 <get_frame+0x2ac>
 8000832:	2b2e      	cmp	r3, #46	@ 0x2e
 8000834:	d148      	bne.n	80008c8 <get_frame+0x300>
		case MASKED_START: {
			frame.data[frame.data_id] = ':';
 8000836:	4b0a      	ldr	r3, [pc, #40]	@ (8000860 <get_frame+0x298>)
 8000838:	f893 3111 	ldrb.w	r3, [r3, #273]	@ 0x111
 800083c:	461a      	mov	r2, r3
 800083e:	4b08      	ldr	r3, [pc, #32]	@ (8000860 <get_frame+0x298>)
 8000840:	4413      	add	r3, r2
 8000842:	223a      	movs	r2, #58	@ 0x3a
 8000844:	729a      	strb	r2, [r3, #10]
			frame.data_id++;
 8000846:	4b06      	ldr	r3, [pc, #24]	@ (8000860 <get_frame+0x298>)
 8000848:	f893 3111 	ldrb.w	r3, [r3, #273]	@ 0x111
 800084c:	3301      	adds	r3, #1
 800084e:	b2da      	uxtb	r2, r3
 8000850:	4b03      	ldr	r3, [pc, #12]	@ (8000860 <get_frame+0x298>)
 8000852:	f883 2111 	strb.w	r2, [r3, #273]	@ 0x111
			frame.state = FIND_DATA;
 8000856:	4b02      	ldr	r3, [pc, #8]	@ (8000860 <get_frame+0x298>)
 8000858:	2204      	movs	r2, #4
 800085a:	f883 2118 	strb.w	r2, [r3, #280]	@ 0x118
			break;
 800085e:	e038      	b.n	80008d2 <get_frame+0x30a>
 8000860:	2000048c 	.word	0x2000048c
 8000864:	08003e94 	.word	0x08003e94
 8000868:	08003e98 	.word	0x08003e98
 800086c:	2000048f 	.word	0x2000048f
 8000870:	20000492 	.word	0x20000492
		}
		case MASKED_END: {
			frame.data[frame.data_id] = ';';
 8000874:	4b6e      	ldr	r3, [pc, #440]	@ (8000a30 <get_frame+0x468>)
 8000876:	f893 3111 	ldrb.w	r3, [r3, #273]	@ 0x111
 800087a:	461a      	mov	r2, r3
 800087c:	4b6c      	ldr	r3, [pc, #432]	@ (8000a30 <get_frame+0x468>)
 800087e:	4413      	add	r3, r2
 8000880:	223b      	movs	r2, #59	@ 0x3b
 8000882:	729a      	strb	r2, [r3, #10]
			frame.data_id++;
 8000884:	4b6a      	ldr	r3, [pc, #424]	@ (8000a30 <get_frame+0x468>)
 8000886:	f893 3111 	ldrb.w	r3, [r3, #273]	@ 0x111
 800088a:	3301      	adds	r3, #1
 800088c:	b2da      	uxtb	r2, r3
 800088e:	4b68      	ldr	r3, [pc, #416]	@ (8000a30 <get_frame+0x468>)
 8000890:	f883 2111 	strb.w	r2, [r3, #273]	@ 0x111
			frame.state = FIND_DATA;
 8000894:	4b66      	ldr	r3, [pc, #408]	@ (8000a30 <get_frame+0x468>)
 8000896:	2204      	movs	r2, #4
 8000898:	f883 2118 	strb.w	r2, [r3, #280]	@ 0x118
			break;
 800089c:	e019      	b.n	80008d2 <get_frame+0x30a>
		}
		case MASK: {
			frame.data[frame.data_id] = '/';
 800089e:	4b64      	ldr	r3, [pc, #400]	@ (8000a30 <get_frame+0x468>)
 80008a0:	f893 3111 	ldrb.w	r3, [r3, #273]	@ 0x111
 80008a4:	461a      	mov	r2, r3
 80008a6:	4b62      	ldr	r3, [pc, #392]	@ (8000a30 <get_frame+0x468>)
 80008a8:	4413      	add	r3, r2
 80008aa:	222f      	movs	r2, #47	@ 0x2f
 80008ac:	729a      	strb	r2, [r3, #10]
			frame.data_id++;
 80008ae:	4b60      	ldr	r3, [pc, #384]	@ (8000a30 <get_frame+0x468>)
 80008b0:	f893 3111 	ldrb.w	r3, [r3, #273]	@ 0x111
 80008b4:	3301      	adds	r3, #1
 80008b6:	b2da      	uxtb	r2, r3
 80008b8:	4b5d      	ldr	r3, [pc, #372]	@ (8000a30 <get_frame+0x468>)
 80008ba:	f883 2111 	strb.w	r2, [r3, #273]	@ 0x111
			frame.state = FIND_DATA;
 80008be:	4b5c      	ldr	r3, [pc, #368]	@ (8000a30 <get_frame+0x468>)
 80008c0:	2204      	movs	r2, #4
 80008c2:	f883 2118 	strb.w	r2, [r3, #280]	@ 0x118
			break;
 80008c6:	e004      	b.n	80008d2 <get_frame+0x30a>
		}
		default: {
			frame.state = FRAME_ERROR;
 80008c8:	4b59      	ldr	r3, [pc, #356]	@ (8000a30 <get_frame+0x468>)
 80008ca:	2208      	movs	r2, #8
 80008cc:	f883 2118 	strb.w	r2, [r3, #280]	@ 0x118
			break;
 80008d0:	bf00      	nop
		}
		}
		if (frame.data_id < frame.length_int) {
 80008d2:	4b57      	ldr	r3, [pc, #348]	@ (8000a30 <get_frame+0x468>)
 80008d4:	f893 3111 	ldrb.w	r3, [r3, #273]	@ 0x111
 80008d8:	461a      	mov	r2, r3
 80008da:	4b55      	ldr	r3, [pc, #340]	@ (8000a30 <get_frame+0x468>)
 80008dc:	f8b3 3114 	ldrh.w	r3, [r3, #276]	@ 0x114
 80008e0:	429a      	cmp	r2, r3
 80008e2:	d204      	bcs.n	80008ee <get_frame+0x326>
			frame.state = FIND_DATA;
 80008e4:	4b52      	ldr	r3, [pc, #328]	@ (8000a30 <get_frame+0x468>)
 80008e6:	2204      	movs	r2, #4
 80008e8:	f883 2118 	strb.w	r2, [r3, #280]	@ 0x118
 80008ec:	e00b      	b.n	8000906 <get_frame+0x33e>
		} else {
			frame.data[frame.data_id] = '\0';
 80008ee:	4b50      	ldr	r3, [pc, #320]	@ (8000a30 <get_frame+0x468>)
 80008f0:	f893 3111 	ldrb.w	r3, [r3, #273]	@ 0x111
 80008f4:	461a      	mov	r2, r3
 80008f6:	4b4e      	ldr	r3, [pc, #312]	@ (8000a30 <get_frame+0x468>)
 80008f8:	4413      	add	r3, r2
 80008fa:	2200      	movs	r2, #0
 80008fc:	729a      	strb	r2, [r3, #10]
			frame.state = FIND_CRC;
 80008fe:	4b4c      	ldr	r3, [pc, #304]	@ (8000a30 <get_frame+0x468>)
 8000900:	2205      	movs	r2, #5
 8000902:	f883 2118 	strb.w	r2, [r3, #280]	@ 0x118
		}
	}

	case FIND_CRC: {
		if ((ch >= '0' && ch <= '9') || (ch >= 'A' && ch <= 'F')) {
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	2b2f      	cmp	r3, #47	@ 0x2f
 800090a:	d902      	bls.n	8000912 <get_frame+0x34a>
 800090c:	79fb      	ldrb	r3, [r7, #7]
 800090e:	2b39      	cmp	r3, #57	@ 0x39
 8000910:	d905      	bls.n	800091e <get_frame+0x356>
 8000912:	79fb      	ldrb	r3, [r7, #7]
 8000914:	2b40      	cmp	r3, #64	@ 0x40
 8000916:	d95b      	bls.n	80009d0 <get_frame+0x408>
 8000918:	79fb      	ldrb	r3, [r7, #7]
 800091a:	2b46      	cmp	r3, #70	@ 0x46
 800091c:	d858      	bhi.n	80009d0 <get_frame+0x408>
			uint8_t value;
			if (ch >= '0' && ch <= '9') value = ch - '0';
 800091e:	79fb      	ldrb	r3, [r7, #7]
 8000920:	2b2f      	cmp	r3, #47	@ 0x2f
 8000922:	d906      	bls.n	8000932 <get_frame+0x36a>
 8000924:	79fb      	ldrb	r3, [r7, #7]
 8000926:	2b39      	cmp	r3, #57	@ 0x39
 8000928:	d803      	bhi.n	8000932 <get_frame+0x36a>
 800092a:	79fb      	ldrb	r3, [r7, #7]
 800092c:	3b30      	subs	r3, #48	@ 0x30
 800092e:	73fb      	strb	r3, [r7, #15]
 8000930:	e002      	b.n	8000938 <get_frame+0x370>
			else value = ch - 'A' + 10;
 8000932:	79fb      	ldrb	r3, [r7, #7]
 8000934:	3b37      	subs	r3, #55	@ 0x37
 8000936:	73fb      	strb	r3, [r7, #15]

			switch(frame.crc_id) {
 8000938:	4b3d      	ldr	r3, [pc, #244]	@ (8000a30 <get_frame+0x468>)
 800093a:	f893 3112 	ldrb.w	r3, [r3, #274]	@ 0x112
 800093e:	2b03      	cmp	r3, #3
 8000940:	d83d      	bhi.n	80009be <get_frame+0x3f6>
 8000942:	a201      	add	r2, pc, #4	@ (adr r2, 8000948 <get_frame+0x380>)
 8000944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000948:	08000959 	.word	0x08000959
 800094c:	08000969 	.word	0x08000969
 8000950:	08000985 	.word	0x08000985
 8000954:	080009a1 	.word	0x080009a1
			case 0: {
				frame.crc = value << 12;
 8000958:	7bfb      	ldrb	r3, [r7, #15]
 800095a:	b29b      	uxth	r3, r3
 800095c:	031b      	lsls	r3, r3, #12
 800095e:	b29a      	uxth	r2, r3
 8000960:	4b33      	ldr	r3, [pc, #204]	@ (8000a30 <get_frame+0x468>)
 8000962:	f8a3 210c 	strh.w	r2, [r3, #268]	@ 0x10c
				break;
 8000966:	e02a      	b.n	80009be <get_frame+0x3f6>
			}
			case 1: {
				frame.crc |= value << 8;
 8000968:	4b31      	ldr	r3, [pc, #196]	@ (8000a30 <get_frame+0x468>)
 800096a:	f8b3 310c 	ldrh.w	r3, [r3, #268]	@ 0x10c
 800096e:	b21a      	sxth	r2, r3
 8000970:	7bfb      	ldrb	r3, [r7, #15]
 8000972:	021b      	lsls	r3, r3, #8
 8000974:	b21b      	sxth	r3, r3
 8000976:	4313      	orrs	r3, r2
 8000978:	b21b      	sxth	r3, r3
 800097a:	b29a      	uxth	r2, r3
 800097c:	4b2c      	ldr	r3, [pc, #176]	@ (8000a30 <get_frame+0x468>)
 800097e:	f8a3 210c 	strh.w	r2, [r3, #268]	@ 0x10c
				break;
 8000982:	e01c      	b.n	80009be <get_frame+0x3f6>
			}
			case 2: {
				frame.crc |= value << 4;
 8000984:	4b2a      	ldr	r3, [pc, #168]	@ (8000a30 <get_frame+0x468>)
 8000986:	f8b3 310c 	ldrh.w	r3, [r3, #268]	@ 0x10c
 800098a:	b21a      	sxth	r2, r3
 800098c:	7bfb      	ldrb	r3, [r7, #15]
 800098e:	011b      	lsls	r3, r3, #4
 8000990:	b21b      	sxth	r3, r3
 8000992:	4313      	orrs	r3, r2
 8000994:	b21b      	sxth	r3, r3
 8000996:	b29a      	uxth	r2, r3
 8000998:	4b25      	ldr	r3, [pc, #148]	@ (8000a30 <get_frame+0x468>)
 800099a:	f8a3 210c 	strh.w	r2, [r3, #268]	@ 0x10c
				break;
 800099e:	e00e      	b.n	80009be <get_frame+0x3f6>
			}
			case 3: {
				frame.crc |= value;
 80009a0:	4b23      	ldr	r3, [pc, #140]	@ (8000a30 <get_frame+0x468>)
 80009a2:	f8b3 210c 	ldrh.w	r2, [r3, #268]	@ 0x10c
 80009a6:	7bfb      	ldrb	r3, [r7, #15]
 80009a8:	b29b      	uxth	r3, r3
 80009aa:	4313      	orrs	r3, r2
 80009ac:	b29a      	uxth	r2, r3
 80009ae:	4b20      	ldr	r3, [pc, #128]	@ (8000a30 <get_frame+0x468>)
 80009b0:	f8a3 210c 	strh.w	r2, [r3, #268]	@ 0x10c
				frame.state = FIND_END;
 80009b4:	4b1e      	ldr	r3, [pc, #120]	@ (8000a30 <get_frame+0x468>)
 80009b6:	2206      	movs	r2, #6
 80009b8:	f883 2118 	strb.w	r2, [r3, #280]	@ 0x118
				return;
 80009bc:	e034      	b.n	8000a28 <get_frame+0x460>
			}
			}
			frame.crc_id++;
 80009be:	4b1c      	ldr	r3, [pc, #112]	@ (8000a30 <get_frame+0x468>)
 80009c0:	f893 3112 	ldrb.w	r3, [r3, #274]	@ 0x112
 80009c4:	3301      	adds	r3, #1
 80009c6:	b2da      	uxtb	r2, r3
 80009c8:	4b19      	ldr	r3, [pc, #100]	@ (8000a30 <get_frame+0x468>)
 80009ca:	f883 2112 	strb.w	r2, [r3, #274]	@ 0x112
		if ((ch >= '0' && ch <= '9') || (ch >= 'A' && ch <= 'F')) {
 80009ce:	e00e      	b.n	80009ee <get_frame+0x426>
		}
		else if (ch == FRAME_START || ch == FRAME_END) frame.state = FIND_START;
 80009d0:	79fb      	ldrb	r3, [r7, #7]
 80009d2:	2b3a      	cmp	r3, #58	@ 0x3a
 80009d4:	d002      	beq.n	80009dc <get_frame+0x414>
 80009d6:	79fb      	ldrb	r3, [r7, #7]
 80009d8:	2b3b      	cmp	r3, #59	@ 0x3b
 80009da:	d104      	bne.n	80009e6 <get_frame+0x41e>
 80009dc:	4b14      	ldr	r3, [pc, #80]	@ (8000a30 <get_frame+0x468>)
 80009de:	2200      	movs	r2, #0
 80009e0:	f883 2118 	strb.w	r2, [r3, #280]	@ 0x118
 80009e4:	e003      	b.n	80009ee <get_frame+0x426>
		else frame.state = FRAME_ERROR;
 80009e6:	4b12      	ldr	r3, [pc, #72]	@ (8000a30 <get_frame+0x468>)
 80009e8:	2208      	movs	r2, #8
 80009ea:	f883 2118 	strb.w	r2, [r3, #280]	@ 0x118
	}

	case FIND_END: {
		if (ch == FRAME_END) {
 80009ee:	79fb      	ldrb	r3, [r7, #7]
 80009f0:	2b3b      	cmp	r3, #59	@ 0x3b
 80009f2:	d106      	bne.n	8000a02 <get_frame+0x43a>
			frame.complete = true;
 80009f4:	4b0e      	ldr	r3, [pc, #56]	@ (8000a30 <get_frame+0x468>)
 80009f6:	2201      	movs	r2, #1
 80009f8:	f883 2119 	strb.w	r2, [r3, #281]	@ 0x119
			process_frame();
 80009fc:	f7ff fd0a 	bl	8000414 <process_frame>
			return;
 8000a00:	e012      	b.n	8000a28 <get_frame+0x460>
		}
		else if (ch == FRAME_START) frame.state = FIND_START;
 8000a02:	79fb      	ldrb	r3, [r7, #7]
 8000a04:	2b3a      	cmp	r3, #58	@ 0x3a
 8000a06:	d104      	bne.n	8000a12 <get_frame+0x44a>
 8000a08:	4b09      	ldr	r3, [pc, #36]	@ (8000a30 <get_frame+0x468>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	f883 2118 	strb.w	r2, [r3, #280]	@ 0x118
 8000a10:	e003      	b.n	8000a1a <get_frame+0x452>
		else frame.state = FRAME_ERROR;
 8000a12:	4b07      	ldr	r3, [pc, #28]	@ (8000a30 <get_frame+0x468>)
 8000a14:	2208      	movs	r2, #8
 8000a16:	f883 2118 	strb.w	r2, [r3, #280]	@ 0x118
	}

	case FRAME_ERROR: {
		printf("error during frame processing");
 8000a1a:	4806      	ldr	r0, [pc, #24]	@ (8000a34 <get_frame+0x46c>)
 8000a1c:	f002 fc0c 	bl	8003238 <iprintf>
		frame.state = FIND_START;
 8000a20:	4b03      	ldr	r3, [pc, #12]	@ (8000a30 <get_frame+0x468>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	f883 2118 	strb.w	r2, [r3, #280]	@ 0x118
	}

	}
}
 8000a28:	3710      	adds	r7, #16
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	2000048c 	.word	0x2000048c
 8000a34:	08003e9c 	.word	0x08003e9c

08000a38 <handle_char>:

void handle_char() {
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
	//__disable_irq();
	is_handling = 1;
 8000a3e:	4b09      	ldr	r3, [pc, #36]	@ (8000a64 <handle_char+0x2c>)
 8000a40:	2201      	movs	r2, #1
 8000a42:	701a      	strb	r2, [r3, #0]
	//__enable_irq();

	char ch;
	if ((ch = USART_getchar()) >= 0) {
 8000a44:	f7ff fc8a 	bl	800035c <USART_getchar>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	71fb      	strb	r3, [r7, #7]
		get_frame(ch);
 8000a4c:	79fb      	ldrb	r3, [r7, #7]
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f7ff fdba 	bl	80005c8 <get_frame>
	}

	//__disable_irq();
	is_handling = 0;
 8000a54:	4b03      	ldr	r3, [pc, #12]	@ (8000a64 <handle_char+0x2c>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	701a      	strb	r2, [r3, #0]
	//__enable_irq();
}
 8000a5a:	bf00      	nop
 8000a5c:	3708      	adds	r7, #8
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	20000488 	.word	0x20000488

08000a68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a6c:	f000 faf4 	bl	8001058 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a70:	f000 f826 	bl	8000ac0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a74:	f7ff fb6a 	bl	800014c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000a78:	f000 fa60 	bl	8000f3c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000a7c:	f000 f97e 	bl	8000d7c <MX_TIM2_Init>

  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart2, &USART_BUF_RX[USART_RX_EMPTY], 1);
 8000a80:	4b0b      	ldr	r3, [pc, #44]	@ (8000ab0 <main+0x48>)
 8000a82:	881b      	ldrh	r3, [r3, #0]
 8000a84:	b29b      	uxth	r3, r3
 8000a86:	461a      	mov	r2, r3
 8000a88:	4b0a      	ldr	r3, [pc, #40]	@ (8000ab4 <main+0x4c>)
 8000a8a:	4413      	add	r3, r2
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4809      	ldr	r0, [pc, #36]	@ (8000ab8 <main+0x50>)
 8000a92:	f002 f8ed 	bl	8002c70 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (usart_rx_has_data() && !is_handling) {
 8000a96:	f7ff fc4b 	bl	8000330 <usart_rx_has_data>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d0fa      	beq.n	8000a96 <main+0x2e>
 8000aa0:	4b06      	ldr	r3, [pc, #24]	@ (8000abc <main+0x54>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d1f5      	bne.n	8000a96 <main+0x2e>
		  handle_char();
 8000aaa:	f7ff ffc5 	bl	8000a38 <handle_char>
	  if (usart_rx_has_data() && !is_handling) {
 8000aae:	e7f2      	b.n	8000a96 <main+0x2e>
 8000ab0:	20000484 	.word	0x20000484
 8000ab4:	20000084 	.word	0x20000084
 8000ab8:	200005f4 	.word	0x200005f4
 8000abc:	20000488 	.word	0x20000488

08000ac0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b090      	sub	sp, #64	@ 0x40
 8000ac4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ac6:	f107 0318 	add.w	r3, r7, #24
 8000aca:	2228      	movs	r2, #40	@ 0x28
 8000acc:	2100      	movs	r1, #0
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f002 fc07 	bl	80032e2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ad4:	1d3b      	adds	r3, r7, #4
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	601a      	str	r2, [r3, #0]
 8000ada:	605a      	str	r2, [r3, #4]
 8000adc:	609a      	str	r2, [r3, #8]
 8000ade:	60da      	str	r2, [r3, #12]
 8000ae0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ae2:	2302      	movs	r3, #2
 8000ae4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000aea:	2310      	movs	r3, #16
 8000aec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aee:	2302      	movs	r3, #2
 8000af0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000af2:	2300      	movs	r3, #0
 8000af4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000af6:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000afa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000afc:	f107 0318 	add.w	r3, r7, #24
 8000b00:	4618      	mov	r0, r3
 8000b02:	f000 fdd7 	bl	80016b4 <HAL_RCC_OscConfig>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000b0c:	f000 f819 	bl	8000b42 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b10:	230f      	movs	r3, #15
 8000b12:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b14:	2302      	movs	r3, #2
 8000b16:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b1c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b20:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b22:	2300      	movs	r3, #0
 8000b24:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b26:	1d3b      	adds	r3, r7, #4
 8000b28:	2102      	movs	r1, #2
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f001 f844 	bl	8001bb8 <HAL_RCC_ClockConfig>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000b36:	f000 f804 	bl	8000b42 <Error_Handler>
  }
}
 8000b3a:	bf00      	nop
 8000b3c:	3740      	adds	r7, #64	@ 0x40
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}

08000b42 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b42:	b480      	push	{r7}
 8000b44:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b46:	b672      	cpsid	i
}
 8000b48:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b4a:	bf00      	nop
 8000b4c:	e7fd      	b.n	8000b4a <Error_Handler+0x8>
	...

08000b50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b085      	sub	sp, #20
 8000b54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b56:	4b15      	ldr	r3, [pc, #84]	@ (8000bac <HAL_MspInit+0x5c>)
 8000b58:	699b      	ldr	r3, [r3, #24]
 8000b5a:	4a14      	ldr	r2, [pc, #80]	@ (8000bac <HAL_MspInit+0x5c>)
 8000b5c:	f043 0301 	orr.w	r3, r3, #1
 8000b60:	6193      	str	r3, [r2, #24]
 8000b62:	4b12      	ldr	r3, [pc, #72]	@ (8000bac <HAL_MspInit+0x5c>)
 8000b64:	699b      	ldr	r3, [r3, #24]
 8000b66:	f003 0301 	and.w	r3, r3, #1
 8000b6a:	60bb      	str	r3, [r7, #8]
 8000b6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b6e:	4b0f      	ldr	r3, [pc, #60]	@ (8000bac <HAL_MspInit+0x5c>)
 8000b70:	69db      	ldr	r3, [r3, #28]
 8000b72:	4a0e      	ldr	r2, [pc, #56]	@ (8000bac <HAL_MspInit+0x5c>)
 8000b74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b78:	61d3      	str	r3, [r2, #28]
 8000b7a:	4b0c      	ldr	r3, [pc, #48]	@ (8000bac <HAL_MspInit+0x5c>)
 8000b7c:	69db      	ldr	r3, [r3, #28]
 8000b7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b82:	607b      	str	r3, [r7, #4]
 8000b84:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b86:	4b0a      	ldr	r3, [pc, #40]	@ (8000bb0 <HAL_MspInit+0x60>)
 8000b88:	685b      	ldr	r3, [r3, #4]
 8000b8a:	60fb      	str	r3, [r7, #12]
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000b92:	60fb      	str	r3, [r7, #12]
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	4a04      	ldr	r2, [pc, #16]	@ (8000bb0 <HAL_MspInit+0x60>)
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	3714      	adds	r7, #20
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bc80      	pop	{r7}
 8000baa:	4770      	bx	lr
 8000bac:	40021000 	.word	0x40021000
 8000bb0:	40010000 	.word	0x40010000

08000bb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bb8:	bf00      	nop
 8000bba:	e7fd      	b.n	8000bb8 <NMI_Handler+0x4>

08000bbc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bc0:	bf00      	nop
 8000bc2:	e7fd      	b.n	8000bc0 <HardFault_Handler+0x4>

08000bc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bc8:	bf00      	nop
 8000bca:	e7fd      	b.n	8000bc8 <MemManage_Handler+0x4>

08000bcc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bd0:	bf00      	nop
 8000bd2:	e7fd      	b.n	8000bd0 <BusFault_Handler+0x4>

08000bd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bd8:	bf00      	nop
 8000bda:	e7fd      	b.n	8000bd8 <UsageFault_Handler+0x4>

08000bdc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000be0:	bf00      	nop
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bc80      	pop	{r7}
 8000be6:	4770      	bx	lr

08000be8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bec:	bf00      	nop
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bc80      	pop	{r7}
 8000bf2:	4770      	bx	lr

08000bf4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bf8:	bf00      	nop
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bc80      	pop	{r7}
 8000bfe:	4770      	bx	lr

08000c00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c04:	f000 fa6e 	bl	80010e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c08:	bf00      	nop
 8000c0a:	bd80      	pop	{r7, pc}

08000c0c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c10:	4802      	ldr	r0, [pc, #8]	@ (8000c1c <TIM2_IRQHandler+0x10>)
 8000c12:	f001 fa06 	bl	8002022 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c16:	bf00      	nop
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	200005ac 	.word	0x200005ac

08000c20 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000c24:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000c28:	f000 fd22 	bl	8001670 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c2c:	bf00      	nop
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b086      	sub	sp, #24
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	60f8      	str	r0, [r7, #12]
 8000c38:	60b9      	str	r1, [r7, #8]
 8000c3a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	617b      	str	r3, [r7, #20]
 8000c40:	e00a      	b.n	8000c58 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c42:	f3af 8000 	nop.w
 8000c46:	4601      	mov	r1, r0
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	1c5a      	adds	r2, r3, #1
 8000c4c:	60ba      	str	r2, [r7, #8]
 8000c4e:	b2ca      	uxtb	r2, r1
 8000c50:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	3301      	adds	r3, #1
 8000c56:	617b      	str	r3, [r7, #20]
 8000c58:	697a      	ldr	r2, [r7, #20]
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	dbf0      	blt.n	8000c42 <_read+0x12>
  }

  return len;
 8000c60:	687b      	ldr	r3, [r7, #4]
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3718      	adds	r7, #24
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}

08000c6a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c6a:	b580      	push	{r7, lr}
 8000c6c:	b086      	sub	sp, #24
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	60f8      	str	r0, [r7, #12]
 8000c72:	60b9      	str	r1, [r7, #8]
 8000c74:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c76:	2300      	movs	r3, #0
 8000c78:	617b      	str	r3, [r7, #20]
 8000c7a:	e009      	b.n	8000c90 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	1c5a      	adds	r2, r3, #1
 8000c80:	60ba      	str	r2, [r7, #8]
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	4618      	mov	r0, r3
 8000c86:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c8a:	697b      	ldr	r3, [r7, #20]
 8000c8c:	3301      	adds	r3, #1
 8000c8e:	617b      	str	r3, [r7, #20]
 8000c90:	697a      	ldr	r2, [r7, #20]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	429a      	cmp	r2, r3
 8000c96:	dbf1      	blt.n	8000c7c <_write+0x12>
  }
  return len;
 8000c98:	687b      	ldr	r3, [r7, #4]
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3718      	adds	r7, #24
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}

08000ca2 <_close>:

int _close(int file)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	b083      	sub	sp, #12
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000caa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	370c      	adds	r7, #12
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bc80      	pop	{r7}
 8000cb6:	4770      	bx	lr

08000cb8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
 8000cc0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000cc8:	605a      	str	r2, [r3, #4]
  return 0;
 8000cca:	2300      	movs	r3, #0
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	370c      	adds	r7, #12
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bc80      	pop	{r7}
 8000cd4:	4770      	bx	lr

08000cd6 <_isatty>:

int _isatty(int file)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	b083      	sub	sp, #12
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000cde:	2301      	movs	r3, #1
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	370c      	adds	r7, #12
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bc80      	pop	{r7}
 8000ce8:	4770      	bx	lr

08000cea <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cea:	b480      	push	{r7}
 8000cec:	b085      	sub	sp, #20
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	60f8      	str	r0, [r7, #12]
 8000cf2:	60b9      	str	r1, [r7, #8]
 8000cf4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000cf6:	2300      	movs	r3, #0
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	3714      	adds	r7, #20
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bc80      	pop	{r7}
 8000d00:	4770      	bx	lr
	...

08000d04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b086      	sub	sp, #24
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d0c:	4a14      	ldr	r2, [pc, #80]	@ (8000d60 <_sbrk+0x5c>)
 8000d0e:	4b15      	ldr	r3, [pc, #84]	@ (8000d64 <_sbrk+0x60>)
 8000d10:	1ad3      	subs	r3, r2, r3
 8000d12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d18:	4b13      	ldr	r3, [pc, #76]	@ (8000d68 <_sbrk+0x64>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d102      	bne.n	8000d26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d20:	4b11      	ldr	r3, [pc, #68]	@ (8000d68 <_sbrk+0x64>)
 8000d22:	4a12      	ldr	r2, [pc, #72]	@ (8000d6c <_sbrk+0x68>)
 8000d24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d26:	4b10      	ldr	r3, [pc, #64]	@ (8000d68 <_sbrk+0x64>)
 8000d28:	681a      	ldr	r2, [r3, #0]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4413      	add	r3, r2
 8000d2e:	693a      	ldr	r2, [r7, #16]
 8000d30:	429a      	cmp	r2, r3
 8000d32:	d207      	bcs.n	8000d44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d34:	f002 fb46 	bl	80033c4 <__errno>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	220c      	movs	r2, #12
 8000d3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d42:	e009      	b.n	8000d58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d44:	4b08      	ldr	r3, [pc, #32]	@ (8000d68 <_sbrk+0x64>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d4a:	4b07      	ldr	r3, [pc, #28]	@ (8000d68 <_sbrk+0x64>)
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4413      	add	r3, r2
 8000d52:	4a05      	ldr	r2, [pc, #20]	@ (8000d68 <_sbrk+0x64>)
 8000d54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d56:	68fb      	ldr	r3, [r7, #12]
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	3718      	adds	r7, #24
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	20005000 	.word	0x20005000
 8000d64:	00000400 	.word	0x00000400
 8000d68:	200005a8 	.word	0x200005a8
 8000d6c:	20000790 	.word	0x20000790

08000d70 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d74:	bf00      	nop
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bc80      	pop	{r7}
 8000d7a:	4770      	bx	lr

08000d7c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b090      	sub	sp, #64	@ 0x40
 8000d80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d82:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000d86:	2200      	movs	r2, #0
 8000d88:	601a      	str	r2, [r3, #0]
 8000d8a:	605a      	str	r2, [r3, #4]
 8000d8c:	609a      	str	r2, [r3, #8]
 8000d8e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000d90:	f107 031c 	add.w	r3, r7, #28
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
 8000d9c:	60da      	str	r2, [r3, #12]
 8000d9e:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000da0:	f107 030c 	add.w	r3, r7, #12
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	605a      	str	r2, [r3, #4]
 8000daa:	609a      	str	r2, [r3, #8]
 8000dac:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dae:	1d3b      	adds	r3, r7, #4
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000db6:	4b3e      	ldr	r3, [pc, #248]	@ (8000eb0 <MX_TIM2_Init+0x134>)
 8000db8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000dbc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31;
 8000dbe:	4b3c      	ldr	r3, [pc, #240]	@ (8000eb0 <MX_TIM2_Init+0x134>)
 8000dc0:	221f      	movs	r2, #31
 8000dc2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dc4:	4b3a      	ldr	r3, [pc, #232]	@ (8000eb0 <MX_TIM2_Init+0x134>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000dca:	4b39      	ldr	r3, [pc, #228]	@ (8000eb0 <MX_TIM2_Init+0x134>)
 8000dcc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000dd0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dd2:	4b37      	ldr	r3, [pc, #220]	@ (8000eb0 <MX_TIM2_Init+0x134>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dd8:	4b35      	ldr	r3, [pc, #212]	@ (8000eb0 <MX_TIM2_Init+0x134>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000dde:	4834      	ldr	r0, [pc, #208]	@ (8000eb0 <MX_TIM2_Init+0x134>)
 8000de0:	f001 f878 	bl	8001ed4 <HAL_TIM_Base_Init>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000dea:	f7ff feaa 	bl	8000b42 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000df2:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000df4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000df8:	4619      	mov	r1, r3
 8000dfa:	482d      	ldr	r0, [pc, #180]	@ (8000eb0 <MX_TIM2_Init+0x134>)
 8000dfc:	f001 fa9d 	bl	800233a <HAL_TIM_ConfigClockSource>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000e06:	f7ff fe9c 	bl	8000b42 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000e0a:	4829      	ldr	r0, [pc, #164]	@ (8000eb0 <MX_TIM2_Init+0x134>)
 8000e0c:	f001 f8b1 	bl	8001f72 <HAL_TIM_IC_Init>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000e16:	f7ff fe94 	bl	8000b42 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000e1a:	2304      	movs	r3, #4
 8000e1c:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000e1e:	2350      	movs	r3, #80	@ 0x50
 8000e20:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000e22:	2300      	movs	r3, #0
 8000e24:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000e26:	2300      	movs	r3, #0
 8000e28:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000e2e:	f107 031c 	add.w	r3, r7, #28
 8000e32:	4619      	mov	r1, r3
 8000e34:	481e      	ldr	r0, [pc, #120]	@ (8000eb0 <MX_TIM2_Init+0x134>)
 8000e36:	f001 fb47 	bl	80024c8 <HAL_TIM_SlaveConfigSynchro>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_TIM2_Init+0xc8>
  {
    Error_Handler();
 8000e40:	f7ff fe7f 	bl	8000b42 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000e44:	2300      	movs	r3, #0
 8000e46:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8000e50:	2300      	movs	r3, #0
 8000e52:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000e54:	f107 030c 	add.w	r3, r7, #12
 8000e58:	2200      	movs	r2, #0
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4814      	ldr	r0, [pc, #80]	@ (8000eb0 <MX_TIM2_Init+0x134>)
 8000e5e:	f001 f9d0 	bl	8002202 <HAL_TIM_IC_ConfigChannel>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8000e68:	f7ff fe6b 	bl	8000b42 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000e70:	2302      	movs	r3, #2
 8000e72:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000e74:	f107 030c 	add.w	r3, r7, #12
 8000e78:	2204      	movs	r2, #4
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	480c      	ldr	r0, [pc, #48]	@ (8000eb0 <MX_TIM2_Init+0x134>)
 8000e7e:	f001 f9c0 	bl	8002202 <HAL_TIM_IC_ConfigChannel>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <MX_TIM2_Init+0x110>
  {
    Error_Handler();
 8000e88:	f7ff fe5b 	bl	8000b42 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e90:	2300      	movs	r3, #0
 8000e92:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e94:	1d3b      	adds	r3, r7, #4
 8000e96:	4619      	mov	r1, r3
 8000e98:	4805      	ldr	r0, [pc, #20]	@ (8000eb0 <MX_TIM2_Init+0x134>)
 8000e9a:	f001 fe29 	bl	8002af0 <HAL_TIMEx_MasterConfigSynchronization>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_TIM2_Init+0x12c>
  {
    Error_Handler();
 8000ea4:	f7ff fe4d 	bl	8000b42 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ea8:	bf00      	nop
 8000eaa:	3740      	adds	r7, #64	@ 0x40
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	200005ac 	.word	0x200005ac

08000eb4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b088      	sub	sp, #32
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ebc:	f107 0310 	add.w	r3, r7, #16
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	605a      	str	r2, [r3, #4]
 8000ec6:	609a      	str	r2, [r3, #8]
 8000ec8:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM2)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ed2:	d12b      	bne.n	8000f2c <HAL_TIM_Base_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ed4:	4b17      	ldr	r3, [pc, #92]	@ (8000f34 <HAL_TIM_Base_MspInit+0x80>)
 8000ed6:	69db      	ldr	r3, [r3, #28]
 8000ed8:	4a16      	ldr	r2, [pc, #88]	@ (8000f34 <HAL_TIM_Base_MspInit+0x80>)
 8000eda:	f043 0301 	orr.w	r3, r3, #1
 8000ede:	61d3      	str	r3, [r2, #28]
 8000ee0:	4b14      	ldr	r3, [pc, #80]	@ (8000f34 <HAL_TIM_Base_MspInit+0x80>)
 8000ee2:	69db      	ldr	r3, [r3, #28]
 8000ee4:	f003 0301 	and.w	r3, r3, #1
 8000ee8:	60fb      	str	r3, [r7, #12]
 8000eea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eec:	4b11      	ldr	r3, [pc, #68]	@ (8000f34 <HAL_TIM_Base_MspInit+0x80>)
 8000eee:	699b      	ldr	r3, [r3, #24]
 8000ef0:	4a10      	ldr	r2, [pc, #64]	@ (8000f34 <HAL_TIM_Base_MspInit+0x80>)
 8000ef2:	f043 0304 	orr.w	r3, r3, #4
 8000ef6:	6193      	str	r3, [r2, #24]
 8000ef8:	4b0e      	ldr	r3, [pc, #56]	@ (8000f34 <HAL_TIM_Base_MspInit+0x80>)
 8000efa:	699b      	ldr	r3, [r3, #24]
 8000efc:	f003 0304 	and.w	r3, r3, #4
 8000f00:	60bb      	str	r3, [r7, #8]
 8000f02:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f04:	2301      	movs	r3, #1
 8000f06:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f10:	f107 0310 	add.w	r3, r7, #16
 8000f14:	4619      	mov	r1, r3
 8000f16:	4808      	ldr	r0, [pc, #32]	@ (8000f38 <HAL_TIM_Base_MspInit+0x84>)
 8000f18:	f000 fa0e 	bl	8001338 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	2100      	movs	r1, #0
 8000f20:	201c      	movs	r0, #28
 8000f22:	f000 f9d2 	bl	80012ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f26:	201c      	movs	r0, #28
 8000f28:	f000 f9eb 	bl	8001302 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000f2c:	bf00      	nop
 8000f2e:	3720      	adds	r7, #32
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	40021000 	.word	0x40021000
 8000f38:	40010800 	.word	0x40010800

08000f3c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f40:	4b11      	ldr	r3, [pc, #68]	@ (8000f88 <MX_USART2_UART_Init+0x4c>)
 8000f42:	4a12      	ldr	r2, [pc, #72]	@ (8000f8c <MX_USART2_UART_Init+0x50>)
 8000f44:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f46:	4b10      	ldr	r3, [pc, #64]	@ (8000f88 <MX_USART2_UART_Init+0x4c>)
 8000f48:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f4c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000f88 <MX_USART2_UART_Init+0x4c>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f54:	4b0c      	ldr	r3, [pc, #48]	@ (8000f88 <MX_USART2_UART_Init+0x4c>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f5a:	4b0b      	ldr	r3, [pc, #44]	@ (8000f88 <MX_USART2_UART_Init+0x4c>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f60:	4b09      	ldr	r3, [pc, #36]	@ (8000f88 <MX_USART2_UART_Init+0x4c>)
 8000f62:	220c      	movs	r2, #12
 8000f64:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f66:	4b08      	ldr	r3, [pc, #32]	@ (8000f88 <MX_USART2_UART_Init+0x4c>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f6c:	4b06      	ldr	r3, [pc, #24]	@ (8000f88 <MX_USART2_UART_Init+0x4c>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f72:	4805      	ldr	r0, [pc, #20]	@ (8000f88 <MX_USART2_UART_Init+0x4c>)
 8000f74:	f001 fe2c 	bl	8002bd0 <HAL_UART_Init>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f7e:	f7ff fde0 	bl	8000b42 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	200005f4 	.word	0x200005f4
 8000f8c:	40004400 	.word	0x40004400

08000f90 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b088      	sub	sp, #32
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f98:	f107 0310 	add.w	r3, r7, #16
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4a15      	ldr	r2, [pc, #84]	@ (8001000 <HAL_UART_MspInit+0x70>)
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d123      	bne.n	8000ff8 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fb0:	4b14      	ldr	r3, [pc, #80]	@ (8001004 <HAL_UART_MspInit+0x74>)
 8000fb2:	69db      	ldr	r3, [r3, #28]
 8000fb4:	4a13      	ldr	r2, [pc, #76]	@ (8001004 <HAL_UART_MspInit+0x74>)
 8000fb6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fba:	61d3      	str	r3, [r2, #28]
 8000fbc:	4b11      	ldr	r3, [pc, #68]	@ (8001004 <HAL_UART_MspInit+0x74>)
 8000fbe:	69db      	ldr	r3, [r3, #28]
 8000fc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fc4:	60fb      	str	r3, [r7, #12]
 8000fc6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc8:	4b0e      	ldr	r3, [pc, #56]	@ (8001004 <HAL_UART_MspInit+0x74>)
 8000fca:	699b      	ldr	r3, [r3, #24]
 8000fcc:	4a0d      	ldr	r2, [pc, #52]	@ (8001004 <HAL_UART_MspInit+0x74>)
 8000fce:	f043 0304 	orr.w	r3, r3, #4
 8000fd2:	6193      	str	r3, [r2, #24]
 8000fd4:	4b0b      	ldr	r3, [pc, #44]	@ (8001004 <HAL_UART_MspInit+0x74>)
 8000fd6:	699b      	ldr	r3, [r3, #24]
 8000fd8:	f003 0304 	and.w	r3, r3, #4
 8000fdc:	60bb      	str	r3, [r7, #8]
 8000fde:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000fe0:	230c      	movs	r3, #12
 8000fe2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe8:	2302      	movs	r3, #2
 8000fea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fec:	f107 0310 	add.w	r3, r7, #16
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	4805      	ldr	r0, [pc, #20]	@ (8001008 <HAL_UART_MspInit+0x78>)
 8000ff4:	f000 f9a0 	bl	8001338 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000ff8:	bf00      	nop
 8000ffa:	3720      	adds	r7, #32
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	40004400 	.word	0x40004400
 8001004:	40021000 	.word	0x40021000
 8001008:	40010800 	.word	0x40010800

0800100c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800100c:	f7ff feb0 	bl	8000d70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001010:	480b      	ldr	r0, [pc, #44]	@ (8001040 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001012:	490c      	ldr	r1, [pc, #48]	@ (8001044 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001014:	4a0c      	ldr	r2, [pc, #48]	@ (8001048 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001016:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001018:	e002      	b.n	8001020 <LoopCopyDataInit>

0800101a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800101a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800101c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800101e:	3304      	adds	r3, #4

08001020 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001020:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001022:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001024:	d3f9      	bcc.n	800101a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001026:	4a09      	ldr	r2, [pc, #36]	@ (800104c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001028:	4c09      	ldr	r4, [pc, #36]	@ (8001050 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800102a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800102c:	e001      	b.n	8001032 <LoopFillZerobss>

0800102e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800102e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001030:	3204      	adds	r2, #4

08001032 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001032:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001034:	d3fb      	bcc.n	800102e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001036:	f002 f9cb 	bl	80033d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800103a:	f7ff fd15 	bl	8000a68 <main>
  bx lr
 800103e:	4770      	bx	lr
  ldr r0, =_sdata
 8001040:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001044:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001048:	08004024 	.word	0x08004024
  ldr r2, =_sbss
 800104c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001050:	2000078c 	.word	0x2000078c

08001054 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001054:	e7fe      	b.n	8001054 <ADC1_2_IRQHandler>
	...

08001058 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800105c:	4b08      	ldr	r3, [pc, #32]	@ (8001080 <HAL_Init+0x28>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a07      	ldr	r2, [pc, #28]	@ (8001080 <HAL_Init+0x28>)
 8001062:	f043 0310 	orr.w	r3, r3, #16
 8001066:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001068:	2003      	movs	r0, #3
 800106a:	f000 f923 	bl	80012b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800106e:	2000      	movs	r0, #0
 8001070:	f000 f808 	bl	8001084 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001074:	f7ff fd6c 	bl	8000b50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001078:	2300      	movs	r3, #0
}
 800107a:	4618      	mov	r0, r3
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	40022000 	.word	0x40022000

08001084 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800108c:	4b12      	ldr	r3, [pc, #72]	@ (80010d8 <HAL_InitTick+0x54>)
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	4b12      	ldr	r3, [pc, #72]	@ (80010dc <HAL_InitTick+0x58>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	4619      	mov	r1, r3
 8001096:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800109a:	fbb3 f3f1 	udiv	r3, r3, r1
 800109e:	fbb2 f3f3 	udiv	r3, r2, r3
 80010a2:	4618      	mov	r0, r3
 80010a4:	f000 f93b 	bl	800131e <HAL_SYSTICK_Config>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010ae:	2301      	movs	r3, #1
 80010b0:	e00e      	b.n	80010d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2b0f      	cmp	r3, #15
 80010b6:	d80a      	bhi.n	80010ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010b8:	2200      	movs	r2, #0
 80010ba:	6879      	ldr	r1, [r7, #4]
 80010bc:	f04f 30ff 	mov.w	r0, #4294967295
 80010c0:	f000 f903 	bl	80012ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010c4:	4a06      	ldr	r2, [pc, #24]	@ (80010e0 <HAL_InitTick+0x5c>)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010ca:	2300      	movs	r3, #0
 80010cc:	e000      	b.n	80010d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	20000000 	.word	0x20000000
 80010dc:	20000008 	.word	0x20000008
 80010e0:	20000004 	.word	0x20000004

080010e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010e8:	4b05      	ldr	r3, [pc, #20]	@ (8001100 <HAL_IncTick+0x1c>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	461a      	mov	r2, r3
 80010ee:	4b05      	ldr	r3, [pc, #20]	@ (8001104 <HAL_IncTick+0x20>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4413      	add	r3, r2
 80010f4:	4a03      	ldr	r2, [pc, #12]	@ (8001104 <HAL_IncTick+0x20>)
 80010f6:	6013      	str	r3, [r2, #0]
}
 80010f8:	bf00      	nop
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bc80      	pop	{r7}
 80010fe:	4770      	bx	lr
 8001100:	20000008 	.word	0x20000008
 8001104:	2000063c 	.word	0x2000063c

08001108 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  return uwTick;
 800110c:	4b02      	ldr	r3, [pc, #8]	@ (8001118 <HAL_GetTick+0x10>)
 800110e:	681b      	ldr	r3, [r3, #0]
}
 8001110:	4618      	mov	r0, r3
 8001112:	46bd      	mov	sp, r7
 8001114:	bc80      	pop	{r7}
 8001116:	4770      	bx	lr
 8001118:	2000063c 	.word	0x2000063c

0800111c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800111c:	b480      	push	{r7}
 800111e:	b085      	sub	sp, #20
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	f003 0307 	and.w	r3, r3, #7
 800112a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800112c:	4b0c      	ldr	r3, [pc, #48]	@ (8001160 <__NVIC_SetPriorityGrouping+0x44>)
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001132:	68ba      	ldr	r2, [r7, #8]
 8001134:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001138:	4013      	ands	r3, r2
 800113a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001144:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001148:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800114c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800114e:	4a04      	ldr	r2, [pc, #16]	@ (8001160 <__NVIC_SetPriorityGrouping+0x44>)
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	60d3      	str	r3, [r2, #12]
}
 8001154:	bf00      	nop
 8001156:	3714      	adds	r7, #20
 8001158:	46bd      	mov	sp, r7
 800115a:	bc80      	pop	{r7}
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	e000ed00 	.word	0xe000ed00

08001164 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001168:	4b04      	ldr	r3, [pc, #16]	@ (800117c <__NVIC_GetPriorityGrouping+0x18>)
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	0a1b      	lsrs	r3, r3, #8
 800116e:	f003 0307 	and.w	r3, r3, #7
}
 8001172:	4618      	mov	r0, r3
 8001174:	46bd      	mov	sp, r7
 8001176:	bc80      	pop	{r7}
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	e000ed00 	.word	0xe000ed00

08001180 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800118a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118e:	2b00      	cmp	r3, #0
 8001190:	db0b      	blt.n	80011aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001192:	79fb      	ldrb	r3, [r7, #7]
 8001194:	f003 021f 	and.w	r2, r3, #31
 8001198:	4906      	ldr	r1, [pc, #24]	@ (80011b4 <__NVIC_EnableIRQ+0x34>)
 800119a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119e:	095b      	lsrs	r3, r3, #5
 80011a0:	2001      	movs	r0, #1
 80011a2:	fa00 f202 	lsl.w	r2, r0, r2
 80011a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011aa:	bf00      	nop
 80011ac:	370c      	adds	r7, #12
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bc80      	pop	{r7}
 80011b2:	4770      	bx	lr
 80011b4:	e000e100 	.word	0xe000e100

080011b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	4603      	mov	r3, r0
 80011c0:	6039      	str	r1, [r7, #0]
 80011c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	db0a      	blt.n	80011e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	b2da      	uxtb	r2, r3
 80011d0:	490c      	ldr	r1, [pc, #48]	@ (8001204 <__NVIC_SetPriority+0x4c>)
 80011d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d6:	0112      	lsls	r2, r2, #4
 80011d8:	b2d2      	uxtb	r2, r2
 80011da:	440b      	add	r3, r1
 80011dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011e0:	e00a      	b.n	80011f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	b2da      	uxtb	r2, r3
 80011e6:	4908      	ldr	r1, [pc, #32]	@ (8001208 <__NVIC_SetPriority+0x50>)
 80011e8:	79fb      	ldrb	r3, [r7, #7]
 80011ea:	f003 030f 	and.w	r3, r3, #15
 80011ee:	3b04      	subs	r3, #4
 80011f0:	0112      	lsls	r2, r2, #4
 80011f2:	b2d2      	uxtb	r2, r2
 80011f4:	440b      	add	r3, r1
 80011f6:	761a      	strb	r2, [r3, #24]
}
 80011f8:	bf00      	nop
 80011fa:	370c      	adds	r7, #12
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bc80      	pop	{r7}
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	e000e100 	.word	0xe000e100
 8001208:	e000ed00 	.word	0xe000ed00

0800120c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800120c:	b480      	push	{r7}
 800120e:	b089      	sub	sp, #36	@ 0x24
 8001210:	af00      	add	r7, sp, #0
 8001212:	60f8      	str	r0, [r7, #12]
 8001214:	60b9      	str	r1, [r7, #8]
 8001216:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	f003 0307 	and.w	r3, r3, #7
 800121e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	f1c3 0307 	rsb	r3, r3, #7
 8001226:	2b04      	cmp	r3, #4
 8001228:	bf28      	it	cs
 800122a:	2304      	movcs	r3, #4
 800122c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	3304      	adds	r3, #4
 8001232:	2b06      	cmp	r3, #6
 8001234:	d902      	bls.n	800123c <NVIC_EncodePriority+0x30>
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	3b03      	subs	r3, #3
 800123a:	e000      	b.n	800123e <NVIC_EncodePriority+0x32>
 800123c:	2300      	movs	r3, #0
 800123e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001240:	f04f 32ff 	mov.w	r2, #4294967295
 8001244:	69bb      	ldr	r3, [r7, #24]
 8001246:	fa02 f303 	lsl.w	r3, r2, r3
 800124a:	43da      	mvns	r2, r3
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	401a      	ands	r2, r3
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001254:	f04f 31ff 	mov.w	r1, #4294967295
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	fa01 f303 	lsl.w	r3, r1, r3
 800125e:	43d9      	mvns	r1, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001264:	4313      	orrs	r3, r2
         );
}
 8001266:	4618      	mov	r0, r3
 8001268:	3724      	adds	r7, #36	@ 0x24
 800126a:	46bd      	mov	sp, r7
 800126c:	bc80      	pop	{r7}
 800126e:	4770      	bx	lr

08001270 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	3b01      	subs	r3, #1
 800127c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001280:	d301      	bcc.n	8001286 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001282:	2301      	movs	r3, #1
 8001284:	e00f      	b.n	80012a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001286:	4a0a      	ldr	r2, [pc, #40]	@ (80012b0 <SysTick_Config+0x40>)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	3b01      	subs	r3, #1
 800128c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800128e:	210f      	movs	r1, #15
 8001290:	f04f 30ff 	mov.w	r0, #4294967295
 8001294:	f7ff ff90 	bl	80011b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001298:	4b05      	ldr	r3, [pc, #20]	@ (80012b0 <SysTick_Config+0x40>)
 800129a:	2200      	movs	r2, #0
 800129c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800129e:	4b04      	ldr	r3, [pc, #16]	@ (80012b0 <SysTick_Config+0x40>)
 80012a0:	2207      	movs	r2, #7
 80012a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012a4:	2300      	movs	r3, #0
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	e000e010 	.word	0xe000e010

080012b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f7ff ff2d 	bl	800111c <__NVIC_SetPriorityGrouping>
}
 80012c2:	bf00      	nop
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}

080012ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b086      	sub	sp, #24
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	4603      	mov	r3, r0
 80012d2:	60b9      	str	r1, [r7, #8]
 80012d4:	607a      	str	r2, [r7, #4]
 80012d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012d8:	2300      	movs	r3, #0
 80012da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012dc:	f7ff ff42 	bl	8001164 <__NVIC_GetPriorityGrouping>
 80012e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012e2:	687a      	ldr	r2, [r7, #4]
 80012e4:	68b9      	ldr	r1, [r7, #8]
 80012e6:	6978      	ldr	r0, [r7, #20]
 80012e8:	f7ff ff90 	bl	800120c <NVIC_EncodePriority>
 80012ec:	4602      	mov	r2, r0
 80012ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012f2:	4611      	mov	r1, r2
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff ff5f 	bl	80011b8 <__NVIC_SetPriority>
}
 80012fa:	bf00      	nop
 80012fc:	3718      	adds	r7, #24
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}

08001302 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001302:	b580      	push	{r7, lr}
 8001304:	b082      	sub	sp, #8
 8001306:	af00      	add	r7, sp, #0
 8001308:	4603      	mov	r3, r0
 800130a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800130c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff ff35 	bl	8001180 <__NVIC_EnableIRQ>
}
 8001316:	bf00      	nop
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}

0800131e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800131e:	b580      	push	{r7, lr}
 8001320:	b082      	sub	sp, #8
 8001322:	af00      	add	r7, sp, #0
 8001324:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f7ff ffa2 	bl	8001270 <SysTick_Config>
 800132c:	4603      	mov	r3, r0
}
 800132e:	4618      	mov	r0, r3
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
	...

08001338 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001338:	b480      	push	{r7}
 800133a:	b08b      	sub	sp, #44	@ 0x2c
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001342:	2300      	movs	r3, #0
 8001344:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001346:	2300      	movs	r3, #0
 8001348:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800134a:	e169      	b.n	8001620 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800134c:	2201      	movs	r2, #1
 800134e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001350:	fa02 f303 	lsl.w	r3, r2, r3
 8001354:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	69fa      	ldr	r2, [r7, #28]
 800135c:	4013      	ands	r3, r2
 800135e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	429a      	cmp	r2, r3
 8001366:	f040 8158 	bne.w	800161a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	4a9a      	ldr	r2, [pc, #616]	@ (80015d8 <HAL_GPIO_Init+0x2a0>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d05e      	beq.n	8001432 <HAL_GPIO_Init+0xfa>
 8001374:	4a98      	ldr	r2, [pc, #608]	@ (80015d8 <HAL_GPIO_Init+0x2a0>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d875      	bhi.n	8001466 <HAL_GPIO_Init+0x12e>
 800137a:	4a98      	ldr	r2, [pc, #608]	@ (80015dc <HAL_GPIO_Init+0x2a4>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d058      	beq.n	8001432 <HAL_GPIO_Init+0xfa>
 8001380:	4a96      	ldr	r2, [pc, #600]	@ (80015dc <HAL_GPIO_Init+0x2a4>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d86f      	bhi.n	8001466 <HAL_GPIO_Init+0x12e>
 8001386:	4a96      	ldr	r2, [pc, #600]	@ (80015e0 <HAL_GPIO_Init+0x2a8>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d052      	beq.n	8001432 <HAL_GPIO_Init+0xfa>
 800138c:	4a94      	ldr	r2, [pc, #592]	@ (80015e0 <HAL_GPIO_Init+0x2a8>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d869      	bhi.n	8001466 <HAL_GPIO_Init+0x12e>
 8001392:	4a94      	ldr	r2, [pc, #592]	@ (80015e4 <HAL_GPIO_Init+0x2ac>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d04c      	beq.n	8001432 <HAL_GPIO_Init+0xfa>
 8001398:	4a92      	ldr	r2, [pc, #584]	@ (80015e4 <HAL_GPIO_Init+0x2ac>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d863      	bhi.n	8001466 <HAL_GPIO_Init+0x12e>
 800139e:	4a92      	ldr	r2, [pc, #584]	@ (80015e8 <HAL_GPIO_Init+0x2b0>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d046      	beq.n	8001432 <HAL_GPIO_Init+0xfa>
 80013a4:	4a90      	ldr	r2, [pc, #576]	@ (80015e8 <HAL_GPIO_Init+0x2b0>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d85d      	bhi.n	8001466 <HAL_GPIO_Init+0x12e>
 80013aa:	2b12      	cmp	r3, #18
 80013ac:	d82a      	bhi.n	8001404 <HAL_GPIO_Init+0xcc>
 80013ae:	2b12      	cmp	r3, #18
 80013b0:	d859      	bhi.n	8001466 <HAL_GPIO_Init+0x12e>
 80013b2:	a201      	add	r2, pc, #4	@ (adr r2, 80013b8 <HAL_GPIO_Init+0x80>)
 80013b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013b8:	08001433 	.word	0x08001433
 80013bc:	0800140d 	.word	0x0800140d
 80013c0:	0800141f 	.word	0x0800141f
 80013c4:	08001461 	.word	0x08001461
 80013c8:	08001467 	.word	0x08001467
 80013cc:	08001467 	.word	0x08001467
 80013d0:	08001467 	.word	0x08001467
 80013d4:	08001467 	.word	0x08001467
 80013d8:	08001467 	.word	0x08001467
 80013dc:	08001467 	.word	0x08001467
 80013e0:	08001467 	.word	0x08001467
 80013e4:	08001467 	.word	0x08001467
 80013e8:	08001467 	.word	0x08001467
 80013ec:	08001467 	.word	0x08001467
 80013f0:	08001467 	.word	0x08001467
 80013f4:	08001467 	.word	0x08001467
 80013f8:	08001467 	.word	0x08001467
 80013fc:	08001415 	.word	0x08001415
 8001400:	08001429 	.word	0x08001429
 8001404:	4a79      	ldr	r2, [pc, #484]	@ (80015ec <HAL_GPIO_Init+0x2b4>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d013      	beq.n	8001432 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800140a:	e02c      	b.n	8001466 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	623b      	str	r3, [r7, #32]
          break;
 8001412:	e029      	b.n	8001468 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	3304      	adds	r3, #4
 800141a:	623b      	str	r3, [r7, #32]
          break;
 800141c:	e024      	b.n	8001468 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	68db      	ldr	r3, [r3, #12]
 8001422:	3308      	adds	r3, #8
 8001424:	623b      	str	r3, [r7, #32]
          break;
 8001426:	e01f      	b.n	8001468 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	330c      	adds	r3, #12
 800142e:	623b      	str	r3, [r7, #32]
          break;
 8001430:	e01a      	b.n	8001468 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	689b      	ldr	r3, [r3, #8]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d102      	bne.n	8001440 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800143a:	2304      	movs	r3, #4
 800143c:	623b      	str	r3, [r7, #32]
          break;
 800143e:	e013      	b.n	8001468 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	689b      	ldr	r3, [r3, #8]
 8001444:	2b01      	cmp	r3, #1
 8001446:	d105      	bne.n	8001454 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001448:	2308      	movs	r3, #8
 800144a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	69fa      	ldr	r2, [r7, #28]
 8001450:	611a      	str	r2, [r3, #16]
          break;
 8001452:	e009      	b.n	8001468 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001454:	2308      	movs	r3, #8
 8001456:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	69fa      	ldr	r2, [r7, #28]
 800145c:	615a      	str	r2, [r3, #20]
          break;
 800145e:	e003      	b.n	8001468 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001460:	2300      	movs	r3, #0
 8001462:	623b      	str	r3, [r7, #32]
          break;
 8001464:	e000      	b.n	8001468 <HAL_GPIO_Init+0x130>
          break;
 8001466:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001468:	69bb      	ldr	r3, [r7, #24]
 800146a:	2bff      	cmp	r3, #255	@ 0xff
 800146c:	d801      	bhi.n	8001472 <HAL_GPIO_Init+0x13a>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	e001      	b.n	8001476 <HAL_GPIO_Init+0x13e>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	3304      	adds	r3, #4
 8001476:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001478:	69bb      	ldr	r3, [r7, #24]
 800147a:	2bff      	cmp	r3, #255	@ 0xff
 800147c:	d802      	bhi.n	8001484 <HAL_GPIO_Init+0x14c>
 800147e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	e002      	b.n	800148a <HAL_GPIO_Init+0x152>
 8001484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001486:	3b08      	subs	r3, #8
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	210f      	movs	r1, #15
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	fa01 f303 	lsl.w	r3, r1, r3
 8001498:	43db      	mvns	r3, r3
 800149a:	401a      	ands	r2, r3
 800149c:	6a39      	ldr	r1, [r7, #32]
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	fa01 f303 	lsl.w	r3, r1, r3
 80014a4:	431a      	orrs	r2, r3
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	f000 80b1 	beq.w	800161a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80014b8:	4b4d      	ldr	r3, [pc, #308]	@ (80015f0 <HAL_GPIO_Init+0x2b8>)
 80014ba:	699b      	ldr	r3, [r3, #24]
 80014bc:	4a4c      	ldr	r2, [pc, #304]	@ (80015f0 <HAL_GPIO_Init+0x2b8>)
 80014be:	f043 0301 	orr.w	r3, r3, #1
 80014c2:	6193      	str	r3, [r2, #24]
 80014c4:	4b4a      	ldr	r3, [pc, #296]	@ (80015f0 <HAL_GPIO_Init+0x2b8>)
 80014c6:	699b      	ldr	r3, [r3, #24]
 80014c8:	f003 0301 	and.w	r3, r3, #1
 80014cc:	60bb      	str	r3, [r7, #8]
 80014ce:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80014d0:	4a48      	ldr	r2, [pc, #288]	@ (80015f4 <HAL_GPIO_Init+0x2bc>)
 80014d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014d4:	089b      	lsrs	r3, r3, #2
 80014d6:	3302      	adds	r3, #2
 80014d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014dc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80014de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014e0:	f003 0303 	and.w	r3, r3, #3
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	220f      	movs	r2, #15
 80014e8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ec:	43db      	mvns	r3, r3
 80014ee:	68fa      	ldr	r2, [r7, #12]
 80014f0:	4013      	ands	r3, r2
 80014f2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	4a40      	ldr	r2, [pc, #256]	@ (80015f8 <HAL_GPIO_Init+0x2c0>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d013      	beq.n	8001524 <HAL_GPIO_Init+0x1ec>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	4a3f      	ldr	r2, [pc, #252]	@ (80015fc <HAL_GPIO_Init+0x2c4>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d00d      	beq.n	8001520 <HAL_GPIO_Init+0x1e8>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	4a3e      	ldr	r2, [pc, #248]	@ (8001600 <HAL_GPIO_Init+0x2c8>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d007      	beq.n	800151c <HAL_GPIO_Init+0x1e4>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	4a3d      	ldr	r2, [pc, #244]	@ (8001604 <HAL_GPIO_Init+0x2cc>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d101      	bne.n	8001518 <HAL_GPIO_Init+0x1e0>
 8001514:	2303      	movs	r3, #3
 8001516:	e006      	b.n	8001526 <HAL_GPIO_Init+0x1ee>
 8001518:	2304      	movs	r3, #4
 800151a:	e004      	b.n	8001526 <HAL_GPIO_Init+0x1ee>
 800151c:	2302      	movs	r3, #2
 800151e:	e002      	b.n	8001526 <HAL_GPIO_Init+0x1ee>
 8001520:	2301      	movs	r3, #1
 8001522:	e000      	b.n	8001526 <HAL_GPIO_Init+0x1ee>
 8001524:	2300      	movs	r3, #0
 8001526:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001528:	f002 0203 	and.w	r2, r2, #3
 800152c:	0092      	lsls	r2, r2, #2
 800152e:	4093      	lsls	r3, r2
 8001530:	68fa      	ldr	r2, [r7, #12]
 8001532:	4313      	orrs	r3, r2
 8001534:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001536:	492f      	ldr	r1, [pc, #188]	@ (80015f4 <HAL_GPIO_Init+0x2bc>)
 8001538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800153a:	089b      	lsrs	r3, r3, #2
 800153c:	3302      	adds	r3, #2
 800153e:	68fa      	ldr	r2, [r7, #12]
 8001540:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800154c:	2b00      	cmp	r3, #0
 800154e:	d006      	beq.n	800155e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001550:	4b2d      	ldr	r3, [pc, #180]	@ (8001608 <HAL_GPIO_Init+0x2d0>)
 8001552:	689a      	ldr	r2, [r3, #8]
 8001554:	492c      	ldr	r1, [pc, #176]	@ (8001608 <HAL_GPIO_Init+0x2d0>)
 8001556:	69bb      	ldr	r3, [r7, #24]
 8001558:	4313      	orrs	r3, r2
 800155a:	608b      	str	r3, [r1, #8]
 800155c:	e006      	b.n	800156c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800155e:	4b2a      	ldr	r3, [pc, #168]	@ (8001608 <HAL_GPIO_Init+0x2d0>)
 8001560:	689a      	ldr	r2, [r3, #8]
 8001562:	69bb      	ldr	r3, [r7, #24]
 8001564:	43db      	mvns	r3, r3
 8001566:	4928      	ldr	r1, [pc, #160]	@ (8001608 <HAL_GPIO_Init+0x2d0>)
 8001568:	4013      	ands	r3, r2
 800156a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001574:	2b00      	cmp	r3, #0
 8001576:	d006      	beq.n	8001586 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001578:	4b23      	ldr	r3, [pc, #140]	@ (8001608 <HAL_GPIO_Init+0x2d0>)
 800157a:	68da      	ldr	r2, [r3, #12]
 800157c:	4922      	ldr	r1, [pc, #136]	@ (8001608 <HAL_GPIO_Init+0x2d0>)
 800157e:	69bb      	ldr	r3, [r7, #24]
 8001580:	4313      	orrs	r3, r2
 8001582:	60cb      	str	r3, [r1, #12]
 8001584:	e006      	b.n	8001594 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001586:	4b20      	ldr	r3, [pc, #128]	@ (8001608 <HAL_GPIO_Init+0x2d0>)
 8001588:	68da      	ldr	r2, [r3, #12]
 800158a:	69bb      	ldr	r3, [r7, #24]
 800158c:	43db      	mvns	r3, r3
 800158e:	491e      	ldr	r1, [pc, #120]	@ (8001608 <HAL_GPIO_Init+0x2d0>)
 8001590:	4013      	ands	r3, r2
 8001592:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800159c:	2b00      	cmp	r3, #0
 800159e:	d006      	beq.n	80015ae <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80015a0:	4b19      	ldr	r3, [pc, #100]	@ (8001608 <HAL_GPIO_Init+0x2d0>)
 80015a2:	685a      	ldr	r2, [r3, #4]
 80015a4:	4918      	ldr	r1, [pc, #96]	@ (8001608 <HAL_GPIO_Init+0x2d0>)
 80015a6:	69bb      	ldr	r3, [r7, #24]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	604b      	str	r3, [r1, #4]
 80015ac:	e006      	b.n	80015bc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80015ae:	4b16      	ldr	r3, [pc, #88]	@ (8001608 <HAL_GPIO_Init+0x2d0>)
 80015b0:	685a      	ldr	r2, [r3, #4]
 80015b2:	69bb      	ldr	r3, [r7, #24]
 80015b4:	43db      	mvns	r3, r3
 80015b6:	4914      	ldr	r1, [pc, #80]	@ (8001608 <HAL_GPIO_Init+0x2d0>)
 80015b8:	4013      	ands	r3, r2
 80015ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d021      	beq.n	800160c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80015c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001608 <HAL_GPIO_Init+0x2d0>)
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	490e      	ldr	r1, [pc, #56]	@ (8001608 <HAL_GPIO_Init+0x2d0>)
 80015ce:	69bb      	ldr	r3, [r7, #24]
 80015d0:	4313      	orrs	r3, r2
 80015d2:	600b      	str	r3, [r1, #0]
 80015d4:	e021      	b.n	800161a <HAL_GPIO_Init+0x2e2>
 80015d6:	bf00      	nop
 80015d8:	10320000 	.word	0x10320000
 80015dc:	10310000 	.word	0x10310000
 80015e0:	10220000 	.word	0x10220000
 80015e4:	10210000 	.word	0x10210000
 80015e8:	10120000 	.word	0x10120000
 80015ec:	10110000 	.word	0x10110000
 80015f0:	40021000 	.word	0x40021000
 80015f4:	40010000 	.word	0x40010000
 80015f8:	40010800 	.word	0x40010800
 80015fc:	40010c00 	.word	0x40010c00
 8001600:	40011000 	.word	0x40011000
 8001604:	40011400 	.word	0x40011400
 8001608:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800160c:	4b0b      	ldr	r3, [pc, #44]	@ (800163c <HAL_GPIO_Init+0x304>)
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	69bb      	ldr	r3, [r7, #24]
 8001612:	43db      	mvns	r3, r3
 8001614:	4909      	ldr	r1, [pc, #36]	@ (800163c <HAL_GPIO_Init+0x304>)
 8001616:	4013      	ands	r3, r2
 8001618:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800161a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800161c:	3301      	adds	r3, #1
 800161e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001626:	fa22 f303 	lsr.w	r3, r2, r3
 800162a:	2b00      	cmp	r3, #0
 800162c:	f47f ae8e 	bne.w	800134c <HAL_GPIO_Init+0x14>
  }
}
 8001630:	bf00      	nop
 8001632:	bf00      	nop
 8001634:	372c      	adds	r7, #44	@ 0x2c
 8001636:	46bd      	mov	sp, r7
 8001638:	bc80      	pop	{r7}
 800163a:	4770      	bx	lr
 800163c:	40010400 	.word	0x40010400

08001640 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	460b      	mov	r3, r1
 800164a:	807b      	strh	r3, [r7, #2]
 800164c:	4613      	mov	r3, r2
 800164e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001650:	787b      	ldrb	r3, [r7, #1]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d003      	beq.n	800165e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001656:	887a      	ldrh	r2, [r7, #2]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800165c:	e003      	b.n	8001666 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800165e:	887b      	ldrh	r3, [r7, #2]
 8001660:	041a      	lsls	r2, r3, #16
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	611a      	str	r2, [r3, #16]
}
 8001666:	bf00      	nop
 8001668:	370c      	adds	r7, #12
 800166a:	46bd      	mov	sp, r7
 800166c:	bc80      	pop	{r7}
 800166e:	4770      	bx	lr

08001670 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	4603      	mov	r3, r0
 8001678:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800167a:	4b08      	ldr	r3, [pc, #32]	@ (800169c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800167c:	695a      	ldr	r2, [r3, #20]
 800167e:	88fb      	ldrh	r3, [r7, #6]
 8001680:	4013      	ands	r3, r2
 8001682:	2b00      	cmp	r3, #0
 8001684:	d006      	beq.n	8001694 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001686:	4a05      	ldr	r2, [pc, #20]	@ (800169c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001688:	88fb      	ldrh	r3, [r7, #6]
 800168a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800168c:	88fb      	ldrh	r3, [r7, #6]
 800168e:	4618      	mov	r0, r3
 8001690:	f000 f806 	bl	80016a0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001694:	bf00      	nop
 8001696:	3708      	adds	r7, #8
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	40010400 	.word	0x40010400

080016a0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	4603      	mov	r3, r0
 80016a8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80016aa:	bf00      	nop
 80016ac:	370c      	adds	r7, #12
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bc80      	pop	{r7}
 80016b2:	4770      	bx	lr

080016b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b086      	sub	sp, #24
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d101      	bne.n	80016c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e272      	b.n	8001bac <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	f000 8087 	beq.w	80017e2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80016d4:	4b92      	ldr	r3, [pc, #584]	@ (8001920 <HAL_RCC_OscConfig+0x26c>)
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f003 030c 	and.w	r3, r3, #12
 80016dc:	2b04      	cmp	r3, #4
 80016de:	d00c      	beq.n	80016fa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016e0:	4b8f      	ldr	r3, [pc, #572]	@ (8001920 <HAL_RCC_OscConfig+0x26c>)
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f003 030c 	and.w	r3, r3, #12
 80016e8:	2b08      	cmp	r3, #8
 80016ea:	d112      	bne.n	8001712 <HAL_RCC_OscConfig+0x5e>
 80016ec:	4b8c      	ldr	r3, [pc, #560]	@ (8001920 <HAL_RCC_OscConfig+0x26c>)
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016f8:	d10b      	bne.n	8001712 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016fa:	4b89      	ldr	r3, [pc, #548]	@ (8001920 <HAL_RCC_OscConfig+0x26c>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d06c      	beq.n	80017e0 <HAL_RCC_OscConfig+0x12c>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d168      	bne.n	80017e0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e24c      	b.n	8001bac <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800171a:	d106      	bne.n	800172a <HAL_RCC_OscConfig+0x76>
 800171c:	4b80      	ldr	r3, [pc, #512]	@ (8001920 <HAL_RCC_OscConfig+0x26c>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a7f      	ldr	r2, [pc, #508]	@ (8001920 <HAL_RCC_OscConfig+0x26c>)
 8001722:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001726:	6013      	str	r3, [r2, #0]
 8001728:	e02e      	b.n	8001788 <HAL_RCC_OscConfig+0xd4>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d10c      	bne.n	800174c <HAL_RCC_OscConfig+0x98>
 8001732:	4b7b      	ldr	r3, [pc, #492]	@ (8001920 <HAL_RCC_OscConfig+0x26c>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a7a      	ldr	r2, [pc, #488]	@ (8001920 <HAL_RCC_OscConfig+0x26c>)
 8001738:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800173c:	6013      	str	r3, [r2, #0]
 800173e:	4b78      	ldr	r3, [pc, #480]	@ (8001920 <HAL_RCC_OscConfig+0x26c>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a77      	ldr	r2, [pc, #476]	@ (8001920 <HAL_RCC_OscConfig+0x26c>)
 8001744:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001748:	6013      	str	r3, [r2, #0]
 800174a:	e01d      	b.n	8001788 <HAL_RCC_OscConfig+0xd4>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001754:	d10c      	bne.n	8001770 <HAL_RCC_OscConfig+0xbc>
 8001756:	4b72      	ldr	r3, [pc, #456]	@ (8001920 <HAL_RCC_OscConfig+0x26c>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a71      	ldr	r2, [pc, #452]	@ (8001920 <HAL_RCC_OscConfig+0x26c>)
 800175c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001760:	6013      	str	r3, [r2, #0]
 8001762:	4b6f      	ldr	r3, [pc, #444]	@ (8001920 <HAL_RCC_OscConfig+0x26c>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a6e      	ldr	r2, [pc, #440]	@ (8001920 <HAL_RCC_OscConfig+0x26c>)
 8001768:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800176c:	6013      	str	r3, [r2, #0]
 800176e:	e00b      	b.n	8001788 <HAL_RCC_OscConfig+0xd4>
 8001770:	4b6b      	ldr	r3, [pc, #428]	@ (8001920 <HAL_RCC_OscConfig+0x26c>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a6a      	ldr	r2, [pc, #424]	@ (8001920 <HAL_RCC_OscConfig+0x26c>)
 8001776:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800177a:	6013      	str	r3, [r2, #0]
 800177c:	4b68      	ldr	r3, [pc, #416]	@ (8001920 <HAL_RCC_OscConfig+0x26c>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a67      	ldr	r2, [pc, #412]	@ (8001920 <HAL_RCC_OscConfig+0x26c>)
 8001782:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001786:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d013      	beq.n	80017b8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001790:	f7ff fcba 	bl	8001108 <HAL_GetTick>
 8001794:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001796:	e008      	b.n	80017aa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001798:	f7ff fcb6 	bl	8001108 <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	2b64      	cmp	r3, #100	@ 0x64
 80017a4:	d901      	bls.n	80017aa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e200      	b.n	8001bac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017aa:	4b5d      	ldr	r3, [pc, #372]	@ (8001920 <HAL_RCC_OscConfig+0x26c>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d0f0      	beq.n	8001798 <HAL_RCC_OscConfig+0xe4>
 80017b6:	e014      	b.n	80017e2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b8:	f7ff fca6 	bl	8001108 <HAL_GetTick>
 80017bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017be:	e008      	b.n	80017d2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017c0:	f7ff fca2 	bl	8001108 <HAL_GetTick>
 80017c4:	4602      	mov	r2, r0
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	2b64      	cmp	r3, #100	@ 0x64
 80017cc:	d901      	bls.n	80017d2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80017ce:	2303      	movs	r3, #3
 80017d0:	e1ec      	b.n	8001bac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017d2:	4b53      	ldr	r3, [pc, #332]	@ (8001920 <HAL_RCC_OscConfig+0x26c>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d1f0      	bne.n	80017c0 <HAL_RCC_OscConfig+0x10c>
 80017de:	e000      	b.n	80017e2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0302 	and.w	r3, r3, #2
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d063      	beq.n	80018b6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017ee:	4b4c      	ldr	r3, [pc, #304]	@ (8001920 <HAL_RCC_OscConfig+0x26c>)
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f003 030c 	and.w	r3, r3, #12
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d00b      	beq.n	8001812 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80017fa:	4b49      	ldr	r3, [pc, #292]	@ (8001920 <HAL_RCC_OscConfig+0x26c>)
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	f003 030c 	and.w	r3, r3, #12
 8001802:	2b08      	cmp	r3, #8
 8001804:	d11c      	bne.n	8001840 <HAL_RCC_OscConfig+0x18c>
 8001806:	4b46      	ldr	r3, [pc, #280]	@ (8001920 <HAL_RCC_OscConfig+0x26c>)
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d116      	bne.n	8001840 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001812:	4b43      	ldr	r3, [pc, #268]	@ (8001920 <HAL_RCC_OscConfig+0x26c>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0302 	and.w	r3, r3, #2
 800181a:	2b00      	cmp	r3, #0
 800181c:	d005      	beq.n	800182a <HAL_RCC_OscConfig+0x176>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	691b      	ldr	r3, [r3, #16]
 8001822:	2b01      	cmp	r3, #1
 8001824:	d001      	beq.n	800182a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e1c0      	b.n	8001bac <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800182a:	4b3d      	ldr	r3, [pc, #244]	@ (8001920 <HAL_RCC_OscConfig+0x26c>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	695b      	ldr	r3, [r3, #20]
 8001836:	00db      	lsls	r3, r3, #3
 8001838:	4939      	ldr	r1, [pc, #228]	@ (8001920 <HAL_RCC_OscConfig+0x26c>)
 800183a:	4313      	orrs	r3, r2
 800183c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800183e:	e03a      	b.n	80018b6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	691b      	ldr	r3, [r3, #16]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d020      	beq.n	800188a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001848:	4b36      	ldr	r3, [pc, #216]	@ (8001924 <HAL_RCC_OscConfig+0x270>)
 800184a:	2201      	movs	r2, #1
 800184c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800184e:	f7ff fc5b 	bl	8001108 <HAL_GetTick>
 8001852:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001854:	e008      	b.n	8001868 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001856:	f7ff fc57 	bl	8001108 <HAL_GetTick>
 800185a:	4602      	mov	r2, r0
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	2b02      	cmp	r3, #2
 8001862:	d901      	bls.n	8001868 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001864:	2303      	movs	r3, #3
 8001866:	e1a1      	b.n	8001bac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001868:	4b2d      	ldr	r3, [pc, #180]	@ (8001920 <HAL_RCC_OscConfig+0x26c>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 0302 	and.w	r3, r3, #2
 8001870:	2b00      	cmp	r3, #0
 8001872:	d0f0      	beq.n	8001856 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001874:	4b2a      	ldr	r3, [pc, #168]	@ (8001920 <HAL_RCC_OscConfig+0x26c>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	695b      	ldr	r3, [r3, #20]
 8001880:	00db      	lsls	r3, r3, #3
 8001882:	4927      	ldr	r1, [pc, #156]	@ (8001920 <HAL_RCC_OscConfig+0x26c>)
 8001884:	4313      	orrs	r3, r2
 8001886:	600b      	str	r3, [r1, #0]
 8001888:	e015      	b.n	80018b6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800188a:	4b26      	ldr	r3, [pc, #152]	@ (8001924 <HAL_RCC_OscConfig+0x270>)
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001890:	f7ff fc3a 	bl	8001108 <HAL_GetTick>
 8001894:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001896:	e008      	b.n	80018aa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001898:	f7ff fc36 	bl	8001108 <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d901      	bls.n	80018aa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e180      	b.n	8001bac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018aa:	4b1d      	ldr	r3, [pc, #116]	@ (8001920 <HAL_RCC_OscConfig+0x26c>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0302 	and.w	r3, r3, #2
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d1f0      	bne.n	8001898 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0308 	and.w	r3, r3, #8
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d03a      	beq.n	8001938 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	699b      	ldr	r3, [r3, #24]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d019      	beq.n	80018fe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018ca:	4b17      	ldr	r3, [pc, #92]	@ (8001928 <HAL_RCC_OscConfig+0x274>)
 80018cc:	2201      	movs	r2, #1
 80018ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018d0:	f7ff fc1a 	bl	8001108 <HAL_GetTick>
 80018d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018d6:	e008      	b.n	80018ea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018d8:	f7ff fc16 	bl	8001108 <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d901      	bls.n	80018ea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e160      	b.n	8001bac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001920 <HAL_RCC_OscConfig+0x26c>)
 80018ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018ee:	f003 0302 	and.w	r3, r3, #2
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d0f0      	beq.n	80018d8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80018f6:	2001      	movs	r0, #1
 80018f8:	f000 face 	bl	8001e98 <RCC_Delay>
 80018fc:	e01c      	b.n	8001938 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001928 <HAL_RCC_OscConfig+0x274>)
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001904:	f7ff fc00 	bl	8001108 <HAL_GetTick>
 8001908:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800190a:	e00f      	b.n	800192c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800190c:	f7ff fbfc 	bl	8001108 <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	2b02      	cmp	r3, #2
 8001918:	d908      	bls.n	800192c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e146      	b.n	8001bac <HAL_RCC_OscConfig+0x4f8>
 800191e:	bf00      	nop
 8001920:	40021000 	.word	0x40021000
 8001924:	42420000 	.word	0x42420000
 8001928:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800192c:	4b92      	ldr	r3, [pc, #584]	@ (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 800192e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001930:	f003 0302 	and.w	r3, r3, #2
 8001934:	2b00      	cmp	r3, #0
 8001936:	d1e9      	bne.n	800190c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 0304 	and.w	r3, r3, #4
 8001940:	2b00      	cmp	r3, #0
 8001942:	f000 80a6 	beq.w	8001a92 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001946:	2300      	movs	r3, #0
 8001948:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800194a:	4b8b      	ldr	r3, [pc, #556]	@ (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 800194c:	69db      	ldr	r3, [r3, #28]
 800194e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d10d      	bne.n	8001972 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001956:	4b88      	ldr	r3, [pc, #544]	@ (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 8001958:	69db      	ldr	r3, [r3, #28]
 800195a:	4a87      	ldr	r2, [pc, #540]	@ (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 800195c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001960:	61d3      	str	r3, [r2, #28]
 8001962:	4b85      	ldr	r3, [pc, #532]	@ (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 8001964:	69db      	ldr	r3, [r3, #28]
 8001966:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800196a:	60bb      	str	r3, [r7, #8]
 800196c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800196e:	2301      	movs	r3, #1
 8001970:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001972:	4b82      	ldr	r3, [pc, #520]	@ (8001b7c <HAL_RCC_OscConfig+0x4c8>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800197a:	2b00      	cmp	r3, #0
 800197c:	d118      	bne.n	80019b0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800197e:	4b7f      	ldr	r3, [pc, #508]	@ (8001b7c <HAL_RCC_OscConfig+0x4c8>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a7e      	ldr	r2, [pc, #504]	@ (8001b7c <HAL_RCC_OscConfig+0x4c8>)
 8001984:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001988:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800198a:	f7ff fbbd 	bl	8001108 <HAL_GetTick>
 800198e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001990:	e008      	b.n	80019a4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001992:	f7ff fbb9 	bl	8001108 <HAL_GetTick>
 8001996:	4602      	mov	r2, r0
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	2b64      	cmp	r3, #100	@ 0x64
 800199e:	d901      	bls.n	80019a4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80019a0:	2303      	movs	r3, #3
 80019a2:	e103      	b.n	8001bac <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019a4:	4b75      	ldr	r3, [pc, #468]	@ (8001b7c <HAL_RCC_OscConfig+0x4c8>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d0f0      	beq.n	8001992 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d106      	bne.n	80019c6 <HAL_RCC_OscConfig+0x312>
 80019b8:	4b6f      	ldr	r3, [pc, #444]	@ (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 80019ba:	6a1b      	ldr	r3, [r3, #32]
 80019bc:	4a6e      	ldr	r2, [pc, #440]	@ (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 80019be:	f043 0301 	orr.w	r3, r3, #1
 80019c2:	6213      	str	r3, [r2, #32]
 80019c4:	e02d      	b.n	8001a22 <HAL_RCC_OscConfig+0x36e>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	68db      	ldr	r3, [r3, #12]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d10c      	bne.n	80019e8 <HAL_RCC_OscConfig+0x334>
 80019ce:	4b6a      	ldr	r3, [pc, #424]	@ (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 80019d0:	6a1b      	ldr	r3, [r3, #32]
 80019d2:	4a69      	ldr	r2, [pc, #420]	@ (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 80019d4:	f023 0301 	bic.w	r3, r3, #1
 80019d8:	6213      	str	r3, [r2, #32]
 80019da:	4b67      	ldr	r3, [pc, #412]	@ (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 80019dc:	6a1b      	ldr	r3, [r3, #32]
 80019de:	4a66      	ldr	r2, [pc, #408]	@ (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 80019e0:	f023 0304 	bic.w	r3, r3, #4
 80019e4:	6213      	str	r3, [r2, #32]
 80019e6:	e01c      	b.n	8001a22 <HAL_RCC_OscConfig+0x36e>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	2b05      	cmp	r3, #5
 80019ee:	d10c      	bne.n	8001a0a <HAL_RCC_OscConfig+0x356>
 80019f0:	4b61      	ldr	r3, [pc, #388]	@ (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 80019f2:	6a1b      	ldr	r3, [r3, #32]
 80019f4:	4a60      	ldr	r2, [pc, #384]	@ (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 80019f6:	f043 0304 	orr.w	r3, r3, #4
 80019fa:	6213      	str	r3, [r2, #32]
 80019fc:	4b5e      	ldr	r3, [pc, #376]	@ (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 80019fe:	6a1b      	ldr	r3, [r3, #32]
 8001a00:	4a5d      	ldr	r2, [pc, #372]	@ (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 8001a02:	f043 0301 	orr.w	r3, r3, #1
 8001a06:	6213      	str	r3, [r2, #32]
 8001a08:	e00b      	b.n	8001a22 <HAL_RCC_OscConfig+0x36e>
 8001a0a:	4b5b      	ldr	r3, [pc, #364]	@ (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 8001a0c:	6a1b      	ldr	r3, [r3, #32]
 8001a0e:	4a5a      	ldr	r2, [pc, #360]	@ (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 8001a10:	f023 0301 	bic.w	r3, r3, #1
 8001a14:	6213      	str	r3, [r2, #32]
 8001a16:	4b58      	ldr	r3, [pc, #352]	@ (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 8001a18:	6a1b      	ldr	r3, [r3, #32]
 8001a1a:	4a57      	ldr	r2, [pc, #348]	@ (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 8001a1c:	f023 0304 	bic.w	r3, r3, #4
 8001a20:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	68db      	ldr	r3, [r3, #12]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d015      	beq.n	8001a56 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a2a:	f7ff fb6d 	bl	8001108 <HAL_GetTick>
 8001a2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a30:	e00a      	b.n	8001a48 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a32:	f7ff fb69 	bl	8001108 <HAL_GetTick>
 8001a36:	4602      	mov	r2, r0
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d901      	bls.n	8001a48 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a44:	2303      	movs	r3, #3
 8001a46:	e0b1      	b.n	8001bac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a48:	4b4b      	ldr	r3, [pc, #300]	@ (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 8001a4a:	6a1b      	ldr	r3, [r3, #32]
 8001a4c:	f003 0302 	and.w	r3, r3, #2
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d0ee      	beq.n	8001a32 <HAL_RCC_OscConfig+0x37e>
 8001a54:	e014      	b.n	8001a80 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a56:	f7ff fb57 	bl	8001108 <HAL_GetTick>
 8001a5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a5c:	e00a      	b.n	8001a74 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a5e:	f7ff fb53 	bl	8001108 <HAL_GetTick>
 8001a62:	4602      	mov	r2, r0
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d901      	bls.n	8001a74 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001a70:	2303      	movs	r3, #3
 8001a72:	e09b      	b.n	8001bac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a74:	4b40      	ldr	r3, [pc, #256]	@ (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 8001a76:	6a1b      	ldr	r3, [r3, #32]
 8001a78:	f003 0302 	and.w	r3, r3, #2
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d1ee      	bne.n	8001a5e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a80:	7dfb      	ldrb	r3, [r7, #23]
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d105      	bne.n	8001a92 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a86:	4b3c      	ldr	r3, [pc, #240]	@ (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 8001a88:	69db      	ldr	r3, [r3, #28]
 8001a8a:	4a3b      	ldr	r2, [pc, #236]	@ (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 8001a8c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a90:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	69db      	ldr	r3, [r3, #28]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	f000 8087 	beq.w	8001baa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a9c:	4b36      	ldr	r3, [pc, #216]	@ (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f003 030c 	and.w	r3, r3, #12
 8001aa4:	2b08      	cmp	r3, #8
 8001aa6:	d061      	beq.n	8001b6c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	69db      	ldr	r3, [r3, #28]
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d146      	bne.n	8001b3e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ab0:	4b33      	ldr	r3, [pc, #204]	@ (8001b80 <HAL_RCC_OscConfig+0x4cc>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab6:	f7ff fb27 	bl	8001108 <HAL_GetTick>
 8001aba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001abc:	e008      	b.n	8001ad0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001abe:	f7ff fb23 	bl	8001108 <HAL_GetTick>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	2b02      	cmp	r3, #2
 8001aca:	d901      	bls.n	8001ad0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001acc:	2303      	movs	r3, #3
 8001ace:	e06d      	b.n	8001bac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ad0:	4b29      	ldr	r3, [pc, #164]	@ (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d1f0      	bne.n	8001abe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6a1b      	ldr	r3, [r3, #32]
 8001ae0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ae4:	d108      	bne.n	8001af8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ae6:	4b24      	ldr	r3, [pc, #144]	@ (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	4921      	ldr	r1, [pc, #132]	@ (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 8001af4:	4313      	orrs	r3, r2
 8001af6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001af8:	4b1f      	ldr	r3, [pc, #124]	@ (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6a19      	ldr	r1, [r3, #32]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b08:	430b      	orrs	r3, r1
 8001b0a:	491b      	ldr	r1, [pc, #108]	@ (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b10:	4b1b      	ldr	r3, [pc, #108]	@ (8001b80 <HAL_RCC_OscConfig+0x4cc>)
 8001b12:	2201      	movs	r2, #1
 8001b14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b16:	f7ff faf7 	bl	8001108 <HAL_GetTick>
 8001b1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b1c:	e008      	b.n	8001b30 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b1e:	f7ff faf3 	bl	8001108 <HAL_GetTick>
 8001b22:	4602      	mov	r2, r0
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d901      	bls.n	8001b30 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	e03d      	b.n	8001bac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b30:	4b11      	ldr	r3, [pc, #68]	@ (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d0f0      	beq.n	8001b1e <HAL_RCC_OscConfig+0x46a>
 8001b3c:	e035      	b.n	8001baa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b3e:	4b10      	ldr	r3, [pc, #64]	@ (8001b80 <HAL_RCC_OscConfig+0x4cc>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b44:	f7ff fae0 	bl	8001108 <HAL_GetTick>
 8001b48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b4a:	e008      	b.n	8001b5e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b4c:	f7ff fadc 	bl	8001108 <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e026      	b.n	8001bac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b5e:	4b06      	ldr	r3, [pc, #24]	@ (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d1f0      	bne.n	8001b4c <HAL_RCC_OscConfig+0x498>
 8001b6a:	e01e      	b.n	8001baa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	69db      	ldr	r3, [r3, #28]
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d107      	bne.n	8001b84 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e019      	b.n	8001bac <HAL_RCC_OscConfig+0x4f8>
 8001b78:	40021000 	.word	0x40021000
 8001b7c:	40007000 	.word	0x40007000
 8001b80:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b84:	4b0b      	ldr	r3, [pc, #44]	@ (8001bb4 <HAL_RCC_OscConfig+0x500>)
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6a1b      	ldr	r3, [r3, #32]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d106      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d001      	beq.n	8001baa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e000      	b.n	8001bac <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001baa:	2300      	movs	r3, #0
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3718      	adds	r7, #24
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	40021000 	.word	0x40021000

08001bb8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d101      	bne.n	8001bcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e0d0      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001bcc:	4b6a      	ldr	r3, [pc, #424]	@ (8001d78 <HAL_RCC_ClockConfig+0x1c0>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 0307 	and.w	r3, r3, #7
 8001bd4:	683a      	ldr	r2, [r7, #0]
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d910      	bls.n	8001bfc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bda:	4b67      	ldr	r3, [pc, #412]	@ (8001d78 <HAL_RCC_ClockConfig+0x1c0>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f023 0207 	bic.w	r2, r3, #7
 8001be2:	4965      	ldr	r1, [pc, #404]	@ (8001d78 <HAL_RCC_ClockConfig+0x1c0>)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bea:	4b63      	ldr	r3, [pc, #396]	@ (8001d78 <HAL_RCC_ClockConfig+0x1c0>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0307 	and.w	r3, r3, #7
 8001bf2:	683a      	ldr	r2, [r7, #0]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d001      	beq.n	8001bfc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e0b8      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0302 	and.w	r3, r3, #2
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d020      	beq.n	8001c4a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0304 	and.w	r3, r3, #4
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d005      	beq.n	8001c20 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c14:	4b59      	ldr	r3, [pc, #356]	@ (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	4a58      	ldr	r2, [pc, #352]	@ (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001c1a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001c1e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0308 	and.w	r3, r3, #8
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d005      	beq.n	8001c38 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c2c:	4b53      	ldr	r3, [pc, #332]	@ (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	4a52      	ldr	r2, [pc, #328]	@ (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001c32:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001c36:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c38:	4b50      	ldr	r3, [pc, #320]	@ (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	494d      	ldr	r1, [pc, #308]	@ (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001c46:	4313      	orrs	r3, r2
 8001c48:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0301 	and.w	r3, r3, #1
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d040      	beq.n	8001cd8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d107      	bne.n	8001c6e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c5e:	4b47      	ldr	r3, [pc, #284]	@ (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d115      	bne.n	8001c96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e07f      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d107      	bne.n	8001c86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c76:	4b41      	ldr	r3, [pc, #260]	@ (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d109      	bne.n	8001c96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e073      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c86:	4b3d      	ldr	r3, [pc, #244]	@ (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0302 	and.w	r3, r3, #2
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d101      	bne.n	8001c96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e06b      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c96:	4b39      	ldr	r3, [pc, #228]	@ (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f023 0203 	bic.w	r2, r3, #3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	4936      	ldr	r1, [pc, #216]	@ (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ca8:	f7ff fa2e 	bl	8001108 <HAL_GetTick>
 8001cac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cae:	e00a      	b.n	8001cc6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cb0:	f7ff fa2a 	bl	8001108 <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d901      	bls.n	8001cc6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e053      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cc6:	4b2d      	ldr	r3, [pc, #180]	@ (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f003 020c 	and.w	r2, r3, #12
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d1eb      	bne.n	8001cb0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001cd8:	4b27      	ldr	r3, [pc, #156]	@ (8001d78 <HAL_RCC_ClockConfig+0x1c0>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0307 	and.w	r3, r3, #7
 8001ce0:	683a      	ldr	r2, [r7, #0]
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d210      	bcs.n	8001d08 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ce6:	4b24      	ldr	r3, [pc, #144]	@ (8001d78 <HAL_RCC_ClockConfig+0x1c0>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f023 0207 	bic.w	r2, r3, #7
 8001cee:	4922      	ldr	r1, [pc, #136]	@ (8001d78 <HAL_RCC_ClockConfig+0x1c0>)
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cf6:	4b20      	ldr	r3, [pc, #128]	@ (8001d78 <HAL_RCC_ClockConfig+0x1c0>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0307 	and.w	r3, r3, #7
 8001cfe:	683a      	ldr	r2, [r7, #0]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d001      	beq.n	8001d08 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e032      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 0304 	and.w	r3, r3, #4
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d008      	beq.n	8001d26 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d14:	4b19      	ldr	r3, [pc, #100]	@ (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	4916      	ldr	r1, [pc, #88]	@ (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001d22:	4313      	orrs	r3, r2
 8001d24:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0308 	and.w	r3, r3, #8
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d009      	beq.n	8001d46 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d32:	4b12      	ldr	r3, [pc, #72]	@ (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	691b      	ldr	r3, [r3, #16]
 8001d3e:	00db      	lsls	r3, r3, #3
 8001d40:	490e      	ldr	r1, [pc, #56]	@ (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001d42:	4313      	orrs	r3, r2
 8001d44:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d46:	f000 f821 	bl	8001d8c <HAL_RCC_GetSysClockFreq>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	4b0b      	ldr	r3, [pc, #44]	@ (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	091b      	lsrs	r3, r3, #4
 8001d52:	f003 030f 	and.w	r3, r3, #15
 8001d56:	490a      	ldr	r1, [pc, #40]	@ (8001d80 <HAL_RCC_ClockConfig+0x1c8>)
 8001d58:	5ccb      	ldrb	r3, [r1, r3]
 8001d5a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d5e:	4a09      	ldr	r2, [pc, #36]	@ (8001d84 <HAL_RCC_ClockConfig+0x1cc>)
 8001d60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d62:	4b09      	ldr	r3, [pc, #36]	@ (8001d88 <HAL_RCC_ClockConfig+0x1d0>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff f98c 	bl	8001084 <HAL_InitTick>

  return HAL_OK;
 8001d6c:	2300      	movs	r3, #0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3710      	adds	r7, #16
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	40022000 	.word	0x40022000
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	08003ebc 	.word	0x08003ebc
 8001d84:	20000000 	.word	0x20000000
 8001d88:	20000004 	.word	0x20000004

08001d8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b087      	sub	sp, #28
 8001d90:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d92:	2300      	movs	r3, #0
 8001d94:	60fb      	str	r3, [r7, #12]
 8001d96:	2300      	movs	r3, #0
 8001d98:	60bb      	str	r3, [r7, #8]
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	617b      	str	r3, [r7, #20]
 8001d9e:	2300      	movs	r3, #0
 8001da0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001da2:	2300      	movs	r3, #0
 8001da4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001da6:	4b1e      	ldr	r3, [pc, #120]	@ (8001e20 <HAL_RCC_GetSysClockFreq+0x94>)
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f003 030c 	and.w	r3, r3, #12
 8001db2:	2b04      	cmp	r3, #4
 8001db4:	d002      	beq.n	8001dbc <HAL_RCC_GetSysClockFreq+0x30>
 8001db6:	2b08      	cmp	r3, #8
 8001db8:	d003      	beq.n	8001dc2 <HAL_RCC_GetSysClockFreq+0x36>
 8001dba:	e027      	b.n	8001e0c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001dbc:	4b19      	ldr	r3, [pc, #100]	@ (8001e24 <HAL_RCC_GetSysClockFreq+0x98>)
 8001dbe:	613b      	str	r3, [r7, #16]
      break;
 8001dc0:	e027      	b.n	8001e12 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	0c9b      	lsrs	r3, r3, #18
 8001dc6:	f003 030f 	and.w	r3, r3, #15
 8001dca:	4a17      	ldr	r2, [pc, #92]	@ (8001e28 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001dcc:	5cd3      	ldrb	r3, [r2, r3]
 8001dce:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d010      	beq.n	8001dfc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001dda:	4b11      	ldr	r3, [pc, #68]	@ (8001e20 <HAL_RCC_GetSysClockFreq+0x94>)
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	0c5b      	lsrs	r3, r3, #17
 8001de0:	f003 0301 	and.w	r3, r3, #1
 8001de4:	4a11      	ldr	r2, [pc, #68]	@ (8001e2c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001de6:	5cd3      	ldrb	r3, [r2, r3]
 8001de8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a0d      	ldr	r2, [pc, #52]	@ (8001e24 <HAL_RCC_GetSysClockFreq+0x98>)
 8001dee:	fb03 f202 	mul.w	r2, r3, r2
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001df8:	617b      	str	r3, [r7, #20]
 8001dfa:	e004      	b.n	8001e06 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	4a0c      	ldr	r2, [pc, #48]	@ (8001e30 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001e00:	fb02 f303 	mul.w	r3, r2, r3
 8001e04:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	613b      	str	r3, [r7, #16]
      break;
 8001e0a:	e002      	b.n	8001e12 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e0c:	4b05      	ldr	r3, [pc, #20]	@ (8001e24 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e0e:	613b      	str	r3, [r7, #16]
      break;
 8001e10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e12:	693b      	ldr	r3, [r7, #16]
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	371c      	adds	r7, #28
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bc80      	pop	{r7}
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	40021000 	.word	0x40021000
 8001e24:	007a1200 	.word	0x007a1200
 8001e28:	08003ed4 	.word	0x08003ed4
 8001e2c:	08003ee4 	.word	0x08003ee4
 8001e30:	003d0900 	.word	0x003d0900

08001e34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e38:	4b02      	ldr	r3, [pc, #8]	@ (8001e44 <HAL_RCC_GetHCLKFreq+0x10>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bc80      	pop	{r7}
 8001e42:	4770      	bx	lr
 8001e44:	20000000 	.word	0x20000000

08001e48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e4c:	f7ff fff2 	bl	8001e34 <HAL_RCC_GetHCLKFreq>
 8001e50:	4602      	mov	r2, r0
 8001e52:	4b05      	ldr	r3, [pc, #20]	@ (8001e68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	0a1b      	lsrs	r3, r3, #8
 8001e58:	f003 0307 	and.w	r3, r3, #7
 8001e5c:	4903      	ldr	r1, [pc, #12]	@ (8001e6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e5e:	5ccb      	ldrb	r3, [r1, r3]
 8001e60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	40021000 	.word	0x40021000
 8001e6c:	08003ecc 	.word	0x08003ecc

08001e70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e74:	f7ff ffde 	bl	8001e34 <HAL_RCC_GetHCLKFreq>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	4b05      	ldr	r3, [pc, #20]	@ (8001e90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	0adb      	lsrs	r3, r3, #11
 8001e80:	f003 0307 	and.w	r3, r3, #7
 8001e84:	4903      	ldr	r1, [pc, #12]	@ (8001e94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e86:	5ccb      	ldrb	r3, [r1, r3]
 8001e88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	40021000 	.word	0x40021000
 8001e94:	08003ecc 	.word	0x08003ecc

08001e98 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b085      	sub	sp, #20
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ea0:	4b0a      	ldr	r3, [pc, #40]	@ (8001ecc <RCC_Delay+0x34>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a0a      	ldr	r2, [pc, #40]	@ (8001ed0 <RCC_Delay+0x38>)
 8001ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eaa:	0a5b      	lsrs	r3, r3, #9
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	fb02 f303 	mul.w	r3, r2, r3
 8001eb2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001eb4:	bf00      	nop
  }
  while (Delay --);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	1e5a      	subs	r2, r3, #1
 8001eba:	60fa      	str	r2, [r7, #12]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d1f9      	bne.n	8001eb4 <RCC_Delay+0x1c>
}
 8001ec0:	bf00      	nop
 8001ec2:	bf00      	nop
 8001ec4:	3714      	adds	r7, #20
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bc80      	pop	{r7}
 8001eca:	4770      	bx	lr
 8001ecc:	20000000 	.word	0x20000000
 8001ed0:	10624dd3 	.word	0x10624dd3

08001ed4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d101      	bne.n	8001ee6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e041      	b.n	8001f6a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d106      	bne.n	8001f00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f7fe ffda 	bl	8000eb4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2202      	movs	r2, #2
 8001f04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	3304      	adds	r3, #4
 8001f10:	4619      	mov	r1, r3
 8001f12:	4610      	mov	r0, r2
 8001f14:	f000 fb48 	bl	80025a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2201      	movs	r2, #1
 8001f24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2201      	movs	r2, #1
 8001f34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2201      	movs	r2, #1
 8001f44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2201      	movs	r2, #1
 8001f54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2201      	movs	r2, #1
 8001f64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001f68:	2300      	movs	r3, #0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3708      	adds	r7, #8
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}

08001f72 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8001f72:	b580      	push	{r7, lr}
 8001f74:	b082      	sub	sp, #8
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d101      	bne.n	8001f84 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e041      	b.n	8002008 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d106      	bne.n	8001f9e <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2200      	movs	r2, #0
 8001f94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f000 f839 	bl	8002010 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2202      	movs	r2, #2
 8001fa2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	3304      	adds	r3, #4
 8001fae:	4619      	mov	r1, r3
 8001fb0:	4610      	mov	r0, r2
 8001fb2:	f000 faf9 	bl	80025a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2201      	movs	r2, #1
 8001fba:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2201      	movs	r2, #1
 8001fca:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2201      	movs	r2, #1
 8001fda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2201      	movs	r2, #1
 8001fea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2201      	movs	r2, #1
 8002002:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002006:	2300      	movs	r3, #0
}
 8002008:	4618      	mov	r0, r3
 800200a:	3708      	adds	r7, #8
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}

08002010 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002018:	bf00      	nop
 800201a:	370c      	adds	r7, #12
 800201c:	46bd      	mov	sp, r7
 800201e:	bc80      	pop	{r7}
 8002020:	4770      	bx	lr

08002022 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002022:	b580      	push	{r7, lr}
 8002024:	b084      	sub	sp, #16
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	691b      	ldr	r3, [r3, #16]
 8002038:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	f003 0302 	and.w	r3, r3, #2
 8002040:	2b00      	cmp	r3, #0
 8002042:	d020      	beq.n	8002086 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f003 0302 	and.w	r3, r3, #2
 800204a:	2b00      	cmp	r3, #0
 800204c:	d01b      	beq.n	8002086 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f06f 0202 	mvn.w	r2, #2
 8002056:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2201      	movs	r2, #1
 800205c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	699b      	ldr	r3, [r3, #24]
 8002064:	f003 0303 	and.w	r3, r3, #3
 8002068:	2b00      	cmp	r3, #0
 800206a:	d003      	beq.n	8002074 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f000 fa7f 	bl	8002570 <HAL_TIM_IC_CaptureCallback>
 8002072:	e005      	b.n	8002080 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f000 fa72 	bl	800255e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f000 fa81 	bl	8002582 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2200      	movs	r2, #0
 8002084:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	f003 0304 	and.w	r3, r3, #4
 800208c:	2b00      	cmp	r3, #0
 800208e:	d020      	beq.n	80020d2 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	f003 0304 	and.w	r3, r3, #4
 8002096:	2b00      	cmp	r3, #0
 8002098:	d01b      	beq.n	80020d2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f06f 0204 	mvn.w	r2, #4
 80020a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2202      	movs	r2, #2
 80020a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	699b      	ldr	r3, [r3, #24]
 80020b0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d003      	beq.n	80020c0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f000 fa59 	bl	8002570 <HAL_TIM_IC_CaptureCallback>
 80020be:	e005      	b.n	80020cc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f000 fa4c 	bl	800255e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f000 fa5b 	bl	8002582 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2200      	movs	r2, #0
 80020d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	f003 0308 	and.w	r3, r3, #8
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d020      	beq.n	800211e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	f003 0308 	and.w	r3, r3, #8
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d01b      	beq.n	800211e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f06f 0208 	mvn.w	r2, #8
 80020ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2204      	movs	r2, #4
 80020f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	69db      	ldr	r3, [r3, #28]
 80020fc:	f003 0303 	and.w	r3, r3, #3
 8002100:	2b00      	cmp	r3, #0
 8002102:	d003      	beq.n	800210c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f000 fa33 	bl	8002570 <HAL_TIM_IC_CaptureCallback>
 800210a:	e005      	b.n	8002118 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f000 fa26 	bl	800255e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f000 fa35 	bl	8002582 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2200      	movs	r2, #0
 800211c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	f003 0310 	and.w	r3, r3, #16
 8002124:	2b00      	cmp	r3, #0
 8002126:	d020      	beq.n	800216a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	f003 0310 	and.w	r3, r3, #16
 800212e:	2b00      	cmp	r3, #0
 8002130:	d01b      	beq.n	800216a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f06f 0210 	mvn.w	r2, #16
 800213a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2208      	movs	r2, #8
 8002140:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	69db      	ldr	r3, [r3, #28]
 8002148:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800214c:	2b00      	cmp	r3, #0
 800214e:	d003      	beq.n	8002158 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f000 fa0d 	bl	8002570 <HAL_TIM_IC_CaptureCallback>
 8002156:	e005      	b.n	8002164 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	f000 fa00 	bl	800255e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f000 fa0f 	bl	8002582 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2200      	movs	r2, #0
 8002168:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	f003 0301 	and.w	r3, r3, #1
 8002170:	2b00      	cmp	r3, #0
 8002172:	d00c      	beq.n	800218e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	f003 0301 	and.w	r3, r3, #1
 800217a:	2b00      	cmp	r3, #0
 800217c:	d007      	beq.n	800218e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f06f 0201 	mvn.w	r2, #1
 8002186:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	f000 f9df 	bl	800254c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002194:	2b00      	cmp	r3, #0
 8002196:	d00c      	beq.n	80021b2 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d007      	beq.n	80021b2 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80021aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f000 fd06 	bl	8002bbe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d00c      	beq.n	80021d6 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d007      	beq.n	80021d6 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80021ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f000 f9df 	bl	8002594 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	f003 0320 	and.w	r3, r3, #32
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d00c      	beq.n	80021fa <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	f003 0320 	and.w	r3, r3, #32
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d007      	beq.n	80021fa <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f06f 0220 	mvn.w	r2, #32
 80021f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	f000 fcd9 	bl	8002bac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80021fa:	bf00      	nop
 80021fc:	3710      	adds	r7, #16
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}

08002202 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002202:	b580      	push	{r7, lr}
 8002204:	b086      	sub	sp, #24
 8002206:	af00      	add	r7, sp, #0
 8002208:	60f8      	str	r0, [r7, #12]
 800220a:	60b9      	str	r1, [r7, #8]
 800220c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800220e:	2300      	movs	r3, #0
 8002210:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002218:	2b01      	cmp	r3, #1
 800221a:	d101      	bne.n	8002220 <HAL_TIM_IC_ConfigChannel+0x1e>
 800221c:	2302      	movs	r3, #2
 800221e:	e088      	b.n	8002332 <HAL_TIM_IC_ConfigChannel+0x130>
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	2201      	movs	r2, #1
 8002224:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d11b      	bne.n	8002266 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800223e:	f000 fab3 	bl	80027a8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	699a      	ldr	r2, [r3, #24]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f022 020c 	bic.w	r2, r2, #12
 8002250:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	6999      	ldr	r1, [r3, #24]
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	689a      	ldr	r2, [r3, #8]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	430a      	orrs	r2, r1
 8002262:	619a      	str	r2, [r3, #24]
 8002264:	e060      	b.n	8002328 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2b04      	cmp	r3, #4
 800226a:	d11c      	bne.n	80022a6 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800227c:	f000 fb1c 	bl	80028b8 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	699a      	ldr	r2, [r3, #24]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800228e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	6999      	ldr	r1, [r3, #24]
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	021a      	lsls	r2, r3, #8
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	430a      	orrs	r2, r1
 80022a2:	619a      	str	r2, [r3, #24]
 80022a4:	e040      	b.n	8002328 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2b08      	cmp	r3, #8
 80022aa:	d11b      	bne.n	80022e4 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80022bc:	f000 fb67 	bl	800298e <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	69da      	ldr	r2, [r3, #28]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f022 020c 	bic.w	r2, r2, #12
 80022ce:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	69d9      	ldr	r1, [r3, #28]
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	689a      	ldr	r2, [r3, #8]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	430a      	orrs	r2, r1
 80022e0:	61da      	str	r2, [r3, #28]
 80022e2:	e021      	b.n	8002328 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2b0c      	cmp	r3, #12
 80022e8:	d11c      	bne.n	8002324 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80022fa:	f000 fb83 	bl	8002a04 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	69da      	ldr	r2, [r3, #28]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800230c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	69d9      	ldr	r1, [r3, #28]
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	021a      	lsls	r2, r3, #8
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	430a      	orrs	r2, r1
 8002320:	61da      	str	r2, [r3, #28]
 8002322:	e001      	b.n	8002328 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2200      	movs	r2, #0
 800232c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002330:	7dfb      	ldrb	r3, [r7, #23]
}
 8002332:	4618      	mov	r0, r3
 8002334:	3718      	adds	r7, #24
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}

0800233a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800233a:	b580      	push	{r7, lr}
 800233c:	b084      	sub	sp, #16
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
 8002342:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002344:	2300      	movs	r3, #0
 8002346:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800234e:	2b01      	cmp	r3, #1
 8002350:	d101      	bne.n	8002356 <HAL_TIM_ConfigClockSource+0x1c>
 8002352:	2302      	movs	r3, #2
 8002354:	e0b4      	b.n	80024c0 <HAL_TIM_ConfigClockSource+0x186>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2201      	movs	r2, #1
 800235a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2202      	movs	r2, #2
 8002362:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002374:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800237c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	68ba      	ldr	r2, [r7, #8]
 8002384:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800238e:	d03e      	beq.n	800240e <HAL_TIM_ConfigClockSource+0xd4>
 8002390:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002394:	f200 8087 	bhi.w	80024a6 <HAL_TIM_ConfigClockSource+0x16c>
 8002398:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800239c:	f000 8086 	beq.w	80024ac <HAL_TIM_ConfigClockSource+0x172>
 80023a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80023a4:	d87f      	bhi.n	80024a6 <HAL_TIM_ConfigClockSource+0x16c>
 80023a6:	2b70      	cmp	r3, #112	@ 0x70
 80023a8:	d01a      	beq.n	80023e0 <HAL_TIM_ConfigClockSource+0xa6>
 80023aa:	2b70      	cmp	r3, #112	@ 0x70
 80023ac:	d87b      	bhi.n	80024a6 <HAL_TIM_ConfigClockSource+0x16c>
 80023ae:	2b60      	cmp	r3, #96	@ 0x60
 80023b0:	d050      	beq.n	8002454 <HAL_TIM_ConfigClockSource+0x11a>
 80023b2:	2b60      	cmp	r3, #96	@ 0x60
 80023b4:	d877      	bhi.n	80024a6 <HAL_TIM_ConfigClockSource+0x16c>
 80023b6:	2b50      	cmp	r3, #80	@ 0x50
 80023b8:	d03c      	beq.n	8002434 <HAL_TIM_ConfigClockSource+0xfa>
 80023ba:	2b50      	cmp	r3, #80	@ 0x50
 80023bc:	d873      	bhi.n	80024a6 <HAL_TIM_ConfigClockSource+0x16c>
 80023be:	2b40      	cmp	r3, #64	@ 0x40
 80023c0:	d058      	beq.n	8002474 <HAL_TIM_ConfigClockSource+0x13a>
 80023c2:	2b40      	cmp	r3, #64	@ 0x40
 80023c4:	d86f      	bhi.n	80024a6 <HAL_TIM_ConfigClockSource+0x16c>
 80023c6:	2b30      	cmp	r3, #48	@ 0x30
 80023c8:	d064      	beq.n	8002494 <HAL_TIM_ConfigClockSource+0x15a>
 80023ca:	2b30      	cmp	r3, #48	@ 0x30
 80023cc:	d86b      	bhi.n	80024a6 <HAL_TIM_ConfigClockSource+0x16c>
 80023ce:	2b20      	cmp	r3, #32
 80023d0:	d060      	beq.n	8002494 <HAL_TIM_ConfigClockSource+0x15a>
 80023d2:	2b20      	cmp	r3, #32
 80023d4:	d867      	bhi.n	80024a6 <HAL_TIM_ConfigClockSource+0x16c>
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d05c      	beq.n	8002494 <HAL_TIM_ConfigClockSource+0x15a>
 80023da:	2b10      	cmp	r3, #16
 80023dc:	d05a      	beq.n	8002494 <HAL_TIM_ConfigClockSource+0x15a>
 80023de:	e062      	b.n	80024a6 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80023f0:	f000 fb5e 	bl	8002ab0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002402:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	68ba      	ldr	r2, [r7, #8]
 800240a:	609a      	str	r2, [r3, #8]
      break;
 800240c:	e04f      	b.n	80024ae <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800241e:	f000 fb47 	bl	8002ab0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	689a      	ldr	r2, [r3, #8]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002430:	609a      	str	r2, [r3, #8]
      break;
 8002432:	e03c      	b.n	80024ae <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002440:	461a      	mov	r2, r3
 8002442:	f000 fa0b 	bl	800285c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	2150      	movs	r1, #80	@ 0x50
 800244c:	4618      	mov	r0, r3
 800244e:	f000 fb15 	bl	8002a7c <TIM_ITRx_SetConfig>
      break;
 8002452:	e02c      	b.n	80024ae <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002460:	461a      	mov	r2, r3
 8002462:	f000 fa65 	bl	8002930 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	2160      	movs	r1, #96	@ 0x60
 800246c:	4618      	mov	r0, r3
 800246e:	f000 fb05 	bl	8002a7c <TIM_ITRx_SetConfig>
      break;
 8002472:	e01c      	b.n	80024ae <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002480:	461a      	mov	r2, r3
 8002482:	f000 f9eb 	bl	800285c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	2140      	movs	r1, #64	@ 0x40
 800248c:	4618      	mov	r0, r3
 800248e:	f000 faf5 	bl	8002a7c <TIM_ITRx_SetConfig>
      break;
 8002492:	e00c      	b.n	80024ae <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4619      	mov	r1, r3
 800249e:	4610      	mov	r0, r2
 80024a0:	f000 faec 	bl	8002a7c <TIM_ITRx_SetConfig>
      break;
 80024a4:	e003      	b.n	80024ae <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	73fb      	strb	r3, [r7, #15]
      break;
 80024aa:	e000      	b.n	80024ae <HAL_TIM_ConfigClockSource+0x174>
      break;
 80024ac:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2201      	movs	r2, #1
 80024b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80024be:	7bfb      	ldrb	r3, [r7, #15]
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3710      	adds	r7, #16
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d101      	bne.n	80024e0 <HAL_TIM_SlaveConfigSynchro+0x18>
 80024dc:	2302      	movs	r3, #2
 80024de:	e031      	b.n	8002544 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2201      	movs	r2, #1
 80024e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2202      	movs	r2, #2
 80024ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80024f0:	6839      	ldr	r1, [r7, #0]
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f000 f8c6 	bl	8002684 <TIM_SlaveTimer_SetConfig>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d009      	beq.n	8002512 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2201      	movs	r2, #1
 8002502:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e018      	b.n	8002544 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	68da      	ldr	r2, [r3, #12]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002520:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	68da      	ldr	r2, [r3, #12]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002530:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2201      	movs	r2, #1
 8002536:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2200      	movs	r2, #0
 800253e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002542:	2300      	movs	r3, #0
}
 8002544:	4618      	mov	r0, r3
 8002546:	3708      	adds	r7, #8
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}

0800254c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002554:	bf00      	nop
 8002556:	370c      	adds	r7, #12
 8002558:	46bd      	mov	sp, r7
 800255a:	bc80      	pop	{r7}
 800255c:	4770      	bx	lr

0800255e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800255e:	b480      	push	{r7}
 8002560:	b083      	sub	sp, #12
 8002562:	af00      	add	r7, sp, #0
 8002564:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002566:	bf00      	nop
 8002568:	370c      	adds	r7, #12
 800256a:	46bd      	mov	sp, r7
 800256c:	bc80      	pop	{r7}
 800256e:	4770      	bx	lr

08002570 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002578:	bf00      	nop
 800257a:	370c      	adds	r7, #12
 800257c:	46bd      	mov	sp, r7
 800257e:	bc80      	pop	{r7}
 8002580:	4770      	bx	lr

08002582 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002582:	b480      	push	{r7}
 8002584:	b083      	sub	sp, #12
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800258a:	bf00      	nop
 800258c:	370c      	adds	r7, #12
 800258e:	46bd      	mov	sp, r7
 8002590:	bc80      	pop	{r7}
 8002592:	4770      	bx	lr

08002594 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800259c:	bf00      	nop
 800259e:	370c      	adds	r7, #12
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bc80      	pop	{r7}
 80025a4:	4770      	bx	lr
	...

080025a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b085      	sub	sp, #20
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	4a2f      	ldr	r2, [pc, #188]	@ (8002678 <TIM_Base_SetConfig+0xd0>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d00b      	beq.n	80025d8 <TIM_Base_SetConfig+0x30>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025c6:	d007      	beq.n	80025d8 <TIM_Base_SetConfig+0x30>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	4a2c      	ldr	r2, [pc, #176]	@ (800267c <TIM_Base_SetConfig+0xd4>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d003      	beq.n	80025d8 <TIM_Base_SetConfig+0x30>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	4a2b      	ldr	r2, [pc, #172]	@ (8002680 <TIM_Base_SetConfig+0xd8>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d108      	bne.n	80025ea <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80025de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	68fa      	ldr	r2, [r7, #12]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a22      	ldr	r2, [pc, #136]	@ (8002678 <TIM_Base_SetConfig+0xd0>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d00b      	beq.n	800260a <TIM_Base_SetConfig+0x62>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025f8:	d007      	beq.n	800260a <TIM_Base_SetConfig+0x62>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a1f      	ldr	r2, [pc, #124]	@ (800267c <TIM_Base_SetConfig+0xd4>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d003      	beq.n	800260a <TIM_Base_SetConfig+0x62>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a1e      	ldr	r2, [pc, #120]	@ (8002680 <TIM_Base_SetConfig+0xd8>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d108      	bne.n	800261c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002610:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	68fa      	ldr	r2, [r7, #12]
 8002618:	4313      	orrs	r3, r2
 800261a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	695b      	ldr	r3, [r3, #20]
 8002626:	4313      	orrs	r3, r2
 8002628:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	68fa      	ldr	r2, [r7, #12]
 800262e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	689a      	ldr	r2, [r3, #8]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	4a0d      	ldr	r2, [pc, #52]	@ (8002678 <TIM_Base_SetConfig+0xd0>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d103      	bne.n	8002650 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	691a      	ldr	r2, [r3, #16]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2201      	movs	r2, #1
 8002654:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	691b      	ldr	r3, [r3, #16]
 800265a:	f003 0301 	and.w	r3, r3, #1
 800265e:	2b00      	cmp	r3, #0
 8002660:	d005      	beq.n	800266e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	f023 0201 	bic.w	r2, r3, #1
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	611a      	str	r2, [r3, #16]
  }
}
 800266e:	bf00      	nop
 8002670:	3714      	adds	r7, #20
 8002672:	46bd      	mov	sp, r7
 8002674:	bc80      	pop	{r7}
 8002676:	4770      	bx	lr
 8002678:	40012c00 	.word	0x40012c00
 800267c:	40000400 	.word	0x40000400
 8002680:	40000800 	.word	0x40000800

08002684 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b086      	sub	sp, #24
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800268e:	2300      	movs	r3, #0
 8002690:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80026a0:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	693a      	ldr	r2, [r7, #16]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	f023 0307 	bic.w	r3, r3, #7
 80026b2:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	693a      	ldr	r2, [r7, #16]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	693a      	ldr	r2, [r7, #16]
 80026c4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	2b70      	cmp	r3, #112	@ 0x70
 80026cc:	d01a      	beq.n	8002704 <TIM_SlaveTimer_SetConfig+0x80>
 80026ce:	2b70      	cmp	r3, #112	@ 0x70
 80026d0:	d860      	bhi.n	8002794 <TIM_SlaveTimer_SetConfig+0x110>
 80026d2:	2b60      	cmp	r3, #96	@ 0x60
 80026d4:	d054      	beq.n	8002780 <TIM_SlaveTimer_SetConfig+0xfc>
 80026d6:	2b60      	cmp	r3, #96	@ 0x60
 80026d8:	d85c      	bhi.n	8002794 <TIM_SlaveTimer_SetConfig+0x110>
 80026da:	2b50      	cmp	r3, #80	@ 0x50
 80026dc:	d046      	beq.n	800276c <TIM_SlaveTimer_SetConfig+0xe8>
 80026de:	2b50      	cmp	r3, #80	@ 0x50
 80026e0:	d858      	bhi.n	8002794 <TIM_SlaveTimer_SetConfig+0x110>
 80026e2:	2b40      	cmp	r3, #64	@ 0x40
 80026e4:	d019      	beq.n	800271a <TIM_SlaveTimer_SetConfig+0x96>
 80026e6:	2b40      	cmp	r3, #64	@ 0x40
 80026e8:	d854      	bhi.n	8002794 <TIM_SlaveTimer_SetConfig+0x110>
 80026ea:	2b30      	cmp	r3, #48	@ 0x30
 80026ec:	d055      	beq.n	800279a <TIM_SlaveTimer_SetConfig+0x116>
 80026ee:	2b30      	cmp	r3, #48	@ 0x30
 80026f0:	d850      	bhi.n	8002794 <TIM_SlaveTimer_SetConfig+0x110>
 80026f2:	2b20      	cmp	r3, #32
 80026f4:	d051      	beq.n	800279a <TIM_SlaveTimer_SetConfig+0x116>
 80026f6:	2b20      	cmp	r3, #32
 80026f8:	d84c      	bhi.n	8002794 <TIM_SlaveTimer_SetConfig+0x110>
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d04d      	beq.n	800279a <TIM_SlaveTimer_SetConfig+0x116>
 80026fe:	2b10      	cmp	r3, #16
 8002700:	d04b      	beq.n	800279a <TIM_SlaveTimer_SetConfig+0x116>
 8002702:	e047      	b.n	8002794 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8002714:	f000 f9cc 	bl	8002ab0 <TIM_ETR_SetConfig>
      break;
 8002718:	e040      	b.n	800279c <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	2b05      	cmp	r3, #5
 8002720:	d101      	bne.n	8002726 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e03b      	b.n	800279e <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	6a1b      	ldr	r3, [r3, #32]
 800272c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	6a1a      	ldr	r2, [r3, #32]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f022 0201 	bic.w	r2, r2, #1
 800273c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	699b      	ldr	r3, [r3, #24]
 8002744:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800274c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	691b      	ldr	r3, [r3, #16]
 8002752:	011b      	lsls	r3, r3, #4
 8002754:	68ba      	ldr	r2, [r7, #8]
 8002756:	4313      	orrs	r3, r2
 8002758:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	68ba      	ldr	r2, [r7, #8]
 8002760:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	68fa      	ldr	r2, [r7, #12]
 8002768:	621a      	str	r2, [r3, #32]
      break;
 800276a:	e017      	b.n	800279c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002778:	461a      	mov	r2, r3
 800277a:	f000 f86f 	bl	800285c <TIM_TI1_ConfigInputStage>
      break;
 800277e:	e00d      	b.n	800279c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800278c:	461a      	mov	r2, r3
 800278e:	f000 f8cf 	bl	8002930 <TIM_TI2_ConfigInputStage>
      break;
 8002792:	e003      	b.n	800279c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	75fb      	strb	r3, [r7, #23]
      break;
 8002798:	e000      	b.n	800279c <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800279a:	bf00      	nop
  }

  return status;
 800279c:	7dfb      	ldrb	r3, [r7, #23]
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3718      	adds	r7, #24
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
	...

080027a8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b087      	sub	sp, #28
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	60f8      	str	r0, [r7, #12]
 80027b0:	60b9      	str	r1, [r7, #8]
 80027b2:	607a      	str	r2, [r7, #4]
 80027b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	6a1b      	ldr	r3, [r3, #32]
 80027ba:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6a1b      	ldr	r3, [r3, #32]
 80027c0:	f023 0201 	bic.w	r2, r3, #1
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	699b      	ldr	r3, [r3, #24]
 80027cc:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	4a1f      	ldr	r2, [pc, #124]	@ (8002850 <TIM_TI1_SetConfig+0xa8>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d00b      	beq.n	80027ee <TIM_TI1_SetConfig+0x46>
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027dc:	d007      	beq.n	80027ee <TIM_TI1_SetConfig+0x46>
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	4a1c      	ldr	r2, [pc, #112]	@ (8002854 <TIM_TI1_SetConfig+0xac>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d003      	beq.n	80027ee <TIM_TI1_SetConfig+0x46>
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	4a1b      	ldr	r2, [pc, #108]	@ (8002858 <TIM_TI1_SetConfig+0xb0>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d101      	bne.n	80027f2 <TIM_TI1_SetConfig+0x4a>
 80027ee:	2301      	movs	r3, #1
 80027f0:	e000      	b.n	80027f4 <TIM_TI1_SetConfig+0x4c>
 80027f2:	2300      	movs	r3, #0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d008      	beq.n	800280a <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	f023 0303 	bic.w	r3, r3, #3
 80027fe:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002800:	697a      	ldr	r2, [r7, #20]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4313      	orrs	r3, r2
 8002806:	617b      	str	r3, [r7, #20]
 8002808:	e003      	b.n	8002812 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	f043 0301 	orr.w	r3, r3, #1
 8002810:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002818:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	011b      	lsls	r3, r3, #4
 800281e:	b2db      	uxtb	r3, r3
 8002820:	697a      	ldr	r2, [r7, #20]
 8002822:	4313      	orrs	r3, r2
 8002824:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	f023 030a 	bic.w	r3, r3, #10
 800282c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	f003 030a 	and.w	r3, r3, #10
 8002834:	693a      	ldr	r2, [r7, #16]
 8002836:	4313      	orrs	r3, r2
 8002838:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	697a      	ldr	r2, [r7, #20]
 800283e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	693a      	ldr	r2, [r7, #16]
 8002844:	621a      	str	r2, [r3, #32]
}
 8002846:	bf00      	nop
 8002848:	371c      	adds	r7, #28
 800284a:	46bd      	mov	sp, r7
 800284c:	bc80      	pop	{r7}
 800284e:	4770      	bx	lr
 8002850:	40012c00 	.word	0x40012c00
 8002854:	40000400 	.word	0x40000400
 8002858:	40000800 	.word	0x40000800

0800285c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800285c:	b480      	push	{r7}
 800285e:	b087      	sub	sp, #28
 8002860:	af00      	add	r7, sp, #0
 8002862:	60f8      	str	r0, [r7, #12]
 8002864:	60b9      	str	r1, [r7, #8]
 8002866:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	6a1b      	ldr	r3, [r3, #32]
 800286c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	6a1b      	ldr	r3, [r3, #32]
 8002872:	f023 0201 	bic.w	r2, r3, #1
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	699b      	ldr	r3, [r3, #24]
 800287e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002886:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	011b      	lsls	r3, r3, #4
 800288c:	693a      	ldr	r2, [r7, #16]
 800288e:	4313      	orrs	r3, r2
 8002890:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	f023 030a 	bic.w	r3, r3, #10
 8002898:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800289a:	697a      	ldr	r2, [r7, #20]
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	4313      	orrs	r3, r2
 80028a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	693a      	ldr	r2, [r7, #16]
 80028a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	697a      	ldr	r2, [r7, #20]
 80028ac:	621a      	str	r2, [r3, #32]
}
 80028ae:	bf00      	nop
 80028b0:	371c      	adds	r7, #28
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bc80      	pop	{r7}
 80028b6:	4770      	bx	lr

080028b8 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b087      	sub	sp, #28
 80028bc:	af00      	add	r7, sp, #0
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	60b9      	str	r1, [r7, #8]
 80028c2:	607a      	str	r2, [r7, #4]
 80028c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	6a1b      	ldr	r3, [r3, #32]
 80028ca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6a1b      	ldr	r3, [r3, #32]
 80028d0:	f023 0210 	bic.w	r2, r3, #16
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	699b      	ldr	r3, [r3, #24]
 80028dc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80028e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	021b      	lsls	r3, r3, #8
 80028ea:	693a      	ldr	r2, [r7, #16]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80028f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	031b      	lsls	r3, r3, #12
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	693a      	ldr	r2, [r7, #16]
 8002900:	4313      	orrs	r3, r2
 8002902:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800290a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	011b      	lsls	r3, r3, #4
 8002910:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8002914:	697a      	ldr	r2, [r7, #20]
 8002916:	4313      	orrs	r3, r2
 8002918:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	693a      	ldr	r2, [r7, #16]
 800291e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	697a      	ldr	r2, [r7, #20]
 8002924:	621a      	str	r2, [r3, #32]
}
 8002926:	bf00      	nop
 8002928:	371c      	adds	r7, #28
 800292a:	46bd      	mov	sp, r7
 800292c:	bc80      	pop	{r7}
 800292e:	4770      	bx	lr

08002930 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002930:	b480      	push	{r7}
 8002932:	b087      	sub	sp, #28
 8002934:	af00      	add	r7, sp, #0
 8002936:	60f8      	str	r0, [r7, #12]
 8002938:	60b9      	str	r1, [r7, #8]
 800293a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6a1b      	ldr	r3, [r3, #32]
 8002940:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	6a1b      	ldr	r3, [r3, #32]
 8002946:	f023 0210 	bic.w	r2, r3, #16
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	699b      	ldr	r3, [r3, #24]
 8002952:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800295a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	031b      	lsls	r3, r3, #12
 8002960:	693a      	ldr	r2, [r7, #16]
 8002962:	4313      	orrs	r3, r2
 8002964:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800296c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	011b      	lsls	r3, r3, #4
 8002972:	697a      	ldr	r2, [r7, #20]
 8002974:	4313      	orrs	r3, r2
 8002976:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	693a      	ldr	r2, [r7, #16]
 800297c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	697a      	ldr	r2, [r7, #20]
 8002982:	621a      	str	r2, [r3, #32]
}
 8002984:	bf00      	nop
 8002986:	371c      	adds	r7, #28
 8002988:	46bd      	mov	sp, r7
 800298a:	bc80      	pop	{r7}
 800298c:	4770      	bx	lr

0800298e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800298e:	b480      	push	{r7}
 8002990:	b087      	sub	sp, #28
 8002992:	af00      	add	r7, sp, #0
 8002994:	60f8      	str	r0, [r7, #12]
 8002996:	60b9      	str	r1, [r7, #8]
 8002998:	607a      	str	r2, [r7, #4]
 800299a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6a1b      	ldr	r3, [r3, #32]
 80029a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	6a1b      	ldr	r3, [r3, #32]
 80029a6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	69db      	ldr	r3, [r3, #28]
 80029b2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	f023 0303 	bic.w	r3, r3, #3
 80029ba:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80029bc:	693a      	ldr	r2, [r7, #16]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80029ca:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	011b      	lsls	r3, r3, #4
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	693a      	ldr	r2, [r7, #16]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80029de:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	021b      	lsls	r3, r3, #8
 80029e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029e8:	697a      	ldr	r2, [r7, #20]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	693a      	ldr	r2, [r7, #16]
 80029f2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	697a      	ldr	r2, [r7, #20]
 80029f8:	621a      	str	r2, [r3, #32]
}
 80029fa:	bf00      	nop
 80029fc:	371c      	adds	r7, #28
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bc80      	pop	{r7}
 8002a02:	4770      	bx	lr

08002a04 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b087      	sub	sp, #28
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	60b9      	str	r1, [r7, #8]
 8002a0e:	607a      	str	r2, [r7, #4]
 8002a10:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	6a1b      	ldr	r3, [r3, #32]
 8002a16:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6a1b      	ldr	r3, [r3, #32]
 8002a1c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	69db      	ldr	r3, [r3, #28]
 8002a28:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a30:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	021b      	lsls	r3, r3, #8
 8002a36:	693a      	ldr	r2, [r7, #16]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002a42:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	031b      	lsls	r3, r3, #12
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	693a      	ldr	r2, [r7, #16]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002a56:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	031b      	lsls	r3, r3, #12
 8002a5c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a60:	697a      	ldr	r2, [r7, #20]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	693a      	ldr	r2, [r7, #16]
 8002a6a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	697a      	ldr	r2, [r7, #20]
 8002a70:	621a      	str	r2, [r3, #32]
}
 8002a72:	bf00      	nop
 8002a74:	371c      	adds	r7, #28
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bc80      	pop	{r7}
 8002a7a:	4770      	bx	lr

08002a7c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b085      	sub	sp, #20
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a92:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a94:	683a      	ldr	r2, [r7, #0]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	f043 0307 	orr.w	r3, r3, #7
 8002a9e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	68fa      	ldr	r2, [r7, #12]
 8002aa4:	609a      	str	r2, [r3, #8]
}
 8002aa6:	bf00      	nop
 8002aa8:	3714      	adds	r7, #20
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bc80      	pop	{r7}
 8002aae:	4770      	bx	lr

08002ab0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b087      	sub	sp, #28
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	60b9      	str	r1, [r7, #8]
 8002aba:	607a      	str	r2, [r7, #4]
 8002abc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002aca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	021a      	lsls	r2, r3, #8
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	431a      	orrs	r2, r3
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	697a      	ldr	r2, [r7, #20]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	697a      	ldr	r2, [r7, #20]
 8002ae2:	609a      	str	r2, [r3, #8]
}
 8002ae4:	bf00      	nop
 8002ae6:	371c      	adds	r7, #28
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bc80      	pop	{r7}
 8002aec:	4770      	bx	lr
	...

08002af0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b085      	sub	sp, #20
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d101      	bne.n	8002b08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b04:	2302      	movs	r3, #2
 8002b06:	e046      	b.n	8002b96 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2202      	movs	r2, #2
 8002b14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	68fa      	ldr	r2, [r7, #12]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	68fa      	ldr	r2, [r7, #12]
 8002b40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a16      	ldr	r2, [pc, #88]	@ (8002ba0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d00e      	beq.n	8002b6a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b54:	d009      	beq.n	8002b6a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a12      	ldr	r2, [pc, #72]	@ (8002ba4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d004      	beq.n	8002b6a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a10      	ldr	r2, [pc, #64]	@ (8002ba8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d10c      	bne.n	8002b84 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002b70:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	68ba      	ldr	r2, [r7, #8]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	68ba      	ldr	r2, [r7, #8]
 8002b82:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2201      	movs	r2, #1
 8002b88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002b94:	2300      	movs	r3, #0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3714      	adds	r7, #20
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bc80      	pop	{r7}
 8002b9e:	4770      	bx	lr
 8002ba0:	40012c00 	.word	0x40012c00
 8002ba4:	40000400 	.word	0x40000400
 8002ba8:	40000800 	.word	0x40000800

08002bac <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002bb4:	bf00      	nop
 8002bb6:	370c      	adds	r7, #12
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bc80      	pop	{r7}
 8002bbc:	4770      	bx	lr

08002bbe <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002bbe:	b480      	push	{r7}
 8002bc0:	b083      	sub	sp, #12
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002bc6:	bf00      	nop
 8002bc8:	370c      	adds	r7, #12
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bc80      	pop	{r7}
 8002bce:	4770      	bx	lr

08002bd0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d101      	bne.n	8002be2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e042      	b.n	8002c68 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d106      	bne.n	8002bfc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f7fe f9ca 	bl	8000f90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2224      	movs	r2, #36	@ 0x24
 8002c00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	68da      	ldr	r2, [r3, #12]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002c12:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f000 f889 	bl	8002d2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	691a      	ldr	r2, [r3, #16]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002c28:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	695a      	ldr	r2, [r3, #20]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002c38:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	68da      	ldr	r2, [r3, #12]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002c48:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2220      	movs	r2, #32
 8002c54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2220      	movs	r2, #32
 8002c5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2200      	movs	r2, #0
 8002c64:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002c66:	2300      	movs	r3, #0
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3708      	adds	r7, #8
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	60b9      	str	r1, [r7, #8]
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	2b20      	cmp	r3, #32
 8002c88:	d112      	bne.n	8002cb0 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d002      	beq.n	8002c96 <HAL_UART_Receive_IT+0x26>
 8002c90:	88fb      	ldrh	r3, [r7, #6]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d101      	bne.n	8002c9a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e00b      	b.n	8002cb2 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002ca0:	88fb      	ldrh	r3, [r7, #6]
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	68b9      	ldr	r1, [r7, #8]
 8002ca6:	68f8      	ldr	r0, [r7, #12]
 8002ca8:	f000 f807 	bl	8002cba <UART_Start_Receive_IT>
 8002cac:	4603      	mov	r3, r0
 8002cae:	e000      	b.n	8002cb2 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002cb0:	2302      	movs	r3, #2
  }
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3710      	adds	r7, #16
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}

08002cba <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002cba:	b480      	push	{r7}
 8002cbc:	b085      	sub	sp, #20
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	60f8      	str	r0, [r7, #12]
 8002cc2:	60b9      	str	r1, [r7, #8]
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	68ba      	ldr	r2, [r7, #8]
 8002ccc:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	88fa      	ldrh	r2, [r7, #6]
 8002cd2:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	88fa      	ldrh	r2, [r7, #6]
 8002cd8:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2222      	movs	r2, #34	@ 0x22
 8002ce4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	691b      	ldr	r3, [r3, #16]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d007      	beq.n	8002d00 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	68da      	ldr	r2, [r3, #12]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002cfe:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	695a      	ldr	r2, [r3, #20]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f042 0201 	orr.w	r2, r2, #1
 8002d0e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	68da      	ldr	r2, [r3, #12]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f042 0220 	orr.w	r2, r2, #32
 8002d1e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002d20:	2300      	movs	r3, #0
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3714      	adds	r7, #20
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bc80      	pop	{r7}
 8002d2a:	4770      	bx	lr

08002d2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	691b      	ldr	r3, [r3, #16]
 8002d3a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	68da      	ldr	r2, [r3, #12]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	430a      	orrs	r2, r1
 8002d48:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	689a      	ldr	r2, [r3, #8]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	431a      	orrs	r2, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	695b      	ldr	r3, [r3, #20]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002d66:	f023 030c 	bic.w	r3, r3, #12
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	6812      	ldr	r2, [r2, #0]
 8002d6e:	68b9      	ldr	r1, [r7, #8]
 8002d70:	430b      	orrs	r3, r1
 8002d72:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	695b      	ldr	r3, [r3, #20]
 8002d7a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	699a      	ldr	r2, [r3, #24]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	430a      	orrs	r2, r1
 8002d88:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a2c      	ldr	r2, [pc, #176]	@ (8002e40 <UART_SetConfig+0x114>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d103      	bne.n	8002d9c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002d94:	f7ff f86c 	bl	8001e70 <HAL_RCC_GetPCLK2Freq>
 8002d98:	60f8      	str	r0, [r7, #12]
 8002d9a:	e002      	b.n	8002da2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002d9c:	f7ff f854 	bl	8001e48 <HAL_RCC_GetPCLK1Freq>
 8002da0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002da2:	68fa      	ldr	r2, [r7, #12]
 8002da4:	4613      	mov	r3, r2
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	4413      	add	r3, r2
 8002daa:	009a      	lsls	r2, r3, #2
 8002dac:	441a      	add	r2, r3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002db8:	4a22      	ldr	r2, [pc, #136]	@ (8002e44 <UART_SetConfig+0x118>)
 8002dba:	fba2 2303 	umull	r2, r3, r2, r3
 8002dbe:	095b      	lsrs	r3, r3, #5
 8002dc0:	0119      	lsls	r1, r3, #4
 8002dc2:	68fa      	ldr	r2, [r7, #12]
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	4413      	add	r3, r2
 8002dca:	009a      	lsls	r2, r3, #2
 8002dcc:	441a      	add	r2, r3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002dd8:	4b1a      	ldr	r3, [pc, #104]	@ (8002e44 <UART_SetConfig+0x118>)
 8002dda:	fba3 0302 	umull	r0, r3, r3, r2
 8002dde:	095b      	lsrs	r3, r3, #5
 8002de0:	2064      	movs	r0, #100	@ 0x64
 8002de2:	fb00 f303 	mul.w	r3, r0, r3
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	011b      	lsls	r3, r3, #4
 8002dea:	3332      	adds	r3, #50	@ 0x32
 8002dec:	4a15      	ldr	r2, [pc, #84]	@ (8002e44 <UART_SetConfig+0x118>)
 8002dee:	fba2 2303 	umull	r2, r3, r2, r3
 8002df2:	095b      	lsrs	r3, r3, #5
 8002df4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002df8:	4419      	add	r1, r3
 8002dfa:	68fa      	ldr	r2, [r7, #12]
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	4413      	add	r3, r2
 8002e02:	009a      	lsls	r2, r3, #2
 8002e04:	441a      	add	r2, r3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e10:	4b0c      	ldr	r3, [pc, #48]	@ (8002e44 <UART_SetConfig+0x118>)
 8002e12:	fba3 0302 	umull	r0, r3, r3, r2
 8002e16:	095b      	lsrs	r3, r3, #5
 8002e18:	2064      	movs	r0, #100	@ 0x64
 8002e1a:	fb00 f303 	mul.w	r3, r0, r3
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	011b      	lsls	r3, r3, #4
 8002e22:	3332      	adds	r3, #50	@ 0x32
 8002e24:	4a07      	ldr	r2, [pc, #28]	@ (8002e44 <UART_SetConfig+0x118>)
 8002e26:	fba2 2303 	umull	r2, r3, r2, r3
 8002e2a:	095b      	lsrs	r3, r3, #5
 8002e2c:	f003 020f 	and.w	r2, r3, #15
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	440a      	add	r2, r1
 8002e36:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002e38:	bf00      	nop
 8002e3a:	3710      	adds	r7, #16
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	40013800 	.word	0x40013800
 8002e44:	51eb851f 	.word	0x51eb851f

08002e48 <atoi>:
 8002e48:	220a      	movs	r2, #10
 8002e4a:	2100      	movs	r1, #0
 8002e4c:	f000 b928 	b.w	80030a0 <strtol>

08002e50 <sbrk_aligned>:
 8002e50:	b570      	push	{r4, r5, r6, lr}
 8002e52:	4e0f      	ldr	r6, [pc, #60]	@ (8002e90 <sbrk_aligned+0x40>)
 8002e54:	460c      	mov	r4, r1
 8002e56:	6831      	ldr	r1, [r6, #0]
 8002e58:	4605      	mov	r5, r0
 8002e5a:	b911      	cbnz	r1, 8002e62 <sbrk_aligned+0x12>
 8002e5c:	f000 fa90 	bl	8003380 <_sbrk_r>
 8002e60:	6030      	str	r0, [r6, #0]
 8002e62:	4621      	mov	r1, r4
 8002e64:	4628      	mov	r0, r5
 8002e66:	f000 fa8b 	bl	8003380 <_sbrk_r>
 8002e6a:	1c43      	adds	r3, r0, #1
 8002e6c:	d103      	bne.n	8002e76 <sbrk_aligned+0x26>
 8002e6e:	f04f 34ff 	mov.w	r4, #4294967295
 8002e72:	4620      	mov	r0, r4
 8002e74:	bd70      	pop	{r4, r5, r6, pc}
 8002e76:	1cc4      	adds	r4, r0, #3
 8002e78:	f024 0403 	bic.w	r4, r4, #3
 8002e7c:	42a0      	cmp	r0, r4
 8002e7e:	d0f8      	beq.n	8002e72 <sbrk_aligned+0x22>
 8002e80:	1a21      	subs	r1, r4, r0
 8002e82:	4628      	mov	r0, r5
 8002e84:	f000 fa7c 	bl	8003380 <_sbrk_r>
 8002e88:	3001      	adds	r0, #1
 8002e8a:	d1f2      	bne.n	8002e72 <sbrk_aligned+0x22>
 8002e8c:	e7ef      	b.n	8002e6e <sbrk_aligned+0x1e>
 8002e8e:	bf00      	nop
 8002e90:	20000640 	.word	0x20000640

08002e94 <_malloc_r>:
 8002e94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002e98:	1ccd      	adds	r5, r1, #3
 8002e9a:	f025 0503 	bic.w	r5, r5, #3
 8002e9e:	3508      	adds	r5, #8
 8002ea0:	2d0c      	cmp	r5, #12
 8002ea2:	bf38      	it	cc
 8002ea4:	250c      	movcc	r5, #12
 8002ea6:	2d00      	cmp	r5, #0
 8002ea8:	4606      	mov	r6, r0
 8002eaa:	db01      	blt.n	8002eb0 <_malloc_r+0x1c>
 8002eac:	42a9      	cmp	r1, r5
 8002eae:	d904      	bls.n	8002eba <_malloc_r+0x26>
 8002eb0:	230c      	movs	r3, #12
 8002eb2:	6033      	str	r3, [r6, #0]
 8002eb4:	2000      	movs	r0, #0
 8002eb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002eba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002f90 <_malloc_r+0xfc>
 8002ebe:	f000 f869 	bl	8002f94 <__malloc_lock>
 8002ec2:	f8d8 3000 	ldr.w	r3, [r8]
 8002ec6:	461c      	mov	r4, r3
 8002ec8:	bb44      	cbnz	r4, 8002f1c <_malloc_r+0x88>
 8002eca:	4629      	mov	r1, r5
 8002ecc:	4630      	mov	r0, r6
 8002ece:	f7ff ffbf 	bl	8002e50 <sbrk_aligned>
 8002ed2:	1c43      	adds	r3, r0, #1
 8002ed4:	4604      	mov	r4, r0
 8002ed6:	d158      	bne.n	8002f8a <_malloc_r+0xf6>
 8002ed8:	f8d8 4000 	ldr.w	r4, [r8]
 8002edc:	4627      	mov	r7, r4
 8002ede:	2f00      	cmp	r7, #0
 8002ee0:	d143      	bne.n	8002f6a <_malloc_r+0xd6>
 8002ee2:	2c00      	cmp	r4, #0
 8002ee4:	d04b      	beq.n	8002f7e <_malloc_r+0xea>
 8002ee6:	6823      	ldr	r3, [r4, #0]
 8002ee8:	4639      	mov	r1, r7
 8002eea:	4630      	mov	r0, r6
 8002eec:	eb04 0903 	add.w	r9, r4, r3
 8002ef0:	f000 fa46 	bl	8003380 <_sbrk_r>
 8002ef4:	4581      	cmp	r9, r0
 8002ef6:	d142      	bne.n	8002f7e <_malloc_r+0xea>
 8002ef8:	6821      	ldr	r1, [r4, #0]
 8002efa:	4630      	mov	r0, r6
 8002efc:	1a6d      	subs	r5, r5, r1
 8002efe:	4629      	mov	r1, r5
 8002f00:	f7ff ffa6 	bl	8002e50 <sbrk_aligned>
 8002f04:	3001      	adds	r0, #1
 8002f06:	d03a      	beq.n	8002f7e <_malloc_r+0xea>
 8002f08:	6823      	ldr	r3, [r4, #0]
 8002f0a:	442b      	add	r3, r5
 8002f0c:	6023      	str	r3, [r4, #0]
 8002f0e:	f8d8 3000 	ldr.w	r3, [r8]
 8002f12:	685a      	ldr	r2, [r3, #4]
 8002f14:	bb62      	cbnz	r2, 8002f70 <_malloc_r+0xdc>
 8002f16:	f8c8 7000 	str.w	r7, [r8]
 8002f1a:	e00f      	b.n	8002f3c <_malloc_r+0xa8>
 8002f1c:	6822      	ldr	r2, [r4, #0]
 8002f1e:	1b52      	subs	r2, r2, r5
 8002f20:	d420      	bmi.n	8002f64 <_malloc_r+0xd0>
 8002f22:	2a0b      	cmp	r2, #11
 8002f24:	d917      	bls.n	8002f56 <_malloc_r+0xc2>
 8002f26:	1961      	adds	r1, r4, r5
 8002f28:	42a3      	cmp	r3, r4
 8002f2a:	6025      	str	r5, [r4, #0]
 8002f2c:	bf18      	it	ne
 8002f2e:	6059      	strne	r1, [r3, #4]
 8002f30:	6863      	ldr	r3, [r4, #4]
 8002f32:	bf08      	it	eq
 8002f34:	f8c8 1000 	streq.w	r1, [r8]
 8002f38:	5162      	str	r2, [r4, r5]
 8002f3a:	604b      	str	r3, [r1, #4]
 8002f3c:	4630      	mov	r0, r6
 8002f3e:	f000 f82f 	bl	8002fa0 <__malloc_unlock>
 8002f42:	f104 000b 	add.w	r0, r4, #11
 8002f46:	1d23      	adds	r3, r4, #4
 8002f48:	f020 0007 	bic.w	r0, r0, #7
 8002f4c:	1ac2      	subs	r2, r0, r3
 8002f4e:	bf1c      	itt	ne
 8002f50:	1a1b      	subne	r3, r3, r0
 8002f52:	50a3      	strne	r3, [r4, r2]
 8002f54:	e7af      	b.n	8002eb6 <_malloc_r+0x22>
 8002f56:	6862      	ldr	r2, [r4, #4]
 8002f58:	42a3      	cmp	r3, r4
 8002f5a:	bf0c      	ite	eq
 8002f5c:	f8c8 2000 	streq.w	r2, [r8]
 8002f60:	605a      	strne	r2, [r3, #4]
 8002f62:	e7eb      	b.n	8002f3c <_malloc_r+0xa8>
 8002f64:	4623      	mov	r3, r4
 8002f66:	6864      	ldr	r4, [r4, #4]
 8002f68:	e7ae      	b.n	8002ec8 <_malloc_r+0x34>
 8002f6a:	463c      	mov	r4, r7
 8002f6c:	687f      	ldr	r7, [r7, #4]
 8002f6e:	e7b6      	b.n	8002ede <_malloc_r+0x4a>
 8002f70:	461a      	mov	r2, r3
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	42a3      	cmp	r3, r4
 8002f76:	d1fb      	bne.n	8002f70 <_malloc_r+0xdc>
 8002f78:	2300      	movs	r3, #0
 8002f7a:	6053      	str	r3, [r2, #4]
 8002f7c:	e7de      	b.n	8002f3c <_malloc_r+0xa8>
 8002f7e:	230c      	movs	r3, #12
 8002f80:	4630      	mov	r0, r6
 8002f82:	6033      	str	r3, [r6, #0]
 8002f84:	f000 f80c 	bl	8002fa0 <__malloc_unlock>
 8002f88:	e794      	b.n	8002eb4 <_malloc_r+0x20>
 8002f8a:	6005      	str	r5, [r0, #0]
 8002f8c:	e7d6      	b.n	8002f3c <_malloc_r+0xa8>
 8002f8e:	bf00      	nop
 8002f90:	20000644 	.word	0x20000644

08002f94 <__malloc_lock>:
 8002f94:	4801      	ldr	r0, [pc, #4]	@ (8002f9c <__malloc_lock+0x8>)
 8002f96:	f000 ba40 	b.w	800341a <__retarget_lock_acquire_recursive>
 8002f9a:	bf00      	nop
 8002f9c:	20000788 	.word	0x20000788

08002fa0 <__malloc_unlock>:
 8002fa0:	4801      	ldr	r0, [pc, #4]	@ (8002fa8 <__malloc_unlock+0x8>)
 8002fa2:	f000 ba3b 	b.w	800341c <__retarget_lock_release_recursive>
 8002fa6:	bf00      	nop
 8002fa8:	20000788 	.word	0x20000788

08002fac <_strtol_l.constprop.0>:
 8002fac:	2b24      	cmp	r3, #36	@ 0x24
 8002fae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002fb2:	4686      	mov	lr, r0
 8002fb4:	4690      	mov	r8, r2
 8002fb6:	d801      	bhi.n	8002fbc <_strtol_l.constprop.0+0x10>
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d106      	bne.n	8002fca <_strtol_l.constprop.0+0x1e>
 8002fbc:	f000 fa02 	bl	80033c4 <__errno>
 8002fc0:	2316      	movs	r3, #22
 8002fc2:	6003      	str	r3, [r0, #0]
 8002fc4:	2000      	movs	r0, #0
 8002fc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002fca:	460d      	mov	r5, r1
 8002fcc:	4833      	ldr	r0, [pc, #204]	@ (800309c <_strtol_l.constprop.0+0xf0>)
 8002fce:	462a      	mov	r2, r5
 8002fd0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002fd4:	5d06      	ldrb	r6, [r0, r4]
 8002fd6:	f016 0608 	ands.w	r6, r6, #8
 8002fda:	d1f8      	bne.n	8002fce <_strtol_l.constprop.0+0x22>
 8002fdc:	2c2d      	cmp	r4, #45	@ 0x2d
 8002fde:	d12d      	bne.n	800303c <_strtol_l.constprop.0+0x90>
 8002fe0:	2601      	movs	r6, #1
 8002fe2:	782c      	ldrb	r4, [r5, #0]
 8002fe4:	1c95      	adds	r5, r2, #2
 8002fe6:	f033 0210 	bics.w	r2, r3, #16
 8002fea:	d109      	bne.n	8003000 <_strtol_l.constprop.0+0x54>
 8002fec:	2c30      	cmp	r4, #48	@ 0x30
 8002fee:	d12a      	bne.n	8003046 <_strtol_l.constprop.0+0x9a>
 8002ff0:	782a      	ldrb	r2, [r5, #0]
 8002ff2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8002ff6:	2a58      	cmp	r2, #88	@ 0x58
 8002ff8:	d125      	bne.n	8003046 <_strtol_l.constprop.0+0x9a>
 8002ffa:	2310      	movs	r3, #16
 8002ffc:	786c      	ldrb	r4, [r5, #1]
 8002ffe:	3502      	adds	r5, #2
 8003000:	2200      	movs	r2, #0
 8003002:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8003006:	f10c 3cff 	add.w	ip, ip, #4294967295
 800300a:	fbbc f9f3 	udiv	r9, ip, r3
 800300e:	4610      	mov	r0, r2
 8003010:	fb03 ca19 	mls	sl, r3, r9, ip
 8003014:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8003018:	2f09      	cmp	r7, #9
 800301a:	d81b      	bhi.n	8003054 <_strtol_l.constprop.0+0xa8>
 800301c:	463c      	mov	r4, r7
 800301e:	42a3      	cmp	r3, r4
 8003020:	dd27      	ble.n	8003072 <_strtol_l.constprop.0+0xc6>
 8003022:	1c57      	adds	r7, r2, #1
 8003024:	d007      	beq.n	8003036 <_strtol_l.constprop.0+0x8a>
 8003026:	4581      	cmp	r9, r0
 8003028:	d320      	bcc.n	800306c <_strtol_l.constprop.0+0xc0>
 800302a:	d101      	bne.n	8003030 <_strtol_l.constprop.0+0x84>
 800302c:	45a2      	cmp	sl, r4
 800302e:	db1d      	blt.n	800306c <_strtol_l.constprop.0+0xc0>
 8003030:	2201      	movs	r2, #1
 8003032:	fb00 4003 	mla	r0, r0, r3, r4
 8003036:	f815 4b01 	ldrb.w	r4, [r5], #1
 800303a:	e7eb      	b.n	8003014 <_strtol_l.constprop.0+0x68>
 800303c:	2c2b      	cmp	r4, #43	@ 0x2b
 800303e:	bf04      	itt	eq
 8003040:	782c      	ldrbeq	r4, [r5, #0]
 8003042:	1c95      	addeq	r5, r2, #2
 8003044:	e7cf      	b.n	8002fe6 <_strtol_l.constprop.0+0x3a>
 8003046:	2b00      	cmp	r3, #0
 8003048:	d1da      	bne.n	8003000 <_strtol_l.constprop.0+0x54>
 800304a:	2c30      	cmp	r4, #48	@ 0x30
 800304c:	bf0c      	ite	eq
 800304e:	2308      	moveq	r3, #8
 8003050:	230a      	movne	r3, #10
 8003052:	e7d5      	b.n	8003000 <_strtol_l.constprop.0+0x54>
 8003054:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8003058:	2f19      	cmp	r7, #25
 800305a:	d801      	bhi.n	8003060 <_strtol_l.constprop.0+0xb4>
 800305c:	3c37      	subs	r4, #55	@ 0x37
 800305e:	e7de      	b.n	800301e <_strtol_l.constprop.0+0x72>
 8003060:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8003064:	2f19      	cmp	r7, #25
 8003066:	d804      	bhi.n	8003072 <_strtol_l.constprop.0+0xc6>
 8003068:	3c57      	subs	r4, #87	@ 0x57
 800306a:	e7d8      	b.n	800301e <_strtol_l.constprop.0+0x72>
 800306c:	f04f 32ff 	mov.w	r2, #4294967295
 8003070:	e7e1      	b.n	8003036 <_strtol_l.constprop.0+0x8a>
 8003072:	1c53      	adds	r3, r2, #1
 8003074:	d108      	bne.n	8003088 <_strtol_l.constprop.0+0xdc>
 8003076:	2322      	movs	r3, #34	@ 0x22
 8003078:	4660      	mov	r0, ip
 800307a:	f8ce 3000 	str.w	r3, [lr]
 800307e:	f1b8 0f00 	cmp.w	r8, #0
 8003082:	d0a0      	beq.n	8002fc6 <_strtol_l.constprop.0+0x1a>
 8003084:	1e69      	subs	r1, r5, #1
 8003086:	e006      	b.n	8003096 <_strtol_l.constprop.0+0xea>
 8003088:	b106      	cbz	r6, 800308c <_strtol_l.constprop.0+0xe0>
 800308a:	4240      	negs	r0, r0
 800308c:	f1b8 0f00 	cmp.w	r8, #0
 8003090:	d099      	beq.n	8002fc6 <_strtol_l.constprop.0+0x1a>
 8003092:	2a00      	cmp	r2, #0
 8003094:	d1f6      	bne.n	8003084 <_strtol_l.constprop.0+0xd8>
 8003096:	f8c8 1000 	str.w	r1, [r8]
 800309a:	e794      	b.n	8002fc6 <_strtol_l.constprop.0+0x1a>
 800309c:	08003ee7 	.word	0x08003ee7

080030a0 <strtol>:
 80030a0:	4613      	mov	r3, r2
 80030a2:	460a      	mov	r2, r1
 80030a4:	4601      	mov	r1, r0
 80030a6:	4802      	ldr	r0, [pc, #8]	@ (80030b0 <strtol+0x10>)
 80030a8:	6800      	ldr	r0, [r0, #0]
 80030aa:	f7ff bf7f 	b.w	8002fac <_strtol_l.constprop.0>
 80030ae:	bf00      	nop
 80030b0:	20000018 	.word	0x20000018

080030b4 <std>:
 80030b4:	2300      	movs	r3, #0
 80030b6:	b510      	push	{r4, lr}
 80030b8:	4604      	mov	r4, r0
 80030ba:	e9c0 3300 	strd	r3, r3, [r0]
 80030be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80030c2:	6083      	str	r3, [r0, #8]
 80030c4:	8181      	strh	r1, [r0, #12]
 80030c6:	6643      	str	r3, [r0, #100]	@ 0x64
 80030c8:	81c2      	strh	r2, [r0, #14]
 80030ca:	6183      	str	r3, [r0, #24]
 80030cc:	4619      	mov	r1, r3
 80030ce:	2208      	movs	r2, #8
 80030d0:	305c      	adds	r0, #92	@ 0x5c
 80030d2:	f000 f906 	bl	80032e2 <memset>
 80030d6:	4b0d      	ldr	r3, [pc, #52]	@ (800310c <std+0x58>)
 80030d8:	6224      	str	r4, [r4, #32]
 80030da:	6263      	str	r3, [r4, #36]	@ 0x24
 80030dc:	4b0c      	ldr	r3, [pc, #48]	@ (8003110 <std+0x5c>)
 80030de:	62a3      	str	r3, [r4, #40]	@ 0x28
 80030e0:	4b0c      	ldr	r3, [pc, #48]	@ (8003114 <std+0x60>)
 80030e2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80030e4:	4b0c      	ldr	r3, [pc, #48]	@ (8003118 <std+0x64>)
 80030e6:	6323      	str	r3, [r4, #48]	@ 0x30
 80030e8:	4b0c      	ldr	r3, [pc, #48]	@ (800311c <std+0x68>)
 80030ea:	429c      	cmp	r4, r3
 80030ec:	d006      	beq.n	80030fc <std+0x48>
 80030ee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80030f2:	4294      	cmp	r4, r2
 80030f4:	d002      	beq.n	80030fc <std+0x48>
 80030f6:	33d0      	adds	r3, #208	@ 0xd0
 80030f8:	429c      	cmp	r4, r3
 80030fa:	d105      	bne.n	8003108 <std+0x54>
 80030fc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003100:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003104:	f000 b988 	b.w	8003418 <__retarget_lock_init_recursive>
 8003108:	bd10      	pop	{r4, pc}
 800310a:	bf00      	nop
 800310c:	0800325d 	.word	0x0800325d
 8003110:	0800327f 	.word	0x0800327f
 8003114:	080032b7 	.word	0x080032b7
 8003118:	080032db 	.word	0x080032db
 800311c:	20000648 	.word	0x20000648

08003120 <stdio_exit_handler>:
 8003120:	4a02      	ldr	r2, [pc, #8]	@ (800312c <stdio_exit_handler+0xc>)
 8003122:	4903      	ldr	r1, [pc, #12]	@ (8003130 <stdio_exit_handler+0x10>)
 8003124:	4803      	ldr	r0, [pc, #12]	@ (8003134 <stdio_exit_handler+0x14>)
 8003126:	f000 b869 	b.w	80031fc <_fwalk_sglue>
 800312a:	bf00      	nop
 800312c:	2000000c 	.word	0x2000000c
 8003130:	08003b55 	.word	0x08003b55
 8003134:	2000001c 	.word	0x2000001c

08003138 <cleanup_stdio>:
 8003138:	6841      	ldr	r1, [r0, #4]
 800313a:	4b0c      	ldr	r3, [pc, #48]	@ (800316c <cleanup_stdio+0x34>)
 800313c:	b510      	push	{r4, lr}
 800313e:	4299      	cmp	r1, r3
 8003140:	4604      	mov	r4, r0
 8003142:	d001      	beq.n	8003148 <cleanup_stdio+0x10>
 8003144:	f000 fd06 	bl	8003b54 <_fflush_r>
 8003148:	68a1      	ldr	r1, [r4, #8]
 800314a:	4b09      	ldr	r3, [pc, #36]	@ (8003170 <cleanup_stdio+0x38>)
 800314c:	4299      	cmp	r1, r3
 800314e:	d002      	beq.n	8003156 <cleanup_stdio+0x1e>
 8003150:	4620      	mov	r0, r4
 8003152:	f000 fcff 	bl	8003b54 <_fflush_r>
 8003156:	68e1      	ldr	r1, [r4, #12]
 8003158:	4b06      	ldr	r3, [pc, #24]	@ (8003174 <cleanup_stdio+0x3c>)
 800315a:	4299      	cmp	r1, r3
 800315c:	d004      	beq.n	8003168 <cleanup_stdio+0x30>
 800315e:	4620      	mov	r0, r4
 8003160:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003164:	f000 bcf6 	b.w	8003b54 <_fflush_r>
 8003168:	bd10      	pop	{r4, pc}
 800316a:	bf00      	nop
 800316c:	20000648 	.word	0x20000648
 8003170:	200006b0 	.word	0x200006b0
 8003174:	20000718 	.word	0x20000718

08003178 <global_stdio_init.part.0>:
 8003178:	b510      	push	{r4, lr}
 800317a:	4b0b      	ldr	r3, [pc, #44]	@ (80031a8 <global_stdio_init.part.0+0x30>)
 800317c:	4c0b      	ldr	r4, [pc, #44]	@ (80031ac <global_stdio_init.part.0+0x34>)
 800317e:	4a0c      	ldr	r2, [pc, #48]	@ (80031b0 <global_stdio_init.part.0+0x38>)
 8003180:	4620      	mov	r0, r4
 8003182:	601a      	str	r2, [r3, #0]
 8003184:	2104      	movs	r1, #4
 8003186:	2200      	movs	r2, #0
 8003188:	f7ff ff94 	bl	80030b4 <std>
 800318c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003190:	2201      	movs	r2, #1
 8003192:	2109      	movs	r1, #9
 8003194:	f7ff ff8e 	bl	80030b4 <std>
 8003198:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800319c:	2202      	movs	r2, #2
 800319e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80031a2:	2112      	movs	r1, #18
 80031a4:	f7ff bf86 	b.w	80030b4 <std>
 80031a8:	20000780 	.word	0x20000780
 80031ac:	20000648 	.word	0x20000648
 80031b0:	08003121 	.word	0x08003121

080031b4 <__sfp_lock_acquire>:
 80031b4:	4801      	ldr	r0, [pc, #4]	@ (80031bc <__sfp_lock_acquire+0x8>)
 80031b6:	f000 b930 	b.w	800341a <__retarget_lock_acquire_recursive>
 80031ba:	bf00      	nop
 80031bc:	20000789 	.word	0x20000789

080031c0 <__sfp_lock_release>:
 80031c0:	4801      	ldr	r0, [pc, #4]	@ (80031c8 <__sfp_lock_release+0x8>)
 80031c2:	f000 b92b 	b.w	800341c <__retarget_lock_release_recursive>
 80031c6:	bf00      	nop
 80031c8:	20000789 	.word	0x20000789

080031cc <__sinit>:
 80031cc:	b510      	push	{r4, lr}
 80031ce:	4604      	mov	r4, r0
 80031d0:	f7ff fff0 	bl	80031b4 <__sfp_lock_acquire>
 80031d4:	6a23      	ldr	r3, [r4, #32]
 80031d6:	b11b      	cbz	r3, 80031e0 <__sinit+0x14>
 80031d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80031dc:	f7ff bff0 	b.w	80031c0 <__sfp_lock_release>
 80031e0:	4b04      	ldr	r3, [pc, #16]	@ (80031f4 <__sinit+0x28>)
 80031e2:	6223      	str	r3, [r4, #32]
 80031e4:	4b04      	ldr	r3, [pc, #16]	@ (80031f8 <__sinit+0x2c>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d1f5      	bne.n	80031d8 <__sinit+0xc>
 80031ec:	f7ff ffc4 	bl	8003178 <global_stdio_init.part.0>
 80031f0:	e7f2      	b.n	80031d8 <__sinit+0xc>
 80031f2:	bf00      	nop
 80031f4:	08003139 	.word	0x08003139
 80031f8:	20000780 	.word	0x20000780

080031fc <_fwalk_sglue>:
 80031fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003200:	4607      	mov	r7, r0
 8003202:	4688      	mov	r8, r1
 8003204:	4614      	mov	r4, r2
 8003206:	2600      	movs	r6, #0
 8003208:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800320c:	f1b9 0901 	subs.w	r9, r9, #1
 8003210:	d505      	bpl.n	800321e <_fwalk_sglue+0x22>
 8003212:	6824      	ldr	r4, [r4, #0]
 8003214:	2c00      	cmp	r4, #0
 8003216:	d1f7      	bne.n	8003208 <_fwalk_sglue+0xc>
 8003218:	4630      	mov	r0, r6
 800321a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800321e:	89ab      	ldrh	r3, [r5, #12]
 8003220:	2b01      	cmp	r3, #1
 8003222:	d907      	bls.n	8003234 <_fwalk_sglue+0x38>
 8003224:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003228:	3301      	adds	r3, #1
 800322a:	d003      	beq.n	8003234 <_fwalk_sglue+0x38>
 800322c:	4629      	mov	r1, r5
 800322e:	4638      	mov	r0, r7
 8003230:	47c0      	blx	r8
 8003232:	4306      	orrs	r6, r0
 8003234:	3568      	adds	r5, #104	@ 0x68
 8003236:	e7e9      	b.n	800320c <_fwalk_sglue+0x10>

08003238 <iprintf>:
 8003238:	b40f      	push	{r0, r1, r2, r3}
 800323a:	b507      	push	{r0, r1, r2, lr}
 800323c:	4906      	ldr	r1, [pc, #24]	@ (8003258 <iprintf+0x20>)
 800323e:	ab04      	add	r3, sp, #16
 8003240:	6808      	ldr	r0, [r1, #0]
 8003242:	f853 2b04 	ldr.w	r2, [r3], #4
 8003246:	6881      	ldr	r1, [r0, #8]
 8003248:	9301      	str	r3, [sp, #4]
 800324a:	f000 f959 	bl	8003500 <_vfiprintf_r>
 800324e:	b003      	add	sp, #12
 8003250:	f85d eb04 	ldr.w	lr, [sp], #4
 8003254:	b004      	add	sp, #16
 8003256:	4770      	bx	lr
 8003258:	20000018 	.word	0x20000018

0800325c <__sread>:
 800325c:	b510      	push	{r4, lr}
 800325e:	460c      	mov	r4, r1
 8003260:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003264:	f000 f87a 	bl	800335c <_read_r>
 8003268:	2800      	cmp	r0, #0
 800326a:	bfab      	itete	ge
 800326c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800326e:	89a3      	ldrhlt	r3, [r4, #12]
 8003270:	181b      	addge	r3, r3, r0
 8003272:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003276:	bfac      	ite	ge
 8003278:	6563      	strge	r3, [r4, #84]	@ 0x54
 800327a:	81a3      	strhlt	r3, [r4, #12]
 800327c:	bd10      	pop	{r4, pc}

0800327e <__swrite>:
 800327e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003282:	461f      	mov	r7, r3
 8003284:	898b      	ldrh	r3, [r1, #12]
 8003286:	4605      	mov	r5, r0
 8003288:	05db      	lsls	r3, r3, #23
 800328a:	460c      	mov	r4, r1
 800328c:	4616      	mov	r6, r2
 800328e:	d505      	bpl.n	800329c <__swrite+0x1e>
 8003290:	2302      	movs	r3, #2
 8003292:	2200      	movs	r2, #0
 8003294:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003298:	f000 f84e 	bl	8003338 <_lseek_r>
 800329c:	89a3      	ldrh	r3, [r4, #12]
 800329e:	4632      	mov	r2, r6
 80032a0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80032a4:	81a3      	strh	r3, [r4, #12]
 80032a6:	4628      	mov	r0, r5
 80032a8:	463b      	mov	r3, r7
 80032aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80032ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80032b2:	f000 b875 	b.w	80033a0 <_write_r>

080032b6 <__sseek>:
 80032b6:	b510      	push	{r4, lr}
 80032b8:	460c      	mov	r4, r1
 80032ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032be:	f000 f83b 	bl	8003338 <_lseek_r>
 80032c2:	1c43      	adds	r3, r0, #1
 80032c4:	89a3      	ldrh	r3, [r4, #12]
 80032c6:	bf15      	itete	ne
 80032c8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80032ca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80032ce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80032d2:	81a3      	strheq	r3, [r4, #12]
 80032d4:	bf18      	it	ne
 80032d6:	81a3      	strhne	r3, [r4, #12]
 80032d8:	bd10      	pop	{r4, pc}

080032da <__sclose>:
 80032da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032de:	f000 b81b 	b.w	8003318 <_close_r>

080032e2 <memset>:
 80032e2:	4603      	mov	r3, r0
 80032e4:	4402      	add	r2, r0
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d100      	bne.n	80032ec <memset+0xa>
 80032ea:	4770      	bx	lr
 80032ec:	f803 1b01 	strb.w	r1, [r3], #1
 80032f0:	e7f9      	b.n	80032e6 <memset+0x4>

080032f2 <strncmp>:
 80032f2:	b510      	push	{r4, lr}
 80032f4:	b16a      	cbz	r2, 8003312 <strncmp+0x20>
 80032f6:	3901      	subs	r1, #1
 80032f8:	1884      	adds	r4, r0, r2
 80032fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80032fe:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8003302:	429a      	cmp	r2, r3
 8003304:	d103      	bne.n	800330e <strncmp+0x1c>
 8003306:	42a0      	cmp	r0, r4
 8003308:	d001      	beq.n	800330e <strncmp+0x1c>
 800330a:	2a00      	cmp	r2, #0
 800330c:	d1f5      	bne.n	80032fa <strncmp+0x8>
 800330e:	1ad0      	subs	r0, r2, r3
 8003310:	bd10      	pop	{r4, pc}
 8003312:	4610      	mov	r0, r2
 8003314:	e7fc      	b.n	8003310 <strncmp+0x1e>
	...

08003318 <_close_r>:
 8003318:	b538      	push	{r3, r4, r5, lr}
 800331a:	2300      	movs	r3, #0
 800331c:	4d05      	ldr	r5, [pc, #20]	@ (8003334 <_close_r+0x1c>)
 800331e:	4604      	mov	r4, r0
 8003320:	4608      	mov	r0, r1
 8003322:	602b      	str	r3, [r5, #0]
 8003324:	f7fd fcbd 	bl	8000ca2 <_close>
 8003328:	1c43      	adds	r3, r0, #1
 800332a:	d102      	bne.n	8003332 <_close_r+0x1a>
 800332c:	682b      	ldr	r3, [r5, #0]
 800332e:	b103      	cbz	r3, 8003332 <_close_r+0x1a>
 8003330:	6023      	str	r3, [r4, #0]
 8003332:	bd38      	pop	{r3, r4, r5, pc}
 8003334:	20000784 	.word	0x20000784

08003338 <_lseek_r>:
 8003338:	b538      	push	{r3, r4, r5, lr}
 800333a:	4604      	mov	r4, r0
 800333c:	4608      	mov	r0, r1
 800333e:	4611      	mov	r1, r2
 8003340:	2200      	movs	r2, #0
 8003342:	4d05      	ldr	r5, [pc, #20]	@ (8003358 <_lseek_r+0x20>)
 8003344:	602a      	str	r2, [r5, #0]
 8003346:	461a      	mov	r2, r3
 8003348:	f7fd fccf 	bl	8000cea <_lseek>
 800334c:	1c43      	adds	r3, r0, #1
 800334e:	d102      	bne.n	8003356 <_lseek_r+0x1e>
 8003350:	682b      	ldr	r3, [r5, #0]
 8003352:	b103      	cbz	r3, 8003356 <_lseek_r+0x1e>
 8003354:	6023      	str	r3, [r4, #0]
 8003356:	bd38      	pop	{r3, r4, r5, pc}
 8003358:	20000784 	.word	0x20000784

0800335c <_read_r>:
 800335c:	b538      	push	{r3, r4, r5, lr}
 800335e:	4604      	mov	r4, r0
 8003360:	4608      	mov	r0, r1
 8003362:	4611      	mov	r1, r2
 8003364:	2200      	movs	r2, #0
 8003366:	4d05      	ldr	r5, [pc, #20]	@ (800337c <_read_r+0x20>)
 8003368:	602a      	str	r2, [r5, #0]
 800336a:	461a      	mov	r2, r3
 800336c:	f7fd fc60 	bl	8000c30 <_read>
 8003370:	1c43      	adds	r3, r0, #1
 8003372:	d102      	bne.n	800337a <_read_r+0x1e>
 8003374:	682b      	ldr	r3, [r5, #0]
 8003376:	b103      	cbz	r3, 800337a <_read_r+0x1e>
 8003378:	6023      	str	r3, [r4, #0]
 800337a:	bd38      	pop	{r3, r4, r5, pc}
 800337c:	20000784 	.word	0x20000784

08003380 <_sbrk_r>:
 8003380:	b538      	push	{r3, r4, r5, lr}
 8003382:	2300      	movs	r3, #0
 8003384:	4d05      	ldr	r5, [pc, #20]	@ (800339c <_sbrk_r+0x1c>)
 8003386:	4604      	mov	r4, r0
 8003388:	4608      	mov	r0, r1
 800338a:	602b      	str	r3, [r5, #0]
 800338c:	f7fd fcba 	bl	8000d04 <_sbrk>
 8003390:	1c43      	adds	r3, r0, #1
 8003392:	d102      	bne.n	800339a <_sbrk_r+0x1a>
 8003394:	682b      	ldr	r3, [r5, #0]
 8003396:	b103      	cbz	r3, 800339a <_sbrk_r+0x1a>
 8003398:	6023      	str	r3, [r4, #0]
 800339a:	bd38      	pop	{r3, r4, r5, pc}
 800339c:	20000784 	.word	0x20000784

080033a0 <_write_r>:
 80033a0:	b538      	push	{r3, r4, r5, lr}
 80033a2:	4604      	mov	r4, r0
 80033a4:	4608      	mov	r0, r1
 80033a6:	4611      	mov	r1, r2
 80033a8:	2200      	movs	r2, #0
 80033aa:	4d05      	ldr	r5, [pc, #20]	@ (80033c0 <_write_r+0x20>)
 80033ac:	602a      	str	r2, [r5, #0]
 80033ae:	461a      	mov	r2, r3
 80033b0:	f7fd fc5b 	bl	8000c6a <_write>
 80033b4:	1c43      	adds	r3, r0, #1
 80033b6:	d102      	bne.n	80033be <_write_r+0x1e>
 80033b8:	682b      	ldr	r3, [r5, #0]
 80033ba:	b103      	cbz	r3, 80033be <_write_r+0x1e>
 80033bc:	6023      	str	r3, [r4, #0]
 80033be:	bd38      	pop	{r3, r4, r5, pc}
 80033c0:	20000784 	.word	0x20000784

080033c4 <__errno>:
 80033c4:	4b01      	ldr	r3, [pc, #4]	@ (80033cc <__errno+0x8>)
 80033c6:	6818      	ldr	r0, [r3, #0]
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop
 80033cc:	20000018 	.word	0x20000018

080033d0 <__libc_init_array>:
 80033d0:	b570      	push	{r4, r5, r6, lr}
 80033d2:	2600      	movs	r6, #0
 80033d4:	4d0c      	ldr	r5, [pc, #48]	@ (8003408 <__libc_init_array+0x38>)
 80033d6:	4c0d      	ldr	r4, [pc, #52]	@ (800340c <__libc_init_array+0x3c>)
 80033d8:	1b64      	subs	r4, r4, r5
 80033da:	10a4      	asrs	r4, r4, #2
 80033dc:	42a6      	cmp	r6, r4
 80033de:	d109      	bne.n	80033f4 <__libc_init_array+0x24>
 80033e0:	f000 fd06 	bl	8003df0 <_init>
 80033e4:	2600      	movs	r6, #0
 80033e6:	4d0a      	ldr	r5, [pc, #40]	@ (8003410 <__libc_init_array+0x40>)
 80033e8:	4c0a      	ldr	r4, [pc, #40]	@ (8003414 <__libc_init_array+0x44>)
 80033ea:	1b64      	subs	r4, r4, r5
 80033ec:	10a4      	asrs	r4, r4, #2
 80033ee:	42a6      	cmp	r6, r4
 80033f0:	d105      	bne.n	80033fe <__libc_init_array+0x2e>
 80033f2:	bd70      	pop	{r4, r5, r6, pc}
 80033f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80033f8:	4798      	blx	r3
 80033fa:	3601      	adds	r6, #1
 80033fc:	e7ee      	b.n	80033dc <__libc_init_array+0xc>
 80033fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8003402:	4798      	blx	r3
 8003404:	3601      	adds	r6, #1
 8003406:	e7f2      	b.n	80033ee <__libc_init_array+0x1e>
 8003408:	0800401c 	.word	0x0800401c
 800340c:	0800401c 	.word	0x0800401c
 8003410:	0800401c 	.word	0x0800401c
 8003414:	08004020 	.word	0x08004020

08003418 <__retarget_lock_init_recursive>:
 8003418:	4770      	bx	lr

0800341a <__retarget_lock_acquire_recursive>:
 800341a:	4770      	bx	lr

0800341c <__retarget_lock_release_recursive>:
 800341c:	4770      	bx	lr
	...

08003420 <_free_r>:
 8003420:	b538      	push	{r3, r4, r5, lr}
 8003422:	4605      	mov	r5, r0
 8003424:	2900      	cmp	r1, #0
 8003426:	d040      	beq.n	80034aa <_free_r+0x8a>
 8003428:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800342c:	1f0c      	subs	r4, r1, #4
 800342e:	2b00      	cmp	r3, #0
 8003430:	bfb8      	it	lt
 8003432:	18e4      	addlt	r4, r4, r3
 8003434:	f7ff fdae 	bl	8002f94 <__malloc_lock>
 8003438:	4a1c      	ldr	r2, [pc, #112]	@ (80034ac <_free_r+0x8c>)
 800343a:	6813      	ldr	r3, [r2, #0]
 800343c:	b933      	cbnz	r3, 800344c <_free_r+0x2c>
 800343e:	6063      	str	r3, [r4, #4]
 8003440:	6014      	str	r4, [r2, #0]
 8003442:	4628      	mov	r0, r5
 8003444:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003448:	f7ff bdaa 	b.w	8002fa0 <__malloc_unlock>
 800344c:	42a3      	cmp	r3, r4
 800344e:	d908      	bls.n	8003462 <_free_r+0x42>
 8003450:	6820      	ldr	r0, [r4, #0]
 8003452:	1821      	adds	r1, r4, r0
 8003454:	428b      	cmp	r3, r1
 8003456:	bf01      	itttt	eq
 8003458:	6819      	ldreq	r1, [r3, #0]
 800345a:	685b      	ldreq	r3, [r3, #4]
 800345c:	1809      	addeq	r1, r1, r0
 800345e:	6021      	streq	r1, [r4, #0]
 8003460:	e7ed      	b.n	800343e <_free_r+0x1e>
 8003462:	461a      	mov	r2, r3
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	b10b      	cbz	r3, 800346c <_free_r+0x4c>
 8003468:	42a3      	cmp	r3, r4
 800346a:	d9fa      	bls.n	8003462 <_free_r+0x42>
 800346c:	6811      	ldr	r1, [r2, #0]
 800346e:	1850      	adds	r0, r2, r1
 8003470:	42a0      	cmp	r0, r4
 8003472:	d10b      	bne.n	800348c <_free_r+0x6c>
 8003474:	6820      	ldr	r0, [r4, #0]
 8003476:	4401      	add	r1, r0
 8003478:	1850      	adds	r0, r2, r1
 800347a:	4283      	cmp	r3, r0
 800347c:	6011      	str	r1, [r2, #0]
 800347e:	d1e0      	bne.n	8003442 <_free_r+0x22>
 8003480:	6818      	ldr	r0, [r3, #0]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	4408      	add	r0, r1
 8003486:	6010      	str	r0, [r2, #0]
 8003488:	6053      	str	r3, [r2, #4]
 800348a:	e7da      	b.n	8003442 <_free_r+0x22>
 800348c:	d902      	bls.n	8003494 <_free_r+0x74>
 800348e:	230c      	movs	r3, #12
 8003490:	602b      	str	r3, [r5, #0]
 8003492:	e7d6      	b.n	8003442 <_free_r+0x22>
 8003494:	6820      	ldr	r0, [r4, #0]
 8003496:	1821      	adds	r1, r4, r0
 8003498:	428b      	cmp	r3, r1
 800349a:	bf01      	itttt	eq
 800349c:	6819      	ldreq	r1, [r3, #0]
 800349e:	685b      	ldreq	r3, [r3, #4]
 80034a0:	1809      	addeq	r1, r1, r0
 80034a2:	6021      	streq	r1, [r4, #0]
 80034a4:	6063      	str	r3, [r4, #4]
 80034a6:	6054      	str	r4, [r2, #4]
 80034a8:	e7cb      	b.n	8003442 <_free_r+0x22>
 80034aa:	bd38      	pop	{r3, r4, r5, pc}
 80034ac:	20000644 	.word	0x20000644

080034b0 <__sfputc_r>:
 80034b0:	6893      	ldr	r3, [r2, #8]
 80034b2:	b410      	push	{r4}
 80034b4:	3b01      	subs	r3, #1
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	6093      	str	r3, [r2, #8]
 80034ba:	da07      	bge.n	80034cc <__sfputc_r+0x1c>
 80034bc:	6994      	ldr	r4, [r2, #24]
 80034be:	42a3      	cmp	r3, r4
 80034c0:	db01      	blt.n	80034c6 <__sfputc_r+0x16>
 80034c2:	290a      	cmp	r1, #10
 80034c4:	d102      	bne.n	80034cc <__sfputc_r+0x1c>
 80034c6:	bc10      	pop	{r4}
 80034c8:	f000 bb6c 	b.w	8003ba4 <__swbuf_r>
 80034cc:	6813      	ldr	r3, [r2, #0]
 80034ce:	1c58      	adds	r0, r3, #1
 80034d0:	6010      	str	r0, [r2, #0]
 80034d2:	7019      	strb	r1, [r3, #0]
 80034d4:	4608      	mov	r0, r1
 80034d6:	bc10      	pop	{r4}
 80034d8:	4770      	bx	lr

080034da <__sfputs_r>:
 80034da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034dc:	4606      	mov	r6, r0
 80034de:	460f      	mov	r7, r1
 80034e0:	4614      	mov	r4, r2
 80034e2:	18d5      	adds	r5, r2, r3
 80034e4:	42ac      	cmp	r4, r5
 80034e6:	d101      	bne.n	80034ec <__sfputs_r+0x12>
 80034e8:	2000      	movs	r0, #0
 80034ea:	e007      	b.n	80034fc <__sfputs_r+0x22>
 80034ec:	463a      	mov	r2, r7
 80034ee:	4630      	mov	r0, r6
 80034f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80034f4:	f7ff ffdc 	bl	80034b0 <__sfputc_r>
 80034f8:	1c43      	adds	r3, r0, #1
 80034fa:	d1f3      	bne.n	80034e4 <__sfputs_r+0xa>
 80034fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003500 <_vfiprintf_r>:
 8003500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003504:	460d      	mov	r5, r1
 8003506:	4614      	mov	r4, r2
 8003508:	4698      	mov	r8, r3
 800350a:	4606      	mov	r6, r0
 800350c:	b09d      	sub	sp, #116	@ 0x74
 800350e:	b118      	cbz	r0, 8003518 <_vfiprintf_r+0x18>
 8003510:	6a03      	ldr	r3, [r0, #32]
 8003512:	b90b      	cbnz	r3, 8003518 <_vfiprintf_r+0x18>
 8003514:	f7ff fe5a 	bl	80031cc <__sinit>
 8003518:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800351a:	07d9      	lsls	r1, r3, #31
 800351c:	d405      	bmi.n	800352a <_vfiprintf_r+0x2a>
 800351e:	89ab      	ldrh	r3, [r5, #12]
 8003520:	059a      	lsls	r2, r3, #22
 8003522:	d402      	bmi.n	800352a <_vfiprintf_r+0x2a>
 8003524:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003526:	f7ff ff78 	bl	800341a <__retarget_lock_acquire_recursive>
 800352a:	89ab      	ldrh	r3, [r5, #12]
 800352c:	071b      	lsls	r3, r3, #28
 800352e:	d501      	bpl.n	8003534 <_vfiprintf_r+0x34>
 8003530:	692b      	ldr	r3, [r5, #16]
 8003532:	b99b      	cbnz	r3, 800355c <_vfiprintf_r+0x5c>
 8003534:	4629      	mov	r1, r5
 8003536:	4630      	mov	r0, r6
 8003538:	f000 fb72 	bl	8003c20 <__swsetup_r>
 800353c:	b170      	cbz	r0, 800355c <_vfiprintf_r+0x5c>
 800353e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003540:	07dc      	lsls	r4, r3, #31
 8003542:	d504      	bpl.n	800354e <_vfiprintf_r+0x4e>
 8003544:	f04f 30ff 	mov.w	r0, #4294967295
 8003548:	b01d      	add	sp, #116	@ 0x74
 800354a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800354e:	89ab      	ldrh	r3, [r5, #12]
 8003550:	0598      	lsls	r0, r3, #22
 8003552:	d4f7      	bmi.n	8003544 <_vfiprintf_r+0x44>
 8003554:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003556:	f7ff ff61 	bl	800341c <__retarget_lock_release_recursive>
 800355a:	e7f3      	b.n	8003544 <_vfiprintf_r+0x44>
 800355c:	2300      	movs	r3, #0
 800355e:	9309      	str	r3, [sp, #36]	@ 0x24
 8003560:	2320      	movs	r3, #32
 8003562:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003566:	2330      	movs	r3, #48	@ 0x30
 8003568:	f04f 0901 	mov.w	r9, #1
 800356c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003570:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800371c <_vfiprintf_r+0x21c>
 8003574:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003578:	4623      	mov	r3, r4
 800357a:	469a      	mov	sl, r3
 800357c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003580:	b10a      	cbz	r2, 8003586 <_vfiprintf_r+0x86>
 8003582:	2a25      	cmp	r2, #37	@ 0x25
 8003584:	d1f9      	bne.n	800357a <_vfiprintf_r+0x7a>
 8003586:	ebba 0b04 	subs.w	fp, sl, r4
 800358a:	d00b      	beq.n	80035a4 <_vfiprintf_r+0xa4>
 800358c:	465b      	mov	r3, fp
 800358e:	4622      	mov	r2, r4
 8003590:	4629      	mov	r1, r5
 8003592:	4630      	mov	r0, r6
 8003594:	f7ff ffa1 	bl	80034da <__sfputs_r>
 8003598:	3001      	adds	r0, #1
 800359a:	f000 80a7 	beq.w	80036ec <_vfiprintf_r+0x1ec>
 800359e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80035a0:	445a      	add	r2, fp
 80035a2:	9209      	str	r2, [sp, #36]	@ 0x24
 80035a4:	f89a 3000 	ldrb.w	r3, [sl]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	f000 809f 	beq.w	80036ec <_vfiprintf_r+0x1ec>
 80035ae:	2300      	movs	r3, #0
 80035b0:	f04f 32ff 	mov.w	r2, #4294967295
 80035b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80035b8:	f10a 0a01 	add.w	sl, sl, #1
 80035bc:	9304      	str	r3, [sp, #16]
 80035be:	9307      	str	r3, [sp, #28]
 80035c0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80035c4:	931a      	str	r3, [sp, #104]	@ 0x68
 80035c6:	4654      	mov	r4, sl
 80035c8:	2205      	movs	r2, #5
 80035ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80035ce:	4853      	ldr	r0, [pc, #332]	@ (800371c <_vfiprintf_r+0x21c>)
 80035d0:	f000 fb7c 	bl	8003ccc <memchr>
 80035d4:	9a04      	ldr	r2, [sp, #16]
 80035d6:	b9d8      	cbnz	r0, 8003610 <_vfiprintf_r+0x110>
 80035d8:	06d1      	lsls	r1, r2, #27
 80035da:	bf44      	itt	mi
 80035dc:	2320      	movmi	r3, #32
 80035de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80035e2:	0713      	lsls	r3, r2, #28
 80035e4:	bf44      	itt	mi
 80035e6:	232b      	movmi	r3, #43	@ 0x2b
 80035e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80035ec:	f89a 3000 	ldrb.w	r3, [sl]
 80035f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80035f2:	d015      	beq.n	8003620 <_vfiprintf_r+0x120>
 80035f4:	4654      	mov	r4, sl
 80035f6:	2000      	movs	r0, #0
 80035f8:	f04f 0c0a 	mov.w	ip, #10
 80035fc:	9a07      	ldr	r2, [sp, #28]
 80035fe:	4621      	mov	r1, r4
 8003600:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003604:	3b30      	subs	r3, #48	@ 0x30
 8003606:	2b09      	cmp	r3, #9
 8003608:	d94b      	bls.n	80036a2 <_vfiprintf_r+0x1a2>
 800360a:	b1b0      	cbz	r0, 800363a <_vfiprintf_r+0x13a>
 800360c:	9207      	str	r2, [sp, #28]
 800360e:	e014      	b.n	800363a <_vfiprintf_r+0x13a>
 8003610:	eba0 0308 	sub.w	r3, r0, r8
 8003614:	fa09 f303 	lsl.w	r3, r9, r3
 8003618:	4313      	orrs	r3, r2
 800361a:	46a2      	mov	sl, r4
 800361c:	9304      	str	r3, [sp, #16]
 800361e:	e7d2      	b.n	80035c6 <_vfiprintf_r+0xc6>
 8003620:	9b03      	ldr	r3, [sp, #12]
 8003622:	1d19      	adds	r1, r3, #4
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	9103      	str	r1, [sp, #12]
 8003628:	2b00      	cmp	r3, #0
 800362a:	bfbb      	ittet	lt
 800362c:	425b      	neglt	r3, r3
 800362e:	f042 0202 	orrlt.w	r2, r2, #2
 8003632:	9307      	strge	r3, [sp, #28]
 8003634:	9307      	strlt	r3, [sp, #28]
 8003636:	bfb8      	it	lt
 8003638:	9204      	strlt	r2, [sp, #16]
 800363a:	7823      	ldrb	r3, [r4, #0]
 800363c:	2b2e      	cmp	r3, #46	@ 0x2e
 800363e:	d10a      	bne.n	8003656 <_vfiprintf_r+0x156>
 8003640:	7863      	ldrb	r3, [r4, #1]
 8003642:	2b2a      	cmp	r3, #42	@ 0x2a
 8003644:	d132      	bne.n	80036ac <_vfiprintf_r+0x1ac>
 8003646:	9b03      	ldr	r3, [sp, #12]
 8003648:	3402      	adds	r4, #2
 800364a:	1d1a      	adds	r2, r3, #4
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	9203      	str	r2, [sp, #12]
 8003650:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003654:	9305      	str	r3, [sp, #20]
 8003656:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8003720 <_vfiprintf_r+0x220>
 800365a:	2203      	movs	r2, #3
 800365c:	4650      	mov	r0, sl
 800365e:	7821      	ldrb	r1, [r4, #0]
 8003660:	f000 fb34 	bl	8003ccc <memchr>
 8003664:	b138      	cbz	r0, 8003676 <_vfiprintf_r+0x176>
 8003666:	2240      	movs	r2, #64	@ 0x40
 8003668:	9b04      	ldr	r3, [sp, #16]
 800366a:	eba0 000a 	sub.w	r0, r0, sl
 800366e:	4082      	lsls	r2, r0
 8003670:	4313      	orrs	r3, r2
 8003672:	3401      	adds	r4, #1
 8003674:	9304      	str	r3, [sp, #16]
 8003676:	f814 1b01 	ldrb.w	r1, [r4], #1
 800367a:	2206      	movs	r2, #6
 800367c:	4829      	ldr	r0, [pc, #164]	@ (8003724 <_vfiprintf_r+0x224>)
 800367e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003682:	f000 fb23 	bl	8003ccc <memchr>
 8003686:	2800      	cmp	r0, #0
 8003688:	d03f      	beq.n	800370a <_vfiprintf_r+0x20a>
 800368a:	4b27      	ldr	r3, [pc, #156]	@ (8003728 <_vfiprintf_r+0x228>)
 800368c:	bb1b      	cbnz	r3, 80036d6 <_vfiprintf_r+0x1d6>
 800368e:	9b03      	ldr	r3, [sp, #12]
 8003690:	3307      	adds	r3, #7
 8003692:	f023 0307 	bic.w	r3, r3, #7
 8003696:	3308      	adds	r3, #8
 8003698:	9303      	str	r3, [sp, #12]
 800369a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800369c:	443b      	add	r3, r7
 800369e:	9309      	str	r3, [sp, #36]	@ 0x24
 80036a0:	e76a      	b.n	8003578 <_vfiprintf_r+0x78>
 80036a2:	460c      	mov	r4, r1
 80036a4:	2001      	movs	r0, #1
 80036a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80036aa:	e7a8      	b.n	80035fe <_vfiprintf_r+0xfe>
 80036ac:	2300      	movs	r3, #0
 80036ae:	f04f 0c0a 	mov.w	ip, #10
 80036b2:	4619      	mov	r1, r3
 80036b4:	3401      	adds	r4, #1
 80036b6:	9305      	str	r3, [sp, #20]
 80036b8:	4620      	mov	r0, r4
 80036ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80036be:	3a30      	subs	r2, #48	@ 0x30
 80036c0:	2a09      	cmp	r2, #9
 80036c2:	d903      	bls.n	80036cc <_vfiprintf_r+0x1cc>
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d0c6      	beq.n	8003656 <_vfiprintf_r+0x156>
 80036c8:	9105      	str	r1, [sp, #20]
 80036ca:	e7c4      	b.n	8003656 <_vfiprintf_r+0x156>
 80036cc:	4604      	mov	r4, r0
 80036ce:	2301      	movs	r3, #1
 80036d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80036d4:	e7f0      	b.n	80036b8 <_vfiprintf_r+0x1b8>
 80036d6:	ab03      	add	r3, sp, #12
 80036d8:	9300      	str	r3, [sp, #0]
 80036da:	462a      	mov	r2, r5
 80036dc:	4630      	mov	r0, r6
 80036de:	4b13      	ldr	r3, [pc, #76]	@ (800372c <_vfiprintf_r+0x22c>)
 80036e0:	a904      	add	r1, sp, #16
 80036e2:	f3af 8000 	nop.w
 80036e6:	4607      	mov	r7, r0
 80036e8:	1c78      	adds	r0, r7, #1
 80036ea:	d1d6      	bne.n	800369a <_vfiprintf_r+0x19a>
 80036ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80036ee:	07d9      	lsls	r1, r3, #31
 80036f0:	d405      	bmi.n	80036fe <_vfiprintf_r+0x1fe>
 80036f2:	89ab      	ldrh	r3, [r5, #12]
 80036f4:	059a      	lsls	r2, r3, #22
 80036f6:	d402      	bmi.n	80036fe <_vfiprintf_r+0x1fe>
 80036f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80036fa:	f7ff fe8f 	bl	800341c <__retarget_lock_release_recursive>
 80036fe:	89ab      	ldrh	r3, [r5, #12]
 8003700:	065b      	lsls	r3, r3, #25
 8003702:	f53f af1f 	bmi.w	8003544 <_vfiprintf_r+0x44>
 8003706:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003708:	e71e      	b.n	8003548 <_vfiprintf_r+0x48>
 800370a:	ab03      	add	r3, sp, #12
 800370c:	9300      	str	r3, [sp, #0]
 800370e:	462a      	mov	r2, r5
 8003710:	4630      	mov	r0, r6
 8003712:	4b06      	ldr	r3, [pc, #24]	@ (800372c <_vfiprintf_r+0x22c>)
 8003714:	a904      	add	r1, sp, #16
 8003716:	f000 f87d 	bl	8003814 <_printf_i>
 800371a:	e7e4      	b.n	80036e6 <_vfiprintf_r+0x1e6>
 800371c:	08003fe7 	.word	0x08003fe7
 8003720:	08003fed 	.word	0x08003fed
 8003724:	08003ff1 	.word	0x08003ff1
 8003728:	00000000 	.word	0x00000000
 800372c:	080034db 	.word	0x080034db

08003730 <_printf_common>:
 8003730:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003734:	4616      	mov	r6, r2
 8003736:	4698      	mov	r8, r3
 8003738:	688a      	ldr	r2, [r1, #8]
 800373a:	690b      	ldr	r3, [r1, #16]
 800373c:	4607      	mov	r7, r0
 800373e:	4293      	cmp	r3, r2
 8003740:	bfb8      	it	lt
 8003742:	4613      	movlt	r3, r2
 8003744:	6033      	str	r3, [r6, #0]
 8003746:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800374a:	460c      	mov	r4, r1
 800374c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003750:	b10a      	cbz	r2, 8003756 <_printf_common+0x26>
 8003752:	3301      	adds	r3, #1
 8003754:	6033      	str	r3, [r6, #0]
 8003756:	6823      	ldr	r3, [r4, #0]
 8003758:	0699      	lsls	r1, r3, #26
 800375a:	bf42      	ittt	mi
 800375c:	6833      	ldrmi	r3, [r6, #0]
 800375e:	3302      	addmi	r3, #2
 8003760:	6033      	strmi	r3, [r6, #0]
 8003762:	6825      	ldr	r5, [r4, #0]
 8003764:	f015 0506 	ands.w	r5, r5, #6
 8003768:	d106      	bne.n	8003778 <_printf_common+0x48>
 800376a:	f104 0a19 	add.w	sl, r4, #25
 800376e:	68e3      	ldr	r3, [r4, #12]
 8003770:	6832      	ldr	r2, [r6, #0]
 8003772:	1a9b      	subs	r3, r3, r2
 8003774:	42ab      	cmp	r3, r5
 8003776:	dc2b      	bgt.n	80037d0 <_printf_common+0xa0>
 8003778:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800377c:	6822      	ldr	r2, [r4, #0]
 800377e:	3b00      	subs	r3, #0
 8003780:	bf18      	it	ne
 8003782:	2301      	movne	r3, #1
 8003784:	0692      	lsls	r2, r2, #26
 8003786:	d430      	bmi.n	80037ea <_printf_common+0xba>
 8003788:	4641      	mov	r1, r8
 800378a:	4638      	mov	r0, r7
 800378c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003790:	47c8      	blx	r9
 8003792:	3001      	adds	r0, #1
 8003794:	d023      	beq.n	80037de <_printf_common+0xae>
 8003796:	6823      	ldr	r3, [r4, #0]
 8003798:	6922      	ldr	r2, [r4, #16]
 800379a:	f003 0306 	and.w	r3, r3, #6
 800379e:	2b04      	cmp	r3, #4
 80037a0:	bf14      	ite	ne
 80037a2:	2500      	movne	r5, #0
 80037a4:	6833      	ldreq	r3, [r6, #0]
 80037a6:	f04f 0600 	mov.w	r6, #0
 80037aa:	bf08      	it	eq
 80037ac:	68e5      	ldreq	r5, [r4, #12]
 80037ae:	f104 041a 	add.w	r4, r4, #26
 80037b2:	bf08      	it	eq
 80037b4:	1aed      	subeq	r5, r5, r3
 80037b6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80037ba:	bf08      	it	eq
 80037bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80037c0:	4293      	cmp	r3, r2
 80037c2:	bfc4      	itt	gt
 80037c4:	1a9b      	subgt	r3, r3, r2
 80037c6:	18ed      	addgt	r5, r5, r3
 80037c8:	42b5      	cmp	r5, r6
 80037ca:	d11a      	bne.n	8003802 <_printf_common+0xd2>
 80037cc:	2000      	movs	r0, #0
 80037ce:	e008      	b.n	80037e2 <_printf_common+0xb2>
 80037d0:	2301      	movs	r3, #1
 80037d2:	4652      	mov	r2, sl
 80037d4:	4641      	mov	r1, r8
 80037d6:	4638      	mov	r0, r7
 80037d8:	47c8      	blx	r9
 80037da:	3001      	adds	r0, #1
 80037dc:	d103      	bne.n	80037e6 <_printf_common+0xb6>
 80037de:	f04f 30ff 	mov.w	r0, #4294967295
 80037e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037e6:	3501      	adds	r5, #1
 80037e8:	e7c1      	b.n	800376e <_printf_common+0x3e>
 80037ea:	2030      	movs	r0, #48	@ 0x30
 80037ec:	18e1      	adds	r1, r4, r3
 80037ee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80037f2:	1c5a      	adds	r2, r3, #1
 80037f4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80037f8:	4422      	add	r2, r4
 80037fa:	3302      	adds	r3, #2
 80037fc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003800:	e7c2      	b.n	8003788 <_printf_common+0x58>
 8003802:	2301      	movs	r3, #1
 8003804:	4622      	mov	r2, r4
 8003806:	4641      	mov	r1, r8
 8003808:	4638      	mov	r0, r7
 800380a:	47c8      	blx	r9
 800380c:	3001      	adds	r0, #1
 800380e:	d0e6      	beq.n	80037de <_printf_common+0xae>
 8003810:	3601      	adds	r6, #1
 8003812:	e7d9      	b.n	80037c8 <_printf_common+0x98>

08003814 <_printf_i>:
 8003814:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003818:	7e0f      	ldrb	r7, [r1, #24]
 800381a:	4691      	mov	r9, r2
 800381c:	2f78      	cmp	r7, #120	@ 0x78
 800381e:	4680      	mov	r8, r0
 8003820:	460c      	mov	r4, r1
 8003822:	469a      	mov	sl, r3
 8003824:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003826:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800382a:	d807      	bhi.n	800383c <_printf_i+0x28>
 800382c:	2f62      	cmp	r7, #98	@ 0x62
 800382e:	d80a      	bhi.n	8003846 <_printf_i+0x32>
 8003830:	2f00      	cmp	r7, #0
 8003832:	f000 80d3 	beq.w	80039dc <_printf_i+0x1c8>
 8003836:	2f58      	cmp	r7, #88	@ 0x58
 8003838:	f000 80ba 	beq.w	80039b0 <_printf_i+0x19c>
 800383c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003840:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003844:	e03a      	b.n	80038bc <_printf_i+0xa8>
 8003846:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800384a:	2b15      	cmp	r3, #21
 800384c:	d8f6      	bhi.n	800383c <_printf_i+0x28>
 800384e:	a101      	add	r1, pc, #4	@ (adr r1, 8003854 <_printf_i+0x40>)
 8003850:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003854:	080038ad 	.word	0x080038ad
 8003858:	080038c1 	.word	0x080038c1
 800385c:	0800383d 	.word	0x0800383d
 8003860:	0800383d 	.word	0x0800383d
 8003864:	0800383d 	.word	0x0800383d
 8003868:	0800383d 	.word	0x0800383d
 800386c:	080038c1 	.word	0x080038c1
 8003870:	0800383d 	.word	0x0800383d
 8003874:	0800383d 	.word	0x0800383d
 8003878:	0800383d 	.word	0x0800383d
 800387c:	0800383d 	.word	0x0800383d
 8003880:	080039c3 	.word	0x080039c3
 8003884:	080038eb 	.word	0x080038eb
 8003888:	0800397d 	.word	0x0800397d
 800388c:	0800383d 	.word	0x0800383d
 8003890:	0800383d 	.word	0x0800383d
 8003894:	080039e5 	.word	0x080039e5
 8003898:	0800383d 	.word	0x0800383d
 800389c:	080038eb 	.word	0x080038eb
 80038a0:	0800383d 	.word	0x0800383d
 80038a4:	0800383d 	.word	0x0800383d
 80038a8:	08003985 	.word	0x08003985
 80038ac:	6833      	ldr	r3, [r6, #0]
 80038ae:	1d1a      	adds	r2, r3, #4
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	6032      	str	r2, [r6, #0]
 80038b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80038b8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80038bc:	2301      	movs	r3, #1
 80038be:	e09e      	b.n	80039fe <_printf_i+0x1ea>
 80038c0:	6833      	ldr	r3, [r6, #0]
 80038c2:	6820      	ldr	r0, [r4, #0]
 80038c4:	1d19      	adds	r1, r3, #4
 80038c6:	6031      	str	r1, [r6, #0]
 80038c8:	0606      	lsls	r6, r0, #24
 80038ca:	d501      	bpl.n	80038d0 <_printf_i+0xbc>
 80038cc:	681d      	ldr	r5, [r3, #0]
 80038ce:	e003      	b.n	80038d8 <_printf_i+0xc4>
 80038d0:	0645      	lsls	r5, r0, #25
 80038d2:	d5fb      	bpl.n	80038cc <_printf_i+0xb8>
 80038d4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80038d8:	2d00      	cmp	r5, #0
 80038da:	da03      	bge.n	80038e4 <_printf_i+0xd0>
 80038dc:	232d      	movs	r3, #45	@ 0x2d
 80038de:	426d      	negs	r5, r5
 80038e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80038e4:	230a      	movs	r3, #10
 80038e6:	4859      	ldr	r0, [pc, #356]	@ (8003a4c <_printf_i+0x238>)
 80038e8:	e011      	b.n	800390e <_printf_i+0xfa>
 80038ea:	6821      	ldr	r1, [r4, #0]
 80038ec:	6833      	ldr	r3, [r6, #0]
 80038ee:	0608      	lsls	r0, r1, #24
 80038f0:	f853 5b04 	ldr.w	r5, [r3], #4
 80038f4:	d402      	bmi.n	80038fc <_printf_i+0xe8>
 80038f6:	0649      	lsls	r1, r1, #25
 80038f8:	bf48      	it	mi
 80038fa:	b2ad      	uxthmi	r5, r5
 80038fc:	2f6f      	cmp	r7, #111	@ 0x6f
 80038fe:	6033      	str	r3, [r6, #0]
 8003900:	bf14      	ite	ne
 8003902:	230a      	movne	r3, #10
 8003904:	2308      	moveq	r3, #8
 8003906:	4851      	ldr	r0, [pc, #324]	@ (8003a4c <_printf_i+0x238>)
 8003908:	2100      	movs	r1, #0
 800390a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800390e:	6866      	ldr	r6, [r4, #4]
 8003910:	2e00      	cmp	r6, #0
 8003912:	bfa8      	it	ge
 8003914:	6821      	ldrge	r1, [r4, #0]
 8003916:	60a6      	str	r6, [r4, #8]
 8003918:	bfa4      	itt	ge
 800391a:	f021 0104 	bicge.w	r1, r1, #4
 800391e:	6021      	strge	r1, [r4, #0]
 8003920:	b90d      	cbnz	r5, 8003926 <_printf_i+0x112>
 8003922:	2e00      	cmp	r6, #0
 8003924:	d04b      	beq.n	80039be <_printf_i+0x1aa>
 8003926:	4616      	mov	r6, r2
 8003928:	fbb5 f1f3 	udiv	r1, r5, r3
 800392c:	fb03 5711 	mls	r7, r3, r1, r5
 8003930:	5dc7      	ldrb	r7, [r0, r7]
 8003932:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003936:	462f      	mov	r7, r5
 8003938:	42bb      	cmp	r3, r7
 800393a:	460d      	mov	r5, r1
 800393c:	d9f4      	bls.n	8003928 <_printf_i+0x114>
 800393e:	2b08      	cmp	r3, #8
 8003940:	d10b      	bne.n	800395a <_printf_i+0x146>
 8003942:	6823      	ldr	r3, [r4, #0]
 8003944:	07df      	lsls	r7, r3, #31
 8003946:	d508      	bpl.n	800395a <_printf_i+0x146>
 8003948:	6923      	ldr	r3, [r4, #16]
 800394a:	6861      	ldr	r1, [r4, #4]
 800394c:	4299      	cmp	r1, r3
 800394e:	bfde      	ittt	le
 8003950:	2330      	movle	r3, #48	@ 0x30
 8003952:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003956:	f106 36ff 	addle.w	r6, r6, #4294967295
 800395a:	1b92      	subs	r2, r2, r6
 800395c:	6122      	str	r2, [r4, #16]
 800395e:	464b      	mov	r3, r9
 8003960:	4621      	mov	r1, r4
 8003962:	4640      	mov	r0, r8
 8003964:	f8cd a000 	str.w	sl, [sp]
 8003968:	aa03      	add	r2, sp, #12
 800396a:	f7ff fee1 	bl	8003730 <_printf_common>
 800396e:	3001      	adds	r0, #1
 8003970:	d14a      	bne.n	8003a08 <_printf_i+0x1f4>
 8003972:	f04f 30ff 	mov.w	r0, #4294967295
 8003976:	b004      	add	sp, #16
 8003978:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800397c:	6823      	ldr	r3, [r4, #0]
 800397e:	f043 0320 	orr.w	r3, r3, #32
 8003982:	6023      	str	r3, [r4, #0]
 8003984:	2778      	movs	r7, #120	@ 0x78
 8003986:	4832      	ldr	r0, [pc, #200]	@ (8003a50 <_printf_i+0x23c>)
 8003988:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800398c:	6823      	ldr	r3, [r4, #0]
 800398e:	6831      	ldr	r1, [r6, #0]
 8003990:	061f      	lsls	r7, r3, #24
 8003992:	f851 5b04 	ldr.w	r5, [r1], #4
 8003996:	d402      	bmi.n	800399e <_printf_i+0x18a>
 8003998:	065f      	lsls	r7, r3, #25
 800399a:	bf48      	it	mi
 800399c:	b2ad      	uxthmi	r5, r5
 800399e:	6031      	str	r1, [r6, #0]
 80039a0:	07d9      	lsls	r1, r3, #31
 80039a2:	bf44      	itt	mi
 80039a4:	f043 0320 	orrmi.w	r3, r3, #32
 80039a8:	6023      	strmi	r3, [r4, #0]
 80039aa:	b11d      	cbz	r5, 80039b4 <_printf_i+0x1a0>
 80039ac:	2310      	movs	r3, #16
 80039ae:	e7ab      	b.n	8003908 <_printf_i+0xf4>
 80039b0:	4826      	ldr	r0, [pc, #152]	@ (8003a4c <_printf_i+0x238>)
 80039b2:	e7e9      	b.n	8003988 <_printf_i+0x174>
 80039b4:	6823      	ldr	r3, [r4, #0]
 80039b6:	f023 0320 	bic.w	r3, r3, #32
 80039ba:	6023      	str	r3, [r4, #0]
 80039bc:	e7f6      	b.n	80039ac <_printf_i+0x198>
 80039be:	4616      	mov	r6, r2
 80039c0:	e7bd      	b.n	800393e <_printf_i+0x12a>
 80039c2:	6833      	ldr	r3, [r6, #0]
 80039c4:	6825      	ldr	r5, [r4, #0]
 80039c6:	1d18      	adds	r0, r3, #4
 80039c8:	6961      	ldr	r1, [r4, #20]
 80039ca:	6030      	str	r0, [r6, #0]
 80039cc:	062e      	lsls	r6, r5, #24
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	d501      	bpl.n	80039d6 <_printf_i+0x1c2>
 80039d2:	6019      	str	r1, [r3, #0]
 80039d4:	e002      	b.n	80039dc <_printf_i+0x1c8>
 80039d6:	0668      	lsls	r0, r5, #25
 80039d8:	d5fb      	bpl.n	80039d2 <_printf_i+0x1be>
 80039da:	8019      	strh	r1, [r3, #0]
 80039dc:	2300      	movs	r3, #0
 80039de:	4616      	mov	r6, r2
 80039e0:	6123      	str	r3, [r4, #16]
 80039e2:	e7bc      	b.n	800395e <_printf_i+0x14a>
 80039e4:	6833      	ldr	r3, [r6, #0]
 80039e6:	2100      	movs	r1, #0
 80039e8:	1d1a      	adds	r2, r3, #4
 80039ea:	6032      	str	r2, [r6, #0]
 80039ec:	681e      	ldr	r6, [r3, #0]
 80039ee:	6862      	ldr	r2, [r4, #4]
 80039f0:	4630      	mov	r0, r6
 80039f2:	f000 f96b 	bl	8003ccc <memchr>
 80039f6:	b108      	cbz	r0, 80039fc <_printf_i+0x1e8>
 80039f8:	1b80      	subs	r0, r0, r6
 80039fa:	6060      	str	r0, [r4, #4]
 80039fc:	6863      	ldr	r3, [r4, #4]
 80039fe:	6123      	str	r3, [r4, #16]
 8003a00:	2300      	movs	r3, #0
 8003a02:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003a06:	e7aa      	b.n	800395e <_printf_i+0x14a>
 8003a08:	4632      	mov	r2, r6
 8003a0a:	4649      	mov	r1, r9
 8003a0c:	4640      	mov	r0, r8
 8003a0e:	6923      	ldr	r3, [r4, #16]
 8003a10:	47d0      	blx	sl
 8003a12:	3001      	adds	r0, #1
 8003a14:	d0ad      	beq.n	8003972 <_printf_i+0x15e>
 8003a16:	6823      	ldr	r3, [r4, #0]
 8003a18:	079b      	lsls	r3, r3, #30
 8003a1a:	d413      	bmi.n	8003a44 <_printf_i+0x230>
 8003a1c:	68e0      	ldr	r0, [r4, #12]
 8003a1e:	9b03      	ldr	r3, [sp, #12]
 8003a20:	4298      	cmp	r0, r3
 8003a22:	bfb8      	it	lt
 8003a24:	4618      	movlt	r0, r3
 8003a26:	e7a6      	b.n	8003976 <_printf_i+0x162>
 8003a28:	2301      	movs	r3, #1
 8003a2a:	4632      	mov	r2, r6
 8003a2c:	4649      	mov	r1, r9
 8003a2e:	4640      	mov	r0, r8
 8003a30:	47d0      	blx	sl
 8003a32:	3001      	adds	r0, #1
 8003a34:	d09d      	beq.n	8003972 <_printf_i+0x15e>
 8003a36:	3501      	adds	r5, #1
 8003a38:	68e3      	ldr	r3, [r4, #12]
 8003a3a:	9903      	ldr	r1, [sp, #12]
 8003a3c:	1a5b      	subs	r3, r3, r1
 8003a3e:	42ab      	cmp	r3, r5
 8003a40:	dcf2      	bgt.n	8003a28 <_printf_i+0x214>
 8003a42:	e7eb      	b.n	8003a1c <_printf_i+0x208>
 8003a44:	2500      	movs	r5, #0
 8003a46:	f104 0619 	add.w	r6, r4, #25
 8003a4a:	e7f5      	b.n	8003a38 <_printf_i+0x224>
 8003a4c:	08003ff8 	.word	0x08003ff8
 8003a50:	08004009 	.word	0x08004009

08003a54 <__sflush_r>:
 8003a54:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a5a:	0716      	lsls	r6, r2, #28
 8003a5c:	4605      	mov	r5, r0
 8003a5e:	460c      	mov	r4, r1
 8003a60:	d454      	bmi.n	8003b0c <__sflush_r+0xb8>
 8003a62:	684b      	ldr	r3, [r1, #4]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	dc02      	bgt.n	8003a6e <__sflush_r+0x1a>
 8003a68:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	dd48      	ble.n	8003b00 <__sflush_r+0xac>
 8003a6e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003a70:	2e00      	cmp	r6, #0
 8003a72:	d045      	beq.n	8003b00 <__sflush_r+0xac>
 8003a74:	2300      	movs	r3, #0
 8003a76:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003a7a:	682f      	ldr	r7, [r5, #0]
 8003a7c:	6a21      	ldr	r1, [r4, #32]
 8003a7e:	602b      	str	r3, [r5, #0]
 8003a80:	d030      	beq.n	8003ae4 <__sflush_r+0x90>
 8003a82:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003a84:	89a3      	ldrh	r3, [r4, #12]
 8003a86:	0759      	lsls	r1, r3, #29
 8003a88:	d505      	bpl.n	8003a96 <__sflush_r+0x42>
 8003a8a:	6863      	ldr	r3, [r4, #4]
 8003a8c:	1ad2      	subs	r2, r2, r3
 8003a8e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003a90:	b10b      	cbz	r3, 8003a96 <__sflush_r+0x42>
 8003a92:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003a94:	1ad2      	subs	r2, r2, r3
 8003a96:	2300      	movs	r3, #0
 8003a98:	4628      	mov	r0, r5
 8003a9a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003a9c:	6a21      	ldr	r1, [r4, #32]
 8003a9e:	47b0      	blx	r6
 8003aa0:	1c43      	adds	r3, r0, #1
 8003aa2:	89a3      	ldrh	r3, [r4, #12]
 8003aa4:	d106      	bne.n	8003ab4 <__sflush_r+0x60>
 8003aa6:	6829      	ldr	r1, [r5, #0]
 8003aa8:	291d      	cmp	r1, #29
 8003aaa:	d82b      	bhi.n	8003b04 <__sflush_r+0xb0>
 8003aac:	4a28      	ldr	r2, [pc, #160]	@ (8003b50 <__sflush_r+0xfc>)
 8003aae:	410a      	asrs	r2, r1
 8003ab0:	07d6      	lsls	r6, r2, #31
 8003ab2:	d427      	bmi.n	8003b04 <__sflush_r+0xb0>
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	6062      	str	r2, [r4, #4]
 8003ab8:	6922      	ldr	r2, [r4, #16]
 8003aba:	04d9      	lsls	r1, r3, #19
 8003abc:	6022      	str	r2, [r4, #0]
 8003abe:	d504      	bpl.n	8003aca <__sflush_r+0x76>
 8003ac0:	1c42      	adds	r2, r0, #1
 8003ac2:	d101      	bne.n	8003ac8 <__sflush_r+0x74>
 8003ac4:	682b      	ldr	r3, [r5, #0]
 8003ac6:	b903      	cbnz	r3, 8003aca <__sflush_r+0x76>
 8003ac8:	6560      	str	r0, [r4, #84]	@ 0x54
 8003aca:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003acc:	602f      	str	r7, [r5, #0]
 8003ace:	b1b9      	cbz	r1, 8003b00 <__sflush_r+0xac>
 8003ad0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003ad4:	4299      	cmp	r1, r3
 8003ad6:	d002      	beq.n	8003ade <__sflush_r+0x8a>
 8003ad8:	4628      	mov	r0, r5
 8003ada:	f7ff fca1 	bl	8003420 <_free_r>
 8003ade:	2300      	movs	r3, #0
 8003ae0:	6363      	str	r3, [r4, #52]	@ 0x34
 8003ae2:	e00d      	b.n	8003b00 <__sflush_r+0xac>
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	4628      	mov	r0, r5
 8003ae8:	47b0      	blx	r6
 8003aea:	4602      	mov	r2, r0
 8003aec:	1c50      	adds	r0, r2, #1
 8003aee:	d1c9      	bne.n	8003a84 <__sflush_r+0x30>
 8003af0:	682b      	ldr	r3, [r5, #0]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d0c6      	beq.n	8003a84 <__sflush_r+0x30>
 8003af6:	2b1d      	cmp	r3, #29
 8003af8:	d001      	beq.n	8003afe <__sflush_r+0xaa>
 8003afa:	2b16      	cmp	r3, #22
 8003afc:	d11d      	bne.n	8003b3a <__sflush_r+0xe6>
 8003afe:	602f      	str	r7, [r5, #0]
 8003b00:	2000      	movs	r0, #0
 8003b02:	e021      	b.n	8003b48 <__sflush_r+0xf4>
 8003b04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003b08:	b21b      	sxth	r3, r3
 8003b0a:	e01a      	b.n	8003b42 <__sflush_r+0xee>
 8003b0c:	690f      	ldr	r7, [r1, #16]
 8003b0e:	2f00      	cmp	r7, #0
 8003b10:	d0f6      	beq.n	8003b00 <__sflush_r+0xac>
 8003b12:	0793      	lsls	r3, r2, #30
 8003b14:	bf18      	it	ne
 8003b16:	2300      	movne	r3, #0
 8003b18:	680e      	ldr	r6, [r1, #0]
 8003b1a:	bf08      	it	eq
 8003b1c:	694b      	ldreq	r3, [r1, #20]
 8003b1e:	1bf6      	subs	r6, r6, r7
 8003b20:	600f      	str	r7, [r1, #0]
 8003b22:	608b      	str	r3, [r1, #8]
 8003b24:	2e00      	cmp	r6, #0
 8003b26:	ddeb      	ble.n	8003b00 <__sflush_r+0xac>
 8003b28:	4633      	mov	r3, r6
 8003b2a:	463a      	mov	r2, r7
 8003b2c:	4628      	mov	r0, r5
 8003b2e:	6a21      	ldr	r1, [r4, #32]
 8003b30:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8003b34:	47e0      	blx	ip
 8003b36:	2800      	cmp	r0, #0
 8003b38:	dc07      	bgt.n	8003b4a <__sflush_r+0xf6>
 8003b3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003b42:	f04f 30ff 	mov.w	r0, #4294967295
 8003b46:	81a3      	strh	r3, [r4, #12]
 8003b48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b4a:	4407      	add	r7, r0
 8003b4c:	1a36      	subs	r6, r6, r0
 8003b4e:	e7e9      	b.n	8003b24 <__sflush_r+0xd0>
 8003b50:	dfbffffe 	.word	0xdfbffffe

08003b54 <_fflush_r>:
 8003b54:	b538      	push	{r3, r4, r5, lr}
 8003b56:	690b      	ldr	r3, [r1, #16]
 8003b58:	4605      	mov	r5, r0
 8003b5a:	460c      	mov	r4, r1
 8003b5c:	b913      	cbnz	r3, 8003b64 <_fflush_r+0x10>
 8003b5e:	2500      	movs	r5, #0
 8003b60:	4628      	mov	r0, r5
 8003b62:	bd38      	pop	{r3, r4, r5, pc}
 8003b64:	b118      	cbz	r0, 8003b6e <_fflush_r+0x1a>
 8003b66:	6a03      	ldr	r3, [r0, #32]
 8003b68:	b90b      	cbnz	r3, 8003b6e <_fflush_r+0x1a>
 8003b6a:	f7ff fb2f 	bl	80031cc <__sinit>
 8003b6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d0f3      	beq.n	8003b5e <_fflush_r+0xa>
 8003b76:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003b78:	07d0      	lsls	r0, r2, #31
 8003b7a:	d404      	bmi.n	8003b86 <_fflush_r+0x32>
 8003b7c:	0599      	lsls	r1, r3, #22
 8003b7e:	d402      	bmi.n	8003b86 <_fflush_r+0x32>
 8003b80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003b82:	f7ff fc4a 	bl	800341a <__retarget_lock_acquire_recursive>
 8003b86:	4628      	mov	r0, r5
 8003b88:	4621      	mov	r1, r4
 8003b8a:	f7ff ff63 	bl	8003a54 <__sflush_r>
 8003b8e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003b90:	4605      	mov	r5, r0
 8003b92:	07da      	lsls	r2, r3, #31
 8003b94:	d4e4      	bmi.n	8003b60 <_fflush_r+0xc>
 8003b96:	89a3      	ldrh	r3, [r4, #12]
 8003b98:	059b      	lsls	r3, r3, #22
 8003b9a:	d4e1      	bmi.n	8003b60 <_fflush_r+0xc>
 8003b9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003b9e:	f7ff fc3d 	bl	800341c <__retarget_lock_release_recursive>
 8003ba2:	e7dd      	b.n	8003b60 <_fflush_r+0xc>

08003ba4 <__swbuf_r>:
 8003ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ba6:	460e      	mov	r6, r1
 8003ba8:	4614      	mov	r4, r2
 8003baa:	4605      	mov	r5, r0
 8003bac:	b118      	cbz	r0, 8003bb6 <__swbuf_r+0x12>
 8003bae:	6a03      	ldr	r3, [r0, #32]
 8003bb0:	b90b      	cbnz	r3, 8003bb6 <__swbuf_r+0x12>
 8003bb2:	f7ff fb0b 	bl	80031cc <__sinit>
 8003bb6:	69a3      	ldr	r3, [r4, #24]
 8003bb8:	60a3      	str	r3, [r4, #8]
 8003bba:	89a3      	ldrh	r3, [r4, #12]
 8003bbc:	071a      	lsls	r2, r3, #28
 8003bbe:	d501      	bpl.n	8003bc4 <__swbuf_r+0x20>
 8003bc0:	6923      	ldr	r3, [r4, #16]
 8003bc2:	b943      	cbnz	r3, 8003bd6 <__swbuf_r+0x32>
 8003bc4:	4621      	mov	r1, r4
 8003bc6:	4628      	mov	r0, r5
 8003bc8:	f000 f82a 	bl	8003c20 <__swsetup_r>
 8003bcc:	b118      	cbz	r0, 8003bd6 <__swbuf_r+0x32>
 8003bce:	f04f 37ff 	mov.w	r7, #4294967295
 8003bd2:	4638      	mov	r0, r7
 8003bd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003bd6:	6823      	ldr	r3, [r4, #0]
 8003bd8:	6922      	ldr	r2, [r4, #16]
 8003bda:	b2f6      	uxtb	r6, r6
 8003bdc:	1a98      	subs	r0, r3, r2
 8003bde:	6963      	ldr	r3, [r4, #20]
 8003be0:	4637      	mov	r7, r6
 8003be2:	4283      	cmp	r3, r0
 8003be4:	dc05      	bgt.n	8003bf2 <__swbuf_r+0x4e>
 8003be6:	4621      	mov	r1, r4
 8003be8:	4628      	mov	r0, r5
 8003bea:	f7ff ffb3 	bl	8003b54 <_fflush_r>
 8003bee:	2800      	cmp	r0, #0
 8003bf0:	d1ed      	bne.n	8003bce <__swbuf_r+0x2a>
 8003bf2:	68a3      	ldr	r3, [r4, #8]
 8003bf4:	3b01      	subs	r3, #1
 8003bf6:	60a3      	str	r3, [r4, #8]
 8003bf8:	6823      	ldr	r3, [r4, #0]
 8003bfa:	1c5a      	adds	r2, r3, #1
 8003bfc:	6022      	str	r2, [r4, #0]
 8003bfe:	701e      	strb	r6, [r3, #0]
 8003c00:	6962      	ldr	r2, [r4, #20]
 8003c02:	1c43      	adds	r3, r0, #1
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d004      	beq.n	8003c12 <__swbuf_r+0x6e>
 8003c08:	89a3      	ldrh	r3, [r4, #12]
 8003c0a:	07db      	lsls	r3, r3, #31
 8003c0c:	d5e1      	bpl.n	8003bd2 <__swbuf_r+0x2e>
 8003c0e:	2e0a      	cmp	r6, #10
 8003c10:	d1df      	bne.n	8003bd2 <__swbuf_r+0x2e>
 8003c12:	4621      	mov	r1, r4
 8003c14:	4628      	mov	r0, r5
 8003c16:	f7ff ff9d 	bl	8003b54 <_fflush_r>
 8003c1a:	2800      	cmp	r0, #0
 8003c1c:	d0d9      	beq.n	8003bd2 <__swbuf_r+0x2e>
 8003c1e:	e7d6      	b.n	8003bce <__swbuf_r+0x2a>

08003c20 <__swsetup_r>:
 8003c20:	b538      	push	{r3, r4, r5, lr}
 8003c22:	4b29      	ldr	r3, [pc, #164]	@ (8003cc8 <__swsetup_r+0xa8>)
 8003c24:	4605      	mov	r5, r0
 8003c26:	6818      	ldr	r0, [r3, #0]
 8003c28:	460c      	mov	r4, r1
 8003c2a:	b118      	cbz	r0, 8003c34 <__swsetup_r+0x14>
 8003c2c:	6a03      	ldr	r3, [r0, #32]
 8003c2e:	b90b      	cbnz	r3, 8003c34 <__swsetup_r+0x14>
 8003c30:	f7ff facc 	bl	80031cc <__sinit>
 8003c34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c38:	0719      	lsls	r1, r3, #28
 8003c3a:	d422      	bmi.n	8003c82 <__swsetup_r+0x62>
 8003c3c:	06da      	lsls	r2, r3, #27
 8003c3e:	d407      	bmi.n	8003c50 <__swsetup_r+0x30>
 8003c40:	2209      	movs	r2, #9
 8003c42:	602a      	str	r2, [r5, #0]
 8003c44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003c48:	f04f 30ff 	mov.w	r0, #4294967295
 8003c4c:	81a3      	strh	r3, [r4, #12]
 8003c4e:	e033      	b.n	8003cb8 <__swsetup_r+0x98>
 8003c50:	0758      	lsls	r0, r3, #29
 8003c52:	d512      	bpl.n	8003c7a <__swsetup_r+0x5a>
 8003c54:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003c56:	b141      	cbz	r1, 8003c6a <__swsetup_r+0x4a>
 8003c58:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003c5c:	4299      	cmp	r1, r3
 8003c5e:	d002      	beq.n	8003c66 <__swsetup_r+0x46>
 8003c60:	4628      	mov	r0, r5
 8003c62:	f7ff fbdd 	bl	8003420 <_free_r>
 8003c66:	2300      	movs	r3, #0
 8003c68:	6363      	str	r3, [r4, #52]	@ 0x34
 8003c6a:	89a3      	ldrh	r3, [r4, #12]
 8003c6c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003c70:	81a3      	strh	r3, [r4, #12]
 8003c72:	2300      	movs	r3, #0
 8003c74:	6063      	str	r3, [r4, #4]
 8003c76:	6923      	ldr	r3, [r4, #16]
 8003c78:	6023      	str	r3, [r4, #0]
 8003c7a:	89a3      	ldrh	r3, [r4, #12]
 8003c7c:	f043 0308 	orr.w	r3, r3, #8
 8003c80:	81a3      	strh	r3, [r4, #12]
 8003c82:	6923      	ldr	r3, [r4, #16]
 8003c84:	b94b      	cbnz	r3, 8003c9a <__swsetup_r+0x7a>
 8003c86:	89a3      	ldrh	r3, [r4, #12]
 8003c88:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003c8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c90:	d003      	beq.n	8003c9a <__swsetup_r+0x7a>
 8003c92:	4621      	mov	r1, r4
 8003c94:	4628      	mov	r0, r5
 8003c96:	f000 f84c 	bl	8003d32 <__smakebuf_r>
 8003c9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c9e:	f013 0201 	ands.w	r2, r3, #1
 8003ca2:	d00a      	beq.n	8003cba <__swsetup_r+0x9a>
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	60a2      	str	r2, [r4, #8]
 8003ca8:	6962      	ldr	r2, [r4, #20]
 8003caa:	4252      	negs	r2, r2
 8003cac:	61a2      	str	r2, [r4, #24]
 8003cae:	6922      	ldr	r2, [r4, #16]
 8003cb0:	b942      	cbnz	r2, 8003cc4 <__swsetup_r+0xa4>
 8003cb2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003cb6:	d1c5      	bne.n	8003c44 <__swsetup_r+0x24>
 8003cb8:	bd38      	pop	{r3, r4, r5, pc}
 8003cba:	0799      	lsls	r1, r3, #30
 8003cbc:	bf58      	it	pl
 8003cbe:	6962      	ldrpl	r2, [r4, #20]
 8003cc0:	60a2      	str	r2, [r4, #8]
 8003cc2:	e7f4      	b.n	8003cae <__swsetup_r+0x8e>
 8003cc4:	2000      	movs	r0, #0
 8003cc6:	e7f7      	b.n	8003cb8 <__swsetup_r+0x98>
 8003cc8:	20000018 	.word	0x20000018

08003ccc <memchr>:
 8003ccc:	4603      	mov	r3, r0
 8003cce:	b510      	push	{r4, lr}
 8003cd0:	b2c9      	uxtb	r1, r1
 8003cd2:	4402      	add	r2, r0
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	d101      	bne.n	8003cde <memchr+0x12>
 8003cda:	2000      	movs	r0, #0
 8003cdc:	e003      	b.n	8003ce6 <memchr+0x1a>
 8003cde:	7804      	ldrb	r4, [r0, #0]
 8003ce0:	3301      	adds	r3, #1
 8003ce2:	428c      	cmp	r4, r1
 8003ce4:	d1f6      	bne.n	8003cd4 <memchr+0x8>
 8003ce6:	bd10      	pop	{r4, pc}

08003ce8 <__swhatbuf_r>:
 8003ce8:	b570      	push	{r4, r5, r6, lr}
 8003cea:	460c      	mov	r4, r1
 8003cec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cf0:	4615      	mov	r5, r2
 8003cf2:	2900      	cmp	r1, #0
 8003cf4:	461e      	mov	r6, r3
 8003cf6:	b096      	sub	sp, #88	@ 0x58
 8003cf8:	da0c      	bge.n	8003d14 <__swhatbuf_r+0x2c>
 8003cfa:	89a3      	ldrh	r3, [r4, #12]
 8003cfc:	2100      	movs	r1, #0
 8003cfe:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003d02:	bf14      	ite	ne
 8003d04:	2340      	movne	r3, #64	@ 0x40
 8003d06:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003d0a:	2000      	movs	r0, #0
 8003d0c:	6031      	str	r1, [r6, #0]
 8003d0e:	602b      	str	r3, [r5, #0]
 8003d10:	b016      	add	sp, #88	@ 0x58
 8003d12:	bd70      	pop	{r4, r5, r6, pc}
 8003d14:	466a      	mov	r2, sp
 8003d16:	f000 f849 	bl	8003dac <_fstat_r>
 8003d1a:	2800      	cmp	r0, #0
 8003d1c:	dbed      	blt.n	8003cfa <__swhatbuf_r+0x12>
 8003d1e:	9901      	ldr	r1, [sp, #4]
 8003d20:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003d24:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003d28:	4259      	negs	r1, r3
 8003d2a:	4159      	adcs	r1, r3
 8003d2c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003d30:	e7eb      	b.n	8003d0a <__swhatbuf_r+0x22>

08003d32 <__smakebuf_r>:
 8003d32:	898b      	ldrh	r3, [r1, #12]
 8003d34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003d36:	079d      	lsls	r5, r3, #30
 8003d38:	4606      	mov	r6, r0
 8003d3a:	460c      	mov	r4, r1
 8003d3c:	d507      	bpl.n	8003d4e <__smakebuf_r+0x1c>
 8003d3e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003d42:	6023      	str	r3, [r4, #0]
 8003d44:	6123      	str	r3, [r4, #16]
 8003d46:	2301      	movs	r3, #1
 8003d48:	6163      	str	r3, [r4, #20]
 8003d4a:	b003      	add	sp, #12
 8003d4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d4e:	466a      	mov	r2, sp
 8003d50:	ab01      	add	r3, sp, #4
 8003d52:	f7ff ffc9 	bl	8003ce8 <__swhatbuf_r>
 8003d56:	9f00      	ldr	r7, [sp, #0]
 8003d58:	4605      	mov	r5, r0
 8003d5a:	4639      	mov	r1, r7
 8003d5c:	4630      	mov	r0, r6
 8003d5e:	f7ff f899 	bl	8002e94 <_malloc_r>
 8003d62:	b948      	cbnz	r0, 8003d78 <__smakebuf_r+0x46>
 8003d64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d68:	059a      	lsls	r2, r3, #22
 8003d6a:	d4ee      	bmi.n	8003d4a <__smakebuf_r+0x18>
 8003d6c:	f023 0303 	bic.w	r3, r3, #3
 8003d70:	f043 0302 	orr.w	r3, r3, #2
 8003d74:	81a3      	strh	r3, [r4, #12]
 8003d76:	e7e2      	b.n	8003d3e <__smakebuf_r+0xc>
 8003d78:	89a3      	ldrh	r3, [r4, #12]
 8003d7a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003d7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d82:	81a3      	strh	r3, [r4, #12]
 8003d84:	9b01      	ldr	r3, [sp, #4]
 8003d86:	6020      	str	r0, [r4, #0]
 8003d88:	b15b      	cbz	r3, 8003da2 <__smakebuf_r+0x70>
 8003d8a:	4630      	mov	r0, r6
 8003d8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003d90:	f000 f81e 	bl	8003dd0 <_isatty_r>
 8003d94:	b128      	cbz	r0, 8003da2 <__smakebuf_r+0x70>
 8003d96:	89a3      	ldrh	r3, [r4, #12]
 8003d98:	f023 0303 	bic.w	r3, r3, #3
 8003d9c:	f043 0301 	orr.w	r3, r3, #1
 8003da0:	81a3      	strh	r3, [r4, #12]
 8003da2:	89a3      	ldrh	r3, [r4, #12]
 8003da4:	431d      	orrs	r5, r3
 8003da6:	81a5      	strh	r5, [r4, #12]
 8003da8:	e7cf      	b.n	8003d4a <__smakebuf_r+0x18>
	...

08003dac <_fstat_r>:
 8003dac:	b538      	push	{r3, r4, r5, lr}
 8003dae:	2300      	movs	r3, #0
 8003db0:	4d06      	ldr	r5, [pc, #24]	@ (8003dcc <_fstat_r+0x20>)
 8003db2:	4604      	mov	r4, r0
 8003db4:	4608      	mov	r0, r1
 8003db6:	4611      	mov	r1, r2
 8003db8:	602b      	str	r3, [r5, #0]
 8003dba:	f7fc ff7d 	bl	8000cb8 <_fstat>
 8003dbe:	1c43      	adds	r3, r0, #1
 8003dc0:	d102      	bne.n	8003dc8 <_fstat_r+0x1c>
 8003dc2:	682b      	ldr	r3, [r5, #0]
 8003dc4:	b103      	cbz	r3, 8003dc8 <_fstat_r+0x1c>
 8003dc6:	6023      	str	r3, [r4, #0]
 8003dc8:	bd38      	pop	{r3, r4, r5, pc}
 8003dca:	bf00      	nop
 8003dcc:	20000784 	.word	0x20000784

08003dd0 <_isatty_r>:
 8003dd0:	b538      	push	{r3, r4, r5, lr}
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	4d05      	ldr	r5, [pc, #20]	@ (8003dec <_isatty_r+0x1c>)
 8003dd6:	4604      	mov	r4, r0
 8003dd8:	4608      	mov	r0, r1
 8003dda:	602b      	str	r3, [r5, #0]
 8003ddc:	f7fc ff7b 	bl	8000cd6 <_isatty>
 8003de0:	1c43      	adds	r3, r0, #1
 8003de2:	d102      	bne.n	8003dea <_isatty_r+0x1a>
 8003de4:	682b      	ldr	r3, [r5, #0]
 8003de6:	b103      	cbz	r3, 8003dea <_isatty_r+0x1a>
 8003de8:	6023      	str	r3, [r4, #0]
 8003dea:	bd38      	pop	{r3, r4, r5, pc}
 8003dec:	20000784 	.word	0x20000784

08003df0 <_init>:
 8003df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003df2:	bf00      	nop
 8003df4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003df6:	bc08      	pop	{r3}
 8003df8:	469e      	mov	lr, r3
 8003dfa:	4770      	bx	lr

08003dfc <_fini>:
 8003dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dfe:	bf00      	nop
 8003e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e02:	bc08      	pop	{r3}
 8003e04:	469e      	mov	lr, r3
 8003e06:	4770      	bx	lr
