
projekt_mikro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052bc  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000021c  080053c8  080053c8  000063c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080055e4  080055e4  00007064  2**0
                  CONTENTS
  4 .ARM          00000008  080055e4  080055e4  000065e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080055ec  080055ec  00007064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080055ec  080055ec  000065ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080055f0  080055f0  000065f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  080055f4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001404  20000064  08005658  00007064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001468  08005658  00007468  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000db98  00000000  00000000  0000708d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024cb  00000000  00000000  00014c25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d18  00000000  00000000  000170f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a5c  00000000  00000000  00017e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001874c  00000000  00000000  00018864  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ff63  00000000  00000000  00030fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b47f  00000000  00000000  00040f13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cc392  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bf4  00000000  00000000  000cc3d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000cffcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000064 	.word	0x20000064
 8000128:	00000000 	.word	0x00000000
 800012c:	080053b0 	.word	0x080053b0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000068 	.word	0x20000068
 8000148:	080053b0 	.word	0x080053b0

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <init_dht11>:
 *  Created on: Jan 11, 2025
 *      Author: witenberg
 */
#include "dht11.h"

void init_dht11(dht11_t *dht, GPIO_TypeDef* port, uint16_t pin, TIM_HandleTypeDef *htim){
 800015c:	b480      	push	{r7}
 800015e:	b085      	sub	sp, #20
 8000160:	af00      	add	r7, sp, #0
 8000162:	60f8      	str	r0, [r7, #12]
 8000164:	60b9      	str	r1, [r7, #8]
 8000166:	603b      	str	r3, [r7, #0]
 8000168:	4613      	mov	r3, r2
 800016a:	80fb      	strh	r3, [r7, #6]
	dht->htim = htim;
 800016c:	68fb      	ldr	r3, [r7, #12]
 800016e:	683a      	ldr	r2, [r7, #0]
 8000170:	609a      	str	r2, [r3, #8]
	dht->port = port;
 8000172:	68fb      	ldr	r3, [r7, #12]
 8000174:	68ba      	ldr	r2, [r7, #8]
 8000176:	601a      	str	r2, [r3, #0]
	dht->pin = pin;
 8000178:	68fb      	ldr	r3, [r7, #12]
 800017a:	88fa      	ldrh	r2, [r7, #6]
 800017c:	809a      	strh	r2, [r3, #4]
	dht->empty = 0;
 800017e:	68fb      	ldr	r3, [r7, #12]
 8000180:	2200      	movs	r2, #0
 8000182:	f8a3 2bc4 	strh.w	r2, [r3, #3012]	@ 0xbc4
	dht->busy = 0;
 8000186:	68fb      	ldr	r3, [r7, #12]
 8000188:	2200      	movs	r2, #0
 800018a:	f8a3 2bc6 	strh.w	r2, [r3, #3014]	@ 0xbc6
	dht->count = 0;
 800018e:	68fb      	ldr	r3, [r7, #12]
 8000190:	2200      	movs	r2, #0
 8000192:	f8a3 2bc8 	strh.w	r2, [r3, #3016]	@ 0xbc8
}
 8000196:	bf00      	nop
 8000198:	3714      	adds	r7, #20
 800019a:	46bd      	mov	sp, r7
 800019c:	bc80      	pop	{r7}
 800019e:	4770      	bx	lr

080001a0 <set_dht11_gpio_mode>:
	dht->empty = (dht->empty + 1) % DHT11_BUF_SIZE;
	if (dht->count < DHT11_BUF_SIZE) dht->count++;
}


void set_dht11_gpio_mode(dht11_t *dht, uint8_t mode) {
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b086      	sub	sp, #24
 80001a4:	af00      	add	r7, sp, #0
 80001a6:	6078      	str	r0, [r7, #4]
 80001a8:	460b      	mov	r3, r1
 80001aa:	70fb      	strb	r3, [r7, #3]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001ac:	f107 0308 	add.w	r3, r7, #8
 80001b0:	2200      	movs	r2, #0
 80001b2:	601a      	str	r2, [r3, #0]
 80001b4:	605a      	str	r2, [r3, #4]
 80001b6:	609a      	str	r2, [r3, #8]
 80001b8:	60da      	str	r2, [r3, #12]

	if (mode == OUTPUT) {
 80001ba:	78fb      	ldrb	r3, [r7, #3]
 80001bc:	2b01      	cmp	r3, #1
 80001be:	d111      	bne.n	80001e4 <set_dht11_gpio_mode+0x44>
		GPIO_InitStruct.Pin = dht->pin;
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	889b      	ldrh	r3, [r3, #4]
 80001c4:	60bb      	str	r3, [r7, #8]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001c6:	2301      	movs	r3, #1
 80001c8:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001ca:	2300      	movs	r3, #0
 80001cc:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80001ce:	2303      	movs	r3, #3
 80001d0:	617b      	str	r3, [r7, #20]
		HAL_GPIO_Init(dht->port, &GPIO_InitStruct);
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	681b      	ldr	r3, [r3, #0]
 80001d6:	f107 0208 	add.w	r2, r7, #8
 80001da:	4611      	mov	r1, r2
 80001dc:	4618      	mov	r0, r3
 80001de:	f001 fd45 	bl	8001c6c <HAL_GPIO_Init>
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
		GPIO_InitStruct.Pull = GPIO_PULLUP;
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
		HAL_GPIO_Init(dht->port, &GPIO_InitStruct);
	}
}
 80001e2:	e013      	b.n	800020c <set_dht11_gpio_mode+0x6c>
	} else if (mode == INPUT) {
 80001e4:	78fb      	ldrb	r3, [r7, #3]
 80001e6:	2b00      	cmp	r3, #0
 80001e8:	d110      	bne.n	800020c <set_dht11_gpio_mode+0x6c>
		GPIO_InitStruct.Pin = dht->pin;
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	889b      	ldrh	r3, [r3, #4]
 80001ee:	60bb      	str	r3, [r7, #8]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80001f0:	2300      	movs	r3, #0
 80001f2:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 80001f4:	2301      	movs	r3, #1
 80001f6:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80001f8:	2303      	movs	r3, #3
 80001fa:	617b      	str	r3, [r7, #20]
		HAL_GPIO_Init(dht->port, &GPIO_InitStruct);
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	f107 0208 	add.w	r2, r7, #8
 8000204:	4611      	mov	r1, r2
 8000206:	4618      	mov	r0, r3
 8000208:	f001 fd30 	bl	8001c6c <HAL_GPIO_Init>
}
 800020c:	bf00      	nop
 800020e:	3718      	adds	r7, #24
 8000210:	46bd      	mov	sp, r7
 8000212:	bd80      	pop	{r7, pc}

08000214 <readDHT11>:

uint8_t readDHT11(dht11_t *dht) {
 8000214:	b580      	push	{r7, lr}
 8000216:	b088      	sub	sp, #32
 8000218:	af00      	add	r7, sp, #0
 800021a:	6078      	str	r0, [r7, #4]
	uint8_t data[5] = {0};
 800021c:	2300      	movs	r3, #0
 800021e:	60fb      	str	r3, [r7, #12]
 8000220:	2300      	movs	r3, #0
 8000222:	743b      	strb	r3, [r7, #16]
	uint8_t bitIndex = 0;
 8000224:	2300      	movs	r3, #0
 8000226:	77fb      	strb	r3, [r7, #31]
	uint16_t high_time = 0;
 8000228:	2300      	movs	r3, #0
 800022a:	83bb      	strh	r3, [r7, #28]
	uint16_t low_time = 0;
 800022c:	2300      	movs	r3, #0
 800022e:	837b      	strh	r3, [r7, #26]

	//start komunikacji
	set_dht11_gpio_mode(dht, OUTPUT);
 8000230:	2101      	movs	r1, #1
 8000232:	6878      	ldr	r0, [r7, #4]
 8000234:	f7ff ffb4 	bl	80001a0 <set_dht11_gpio_mode>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000238:	b672      	cpsid	i
}
 800023a:	bf00      	nop

	__disable_irq();
	HAL_GPIO_WritePin(dht->port, dht->pin, GPIO_PIN_RESET); // stan niski na 18ms
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	6818      	ldr	r0, [r3, #0]
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	889b      	ldrh	r3, [r3, #4]
 8000244:	2200      	movs	r2, #0
 8000246:	4619      	mov	r1, r3
 8000248:	f001 feab 	bl	8001fa2 <HAL_GPIO_WritePin>
	delay_us(18000);
 800024c:	f244 6050 	movw	r0, #18000	@ 0x4650
 8000250:	f000 fae2 	bl	8000818 <delay_us>
	HAL_GPIO_WritePin(dht->port, dht->pin, GPIO_PIN_SET);
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	6818      	ldr	r0, [r3, #0]
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	889b      	ldrh	r3, [r3, #4]
 800025c:	2201      	movs	r2, #1
 800025e:	4619      	mov	r1, r3
 8000260:	f001 fe9f 	bl	8001fa2 <HAL_GPIO_WritePin>
	delay_us(20);
 8000264:	2014      	movs	r0, #20
 8000266:	f000 fad7 	bl	8000818 <delay_us>
	set_dht11_gpio_mode(dht, INPUT);
 800026a:	2100      	movs	r1, #0
 800026c:	6878      	ldr	r0, [r7, #4]
 800026e:	f7ff ff97 	bl	80001a0 <set_dht11_gpio_mode>


	uint32_t timeout = HAL_GetTick() + 2;
 8000272:	f001 fb0d 	bl	8001890 <HAL_GetTick>
 8000276:	4603      	mov	r3, r0
 8000278:	3302      	adds	r3, #2
 800027a:	617b      	str	r3, [r7, #20]

	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET) {
 800027c:	e007      	b.n	800028e <readDHT11+0x7a>
		if (HAL_GetTick() > timeout) return 1; // Timeout
 800027e:	f001 fb07 	bl	8001890 <HAL_GetTick>
 8000282:	4602      	mov	r2, r0
 8000284:	697b      	ldr	r3, [r7, #20]
 8000286:	4293      	cmp	r3, r2
 8000288:	d201      	bcs.n	800028e <readDHT11+0x7a>
 800028a:	2301      	movs	r3, #1
 800028c:	e0dd      	b.n	800044a <readDHT11+0x236>
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET) {
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	681a      	ldr	r2, [r3, #0]
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	889b      	ldrh	r3, [r3, #4]
 8000296:	4619      	mov	r1, r3
 8000298:	4610      	mov	r0, r2
 800029a:	f001 fe6b 	bl	8001f74 <HAL_GPIO_ReadPin>
 800029e:	4603      	mov	r3, r0
 80002a0:	2b01      	cmp	r3, #1
 80002a2:	d0ec      	beq.n	800027e <readDHT11+0x6a>
	}

	timeout = HAL_GetTick() + 2;
 80002a4:	f001 faf4 	bl	8001890 <HAL_GetTick>
 80002a8:	4603      	mov	r3, r0
 80002aa:	3302      	adds	r3, #2
 80002ac:	617b      	str	r3, [r7, #20]
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_RESET) {
 80002ae:	e007      	b.n	80002c0 <readDHT11+0xac>
		if (HAL_GetTick() > timeout) return 1; // Timeout
 80002b0:	f001 faee 	bl	8001890 <HAL_GetTick>
 80002b4:	4602      	mov	r2, r0
 80002b6:	697b      	ldr	r3, [r7, #20]
 80002b8:	4293      	cmp	r3, r2
 80002ba:	d201      	bcs.n	80002c0 <readDHT11+0xac>
 80002bc:	2301      	movs	r3, #1
 80002be:	e0c4      	b.n	800044a <readDHT11+0x236>
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_RESET) {
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	681a      	ldr	r2, [r3, #0]
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	889b      	ldrh	r3, [r3, #4]
 80002c8:	4619      	mov	r1, r3
 80002ca:	4610      	mov	r0, r2
 80002cc:	f001 fe52 	bl	8001f74 <HAL_GPIO_ReadPin>
 80002d0:	4603      	mov	r3, r0
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d0ec      	beq.n	80002b0 <readDHT11+0x9c>
	}

	timeout = HAL_GetTick() + 2;
 80002d6:	f001 fadb 	bl	8001890 <HAL_GetTick>
 80002da:	4603      	mov	r3, r0
 80002dc:	3302      	adds	r3, #2
 80002de:	617b      	str	r3, [r7, #20]
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET) {
 80002e0:	e007      	b.n	80002f2 <readDHT11+0xde>
		if (HAL_GetTick() > timeout) return 1; // Timeout
 80002e2:	f001 fad5 	bl	8001890 <HAL_GetTick>
 80002e6:	4602      	mov	r2, r0
 80002e8:	697b      	ldr	r3, [r7, #20]
 80002ea:	4293      	cmp	r3, r2
 80002ec:	d201      	bcs.n	80002f2 <readDHT11+0xde>
 80002ee:	2301      	movs	r3, #1
 80002f0:	e0ab      	b.n	800044a <readDHT11+0x236>
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET) {
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	681a      	ldr	r2, [r3, #0]
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	889b      	ldrh	r3, [r3, #4]
 80002fa:	4619      	mov	r1, r3
 80002fc:	4610      	mov	r0, r2
 80002fe:	f001 fe39 	bl	8001f74 <HAL_GPIO_ReadPin>
 8000302:	4603      	mov	r3, r0
 8000304:	2b01      	cmp	r3, #1
 8000306:	d0ec      	beq.n	80002e2 <readDHT11+0xce>
	}


	HAL_TIM_PWM_Start(dht->htim, TIM_CHANNEL_1);
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	689b      	ldr	r3, [r3, #8]
 800030c:	2100      	movs	r1, #0
 800030e:	4618      	mov	r0, r3
 8000310:	f002 fbfc 	bl	8002b0c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(dht->htim, TIM_CHANNEL_2);
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	689b      	ldr	r3, [r3, #8]
 8000318:	2104      	movs	r1, #4
 800031a:	4618      	mov	r0, r3
 800031c:	f002 fbf6 	bl	8002b0c <HAL_TIM_PWM_Start>

	for (bitIndex = 0; bitIndex < 40; bitIndex++) {
 8000320:	2300      	movs	r3, #0
 8000322:	77fb      	strb	r3, [r7, #31]
 8000324:	e08c      	b.n	8000440 <readDHT11+0x22c>
			__HAL_TIM_CLEAR_FLAG(dht->htim, TIM_FLAG_CC1 | TIM_FLAG_CC2);
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	689b      	ldr	r3, [r3, #8]
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	f06f 0206 	mvn.w	r2, #6
 8000330:	611a      	str	r2, [r3, #16]
			timeout = HAL_GetTick() + 1;
 8000332:	f001 faad 	bl	8001890 <HAL_GetTick>
 8000336:	4603      	mov	r3, r0
 8000338:	3301      	adds	r3, #1
 800033a:	617b      	str	r3, [r7, #20]
			while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_RESET) {
 800033c:	e00c      	b.n	8000358 <readDHT11+0x144>
				if (HAL_GetTick() > timeout) {
 800033e:	f001 faa7 	bl	8001890 <HAL_GetTick>
 8000342:	4602      	mov	r2, r0
 8000344:	697b      	ldr	r3, [r7, #20]
 8000346:	4293      	cmp	r3, r2
 8000348:	d206      	bcs.n	8000358 <readDHT11+0x144>
					USART_fsend(" timeout i=%u ", bitIndex);
 800034a:	7ffb      	ldrb	r3, [r7, #31]
 800034c:	4619      	mov	r1, r3
 800034e:	4841      	ldr	r0, [pc, #260]	@ (8000454 <readDHT11+0x240>)
 8000350:	f000 f922 	bl	8000598 <USART_fsend>
					return 1;
 8000354:	2301      	movs	r3, #1
 8000356:	e078      	b.n	800044a <readDHT11+0x236>
			while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_RESET) {
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	681a      	ldr	r2, [r3, #0]
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	889b      	ldrh	r3, [r3, #4]
 8000360:	4619      	mov	r1, r3
 8000362:	4610      	mov	r0, r2
 8000364:	f001 fe06 	bl	8001f74 <HAL_GPIO_ReadPin>
 8000368:	4603      	mov	r3, r0
 800036a:	2b00      	cmp	r3, #0
 800036c:	d0e7      	beq.n	800033e <readDHT11+0x12a>
				}
			}
			low_time = __HAL_TIM_GET_COMPARE(dht->htim, TIM_CHANNEL_1);
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	689b      	ldr	r3, [r3, #8]
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000376:	837b      	strh	r3, [r7, #26]
	//		USART_fsend(" low=%u ", low_time);

			timeout = HAL_GetTick() + 1;
 8000378:	f001 fa8a 	bl	8001890 <HAL_GetTick>
 800037c:	4603      	mov	r3, r0
 800037e:	3301      	adds	r3, #1
 8000380:	617b      	str	r3, [r7, #20]

			while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET){
 8000382:	e00c      	b.n	800039e <readDHT11+0x18a>
				if (HAL_GetTick() > timeout) {
 8000384:	f001 fa84 	bl	8001890 <HAL_GetTick>
 8000388:	4602      	mov	r2, r0
 800038a:	697b      	ldr	r3, [r7, #20]
 800038c:	4293      	cmp	r3, r2
 800038e:	d206      	bcs.n	800039e <readDHT11+0x18a>
					USART_fsend(" timeout i=%u ", bitIndex);
 8000390:	7ffb      	ldrb	r3, [r7, #31]
 8000392:	4619      	mov	r1, r3
 8000394:	482f      	ldr	r0, [pc, #188]	@ (8000454 <readDHT11+0x240>)
 8000396:	f000 f8ff 	bl	8000598 <USART_fsend>
					return 1;
 800039a:	2301      	movs	r3, #1
 800039c:	e055      	b.n	800044a <readDHT11+0x236>
			while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET){
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	681a      	ldr	r2, [r3, #0]
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	889b      	ldrh	r3, [r3, #4]
 80003a6:	4619      	mov	r1, r3
 80003a8:	4610      	mov	r0, r2
 80003aa:	f001 fde3 	bl	8001f74 <HAL_GPIO_ReadPin>
 80003ae:	4603      	mov	r3, r0
 80003b0:	2b01      	cmp	r3, #1
 80003b2:	d0e7      	beq.n	8000384 <readDHT11+0x170>
				}
			}

			high_time = __HAL_TIM_GET_COMPARE(dht->htim, TIM_CHANNEL_2);
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	689b      	ldr	r3, [r3, #8]
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80003bc:	83bb      	strh	r3, [r7, #28]
			USART_fsend("(%u - %u) ", low_time, high_time);
 80003be:	8b7b      	ldrh	r3, [r7, #26]
 80003c0:	8bba      	ldrh	r2, [r7, #28]
 80003c2:	4619      	mov	r1, r3
 80003c4:	4824      	ldr	r0, [pc, #144]	@ (8000458 <readDHT11+0x244>)
 80003c6:	f000 f8e7 	bl	8000598 <USART_fsend>

			if (high_time > 50) {
 80003ca:	8bbb      	ldrh	r3, [r7, #28]
 80003cc:	2b32      	cmp	r3, #50	@ 0x32
 80003ce:	d919      	bls.n	8000404 <readDHT11+0x1f0>
				data[bitIndex / 8] |= (1 << (7 - (bitIndex % 8))); // bit 1
 80003d0:	7ffb      	ldrb	r3, [r7, #31]
 80003d2:	08db      	lsrs	r3, r3, #3
 80003d4:	b2d8      	uxtb	r0, r3
 80003d6:	4603      	mov	r3, r0
 80003d8:	3320      	adds	r3, #32
 80003da:	443b      	add	r3, r7
 80003dc:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80003e0:	b25a      	sxtb	r2, r3
 80003e2:	7ffb      	ldrb	r3, [r7, #31]
 80003e4:	43db      	mvns	r3, r3
 80003e6:	f003 0307 	and.w	r3, r3, #7
 80003ea:	2101      	movs	r1, #1
 80003ec:	fa01 f303 	lsl.w	r3, r1, r3
 80003f0:	b25b      	sxtb	r3, r3
 80003f2:	4313      	orrs	r3, r2
 80003f4:	b25a      	sxtb	r2, r3
 80003f6:	4603      	mov	r3, r0
 80003f8:	b2d2      	uxtb	r2, r2
 80003fa:	3320      	adds	r3, #32
 80003fc:	443b      	add	r3, r7
 80003fe:	f803 2c14 	strb.w	r2, [r3, #-20]
 8000402:	e01a      	b.n	800043a <readDHT11+0x226>
			} else {
				data[bitIndex / 8] &= ~(1 << (7 - (bitIndex % 8))); // bit 0
 8000404:	7ffb      	ldrb	r3, [r7, #31]
 8000406:	08db      	lsrs	r3, r3, #3
 8000408:	b2d8      	uxtb	r0, r3
 800040a:	4603      	mov	r3, r0
 800040c:	3320      	adds	r3, #32
 800040e:	443b      	add	r3, r7
 8000410:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8000414:	b25a      	sxtb	r2, r3
 8000416:	7ffb      	ldrb	r3, [r7, #31]
 8000418:	43db      	mvns	r3, r3
 800041a:	f003 0307 	and.w	r3, r3, #7
 800041e:	2101      	movs	r1, #1
 8000420:	fa01 f303 	lsl.w	r3, r1, r3
 8000424:	b25b      	sxtb	r3, r3
 8000426:	43db      	mvns	r3, r3
 8000428:	b25b      	sxtb	r3, r3
 800042a:	4013      	ands	r3, r2
 800042c:	b25a      	sxtb	r2, r3
 800042e:	4603      	mov	r3, r0
 8000430:	b2d2      	uxtb	r2, r2
 8000432:	3320      	adds	r3, #32
 8000434:	443b      	add	r3, r7
 8000436:	f803 2c14 	strb.w	r2, [r3, #-20]
	for (bitIndex = 0; bitIndex < 40; bitIndex++) {
 800043a:	7ffb      	ldrb	r3, [r7, #31]
 800043c:	3301      	adds	r3, #1
 800043e:	77fb      	strb	r3, [r7, #31]
 8000440:	7ffb      	ldrb	r3, [r7, #31]
 8000442:	2b27      	cmp	r3, #39	@ 0x27
 8000444:	f67f af6f 	bls.w	8000326 <readDHT11+0x112>

//	USART_fsend("DHT11 Data: Humidity=%d.%d%%", data[0], data[1]);

//
//    add_to_dht11_buf(dht, data);
    return 0;
 8000448:	2300      	movs	r3, #0
}
 800044a:	4618      	mov	r0, r3
 800044c:	3720      	adds	r7, #32
 800044e:	46bd      	mov	sp, r7
 8000450:	bd80      	pop	{r7, pc}
 8000452:	bf00      	nop
 8000454:	080053c8 	.word	0x080053c8
 8000458:	080053d8 	.word	0x080053d8

0800045c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b088      	sub	sp, #32
 8000460:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000462:	f107 0310 	add.w	r3, r7, #16
 8000466:	2200      	movs	r2, #0
 8000468:	601a      	str	r2, [r3, #0]
 800046a:	605a      	str	r2, [r3, #4]
 800046c:	609a      	str	r2, [r3, #8]
 800046e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000470:	4b2d      	ldr	r3, [pc, #180]	@ (8000528 <MX_GPIO_Init+0xcc>)
 8000472:	699b      	ldr	r3, [r3, #24]
 8000474:	4a2c      	ldr	r2, [pc, #176]	@ (8000528 <MX_GPIO_Init+0xcc>)
 8000476:	f043 0310 	orr.w	r3, r3, #16
 800047a:	6193      	str	r3, [r2, #24]
 800047c:	4b2a      	ldr	r3, [pc, #168]	@ (8000528 <MX_GPIO_Init+0xcc>)
 800047e:	699b      	ldr	r3, [r3, #24]
 8000480:	f003 0310 	and.w	r3, r3, #16
 8000484:	60fb      	str	r3, [r7, #12]
 8000486:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000488:	4b27      	ldr	r3, [pc, #156]	@ (8000528 <MX_GPIO_Init+0xcc>)
 800048a:	699b      	ldr	r3, [r3, #24]
 800048c:	4a26      	ldr	r2, [pc, #152]	@ (8000528 <MX_GPIO_Init+0xcc>)
 800048e:	f043 0320 	orr.w	r3, r3, #32
 8000492:	6193      	str	r3, [r2, #24]
 8000494:	4b24      	ldr	r3, [pc, #144]	@ (8000528 <MX_GPIO_Init+0xcc>)
 8000496:	699b      	ldr	r3, [r3, #24]
 8000498:	f003 0320 	and.w	r3, r3, #32
 800049c:	60bb      	str	r3, [r7, #8]
 800049e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004a0:	4b21      	ldr	r3, [pc, #132]	@ (8000528 <MX_GPIO_Init+0xcc>)
 80004a2:	699b      	ldr	r3, [r3, #24]
 80004a4:	4a20      	ldr	r2, [pc, #128]	@ (8000528 <MX_GPIO_Init+0xcc>)
 80004a6:	f043 0304 	orr.w	r3, r3, #4
 80004aa:	6193      	str	r3, [r2, #24]
 80004ac:	4b1e      	ldr	r3, [pc, #120]	@ (8000528 <MX_GPIO_Init+0xcc>)
 80004ae:	699b      	ldr	r3, [r3, #24]
 80004b0:	f003 0304 	and.w	r3, r3, #4
 80004b4:	607b      	str	r3, [r7, #4]
 80004b6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004b8:	4b1b      	ldr	r3, [pc, #108]	@ (8000528 <MX_GPIO_Init+0xcc>)
 80004ba:	699b      	ldr	r3, [r3, #24]
 80004bc:	4a1a      	ldr	r2, [pc, #104]	@ (8000528 <MX_GPIO_Init+0xcc>)
 80004be:	f043 0308 	orr.w	r3, r3, #8
 80004c2:	6193      	str	r3, [r2, #24]
 80004c4:	4b18      	ldr	r3, [pc, #96]	@ (8000528 <MX_GPIO_Init+0xcc>)
 80004c6:	699b      	ldr	r3, [r3, #24]
 80004c8:	f003 0308 	and.w	r3, r3, #8
 80004cc:	603b      	str	r3, [r7, #0]
 80004ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80004d0:	2200      	movs	r2, #0
 80004d2:	2120      	movs	r1, #32
 80004d4:	4815      	ldr	r0, [pc, #84]	@ (800052c <MX_GPIO_Init+0xd0>)
 80004d6:	f001 fd64 	bl	8001fa2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80004da:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80004de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80004e0:	4b13      	ldr	r3, [pc, #76]	@ (8000530 <MX_GPIO_Init+0xd4>)
 80004e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e4:	2300      	movs	r3, #0
 80004e6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80004e8:	f107 0310 	add.w	r3, r7, #16
 80004ec:	4619      	mov	r1, r3
 80004ee:	4811      	ldr	r0, [pc, #68]	@ (8000534 <MX_GPIO_Init+0xd8>)
 80004f0:	f001 fbbc 	bl	8001c6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80004f4:	2320      	movs	r3, #32
 80004f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004f8:	2301      	movs	r3, #1
 80004fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004fc:	2300      	movs	r3, #0
 80004fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000500:	2302      	movs	r3, #2
 8000502:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000504:	f107 0310 	add.w	r3, r7, #16
 8000508:	4619      	mov	r1, r3
 800050a:	4808      	ldr	r0, [pc, #32]	@ (800052c <MX_GPIO_Init+0xd0>)
 800050c:	f001 fbae 	bl	8001c6c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000510:	2200      	movs	r2, #0
 8000512:	2100      	movs	r1, #0
 8000514:	2028      	movs	r0, #40	@ 0x28
 8000516:	f001 fac0 	bl	8001a9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800051a:	2028      	movs	r0, #40	@ 0x28
 800051c:	f001 fad9 	bl	8001ad2 <HAL_NVIC_EnableIRQ>

}
 8000520:	bf00      	nop
 8000522:	3720      	adds	r7, #32
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}
 8000528:	40021000 	.word	0x40021000
 800052c:	40010800 	.word	0x40010800
 8000530:	10110000 	.word	0x10110000
 8000534:	40011000 	.word	0x40011000

08000538 <calculate_crc_byte>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* === CRC === */
uint16_t calculate_crc_byte(uint16_t crc, uint8_t data) {
 8000538:	b480      	push	{r7}
 800053a:	b085      	sub	sp, #20
 800053c:	af00      	add	r7, sp, #0
 800053e:	4603      	mov	r3, r0
 8000540:	460a      	mov	r2, r1
 8000542:	80fb      	strh	r3, [r7, #6]
 8000544:	4613      	mov	r3, r2
 8000546:	717b      	strb	r3, [r7, #5]
	crc ^= (data << 8);
 8000548:	797b      	ldrb	r3, [r7, #5]
 800054a:	021b      	lsls	r3, r3, #8
 800054c:	b21a      	sxth	r2, r3
 800054e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000552:	4053      	eors	r3, r2
 8000554:	b21b      	sxth	r3, r3
 8000556:	80fb      	strh	r3, [r7, #6]
	for (uint8_t i = 0; i < 8; i++) {
 8000558:	2300      	movs	r3, #0
 800055a:	73fb      	strb	r3, [r7, #15]
 800055c:	e013      	b.n	8000586 <calculate_crc_byte+0x4e>
		if (crc & 0x8000) crc = (crc << 1) ^ 0x1021;
 800055e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000562:	2b00      	cmp	r3, #0
 8000564:	da09      	bge.n	800057a <calculate_crc_byte+0x42>
 8000566:	88fb      	ldrh	r3, [r7, #6]
 8000568:	005b      	lsls	r3, r3, #1
 800056a:	b21b      	sxth	r3, r3
 800056c:	f483 5381 	eor.w	r3, r3, #4128	@ 0x1020
 8000570:	f083 0301 	eor.w	r3, r3, #1
 8000574:	b21b      	sxth	r3, r3
 8000576:	80fb      	strh	r3, [r7, #6]
 8000578:	e002      	b.n	8000580 <calculate_crc_byte+0x48>
		else crc <<= 1;
 800057a:	88fb      	ldrh	r3, [r7, #6]
 800057c:	005b      	lsls	r3, r3, #1
 800057e:	80fb      	strh	r3, [r7, #6]
	for (uint8_t i = 0; i < 8; i++) {
 8000580:	7bfb      	ldrb	r3, [r7, #15]
 8000582:	3301      	adds	r3, #1
 8000584:	73fb      	strb	r3, [r7, #15]
 8000586:	7bfb      	ldrb	r3, [r7, #15]
 8000588:	2b07      	cmp	r3, #7
 800058a:	d9e8      	bls.n	800055e <calculate_crc_byte+0x26>
	}
	return crc;
 800058c:	88fb      	ldrh	r3, [r7, #6]
}
 800058e:	4618      	mov	r0, r3
 8000590:	3714      	adds	r7, #20
 8000592:	46bd      	mov	sp, r7
 8000594:	bc80      	pop	{r7}
 8000596:	4770      	bx	lr

08000598 <USART_fsend>:
	} else {
		return 1;
	}
}

void USART_fsend(char* format, ...) {
 8000598:	b40f      	push	{r0, r1, r2, r3}
 800059a:	b580      	push	{r7, lr}
 800059c:	b0c4      	sub	sp, #272	@ 0x110
 800059e:	af00      	add	r7, sp, #0
	char tmp[256];
	va_list arglist;
	va_start(arglist, format);
 80005a0:	f507 728e 	add.w	r2, r7, #284	@ 0x11c
 80005a4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80005a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80005ac:	601a      	str	r2, [r3, #0]
	vsprintf(tmp, format, arglist);
 80005ae:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80005b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80005b6:	f107 000c 	add.w	r0, r7, #12
 80005ba:	681a      	ldr	r2, [r3, #0]
 80005bc:	f8d7 1118 	ldr.w	r1, [r7, #280]	@ 0x118
 80005c0:	f004 fa3c 	bl	8004a3c <vsiprintf>
	va_end(arglist);
	volatile int idx = USART_TX_EMPTY;
 80005c4:	4b44      	ldr	r3, [pc, #272]	@ (80006d8 <USART_fsend+0x140>)
 80005c6:	881b      	ldrh	r3, [r3, #0]
 80005c8:	b29b      	uxth	r3, r3
 80005ca:	461a      	mov	r2, r3
 80005cc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80005d0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80005d4:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < strlen(tmp); i++) {
 80005d6:	2300      	movs	r3, #0
 80005d8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80005dc:	e025      	b.n	800062a <USART_fsend+0x92>
		USART_BUF_TX[idx] = tmp[i];
 80005de:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80005e2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80005ec:	f5a2 7182 	sub.w	r1, r2, #260	@ 0x104
 80005f0:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 80005f4:	440a      	add	r2, r1
 80005f6:	7811      	ldrb	r1, [r2, #0]
 80005f8:	4a38      	ldr	r2, [pc, #224]	@ (80006dc <USART_fsend+0x144>)
 80005fa:	54d1      	strb	r1, [r2, r3]
		idx = (idx + 1) % USART_TXBUF_SIZE;
 80005fc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000600:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	3301      	adds	r3, #1
 8000608:	425a      	negs	r2, r3
 800060a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800060e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8000612:	bf58      	it	pl
 8000614:	4253      	negpl	r3, r2
 8000616:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800061a:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 800061e:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < strlen(tmp); i++) {
 8000620:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000624:	3301      	adds	r3, #1
 8000626:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800062a:	f107 030c 	add.w	r3, r7, #12
 800062e:	4618      	mov	r0, r3
 8000630:	f7ff fd8c 	bl	800014c <strlen>
 8000634:	4602      	mov	r2, r0
 8000636:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800063a:	429a      	cmp	r2, r3
 800063c:	d8cf      	bhi.n	80005de <USART_fsend+0x46>
  __ASM volatile ("cpsid i" : : : "memory");
 800063e:	b672      	cpsid	i
}
 8000640:	bf00      	nop
	}

	__disable_irq();
	if (USART_TX_EMPTY == USART_TX_BUSY && __HAL_UART_GET_FLAG(&huart2, UART_FLAG_TXE) == SET) {
 8000642:	4b25      	ldr	r3, [pc, #148]	@ (80006d8 <USART_fsend+0x140>)
 8000644:	881b      	ldrh	r3, [r3, #0]
 8000646:	b29a      	uxth	r2, r3
 8000648:	4b25      	ldr	r3, [pc, #148]	@ (80006e0 <USART_fsend+0x148>)
 800064a:	881b      	ldrh	r3, [r3, #0]
 800064c:	b29b      	uxth	r3, r3
 800064e:	429a      	cmp	r2, r3
 8000650:	d130      	bne.n	80006b4 <USART_fsend+0x11c>
 8000652:	4b24      	ldr	r3, [pc, #144]	@ (80006e4 <USART_fsend+0x14c>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800065c:	2b80      	cmp	r3, #128	@ 0x80
 800065e:	d129      	bne.n	80006b4 <USART_fsend+0x11c>
		USART_TX_EMPTY = idx;
 8000660:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000664:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	b29a      	uxth	r2, r3
 800066c:	4b1a      	ldr	r3, [pc, #104]	@ (80006d8 <USART_fsend+0x140>)
 800066e:	801a      	strh	r2, [r3, #0]
		uint8_t tmp = USART_BUF_TX[USART_TX_BUSY];
 8000670:	4b1b      	ldr	r3, [pc, #108]	@ (80006e0 <USART_fsend+0x148>)
 8000672:	881b      	ldrh	r3, [r3, #0]
 8000674:	b29b      	uxth	r3, r3
 8000676:	461a      	mov	r2, r3
 8000678:	4b18      	ldr	r3, [pc, #96]	@ (80006dc <USART_fsend+0x144>)
 800067a:	5c9a      	ldrb	r2, [r3, r2]
 800067c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000680:	f2a3 130d 	subw	r3, r3, #269	@ 0x10d
 8000684:	701a      	strb	r2, [r3, #0]
		USART_TX_BUSY++;
 8000686:	4b16      	ldr	r3, [pc, #88]	@ (80006e0 <USART_fsend+0x148>)
 8000688:	881b      	ldrh	r3, [r3, #0]
 800068a:	b29b      	uxth	r3, r3
 800068c:	3301      	adds	r3, #1
 800068e:	b29a      	uxth	r2, r3
 8000690:	4b13      	ldr	r3, [pc, #76]	@ (80006e0 <USART_fsend+0x148>)
 8000692:	801a      	strh	r2, [r3, #0]
		if (USART_TX_BUSY >= USART_TXBUF_SIZE) USART_TX_BUSY = 0;
 8000694:	4b12      	ldr	r3, [pc, #72]	@ (80006e0 <USART_fsend+0x148>)
 8000696:	881b      	ldrh	r3, [r3, #0]
 8000698:	b29b      	uxth	r3, r3
 800069a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800069e:	d302      	bcc.n	80006a6 <USART_fsend+0x10e>
 80006a0:	4b0f      	ldr	r3, [pc, #60]	@ (80006e0 <USART_fsend+0x148>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart2, &tmp, 1);
 80006a6:	1cfb      	adds	r3, r7, #3
 80006a8:	2201      	movs	r2, #1
 80006aa:	4619      	mov	r1, r3
 80006ac:	480d      	ldr	r0, [pc, #52]	@ (80006e4 <USART_fsend+0x14c>)
 80006ae:	f003 fb4d 	bl	8003d4c <HAL_UART_Transmit_IT>
	if (USART_TX_EMPTY == USART_TX_BUSY && __HAL_UART_GET_FLAG(&huart2, UART_FLAG_TXE) == SET) {
 80006b2:	e007      	b.n	80006c4 <USART_fsend+0x12c>
	}
	else USART_TX_EMPTY = idx;
 80006b4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80006b8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	b29a      	uxth	r2, r3
 80006c0:	4b05      	ldr	r3, [pc, #20]	@ (80006d8 <USART_fsend+0x140>)
 80006c2:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80006c4:	b662      	cpsie	i
}
 80006c6:	bf00      	nop
	__enable_irq();
}
 80006c8:	bf00      	nop
 80006ca:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 80006ce:	46bd      	mov	sp, r7
 80006d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80006d4:	b004      	add	sp, #16
 80006d6:	4770      	bx	lr
 80006d8:	20000504 	.word	0x20000504
 80006dc:	20000104 	.word	0x20000104
 80006e0:	20000506 	.word	0x20000506
 80006e4:	200012d4 	.word	0x200012d4

080006e8 <HAL_UART_RxCpltCallback>:

/* === USART CALLBACK RECEIVE === */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
	if (huart == &huart2) {
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	4a10      	ldr	r2, [pc, #64]	@ (8000734 <HAL_UART_RxCpltCallback+0x4c>)
 80006f4:	4293      	cmp	r3, r2
 80006f6:	d119      	bne.n	800072c <HAL_UART_RxCpltCallback+0x44>
		USART_RX_EMPTY++;
 80006f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000738 <HAL_UART_RxCpltCallback+0x50>)
 80006fa:	881b      	ldrh	r3, [r3, #0]
 80006fc:	b29b      	uxth	r3, r3
 80006fe:	3301      	adds	r3, #1
 8000700:	b29a      	uxth	r2, r3
 8000702:	4b0d      	ldr	r3, [pc, #52]	@ (8000738 <HAL_UART_RxCpltCallback+0x50>)
 8000704:	801a      	strh	r2, [r3, #0]
		if (USART_RX_EMPTY >= USART_RXBUF_SIZE) USART_RX_EMPTY = 0;
 8000706:	4b0c      	ldr	r3, [pc, #48]	@ (8000738 <HAL_UART_RxCpltCallback+0x50>)
 8000708:	881b      	ldrh	r3, [r3, #0]
 800070a:	b29b      	uxth	r3, r3
 800070c:	2b7f      	cmp	r3, #127	@ 0x7f
 800070e:	d902      	bls.n	8000716 <HAL_UART_RxCpltCallback+0x2e>
 8000710:	4b09      	ldr	r3, [pc, #36]	@ (8000738 <HAL_UART_RxCpltCallback+0x50>)
 8000712:	2200      	movs	r2, #0
 8000714:	801a      	strh	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, &USART_BUF_RX[USART_RX_EMPTY], 1);
 8000716:	4b08      	ldr	r3, [pc, #32]	@ (8000738 <HAL_UART_RxCpltCallback+0x50>)
 8000718:	881b      	ldrh	r3, [r3, #0]
 800071a:	b29b      	uxth	r3, r3
 800071c:	461a      	mov	r2, r3
 800071e:	4b07      	ldr	r3, [pc, #28]	@ (800073c <HAL_UART_RxCpltCallback+0x54>)
 8000720:	4413      	add	r3, r2
 8000722:	2201      	movs	r2, #1
 8000724:	4619      	mov	r1, r3
 8000726:	4803      	ldr	r0, [pc, #12]	@ (8000734 <HAL_UART_RxCpltCallback+0x4c>)
 8000728:	f003 fb45 	bl	8003db6 <HAL_UART_Receive_IT>
	}
}
 800072c:	bf00      	nop
 800072e:	3708      	adds	r7, #8
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	200012d4 	.word	0x200012d4
 8000738:	20000100 	.word	0x20000100
 800073c:	20000080 	.word	0x20000080

08000740 <HAL_UART_TxCpltCallback>:

/* === USART TRANSMIT CALLBACK === */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000740:	b580      	push	{r7, lr}
 8000742:	b084      	sub	sp, #16
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
    if (huart == &huart2) {
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	4a16      	ldr	r2, [pc, #88]	@ (80007a4 <HAL_UART_TxCpltCallback+0x64>)
 800074c:	4293      	cmp	r3, r2
 800074e:	d125      	bne.n	800079c <HAL_UART_TxCpltCallback+0x5c>
        // sprawdzenie, czy są dane do wysłania
        if (USART_TX_EMPTY != USART_TX_BUSY) {
 8000750:	4b15      	ldr	r3, [pc, #84]	@ (80007a8 <HAL_UART_TxCpltCallback+0x68>)
 8000752:	881b      	ldrh	r3, [r3, #0]
 8000754:	b29a      	uxth	r2, r3
 8000756:	4b15      	ldr	r3, [pc, #84]	@ (80007ac <HAL_UART_TxCpltCallback+0x6c>)
 8000758:	881b      	ldrh	r3, [r3, #0]
 800075a:	b29b      	uxth	r3, r3
 800075c:	429a      	cmp	r2, r3
 800075e:	d01d      	beq.n	800079c <HAL_UART_TxCpltCallback+0x5c>
        	uint8_t tmp = USART_BUF_TX[USART_TX_BUSY];
 8000760:	4b12      	ldr	r3, [pc, #72]	@ (80007ac <HAL_UART_TxCpltCallback+0x6c>)
 8000762:	881b      	ldrh	r3, [r3, #0]
 8000764:	b29b      	uxth	r3, r3
 8000766:	461a      	mov	r2, r3
 8000768:	4b11      	ldr	r3, [pc, #68]	@ (80007b0 <HAL_UART_TxCpltCallback+0x70>)
 800076a:	5c9b      	ldrb	r3, [r3, r2]
 800076c:	73fb      	strb	r3, [r7, #15]
        	USART_TX_BUSY++;
 800076e:	4b0f      	ldr	r3, [pc, #60]	@ (80007ac <HAL_UART_TxCpltCallback+0x6c>)
 8000770:	881b      	ldrh	r3, [r3, #0]
 8000772:	b29b      	uxth	r3, r3
 8000774:	3301      	adds	r3, #1
 8000776:	b29a      	uxth	r2, r3
 8000778:	4b0c      	ldr	r3, [pc, #48]	@ (80007ac <HAL_UART_TxCpltCallback+0x6c>)
 800077a:	801a      	strh	r2, [r3, #0]
        	if (USART_TX_BUSY >= USART_TXBUF_SIZE) USART_TX_BUSY = 0;
 800077c:	4b0b      	ldr	r3, [pc, #44]	@ (80007ac <HAL_UART_TxCpltCallback+0x6c>)
 800077e:	881b      	ldrh	r3, [r3, #0]
 8000780:	b29b      	uxth	r3, r3
 8000782:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000786:	d302      	bcc.n	800078e <HAL_UART_TxCpltCallback+0x4e>
 8000788:	4b08      	ldr	r3, [pc, #32]	@ (80007ac <HAL_UART_TxCpltCallback+0x6c>)
 800078a:	2200      	movs	r2, #0
 800078c:	801a      	strh	r2, [r3, #0]
            HAL_UART_Transmit_IT(&huart2, &tmp, 1); // bajt wysłany, można wysłać następny
 800078e:	f107 030f 	add.w	r3, r7, #15
 8000792:	2201      	movs	r2, #1
 8000794:	4619      	mov	r1, r3
 8000796:	4803      	ldr	r0, [pc, #12]	@ (80007a4 <HAL_UART_TxCpltCallback+0x64>)
 8000798:	f003 fad8 	bl	8003d4c <HAL_UART_Transmit_IT>
        }
    }
}
 800079c:	bf00      	nop
 800079e:	3710      	adds	r7, #16
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	200012d4 	.word	0x200012d4
 80007a8:	20000504 	.word	0x20000504
 80007ac:	20000506 	.word	0x20000506
 80007b0:	20000104 	.word	0x20000104

080007b4 <USART_getchar>:

int16_t USART_getchar(){
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0
	int16_t tmp;
	if (USART_RX_EMPTY != USART_RX_BUSY) {
 80007ba:	4b14      	ldr	r3, [pc, #80]	@ (800080c <USART_getchar+0x58>)
 80007bc:	881b      	ldrh	r3, [r3, #0]
 80007be:	b29a      	uxth	r2, r3
 80007c0:	4b13      	ldr	r3, [pc, #76]	@ (8000810 <USART_getchar+0x5c>)
 80007c2:	881b      	ldrh	r3, [r3, #0]
 80007c4:	b29b      	uxth	r3, r3
 80007c6:	429a      	cmp	r2, r3
 80007c8:	d018      	beq.n	80007fc <USART_getchar+0x48>
		 tmp = USART_BUF_RX[USART_RX_BUSY];
 80007ca:	4b11      	ldr	r3, [pc, #68]	@ (8000810 <USART_getchar+0x5c>)
 80007cc:	881b      	ldrh	r3, [r3, #0]
 80007ce:	b29b      	uxth	r3, r3
 80007d0:	461a      	mov	r2, r3
 80007d2:	4b10      	ldr	r3, [pc, #64]	@ (8000814 <USART_getchar+0x60>)
 80007d4:	5c9b      	ldrb	r3, [r3, r2]
 80007d6:	80fb      	strh	r3, [r7, #6]
		 USART_RX_BUSY++;
 80007d8:	4b0d      	ldr	r3, [pc, #52]	@ (8000810 <USART_getchar+0x5c>)
 80007da:	881b      	ldrh	r3, [r3, #0]
 80007dc:	b29b      	uxth	r3, r3
 80007de:	3301      	adds	r3, #1
 80007e0:	b29a      	uxth	r2, r3
 80007e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000810 <USART_getchar+0x5c>)
 80007e4:	801a      	strh	r2, [r3, #0]
		 if (USART_RX_BUSY >= USART_RXBUF_SIZE) USART_RX_BUSY = 0;
 80007e6:	4b0a      	ldr	r3, [pc, #40]	@ (8000810 <USART_getchar+0x5c>)
 80007e8:	881b      	ldrh	r3, [r3, #0]
 80007ea:	b29b      	uxth	r3, r3
 80007ec:	2b7f      	cmp	r3, #127	@ 0x7f
 80007ee:	d902      	bls.n	80007f6 <USART_getchar+0x42>
 80007f0:	4b07      	ldr	r3, [pc, #28]	@ (8000810 <USART_getchar+0x5c>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	801a      	strh	r2, [r3, #0]
		 return tmp;
 80007f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007fa:	e001      	b.n	8000800 <USART_getchar+0x4c>
	} else return -1;
 80007fc:	f04f 33ff 	mov.w	r3, #4294967295

}
 8000800:	4618      	mov	r0, r3
 8000802:	370c      	adds	r7, #12
 8000804:	46bd      	mov	sp, r7
 8000806:	bc80      	pop	{r7}
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop
 800080c:	20000100 	.word	0x20000100
 8000810:	20000102 	.word	0x20000102
 8000814:	20000080 	.word	0x20000080

08000818 <delay_us>:

void delay_us(uint16_t us) {
 8000818:	b480      	push	{r7}
 800081a:	b083      	sub	sp, #12
 800081c:	af00      	add	r7, sp, #0
 800081e:	4603      	mov	r3, r0
 8000820:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim3,0);
 8000822:	4b08      	ldr	r3, [pc, #32]	@ (8000844 <delay_us+0x2c>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	2200      	movs	r2, #0
 8000828:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(&htim3) < us);
 800082a:	bf00      	nop
 800082c:	4b05      	ldr	r3, [pc, #20]	@ (8000844 <delay_us+0x2c>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000832:	88fb      	ldrh	r3, [r7, #6]
 8000834:	429a      	cmp	r2, r3
 8000836:	d3f9      	bcc.n	800082c <delay_us+0x14>
}
 8000838:	bf00      	nop
 800083a:	bf00      	nop
 800083c:	370c      	adds	r7, #12
 800083e:	46bd      	mov	sp, r7
 8000840:	bc80      	pop	{r7}
 8000842:	4770      	bx	lr
 8000844:	20001244 	.word	0x20001244

08000848 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM4) {
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a05      	ldr	r2, [pc, #20]	@ (800086c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000856:	4293      	cmp	r3, r2
 8000858:	d102      	bne.n	8000860 <HAL_TIM_PeriodElapsedCallback+0x18>
    	DHT11_READ_FLAG = 1;
 800085a:	4b05      	ldr	r3, [pc, #20]	@ (8000870 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800085c:	2201      	movs	r2, #1
 800085e:	701a      	strb	r2, [r3, #0]
    }
}
 8000860:	bf00      	nop
 8000862:	370c      	adds	r7, #12
 8000864:	46bd      	mov	sp, r7
 8000866:	bc80      	pop	{r7}
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	40000800 	.word	0x40000800
 8000870:	20000508 	.word	0x20000508

08000874 <set_interval>:

void set_interval(uint32_t interval) {
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]

	// dodac interwal > 16 bitow

	measurement_interval = interval;
 800087c:	4a0e      	ldr	r2, [pc, #56]	@ (80008b8 <set_interval+0x44>)
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	6013      	str	r3, [r2, #0]
	HAL_TIM_Base_Stop_IT(&htim4);
 8000882:	480e      	ldr	r0, [pc, #56]	@ (80008bc <set_interval+0x48>)
 8000884:	f002 f8c4 	bl	8002a10 <HAL_TIM_Base_Stop_IT>
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 8000888:	4b0c      	ldr	r3, [pc, #48]	@ (80008bc <set_interval+0x48>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	2200      	movs	r2, #0
 800088e:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_SET_AUTORELOAD(&htim4, interval - 1);
 8000890:	4b0a      	ldr	r3, [pc, #40]	@ (80008bc <set_interval+0x48>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	687a      	ldr	r2, [r7, #4]
 8000896:	3a01      	subs	r2, #1
 8000898:	62da      	str	r2, [r3, #44]	@ 0x2c
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	3b01      	subs	r3, #1
 800089e:	4a07      	ldr	r2, [pc, #28]	@ (80008bc <set_interval+0x48>)
 80008a0:	60d3      	str	r3, [r2, #12]
	HAL_TIM_Base_Start_IT(&htim4);
 80008a2:	4806      	ldr	r0, [pc, #24]	@ (80008bc <set_interval+0x48>)
 80008a4:	f002 f862 	bl	800296c <HAL_TIM_Base_Start_IT>

	USART_fsend("INTERVAL_OK");
 80008a8:	4805      	ldr	r0, [pc, #20]	@ (80008c0 <set_interval+0x4c>)
 80008aa:	f7ff fe75 	bl	8000598 <USART_fsend>
}
 80008ae:	bf00      	nop
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	20000000 	.word	0x20000000
 80008bc:	2000128c 	.word	0x2000128c
 80008c0:	080053e4 	.word	0x080053e4

080008c4 <get_interval>:

void get_interval() {
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
	// tutaj bedzie ramka
	USART_fsend("interval=%lu", measurement_interval);
 80008c8:	4b03      	ldr	r3, [pc, #12]	@ (80008d8 <get_interval+0x14>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4619      	mov	r1, r3
 80008ce:	4803      	ldr	r0, [pc, #12]	@ (80008dc <get_interval+0x18>)
 80008d0:	f7ff fe62 	bl	8000598 <USART_fsend>
}
 80008d4:	bf00      	nop
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	20000000 	.word	0x20000000
 80008dc:	080053f0 	.word	0x080053f0

080008e0 <validate_and_atoi>:

uint16_t validate_and_atoi(const char *str, size_t length) {
 80008e0:	b480      	push	{r7}
 80008e2:	b085      	sub	sp, #20
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
 80008e8:	6039      	str	r1, [r7, #0]
    uint16_t result = 0;
 80008ea:	2300      	movs	r3, #0
 80008ec:	81fb      	strh	r3, [r7, #14]

    // sprawdzanie czy kazdy znak to cyfra
    for (size_t i = 0; i < length; i++) {
 80008ee:	2300      	movs	r3, #0
 80008f0:	60bb      	str	r3, [r7, #8]
 80008f2:	e01e      	b.n	8000932 <validate_and_atoi+0x52>
        if (str[i] < '0' || str[i] > '9') {
 80008f4:	687a      	ldr	r2, [r7, #4]
 80008f6:	68bb      	ldr	r3, [r7, #8]
 80008f8:	4413      	add	r3, r2
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	2b2f      	cmp	r3, #47	@ 0x2f
 80008fe:	d905      	bls.n	800090c <validate_and_atoi+0x2c>
 8000900:	687a      	ldr	r2, [r7, #4]
 8000902:	68bb      	ldr	r3, [r7, #8]
 8000904:	4413      	add	r3, r2
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	2b39      	cmp	r3, #57	@ 0x39
 800090a:	d901      	bls.n	8000910 <validate_and_atoi+0x30>
            //USART_fsend("invalid char '%c' during atoi\n", str[i]);
            return 0; // kod bledu
 800090c:	2300      	movs	r3, #0
 800090e:	e015      	b.n	800093c <validate_and_atoi+0x5c>
        }
        result = (result * 10) + (str[i] - '0');
 8000910:	89fb      	ldrh	r3, [r7, #14]
 8000912:	461a      	mov	r2, r3
 8000914:	0092      	lsls	r2, r2, #2
 8000916:	4413      	add	r3, r2
 8000918:	005b      	lsls	r3, r3, #1
 800091a:	b29b      	uxth	r3, r3
 800091c:	6879      	ldr	r1, [r7, #4]
 800091e:	68ba      	ldr	r2, [r7, #8]
 8000920:	440a      	add	r2, r1
 8000922:	7812      	ldrb	r2, [r2, #0]
 8000924:	4413      	add	r3, r2
 8000926:	b29b      	uxth	r3, r3
 8000928:	3b30      	subs	r3, #48	@ 0x30
 800092a:	81fb      	strh	r3, [r7, #14]
    for (size_t i = 0; i < length; i++) {
 800092c:	68bb      	ldr	r3, [r7, #8]
 800092e:	3301      	adds	r3, #1
 8000930:	60bb      	str	r3, [r7, #8]
 8000932:	68ba      	ldr	r2, [r7, #8]
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	429a      	cmp	r2, r3
 8000938:	d3dc      	bcc.n	80008f4 <validate_and_atoi+0x14>
    }

    return result;
 800093a:	89fb      	ldrh	r3, [r7, #14]
}
 800093c:	4618      	mov	r0, r3
 800093e:	3714      	adds	r7, #20
 8000940:	46bd      	mov	sp, r7
 8000942:	bc80      	pop	{r7}
 8000944:	4770      	bx	lr
	...

08000948 <process_frame>:

//void err01() {
//
//}

void process_frame() {
 8000948:	b580      	push	{r7, lr}
 800094a:	b08c      	sub	sp, #48	@ 0x30
 800094c:	af00      	add	r7, sp, #0


	if (frame.length_int < 5 || frame.length_int > 256) {
 800094e:	4b7c      	ldr	r3, [pc, #496]	@ (8000b40 <process_frame+0x1f8>)
 8000950:	f8b3 311a 	ldrh.w	r3, [r3, #282]	@ 0x11a
 8000954:	2b04      	cmp	r3, #4
 8000956:	f240 80e0 	bls.w	8000b1a <process_frame+0x1d2>
 800095a:	4b79      	ldr	r3, [pc, #484]	@ (8000b40 <process_frame+0x1f8>)
 800095c:	f8b3 311a 	ldrh.w	r3, [r3, #282]	@ 0x11a
 8000960:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000964:	f200 80d9 	bhi.w	8000b1a <process_frame+0x1d2>
		//err01();
		return;
	}

	uint8_t length = frame.length_int - frame.masked_counter; // dla odkodowanej ramki dlugosc musi byc pomniejszona o ilosc zamaskowanych znakow
 8000968:	4b75      	ldr	r3, [pc, #468]	@ (8000b40 <process_frame+0x1f8>)
 800096a:	f8b3 311a 	ldrh.w	r3, [r3, #282]	@ 0x11a
 800096e:	b2da      	uxtb	r2, r3
 8000970:	4b73      	ldr	r3, [pc, #460]	@ (8000b40 <process_frame+0x1f8>)
 8000972:	f8b3 311c 	ldrh.w	r3, [r3, #284]	@ 0x11c
 8000976:	b2db      	uxtb	r3, r3
 8000978:	1ad3      	subs	r3, r2, r3
 800097a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e


	if (strncmp((char *)frame.data, "READ", 4) == 0) {
 800097e:	2204      	movs	r2, #4
 8000980:	4970      	ldr	r1, [pc, #448]	@ (8000b44 <process_frame+0x1fc>)
 8000982:	4871      	ldr	r0, [pc, #452]	@ (8000b48 <process_frame+0x200>)
 8000984:	f004 f879 	bl	8004a7a <strncmp>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d158      	bne.n	8000a40 <process_frame+0xf8>

		char *start_ptr = (char *)&frame.data[4];
 800098e:	4b6f      	ldr	r3, [pc, #444]	@ (8000b4c <process_frame+0x204>)
 8000990:	61fb      	str	r3, [r7, #28]
		char *dash_ptr = strchr(start_ptr, '-');
 8000992:	212d      	movs	r1, #45	@ 0x2d
 8000994:	69f8      	ldr	r0, [r7, #28]
 8000996:	f004 f863 	bl	8004a60 <strchr>
 800099a:	61b8      	str	r0, [r7, #24]

		if (!dash_ptr) {
 800099c:	69bb      	ldr	r3, [r7, #24]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d103      	bne.n	80009aa <process_frame+0x62>
			USART_fsend("brak myslnika");
 80009a2:	486b      	ldr	r0, [pc, #428]	@ (8000b50 <process_frame+0x208>)
 80009a4:	f7ff fdf8 	bl	8000598 <USART_fsend>
			//err03();
			return;
 80009a8:	e0c6      	b.n	8000b38 <process_frame+0x1f0>
		}

		char start_str[4] = {0};
 80009aa:	2300      	movs	r3, #0
 80009ac:	60bb      	str	r3, [r7, #8]
		char count_str[3] = {0};
 80009ae:	4b69      	ldr	r3, [pc, #420]	@ (8000b54 <process_frame+0x20c>)
 80009b0:	881b      	ldrh	r3, [r3, #0]
 80009b2:	80bb      	strh	r3, [r7, #4]
 80009b4:	2300      	movs	r3, #0
 80009b6:	71bb      	strb	r3, [r7, #6]

		size_t start_length = dash_ptr - (char *)frame.data - 4;
 80009b8:	69bb      	ldr	r3, [r7, #24]
 80009ba:	4a63      	ldr	r2, [pc, #396]	@ (8000b48 <process_frame+0x200>)
 80009bc:	1a9b      	subs	r3, r3, r2
 80009be:	3b04      	subs	r3, #4
 80009c0:	617b      	str	r3, [r7, #20]
		if (start_length >= sizeof(start_str)) {
 80009c2:	697b      	ldr	r3, [r7, #20]
 80009c4:	2b03      	cmp	r3, #3
 80009c6:	d903      	bls.n	80009d0 <process_frame+0x88>
			USART_fsend("zly parametr");
 80009c8:	4863      	ldr	r0, [pc, #396]	@ (8000b58 <process_frame+0x210>)
 80009ca:	f7ff fde5 	bl	8000598 <USART_fsend>
			//err03();
			return;
 80009ce:	e0b3      	b.n	8000b38 <process_frame+0x1f0>
		}
		memcpy(start_str, frame.data + 4, start_length);
 80009d0:	495e      	ldr	r1, [pc, #376]	@ (8000b4c <process_frame+0x204>)
 80009d2:	f107 0308 	add.w	r3, r7, #8
 80009d6:	697a      	ldr	r2, [r7, #20]
 80009d8:	4618      	mov	r0, r3
 80009da:	f004 f88d 	bl	8004af8 <memcpy>

		size_t count_length = (uint8_t *)frame.data + length - ((uint8_t *)dash_ptr + 1);
 80009de:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80009e2:	4a59      	ldr	r2, [pc, #356]	@ (8000b48 <process_frame+0x200>)
 80009e4:	441a      	add	r2, r3
 80009e6:	69bb      	ldr	r3, [r7, #24]
 80009e8:	3301      	adds	r3, #1
 80009ea:	1ad3      	subs	r3, r2, r3
 80009ec:	613b      	str	r3, [r7, #16]
		if (count_length >= sizeof(count_str)) {
 80009ee:	693b      	ldr	r3, [r7, #16]
 80009f0:	2b02      	cmp	r3, #2
 80009f2:	f200 8094 	bhi.w	8000b1e <process_frame+0x1d6>
			//USART_fsend("zly parametr");
			//err03();
			return;
		}
		memcpy(count_str, dash_ptr + 1, count_length);
 80009f6:	69bb      	ldr	r3, [r7, #24]
 80009f8:	1c59      	adds	r1, r3, #1
 80009fa:	1d3b      	adds	r3, r7, #4
 80009fc:	693a      	ldr	r2, [r7, #16]
 80009fe:	4618      	mov	r0, r3
 8000a00:	f004 f87a 	bl	8004af8 <memcpy>

		uint8_t start = validate_and_atoi(start_str, start_length);
 8000a04:	f107 0308 	add.w	r3, r7, #8
 8000a08:	6979      	ldr	r1, [r7, #20]
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f7ff ff68 	bl	80008e0 <validate_and_atoi>
 8000a10:	4603      	mov	r3, r0
 8000a12:	73fb      	strb	r3, [r7, #15]
		uint8_t count = validate_and_atoi(count_str, count_length);
 8000a14:	1d3b      	adds	r3, r7, #4
 8000a16:	6939      	ldr	r1, [r7, #16]
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f7ff ff61 	bl	80008e0 <validate_and_atoi>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	73bb      	strb	r3, [r7, #14]

		if (start < 1 || start > 750 || count < 1 || count > 21 || (start + count - 1) > 750) {
 8000a22:	7bfb      	ldrb	r3, [r7, #15]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d07c      	beq.n	8000b22 <process_frame+0x1da>
 8000a28:	7bbb      	ldrb	r3, [r7, #14]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d079      	beq.n	8000b22 <process_frame+0x1da>
 8000a2e:	7bbb      	ldrb	r3, [r7, #14]
 8000a30:	2b15      	cmp	r3, #21
 8000a32:	d876      	bhi.n	8000b22 <process_frame+0x1da>
 8000a34:	7bfa      	ldrb	r2, [r7, #15]
 8000a36:	7bbb      	ldrb	r3, [r7, #14]
 8000a38:	4413      	add	r3, r2
 8000a3a:	f5b3 7f3c 	cmp.w	r3, #752	@ 0x2f0
			//err03();
			return;
		}

		//USART_fsend("READ(%d - %d)", start, count);
		return;
 8000a3e:	e07b      	b.n	8000b38 <process_frame+0x1f0>
	}
	else if (strncmp((char *)frame.data, "COUNT_DATA", 10) == 0) {
 8000a40:	220a      	movs	r2, #10
 8000a42:	4946      	ldr	r1, [pc, #280]	@ (8000b5c <process_frame+0x214>)
 8000a44:	4840      	ldr	r0, [pc, #256]	@ (8000b48 <process_frame+0x200>)
 8000a46:	f004 f818 	bl	8004a7a <strncmp>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d103      	bne.n	8000a58 <process_frame+0x110>
		if (length != 10) {
 8000a50:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000a54:	2b0a      	cmp	r3, #10
 8000a56:	e06f      	b.n	8000b38 <process_frame+0x1f0>
//			count_data();
//			return;
//		}
	}

	else if (strncmp((char *)frame.data, "SET_INTERVAL", 12) == 0) {
 8000a58:	220c      	movs	r2, #12
 8000a5a:	4941      	ldr	r1, [pc, #260]	@ (8000b60 <process_frame+0x218>)
 8000a5c:	483a      	ldr	r0, [pc, #232]	@ (8000b48 <process_frame+0x200>)
 8000a5e:	f004 f80c 	bl	8004a7a <strncmp>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d148      	bne.n	8000afa <process_frame+0x1b2>
		if (length < 16 || length > 22) {
 8000a68:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000a6c:	2b0f      	cmp	r3, #15
 8000a6e:	d95a      	bls.n	8000b26 <process_frame+0x1de>
 8000a70:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000a74:	2b16      	cmp	r3, #22
 8000a76:	d856      	bhi.n	8000b26 <process_frame+0x1de>
			//USART_fsend("wrong command");
			//err02();
			return;
		}

		char *numberStr = (char *)&frame.data[12];
 8000a78:	4b3a      	ldr	r3, [pc, #232]	@ (8000b64 <process_frame+0x21c>)
 8000a7a:	62bb      	str	r3, [r7, #40]	@ 0x28
		uint8_t numberLength = length - 12;
 8000a7c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000a80:	3b0c      	subs	r3, #12
 8000a82:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

		for (uint8_t i = 0; i < numberLength; i++){
 8000a86:	2300      	movs	r3, #0
 8000a88:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000a8c:	e011      	b.n	8000ab2 <process_frame+0x16a>
			if (!isdigit((unsigned char)numberStr[i])) {
 8000a8e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000a92:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000a94:	4413      	add	r3, r2
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	3301      	adds	r3, #1
 8000a9a:	4a33      	ldr	r2, [pc, #204]	@ (8000b68 <process_frame+0x220>)
 8000a9c:	4413      	add	r3, r2
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	f003 0304 	and.w	r3, r3, #4
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d040      	beq.n	8000b2a <process_frame+0x1e2>
		for (uint8_t i = 0; i < numberLength; i++){
 8000aa8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000aac:	3301      	adds	r3, #1
 8000aae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000ab2:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000ab6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000aba:	429a      	cmp	r2, r3
 8000abc:	d3e7      	bcc.n	8000a8e <process_frame+0x146>
				return;
			}
		}

		char *endptr;
		errno = 0; // globalna zmienna
 8000abe:	f003 ffef 	bl	8004aa0 <__errno>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	601a      	str	r2, [r3, #0]
		uint32_t interval = strtoul(numberStr, &endptr, 10);
 8000ac8:	463b      	mov	r3, r7
 8000aca:	220a      	movs	r2, #10
 8000acc:	4619      	mov	r1, r3
 8000ace:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000ad0:	f003 ff94 	bl	80049fc <strtoul>
 8000ad4:	6238      	str	r0, [r7, #32]

		if (*endptr != '\0') {
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d127      	bne.n	8000b2e <process_frame+0x1e6>
			//err03();
			//USART_fsend("blad przy konwersji");
			return;
		}

		if (interval < 2000 || errno == ERANGE) {
 8000ade:	6a3b      	ldr	r3, [r7, #32]
 8000ae0:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000ae4:	d325      	bcc.n	8000b32 <process_frame+0x1ea>
 8000ae6:	f003 ffdb 	bl	8004aa0 <__errno>
 8000aea:	4603      	mov	r3, r0
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	2b22      	cmp	r3, #34	@ 0x22
 8000af0:	d01f      	beq.n	8000b32 <process_frame+0x1ea>
			//err03();
			return;
		}

		set_interval(interval);
 8000af2:	6a38      	ldr	r0, [r7, #32]
 8000af4:	f7ff febe 	bl	8000874 <set_interval>
		//USART_fsend("interval: %lu ", interval);
		return;
 8000af8:	e01e      	b.n	8000b38 <process_frame+0x1f0>
	}

	else if (strncmp((char *)frame.data, "GET_INTERVAL", 12) == 0) {
 8000afa:	220c      	movs	r2, #12
 8000afc:	491b      	ldr	r1, [pc, #108]	@ (8000b6c <process_frame+0x224>)
 8000afe:	4812      	ldr	r0, [pc, #72]	@ (8000b48 <process_frame+0x200>)
 8000b00:	f003 ffbb 	bl	8004a7a <strncmp>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d116      	bne.n	8000b38 <process_frame+0x1f0>
		if (frame.length_int != 12) {
 8000b0a:	4b0d      	ldr	r3, [pc, #52]	@ (8000b40 <process_frame+0x1f8>)
 8000b0c:	f8b3 311a 	ldrh.w	r3, [r3, #282]	@ 0x11a
 8000b10:	2b0c      	cmp	r3, #12
 8000b12:	d110      	bne.n	8000b36 <process_frame+0x1ee>
			//USART_fsend("wrong command");
			//err02();
			return;
		}
		get_interval();
 8000b14:	f7ff fed6 	bl	80008c4 <get_interval>
		return;
 8000b18:	e00e      	b.n	8000b38 <process_frame+0x1f0>
		return;
 8000b1a:	bf00      	nop
 8000b1c:	e00c      	b.n	8000b38 <process_frame+0x1f0>
			return;
 8000b1e:	bf00      	nop
 8000b20:	e00a      	b.n	8000b38 <process_frame+0x1f0>
			return;
 8000b22:	bf00      	nop
 8000b24:	e008      	b.n	8000b38 <process_frame+0x1f0>
			return;
 8000b26:	bf00      	nop
 8000b28:	e006      	b.n	8000b38 <process_frame+0x1f0>
				return;
 8000b2a:	bf00      	nop
 8000b2c:	e004      	b.n	8000b38 <process_frame+0x1f0>
			return;
 8000b2e:	bf00      	nop
 8000b30:	e002      	b.n	8000b38 <process_frame+0x1f0>
			return;
 8000b32:	bf00      	nop
 8000b34:	e000      	b.n	8000b38 <process_frame+0x1f0>
			return;
 8000b36:	bf00      	nop

	}
}
 8000b38:	3730      	adds	r7, #48	@ 0x30
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	2000050c 	.word	0x2000050c
 8000b44:	08005400 	.word	0x08005400
 8000b48:	20000516 	.word	0x20000516
 8000b4c:	2000051a 	.word	0x2000051a
 8000b50:	08005408 	.word	0x08005408
 8000b54:	08005454 	.word	0x08005454
 8000b58:	08005418 	.word	0x08005418
 8000b5c:	08005428 	.word	0x08005428
 8000b60:	08005434 	.word	0x08005434
 8000b64:	20000522 	.word	0x20000522
 8000b68:	080054ae 	.word	0x080054ae
 8000b6c:	08005444 	.word	0x08005444

08000b70 <reset_frame>:

void reset_frame() {
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
	memset(&frame, 0, sizeof(Frame));
 8000b74:	f44f 7290 	mov.w	r2, #288	@ 0x120
 8000b78:	2100      	movs	r1, #0
 8000b7a:	4807      	ldr	r0, [pc, #28]	@ (8000b98 <reset_frame+0x28>)
 8000b7c:	f003 ff68 	bl	8004a50 <memset>
	frame.state = IDLE;
 8000b80:	4b05      	ldr	r3, [pc, #20]	@ (8000b98 <reset_frame+0x28>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
	frame.crc_calculated = 0xFFFF;
 8000b88:	4b03      	ldr	r3, [pc, #12]	@ (8000b98 <reset_frame+0x28>)
 8000b8a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b8e:	f8a3 2110 	strh.w	r2, [r3, #272]	@ 0x110
}
 8000b92:	bf00      	nop
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	2000050c 	.word	0x2000050c

08000b9c <get_frame>:

void get_frame(uint8_t ch) {
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	71fb      	strb	r3, [r7, #7]

	if (ch == FRAME_START) {
 8000ba6:	79fb      	ldrb	r3, [r7, #7]
 8000ba8:	2b3a      	cmp	r3, #58	@ 0x3a
 8000baa:	d106      	bne.n	8000bba <get_frame+0x1e>
		reset_frame();
 8000bac:	f7ff ffe0 	bl	8000b70 <reset_frame>
		frame.state = FIND_SENDER;
 8000bb0:	4bb1      	ldr	r3, [pc, #708]	@ (8000e78 <get_frame+0x2dc>)
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
		return;
 8000bb8:	e229      	b.n	800100e <get_frame+0x472>
	}
	if (ch == '\0') {
 8000bba:	79fb      	ldrb	r3, [r7, #7]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d104      	bne.n	8000bca <get_frame+0x2e>
		frame.state = IDLE;
 8000bc0:	4bad      	ldr	r3, [pc, #692]	@ (8000e78 <get_frame+0x2dc>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
		return;
 8000bc8:	e221      	b.n	800100e <get_frame+0x472>
	}

	switch (frame.state) {
 8000bca:	4bab      	ldr	r3, [pc, #684]	@ (8000e78 <get_frame+0x2dc>)
 8000bcc:	f893 311e 	ldrb.w	r3, [r3, #286]	@ 0x11e
 8000bd0:	2b07      	cmp	r3, #7
 8000bd2:	f200 821c 	bhi.w	800100e <get_frame+0x472>
 8000bd6:	a201      	add	r2, pc, #4	@ (adr r2, 8000bdc <get_frame+0x40>)
 8000bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bdc:	0800100f 	.word	0x0800100f
 8000be0:	08000bfd 	.word	0x08000bfd
 8000be4:	08000c83 	.word	0x08000c83
 8000be8:	08000d0b 	.word	0x08000d0b
 8000bec:	08000d89 	.word	0x08000d89
 8000bf0:	08000f6b 	.word	0x08000f6b
 8000bf4:	08000fe9 	.word	0x08000fe9
 8000bf8:	08000e53 	.word	0x08000e53
	case IDLE: {
		return;
	}

	case FIND_SENDER: {
		if (ch >= 'A' && ch <= 'Z') {
 8000bfc:	79fb      	ldrb	r3, [r7, #7]
 8000bfe:	2b40      	cmp	r3, #64	@ 0x40
 8000c00:	d93a      	bls.n	8000c78 <get_frame+0xdc>
 8000c02:	79fb      	ldrb	r3, [r7, #7]
 8000c04:	2b5a      	cmp	r3, #90	@ 0x5a
 8000c06:	d837      	bhi.n	8000c78 <get_frame+0xdc>
			frame.sender[frame.sender_id] = ch;
 8000c08:	4b9b      	ldr	r3, [pc, #620]	@ (8000e78 <get_frame+0x2dc>)
 8000c0a:	f893 3112 	ldrb.w	r3, [r3, #274]	@ 0x112
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4a99      	ldr	r2, [pc, #612]	@ (8000e78 <get_frame+0x2dc>)
 8000c12:	79fb      	ldrb	r3, [r7, #7]
 8000c14:	5453      	strb	r3, [r2, r1]
			frame.crc_calculated = calculate_crc_byte(frame.crc_calculated, ch);
 8000c16:	4b98      	ldr	r3, [pc, #608]	@ (8000e78 <get_frame+0x2dc>)
 8000c18:	f8b3 3110 	ldrh.w	r3, [r3, #272]	@ 0x110
 8000c1c:	79fa      	ldrb	r2, [r7, #7]
 8000c1e:	4611      	mov	r1, r2
 8000c20:	4618      	mov	r0, r3
 8000c22:	f7ff fc89 	bl	8000538 <calculate_crc_byte>
 8000c26:	4603      	mov	r3, r0
 8000c28:	461a      	mov	r2, r3
 8000c2a:	4b93      	ldr	r3, [pc, #588]	@ (8000e78 <get_frame+0x2dc>)
 8000c2c:	f8a3 2110 	strh.w	r2, [r3, #272]	@ 0x110
			if (frame.sender_id == 1) {
 8000c30:	4b91      	ldr	r3, [pc, #580]	@ (8000e78 <get_frame+0x2dc>)
 8000c32:	f893 3112 	ldrb.w	r3, [r3, #274]	@ 0x112
 8000c36:	2b01      	cmp	r3, #1
 8000c38:	d114      	bne.n	8000c64 <get_frame+0xc8>
				frame.sender[2] = '\0';
 8000c3a:	4b8f      	ldr	r3, [pc, #572]	@ (8000e78 <get_frame+0x2dc>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	709a      	strb	r2, [r3, #2]
				if (strncmp((char *)frame.sender, SENDER, 2) == 0){
 8000c40:	2202      	movs	r2, #2
 8000c42:	498e      	ldr	r1, [pc, #568]	@ (8000e7c <get_frame+0x2e0>)
 8000c44:	488c      	ldr	r0, [pc, #560]	@ (8000e78 <get_frame+0x2dc>)
 8000c46:	f003 ff18 	bl	8004a7a <strncmp>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d104      	bne.n	8000c5a <get_frame+0xbe>
					//USART_fsend("sender ok");
					frame.state = FIND_RECEIVER;
 8000c50:	4b89      	ldr	r3, [pc, #548]	@ (8000e78 <get_frame+0x2dc>)
 8000c52:	2202      	movs	r2, #2
 8000c54:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
					return;
 8000c58:	e1d9      	b.n	800100e <get_frame+0x472>
				}
				else {
					frame.state = IDLE;
 8000c5a:	4b87      	ldr	r3, [pc, #540]	@ (8000e78 <get_frame+0x2dc>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
					return;
 8000c62:	e1d4      	b.n	800100e <get_frame+0x472>
				}
			}
			else frame.sender_id++;
 8000c64:	4b84      	ldr	r3, [pc, #528]	@ (8000e78 <get_frame+0x2dc>)
 8000c66:	f893 3112 	ldrb.w	r3, [r3, #274]	@ 0x112
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	b2da      	uxtb	r2, r3
 8000c6e:	4b82      	ldr	r3, [pc, #520]	@ (8000e78 <get_frame+0x2dc>)
 8000c70:	f883 2112 	strb.w	r2, [r3, #274]	@ 0x112
			if (frame.sender_id == 1) {
 8000c74:	bf00      	nop
		}
		else frame.state = IDLE;
		return;
 8000c76:	e1ca      	b.n	800100e <get_frame+0x472>
		else frame.state = IDLE;
 8000c78:	4b7f      	ldr	r3, [pc, #508]	@ (8000e78 <get_frame+0x2dc>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
		return;
 8000c80:	e1c5      	b.n	800100e <get_frame+0x472>
	}

	case FIND_RECEIVER: {
		if (ch >= 'A' && ch <= 'Z') {
 8000c82:	79fb      	ldrb	r3, [r7, #7]
 8000c84:	2b40      	cmp	r3, #64	@ 0x40
 8000c86:	d93b      	bls.n	8000d00 <get_frame+0x164>
 8000c88:	79fb      	ldrb	r3, [r7, #7]
 8000c8a:	2b5a      	cmp	r3, #90	@ 0x5a
 8000c8c:	d838      	bhi.n	8000d00 <get_frame+0x164>
			frame.receiver[frame.receiver_id] = ch;
 8000c8e:	4b7a      	ldr	r3, [pc, #488]	@ (8000e78 <get_frame+0x2dc>)
 8000c90:	f893 3113 	ldrb.w	r3, [r3, #275]	@ 0x113
 8000c94:	461a      	mov	r2, r3
 8000c96:	4b78      	ldr	r3, [pc, #480]	@ (8000e78 <get_frame+0x2dc>)
 8000c98:	4413      	add	r3, r2
 8000c9a:	79fa      	ldrb	r2, [r7, #7]
 8000c9c:	70da      	strb	r2, [r3, #3]
			frame.crc_calculated = calculate_crc_byte(frame.crc_calculated, ch);
 8000c9e:	4b76      	ldr	r3, [pc, #472]	@ (8000e78 <get_frame+0x2dc>)
 8000ca0:	f8b3 3110 	ldrh.w	r3, [r3, #272]	@ 0x110
 8000ca4:	79fa      	ldrb	r2, [r7, #7]
 8000ca6:	4611      	mov	r1, r2
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f7ff fc45 	bl	8000538 <calculate_crc_byte>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	461a      	mov	r2, r3
 8000cb2:	4b71      	ldr	r3, [pc, #452]	@ (8000e78 <get_frame+0x2dc>)
 8000cb4:	f8a3 2110 	strh.w	r2, [r3, #272]	@ 0x110
			if (frame.receiver_id == 1) {
 8000cb8:	4b6f      	ldr	r3, [pc, #444]	@ (8000e78 <get_frame+0x2dc>)
 8000cba:	f893 3113 	ldrb.w	r3, [r3, #275]	@ 0x113
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d114      	bne.n	8000cec <get_frame+0x150>
				frame.receiver[2] = '\0';
 8000cc2:	4b6d      	ldr	r3, [pc, #436]	@ (8000e78 <get_frame+0x2dc>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	715a      	strb	r2, [r3, #5]
				if (strncmp((char *)frame.receiver, RECEIVER, 2) == 0) {
 8000cc8:	2202      	movs	r2, #2
 8000cca:	496d      	ldr	r1, [pc, #436]	@ (8000e80 <get_frame+0x2e4>)
 8000ccc:	486d      	ldr	r0, [pc, #436]	@ (8000e84 <get_frame+0x2e8>)
 8000cce:	f003 fed4 	bl	8004a7a <strncmp>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d104      	bne.n	8000ce2 <get_frame+0x146>
					//USART_fsend("receiver ok");
					frame.state = FIND_LENGTH;
 8000cd8:	4b67      	ldr	r3, [pc, #412]	@ (8000e78 <get_frame+0x2dc>)
 8000cda:	2203      	movs	r2, #3
 8000cdc:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
					return;
 8000ce0:	e195      	b.n	800100e <get_frame+0x472>
				}
				else {
					frame.state = IDLE;
 8000ce2:	4b65      	ldr	r3, [pc, #404]	@ (8000e78 <get_frame+0x2dc>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
					return;
 8000cea:	e190      	b.n	800100e <get_frame+0x472>
				}
			}
			else frame.receiver_id++;
 8000cec:	4b62      	ldr	r3, [pc, #392]	@ (8000e78 <get_frame+0x2dc>)
 8000cee:	f893 3113 	ldrb.w	r3, [r3, #275]	@ 0x113
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	b2da      	uxtb	r2, r3
 8000cf6:	4b60      	ldr	r3, [pc, #384]	@ (8000e78 <get_frame+0x2dc>)
 8000cf8:	f883 2113 	strb.w	r2, [r3, #275]	@ 0x113
			if (frame.receiver_id == 1) {
 8000cfc:	bf00      	nop
		}
		else frame.state = IDLE;
		return;
 8000cfe:	e186      	b.n	800100e <get_frame+0x472>
		else frame.state = IDLE;
 8000d00:	4b5d      	ldr	r3, [pc, #372]	@ (8000e78 <get_frame+0x2dc>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
		return;
 8000d08:	e181      	b.n	800100e <get_frame+0x472>
	}

	case FIND_LENGTH: {
		if (ch >= '0' && ch <= '9') {
 8000d0a:	79fb      	ldrb	r3, [r7, #7]
 8000d0c:	2b2f      	cmp	r3, #47	@ 0x2f
 8000d0e:	d936      	bls.n	8000d7e <get_frame+0x1e2>
 8000d10:	79fb      	ldrb	r3, [r7, #7]
 8000d12:	2b39      	cmp	r3, #57	@ 0x39
 8000d14:	d833      	bhi.n	8000d7e <get_frame+0x1e2>
			frame.length[frame.length_id] = ch;
 8000d16:	4b58      	ldr	r3, [pc, #352]	@ (8000e78 <get_frame+0x2dc>)
 8000d18:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	4b56      	ldr	r3, [pc, #344]	@ (8000e78 <get_frame+0x2dc>)
 8000d20:	4413      	add	r3, r2
 8000d22:	79fa      	ldrb	r2, [r7, #7]
 8000d24:	719a      	strb	r2, [r3, #6]
			frame.crc_calculated = calculate_crc_byte(frame.crc_calculated, ch);
 8000d26:	4b54      	ldr	r3, [pc, #336]	@ (8000e78 <get_frame+0x2dc>)
 8000d28:	f8b3 3110 	ldrh.w	r3, [r3, #272]	@ 0x110
 8000d2c:	79fa      	ldrb	r2, [r7, #7]
 8000d2e:	4611      	mov	r1, r2
 8000d30:	4618      	mov	r0, r3
 8000d32:	f7ff fc01 	bl	8000538 <calculate_crc_byte>
 8000d36:	4603      	mov	r3, r0
 8000d38:	461a      	mov	r2, r3
 8000d3a:	4b4f      	ldr	r3, [pc, #316]	@ (8000e78 <get_frame+0x2dc>)
 8000d3c:	f8a3 2110 	strh.w	r2, [r3, #272]	@ 0x110
			if (frame.length_id == 2) {
 8000d40:	4b4d      	ldr	r3, [pc, #308]	@ (8000e78 <get_frame+0x2dc>)
 8000d42:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 8000d46:	2b02      	cmp	r3, #2
 8000d48:	d10f      	bne.n	8000d6a <get_frame+0x1ce>
				frame.length[3] = '\0';
 8000d4a:	4b4b      	ldr	r3, [pc, #300]	@ (8000e78 <get_frame+0x2dc>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	725a      	strb	r2, [r3, #9]
				frame.length_int = atoi((char *)frame.length);
 8000d50:	484d      	ldr	r0, [pc, #308]	@ (8000e88 <get_frame+0x2ec>)
 8000d52:	f003 fd5d 	bl	8004810 <atoi>
 8000d56:	4603      	mov	r3, r0
 8000d58:	b29a      	uxth	r2, r3
 8000d5a:	4b47      	ldr	r3, [pc, #284]	@ (8000e78 <get_frame+0x2dc>)
 8000d5c:	f8a3 211a 	strh.w	r2, [r3, #282]	@ 0x11a
				//USART_fsend("length ok");
				frame.state = FIND_DATA;
 8000d60:	4b45      	ldr	r3, [pc, #276]	@ (8000e78 <get_frame+0x2dc>)
 8000d62:	2204      	movs	r2, #4
 8000d64:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
				return;
 8000d68:	e151      	b.n	800100e <get_frame+0x472>
			}
			else frame.length_id++;
 8000d6a:	4b43      	ldr	r3, [pc, #268]	@ (8000e78 <get_frame+0x2dc>)
 8000d6c:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 8000d70:	3301      	adds	r3, #1
 8000d72:	b2da      	uxtb	r2, r3
 8000d74:	4b40      	ldr	r3, [pc, #256]	@ (8000e78 <get_frame+0x2dc>)
 8000d76:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
			if (frame.length_id == 2) {
 8000d7a:	bf00      	nop
		}
		else frame.state = IDLE;
		return;
 8000d7c:	e147      	b.n	800100e <get_frame+0x472>
		else frame.state = IDLE;
 8000d7e:	4b3e      	ldr	r3, [pc, #248]	@ (8000e78 <get_frame+0x2dc>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
		return;
 8000d86:	e142      	b.n	800100e <get_frame+0x472>
	}

	case FIND_DATA: {

		if (frame.data_id + frame.masked_counter < frame.length_int) {
 8000d88:	4b3b      	ldr	r3, [pc, #236]	@ (8000e78 <get_frame+0x2dc>)
 8000d8a:	f8b3 3116 	ldrh.w	r3, [r3, #278]	@ 0x116
 8000d8e:	461a      	mov	r2, r3
 8000d90:	4b39      	ldr	r3, [pc, #228]	@ (8000e78 <get_frame+0x2dc>)
 8000d92:	f8b3 311c 	ldrh.w	r3, [r3, #284]	@ 0x11c
 8000d96:	4413      	add	r3, r2
 8000d98:	4a37      	ldr	r2, [pc, #220]	@ (8000e78 <get_frame+0x2dc>)
 8000d9a:	f8b2 211a 	ldrh.w	r2, [r2, #282]	@ 0x11a
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	da52      	bge.n	8000e48 <get_frame+0x2ac>

			if (ch == FRAME_START || ch == FRAME_END) {
 8000da2:	79fb      	ldrb	r3, [r7, #7]
 8000da4:	2b3a      	cmp	r3, #58	@ 0x3a
 8000da6:	d002      	beq.n	8000dae <get_frame+0x212>
 8000da8:	79fb      	ldrb	r3, [r7, #7]
 8000daa:	2b3b      	cmp	r3, #59	@ 0x3b
 8000dac:	d104      	bne.n	8000db8 <get_frame+0x21c>
				frame.state = IDLE;
 8000dae:	4b32      	ldr	r3, [pc, #200]	@ (8000e78 <get_frame+0x2dc>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
				return;
 8000db6:	e12a      	b.n	800100e <get_frame+0x472>
			}

			frame.crc_calculated = calculate_crc_byte(frame.crc_calculated, ch);
 8000db8:	4b2f      	ldr	r3, [pc, #188]	@ (8000e78 <get_frame+0x2dc>)
 8000dba:	f8b3 3110 	ldrh.w	r3, [r3, #272]	@ 0x110
 8000dbe:	79fa      	ldrb	r2, [r7, #7]
 8000dc0:	4611      	mov	r1, r2
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f7ff fbb8 	bl	8000538 <calculate_crc_byte>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	461a      	mov	r2, r3
 8000dcc:	4b2a      	ldr	r3, [pc, #168]	@ (8000e78 <get_frame+0x2dc>)
 8000dce:	f8a3 2110 	strh.w	r2, [r3, #272]	@ 0x110

			if (ch == MASK) {
 8000dd2:	79fb      	ldrb	r3, [r7, #7]
 8000dd4:	2b2f      	cmp	r3, #47	@ 0x2f
 8000dd6:	d10c      	bne.n	8000df2 <get_frame+0x256>
				frame.masked_counter++;
 8000dd8:	4b27      	ldr	r3, [pc, #156]	@ (8000e78 <get_frame+0x2dc>)
 8000dda:	f8b3 311c 	ldrh.w	r3, [r3, #284]	@ 0x11c
 8000dde:	3301      	adds	r3, #1
 8000de0:	b29a      	uxth	r2, r3
 8000de2:	4b25      	ldr	r3, [pc, #148]	@ (8000e78 <get_frame+0x2dc>)
 8000de4:	f8a3 211c 	strh.w	r2, [r3, #284]	@ 0x11c
				frame.state = FIND_MASKED;
 8000de8:	4b23      	ldr	r3, [pc, #140]	@ (8000e78 <get_frame+0x2dc>)
 8000dea:	2207      	movs	r2, #7
 8000dec:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
				return;
 8000df0:	e10d      	b.n	800100e <get_frame+0x472>
			}

			frame.data[frame.data_id++] = ch;
 8000df2:	4b21      	ldr	r3, [pc, #132]	@ (8000e78 <get_frame+0x2dc>)
 8000df4:	f8b3 3116 	ldrh.w	r3, [r3, #278]	@ 0x116
 8000df8:	1c5a      	adds	r2, r3, #1
 8000dfa:	b291      	uxth	r1, r2
 8000dfc:	4a1e      	ldr	r2, [pc, #120]	@ (8000e78 <get_frame+0x2dc>)
 8000dfe:	f8a2 1116 	strh.w	r1, [r2, #278]	@ 0x116
 8000e02:	461a      	mov	r2, r3
 8000e04:	4b1c      	ldr	r3, [pc, #112]	@ (8000e78 <get_frame+0x2dc>)
 8000e06:	4413      	add	r3, r2
 8000e08:	79fa      	ldrb	r2, [r7, #7]
 8000e0a:	729a      	strb	r2, [r3, #10]

			if (frame.data_id + frame.masked_counter == frame.length_int) {
 8000e0c:	4b1a      	ldr	r3, [pc, #104]	@ (8000e78 <get_frame+0x2dc>)
 8000e0e:	f8b3 3116 	ldrh.w	r3, [r3, #278]	@ 0x116
 8000e12:	461a      	mov	r2, r3
 8000e14:	4b18      	ldr	r3, [pc, #96]	@ (8000e78 <get_frame+0x2dc>)
 8000e16:	f8b3 311c 	ldrh.w	r3, [r3, #284]	@ 0x11c
 8000e1a:	4413      	add	r3, r2
 8000e1c:	4a16      	ldr	r2, [pc, #88]	@ (8000e78 <get_frame+0x2dc>)
 8000e1e:	f8b2 211a 	ldrh.w	r2, [r2, #282]	@ 0x11a
 8000e22:	4293      	cmp	r3, r2
 8000e24:	f040 80f2 	bne.w	800100c <get_frame+0x470>
				frame.data[frame.data_id] = '\0';
 8000e28:	4b13      	ldr	r3, [pc, #76]	@ (8000e78 <get_frame+0x2dc>)
 8000e2a:	f8b3 3116 	ldrh.w	r3, [r3, #278]	@ 0x116
 8000e2e:	461a      	mov	r2, r3
 8000e30:	4b11      	ldr	r3, [pc, #68]	@ (8000e78 <get_frame+0x2dc>)
 8000e32:	4413      	add	r3, r2
 8000e34:	2200      	movs	r2, #0
 8000e36:	729a      	strb	r2, [r3, #10]
				USART_fsend("data ok");
 8000e38:	4814      	ldr	r0, [pc, #80]	@ (8000e8c <get_frame+0x2f0>)
 8000e3a:	f7ff fbad 	bl	8000598 <USART_fsend>
				frame.state = FIND_CRC;
 8000e3e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e78 <get_frame+0x2dc>)
 8000e40:	2205      	movs	r2, #5
 8000e42:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
			}
			return;
 8000e46:	e0e1      	b.n	800100c <get_frame+0x470>
		}
		else {
			frame.state = IDLE;
 8000e48:	4b0b      	ldr	r3, [pc, #44]	@ (8000e78 <get_frame+0x2dc>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
			return;
 8000e50:	e0dd      	b.n	800100e <get_frame+0x472>
		}
	}

	case FIND_MASKED: {

		if (frame.data_id + frame.masked_counter >= frame.length_int) {
 8000e52:	4b09      	ldr	r3, [pc, #36]	@ (8000e78 <get_frame+0x2dc>)
 8000e54:	f8b3 3116 	ldrh.w	r3, [r3, #278]	@ 0x116
 8000e58:	461a      	mov	r2, r3
 8000e5a:	4b07      	ldr	r3, [pc, #28]	@ (8000e78 <get_frame+0x2dc>)
 8000e5c:	f8b3 311c 	ldrh.w	r3, [r3, #284]	@ 0x11c
 8000e60:	4413      	add	r3, r2
 8000e62:	4a05      	ldr	r2, [pc, #20]	@ (8000e78 <get_frame+0x2dc>)
 8000e64:	f8b2 211a 	ldrh.w	r2, [r2, #282]	@ 0x11a
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	db11      	blt.n	8000e90 <get_frame+0x2f4>
			frame.state = IDLE;
 8000e6c:	4b02      	ldr	r3, [pc, #8]	@ (8000e78 <get_frame+0x2dc>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
			return;
 8000e74:	e0cb      	b.n	800100e <get_frame+0x472>
 8000e76:	bf00      	nop
 8000e78:	2000050c 	.word	0x2000050c
 8000e7c:	08005458 	.word	0x08005458
 8000e80:	0800545c 	.word	0x0800545c
 8000e84:	2000050f 	.word	0x2000050f
 8000e88:	20000512 	.word	0x20000512
 8000e8c:	08005460 	.word	0x08005460
		}

		switch(ch) {
 8000e90:	79fb      	ldrb	r3, [r7, #7]
 8000e92:	2b2f      	cmp	r3, #47	@ 0x2f
 8000e94:	d029      	beq.n	8000eea <get_frame+0x34e>
 8000e96:	2b2f      	cmp	r3, #47	@ 0x2f
 8000e98:	dc39      	bgt.n	8000f0e <get_frame+0x372>
 8000e9a:	2b2c      	cmp	r3, #44	@ 0x2c
 8000e9c:	d013      	beq.n	8000ec6 <get_frame+0x32a>
 8000e9e:	2b2e      	cmp	r3, #46	@ 0x2e
 8000ea0:	d135      	bne.n	8000f0e <get_frame+0x372>
		case MASKED_START: {
			frame.data[frame.data_id++] = FRAME_START;
 8000ea2:	4b5c      	ldr	r3, [pc, #368]	@ (8001014 <get_frame+0x478>)
 8000ea4:	f8b3 3116 	ldrh.w	r3, [r3, #278]	@ 0x116
 8000ea8:	1c5a      	adds	r2, r3, #1
 8000eaa:	b291      	uxth	r1, r2
 8000eac:	4a59      	ldr	r2, [pc, #356]	@ (8001014 <get_frame+0x478>)
 8000eae:	f8a2 1116 	strh.w	r1, [r2, #278]	@ 0x116
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	4b57      	ldr	r3, [pc, #348]	@ (8001014 <get_frame+0x478>)
 8000eb6:	4413      	add	r3, r2
 8000eb8:	223a      	movs	r2, #58	@ 0x3a
 8000eba:	729a      	strb	r2, [r3, #10]
			frame.state = FIND_DATA;
 8000ebc:	4b55      	ldr	r3, [pc, #340]	@ (8001014 <get_frame+0x478>)
 8000ebe:	2204      	movs	r2, #4
 8000ec0:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
			break;
 8000ec4:	e028      	b.n	8000f18 <get_frame+0x37c>
		}
		case MASKED_END: {
			frame.data[frame.data_id++] = FRAME_END;
 8000ec6:	4b53      	ldr	r3, [pc, #332]	@ (8001014 <get_frame+0x478>)
 8000ec8:	f8b3 3116 	ldrh.w	r3, [r3, #278]	@ 0x116
 8000ecc:	1c5a      	adds	r2, r3, #1
 8000ece:	b291      	uxth	r1, r2
 8000ed0:	4a50      	ldr	r2, [pc, #320]	@ (8001014 <get_frame+0x478>)
 8000ed2:	f8a2 1116 	strh.w	r1, [r2, #278]	@ 0x116
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	4b4e      	ldr	r3, [pc, #312]	@ (8001014 <get_frame+0x478>)
 8000eda:	4413      	add	r3, r2
 8000edc:	223b      	movs	r2, #59	@ 0x3b
 8000ede:	729a      	strb	r2, [r3, #10]
			frame.state = FIND_DATA;
 8000ee0:	4b4c      	ldr	r3, [pc, #304]	@ (8001014 <get_frame+0x478>)
 8000ee2:	2204      	movs	r2, #4
 8000ee4:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
			break;
 8000ee8:	e016      	b.n	8000f18 <get_frame+0x37c>
		}
		case MASK: {
			frame.data[frame.data_id++] = MASK;
 8000eea:	4b4a      	ldr	r3, [pc, #296]	@ (8001014 <get_frame+0x478>)
 8000eec:	f8b3 3116 	ldrh.w	r3, [r3, #278]	@ 0x116
 8000ef0:	1c5a      	adds	r2, r3, #1
 8000ef2:	b291      	uxth	r1, r2
 8000ef4:	4a47      	ldr	r2, [pc, #284]	@ (8001014 <get_frame+0x478>)
 8000ef6:	f8a2 1116 	strh.w	r1, [r2, #278]	@ 0x116
 8000efa:	461a      	mov	r2, r3
 8000efc:	4b45      	ldr	r3, [pc, #276]	@ (8001014 <get_frame+0x478>)
 8000efe:	4413      	add	r3, r2
 8000f00:	222f      	movs	r2, #47	@ 0x2f
 8000f02:	729a      	strb	r2, [r3, #10]
			frame.state = FIND_DATA;
 8000f04:	4b43      	ldr	r3, [pc, #268]	@ (8001014 <get_frame+0x478>)
 8000f06:	2204      	movs	r2, #4
 8000f08:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
			break;
 8000f0c:	e004      	b.n	8000f18 <get_frame+0x37c>
		}
		default: { // błąd, powrót do początku
			frame.state = IDLE;
 8000f0e:	4b41      	ldr	r3, [pc, #260]	@ (8001014 <get_frame+0x478>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
			return;
 8000f16:	e07a      	b.n	800100e <get_frame+0x472>
		}
		}

		frame.crc_calculated = calculate_crc_byte(frame.crc_calculated, ch);
 8000f18:	4b3e      	ldr	r3, [pc, #248]	@ (8001014 <get_frame+0x478>)
 8000f1a:	f8b3 3110 	ldrh.w	r3, [r3, #272]	@ 0x110
 8000f1e:	79fa      	ldrb	r2, [r7, #7]
 8000f20:	4611      	mov	r1, r2
 8000f22:	4618      	mov	r0, r3
 8000f24:	f7ff fb08 	bl	8000538 <calculate_crc_byte>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	4b39      	ldr	r3, [pc, #228]	@ (8001014 <get_frame+0x478>)
 8000f2e:	f8a3 2110 	strh.w	r2, [r3, #272]	@ 0x110

		if (frame.data_id < frame.length_int - 1) {
 8000f32:	4b38      	ldr	r3, [pc, #224]	@ (8001014 <get_frame+0x478>)
 8000f34:	f8b3 3116 	ldrh.w	r3, [r3, #278]	@ 0x116
 8000f38:	461a      	mov	r2, r3
 8000f3a:	4b36      	ldr	r3, [pc, #216]	@ (8001014 <get_frame+0x478>)
 8000f3c:	f8b3 311a 	ldrh.w	r3, [r3, #282]	@ 0x11a
 8000f40:	3b01      	subs	r3, #1
 8000f42:	429a      	cmp	r2, r3
 8000f44:	da04      	bge.n	8000f50 <get_frame+0x3b4>
			frame.state = FIND_DATA;
 8000f46:	4b33      	ldr	r3, [pc, #204]	@ (8001014 <get_frame+0x478>)
 8000f48:	2204      	movs	r2, #4
 8000f4a:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
		} else {
			frame.data[frame.data_id] = '\0';
			frame.state = FIND_CRC;
		}

		return;
 8000f4e:	e05e      	b.n	800100e <get_frame+0x472>
			frame.data[frame.data_id] = '\0';
 8000f50:	4b30      	ldr	r3, [pc, #192]	@ (8001014 <get_frame+0x478>)
 8000f52:	f8b3 3116 	ldrh.w	r3, [r3, #278]	@ 0x116
 8000f56:	461a      	mov	r2, r3
 8000f58:	4b2e      	ldr	r3, [pc, #184]	@ (8001014 <get_frame+0x478>)
 8000f5a:	4413      	add	r3, r2
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	729a      	strb	r2, [r3, #10]
			frame.state = FIND_CRC;
 8000f60:	4b2c      	ldr	r3, [pc, #176]	@ (8001014 <get_frame+0x478>)
 8000f62:	2205      	movs	r2, #5
 8000f64:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
		return;
 8000f68:	e051      	b.n	800100e <get_frame+0x472>
	}

	case FIND_CRC: {
		if ((ch >= '0' && ch <= '9') || (ch >= 'A' && ch <= 'F')) {
 8000f6a:	79fb      	ldrb	r3, [r7, #7]
 8000f6c:	2b2f      	cmp	r3, #47	@ 0x2f
 8000f6e:	d902      	bls.n	8000f76 <get_frame+0x3da>
 8000f70:	79fb      	ldrb	r3, [r7, #7]
 8000f72:	2b39      	cmp	r3, #57	@ 0x39
 8000f74:	d905      	bls.n	8000f82 <get_frame+0x3e6>
 8000f76:	79fb      	ldrb	r3, [r7, #7]
 8000f78:	2b40      	cmp	r3, #64	@ 0x40
 8000f7a:	d92f      	bls.n	8000fdc <get_frame+0x440>
 8000f7c:	79fb      	ldrb	r3, [r7, #7]
 8000f7e:	2b46      	cmp	r3, #70	@ 0x46
 8000f80:	d82c      	bhi.n	8000fdc <get_frame+0x440>
			frame.crc_frame[frame.crc_id++] = ch;
 8000f82:	4b24      	ldr	r3, [pc, #144]	@ (8001014 <get_frame+0x478>)
 8000f84:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8000f88:	1c5a      	adds	r2, r3, #1
 8000f8a:	b2d1      	uxtb	r1, r2
 8000f8c:	4a21      	ldr	r2, [pc, #132]	@ (8001014 <get_frame+0x478>)
 8000f8e:	f882 1118 	strb.w	r1, [r2, #280]	@ 0x118
 8000f92:	461a      	mov	r2, r3
 8000f94:	4b1f      	ldr	r3, [pc, #124]	@ (8001014 <get_frame+0x478>)
 8000f96:	4413      	add	r3, r2
 8000f98:	79fa      	ldrb	r2, [r7, #7]
 8000f9a:	f883 210b 	strb.w	r2, [r3, #267]	@ 0x10b
			if (frame.crc_id == 4) {
 8000f9e:	4b1d      	ldr	r3, [pc, #116]	@ (8001014 <get_frame+0x478>)
 8000fa0:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8000fa4:	2b04      	cmp	r3, #4
 8000fa6:	d11e      	bne.n	8000fe6 <get_frame+0x44a>
				frame.crc_frame[4] = '\0';
 8000fa8:	4b1a      	ldr	r3, [pc, #104]	@ (8001014 <get_frame+0x478>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	f883 210f 	strb.w	r2, [r3, #271]	@ 0x10f
				if ((uint16_t)strtol((char *)frame.crc_frame, NULL, 16) == frame.crc_calculated) {
 8000fb0:	2210      	movs	r2, #16
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	4818      	ldr	r0, [pc, #96]	@ (8001018 <get_frame+0x47c>)
 8000fb6:	f003 fca9 	bl	800490c <strtol>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	b29a      	uxth	r2, r3
 8000fbe:	4b15      	ldr	r3, [pc, #84]	@ (8001014 <get_frame+0x478>)
 8000fc0:	f8b3 3110 	ldrh.w	r3, [r3, #272]	@ 0x110
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	d104      	bne.n	8000fd2 <get_frame+0x436>
					//USART_fsend("crc ok");
					frame.state = FIND_END;
 8000fc8:	4b12      	ldr	r3, [pc, #72]	@ (8001014 <get_frame+0x478>)
 8000fca:	2206      	movs	r2, #6
 8000fcc:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
					return;
 8000fd0:	e01d      	b.n	800100e <get_frame+0x472>
				}
				else {
					//USART_fsend("crc blad");
					frame.state = IDLE;
 8000fd2:	4b10      	ldr	r3, [pc, #64]	@ (8001014 <get_frame+0x478>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
					return;
 8000fda:	e018      	b.n	800100e <get_frame+0x472>
				}
			}
		}
		else frame.state = IDLE;
 8000fdc:	4b0d      	ldr	r3, [pc, #52]	@ (8001014 <get_frame+0x478>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
		return;
 8000fe4:	e013      	b.n	800100e <get_frame+0x472>
 8000fe6:	e012      	b.n	800100e <get_frame+0x472>
	}

	case FIND_END: {
		if (ch == FRAME_END) {
 8000fe8:	79fb      	ldrb	r3, [r7, #7]
 8000fea:	2b3b      	cmp	r3, #59	@ 0x3b
 8000fec:	d109      	bne.n	8001002 <get_frame+0x466>
			frame.complete = true;
 8000fee:	4b09      	ldr	r3, [pc, #36]	@ (8001014 <get_frame+0x478>)
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	f883 211f 	strb.w	r2, [r3, #287]	@ 0x11f
			USART_fsend("ramka ok");
 8000ff6:	4809      	ldr	r0, [pc, #36]	@ (800101c <get_frame+0x480>)
 8000ff8:	f7ff face 	bl	8000598 <USART_fsend>
			process_frame();
 8000ffc:	f7ff fca4 	bl	8000948 <process_frame>
			return;
 8001000:	e005      	b.n	800100e <get_frame+0x472>
		}
		else frame.state = IDLE;
 8001002:	4b04      	ldr	r3, [pc, #16]	@ (8001014 <get_frame+0x478>)
 8001004:	2200      	movs	r2, #0
 8001006:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
		return;
 800100a:	e000      	b.n	800100e <get_frame+0x472>
			return;
 800100c:	bf00      	nop
	}
	}
}
 800100e:	3708      	adds	r7, #8
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	2000050c 	.word	0x2000050c
 8001018:	20000617 	.word	0x20000617
 800101c:	08005468 	.word	0x08005468

08001020 <handle_char>:

void handle_char() {
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
	int16_t ch;
	if ((ch = USART_getchar()) >= 0) {
 8001026:	f7ff fbc5 	bl	80007b4 <USART_getchar>
 800102a:	4603      	mov	r3, r0
 800102c:	80fb      	strh	r3, [r7, #6]
 800102e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001032:	2b00      	cmp	r3, #0
 8001034:	db04      	blt.n	8001040 <handle_char+0x20>
		//USART_fsend("  |%c|  ", ch);
		get_frame((uint8_t)ch);
 8001036:	88fb      	ldrh	r3, [r7, #6]
 8001038:	b2db      	uxtb	r3, r3
 800103a:	4618      	mov	r0, r3
 800103c:	f7ff fdae 	bl	8000b9c <get_frame>
	}
}
 8001040:	bf00      	nop
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800104c:	f000 fbc8 	bl	80017e0 <HAL_Init>

  /* USER CODE BEGIN Init */
  init_dht11(pDHT, GPIOA, GPIO_PIN_0, &htim2);
 8001050:	4b22      	ldr	r3, [pc, #136]	@ (80010dc <main+0x94>)
 8001052:	6818      	ldr	r0, [r3, #0]
 8001054:	4b22      	ldr	r3, [pc, #136]	@ (80010e0 <main+0x98>)
 8001056:	2201      	movs	r2, #1
 8001058:	4922      	ldr	r1, [pc, #136]	@ (80010e4 <main+0x9c>)
 800105a:	f7ff f87f 	bl	800015c <init_dht11>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800105e:	f000 f853 	bl	8001108 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001062:	f7ff f9fb 	bl	800045c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001066:	f000 fb25 	bl	80016b4 <MX_USART2_UART_Init>
  MX_TIM2_Init(); // pwm input
 800106a:	f000 f95b 	bl	8001324 <MX_TIM2_Init>
  MX_TIM3_Init(); // delay us
 800106e:	f000 f9f5 	bl	800145c <MX_TIM3_Init>
  MX_TIM4_Init(); // interval ms
 8001072:	f000 fa49 	bl	8001508 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim3);
 8001076:	481c      	ldr	r0, [pc, #112]	@ (80010e8 <main+0xa0>)
 8001078:	f001 fc2e 	bl	80028d8 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim4);
 800107c:	481b      	ldr	r0, [pc, #108]	@ (80010ec <main+0xa4>)
 800107e:	f001 fc75 	bl	800296c <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart2, &USART_BUF_RX[USART_RX_EMPTY], 1);
 8001082:	4b1b      	ldr	r3, [pc, #108]	@ (80010f0 <main+0xa8>)
 8001084:	881b      	ldrh	r3, [r3, #0]
 8001086:	b29b      	uxth	r3, r3
 8001088:	461a      	mov	r2, r3
 800108a:	4b1a      	ldr	r3, [pc, #104]	@ (80010f4 <main+0xac>)
 800108c:	4413      	add	r3, r2
 800108e:	2201      	movs	r2, #1
 8001090:	4619      	mov	r1, r3
 8001092:	4819      	ldr	r0, [pc, #100]	@ (80010f8 <main+0xb0>)
 8001094:	f002 fe8f 	bl	8003db6 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
//  delay_us(3000);
  HAL_Delay(5000);
 8001098:	f241 3088 	movw	r0, #5000	@ 0x1388
 800109c:	f000 fc02 	bl	80018a4 <HAL_Delay>
  while (1)
  {
	  if (DHT11_READ_FLAG) {
 80010a0:	4b16      	ldr	r3, [pc, #88]	@ (80010fc <main+0xb4>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d00c      	beq.n	80010c4 <main+0x7c>
		  USART_fsend("HALOO");
 80010aa:	4815      	ldr	r0, [pc, #84]	@ (8001100 <main+0xb8>)
 80010ac:	f7ff fa74 	bl	8000598 <USART_fsend>
		  readDHT11(pDHT);
 80010b0:	4b0a      	ldr	r3, [pc, #40]	@ (80010dc <main+0x94>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff f8ad 	bl	8000214 <readDHT11>
  __ASM volatile ("cpsie i" : : : "memory");
 80010ba:	b662      	cpsie	i
}
 80010bc:	bf00      	nop
		  __enable_irq();
		  DHT11_READ_FLAG = 0;
 80010be:	4b0f      	ldr	r3, [pc, #60]	@ (80010fc <main+0xb4>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	701a      	strb	r2, [r3, #0]
	  }
	  // jeśli bufor nie jest pusty
	  if (USART_RX_EMPTY != USART_RX_BUSY) {
 80010c4:	4b0a      	ldr	r3, [pc, #40]	@ (80010f0 <main+0xa8>)
 80010c6:	881b      	ldrh	r3, [r3, #0]
 80010c8:	b29a      	uxth	r2, r3
 80010ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001104 <main+0xbc>)
 80010cc:	881b      	ldrh	r3, [r3, #0]
 80010ce:	b29b      	uxth	r3, r3
 80010d0:	429a      	cmp	r2, r3
 80010d2:	d0e5      	beq.n	80010a0 <main+0x58>
		  handle_char();
 80010d4:	f7ff ffa4 	bl	8001020 <handle_char>
	  if (DHT11_READ_FLAG) {
 80010d8:	e7e2      	b.n	80010a0 <main+0x58>
 80010da:	bf00      	nop
 80010dc:	20000004 	.word	0x20000004
 80010e0:	200011fc 	.word	0x200011fc
 80010e4:	40010800 	.word	0x40010800
 80010e8:	20001244 	.word	0x20001244
 80010ec:	2000128c 	.word	0x2000128c
 80010f0:	20000100 	.word	0x20000100
 80010f4:	20000080 	.word	0x20000080
 80010f8:	200012d4 	.word	0x200012d4
 80010fc:	20000508 	.word	0x20000508
 8001100:	08005474 	.word	0x08005474
 8001104:	20000102 	.word	0x20000102

08001108 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b090      	sub	sp, #64	@ 0x40
 800110c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800110e:	f107 0318 	add.w	r3, r7, #24
 8001112:	2228      	movs	r2, #40	@ 0x28
 8001114:	2100      	movs	r1, #0
 8001116:	4618      	mov	r0, r3
 8001118:	f003 fc9a 	bl	8004a50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800111c:	1d3b      	adds	r3, r7, #4
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]
 8001122:	605a      	str	r2, [r3, #4]
 8001124:	609a      	str	r2, [r3, #8]
 8001126:	60da      	str	r2, [r3, #12]
 8001128:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800112a:	2302      	movs	r3, #2
 800112c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800112e:	2301      	movs	r3, #1
 8001130:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001132:	2310      	movs	r3, #16
 8001134:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001136:	2302      	movs	r3, #2
 8001138:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800113a:	2300      	movs	r3, #0
 800113c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800113e:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8001142:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001144:	f107 0318 	add.w	r3, r7, #24
 8001148:	4618      	mov	r0, r3
 800114a:	f000 ff65 	bl	8002018 <HAL_RCC_OscConfig>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001154:	f000 f81a 	bl	800118c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001158:	230f      	movs	r3, #15
 800115a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800115c:	2302      	movs	r3, #2
 800115e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001160:	2300      	movs	r3, #0
 8001162:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001164:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001168:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800116a:	2300      	movs	r3, #0
 800116c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800116e:	1d3b      	adds	r3, r7, #4
 8001170:	2102      	movs	r1, #2
 8001172:	4618      	mov	r0, r3
 8001174:	f001 f9d2 	bl	800251c <HAL_RCC_ClockConfig>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800117e:	f000 f805 	bl	800118c <Error_Handler>
  }
}
 8001182:	bf00      	nop
 8001184:	3740      	adds	r7, #64	@ 0x40
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
	...

0800118c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	USART_fsend("problem");
 8001190:	4803      	ldr	r0, [pc, #12]	@ (80011a0 <Error_Handler+0x14>)
 8001192:	f7ff fa01 	bl	8000598 <USART_fsend>
  __ASM volatile ("cpsid i" : : : "memory");
 8001196:	b672      	cpsid	i
}
 8001198:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800119a:	bf00      	nop
 800119c:	e7fd      	b.n	800119a <Error_Handler+0xe>
 800119e:	bf00      	nop
 80011a0:	0800547c 	.word	0x0800547c

080011a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b085      	sub	sp, #20
 80011a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80011aa:	4b15      	ldr	r3, [pc, #84]	@ (8001200 <HAL_MspInit+0x5c>)
 80011ac:	699b      	ldr	r3, [r3, #24]
 80011ae:	4a14      	ldr	r2, [pc, #80]	@ (8001200 <HAL_MspInit+0x5c>)
 80011b0:	f043 0301 	orr.w	r3, r3, #1
 80011b4:	6193      	str	r3, [r2, #24]
 80011b6:	4b12      	ldr	r3, [pc, #72]	@ (8001200 <HAL_MspInit+0x5c>)
 80011b8:	699b      	ldr	r3, [r3, #24]
 80011ba:	f003 0301 	and.w	r3, r3, #1
 80011be:	60bb      	str	r3, [r7, #8]
 80011c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001200 <HAL_MspInit+0x5c>)
 80011c4:	69db      	ldr	r3, [r3, #28]
 80011c6:	4a0e      	ldr	r2, [pc, #56]	@ (8001200 <HAL_MspInit+0x5c>)
 80011c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011cc:	61d3      	str	r3, [r2, #28]
 80011ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001200 <HAL_MspInit+0x5c>)
 80011d0:	69db      	ldr	r3, [r3, #28]
 80011d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011d6:	607b      	str	r3, [r7, #4]
 80011d8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80011da:	4b0a      	ldr	r3, [pc, #40]	@ (8001204 <HAL_MspInit+0x60>)
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80011e6:	60fb      	str	r3, [r7, #12]
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80011ee:	60fb      	str	r3, [r7, #12]
 80011f0:	4a04      	ldr	r2, [pc, #16]	@ (8001204 <HAL_MspInit+0x60>)
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011f6:	bf00      	nop
 80011f8:	3714      	adds	r7, #20
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bc80      	pop	{r7}
 80011fe:	4770      	bx	lr
 8001200:	40021000 	.word	0x40021000
 8001204:	40010000 	.word	0x40010000

08001208 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800120c:	bf00      	nop
 800120e:	e7fd      	b.n	800120c <NMI_Handler+0x4>

08001210 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001214:	bf00      	nop
 8001216:	e7fd      	b.n	8001214 <HardFault_Handler+0x4>

08001218 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800121c:	bf00      	nop
 800121e:	e7fd      	b.n	800121c <MemManage_Handler+0x4>

08001220 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001224:	bf00      	nop
 8001226:	e7fd      	b.n	8001224 <BusFault_Handler+0x4>

08001228 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800122c:	bf00      	nop
 800122e:	e7fd      	b.n	800122c <UsageFault_Handler+0x4>

08001230 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001234:	bf00      	nop
 8001236:	46bd      	mov	sp, r7
 8001238:	bc80      	pop	{r7}
 800123a:	4770      	bx	lr

0800123c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001240:	bf00      	nop
 8001242:	46bd      	mov	sp, r7
 8001244:	bc80      	pop	{r7}
 8001246:	4770      	bx	lr

08001248 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800124c:	bf00      	nop
 800124e:	46bd      	mov	sp, r7
 8001250:	bc80      	pop	{r7}
 8001252:	4770      	bx	lr

08001254 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001258:	f000 fb08 	bl	800186c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800125c:	bf00      	nop
 800125e:	bd80      	pop	{r7, pc}

08001260 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001264:	4802      	ldr	r0, [pc, #8]	@ (8001270 <TIM2_IRQHandler+0x10>)
 8001266:	f001 fd4b 	bl	8002d00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800126a:	bf00      	nop
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	200011fc 	.word	0x200011fc

08001274 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001278:	4802      	ldr	r0, [pc, #8]	@ (8001284 <TIM4_IRQHandler+0x10>)
 800127a:	f001 fd41 	bl	8002d00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	2000128c 	.word	0x2000128c

08001288 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800128c:	4802      	ldr	r0, [pc, #8]	@ (8001298 <USART2_IRQHandler+0x10>)
 800128e:	f002 fdb7 	bl	8003e00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	200012d4 	.word	0x200012d4

0800129c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80012a0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80012a4:	f000 fe96 	bl	8001fd4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80012a8:	bf00      	nop
 80012aa:	bd80      	pop	{r7, pc}

080012ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b086      	sub	sp, #24
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012b4:	4a14      	ldr	r2, [pc, #80]	@ (8001308 <_sbrk+0x5c>)
 80012b6:	4b15      	ldr	r3, [pc, #84]	@ (800130c <_sbrk+0x60>)
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012c0:	4b13      	ldr	r3, [pc, #76]	@ (8001310 <_sbrk+0x64>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d102      	bne.n	80012ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012c8:	4b11      	ldr	r3, [pc, #68]	@ (8001310 <_sbrk+0x64>)
 80012ca:	4a12      	ldr	r2, [pc, #72]	@ (8001314 <_sbrk+0x68>)
 80012cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012ce:	4b10      	ldr	r3, [pc, #64]	@ (8001310 <_sbrk+0x64>)
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4413      	add	r3, r2
 80012d6:	693a      	ldr	r2, [r7, #16]
 80012d8:	429a      	cmp	r2, r3
 80012da:	d207      	bcs.n	80012ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012dc:	f003 fbe0 	bl	8004aa0 <__errno>
 80012e0:	4603      	mov	r3, r0
 80012e2:	220c      	movs	r2, #12
 80012e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012e6:	f04f 33ff 	mov.w	r3, #4294967295
 80012ea:	e009      	b.n	8001300 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012ec:	4b08      	ldr	r3, [pc, #32]	@ (8001310 <_sbrk+0x64>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012f2:	4b07      	ldr	r3, [pc, #28]	@ (8001310 <_sbrk+0x64>)
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4413      	add	r3, r2
 80012fa:	4a05      	ldr	r2, [pc, #20]	@ (8001310 <_sbrk+0x64>)
 80012fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012fe:	68fb      	ldr	r3, [r7, #12]
}
 8001300:	4618      	mov	r0, r3
 8001302:	3718      	adds	r7, #24
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	20005000 	.word	0x20005000
 800130c:	00000400 	.word	0x00000400
 8001310:	200011f8 	.word	0x200011f8
 8001314:	20001468 	.word	0x20001468

08001318 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800131c:	bf00      	nop
 800131e:	46bd      	mov	sp, r7
 8001320:	bc80      	pop	{r7}
 8001322:	4770      	bx	lr

08001324 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b090      	sub	sp, #64	@ 0x40
 8001328:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800132a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800132e:	2200      	movs	r2, #0
 8001330:	601a      	str	r2, [r3, #0]
 8001332:	605a      	str	r2, [r3, #4]
 8001334:	609a      	str	r2, [r3, #8]
 8001336:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001338:	f107 031c 	add.w	r3, r7, #28
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	605a      	str	r2, [r3, #4]
 8001342:	609a      	str	r2, [r3, #8]
 8001344:	60da      	str	r2, [r3, #12]
 8001346:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001348:	f107 030c 	add.w	r3, r7, #12
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	605a      	str	r2, [r3, #4]
 8001352:	609a      	str	r2, [r3, #8]
 8001354:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001356:	1d3b      	adds	r3, r7, #4
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800135e:	4b3e      	ldr	r3, [pc, #248]	@ (8001458 <MX_TIM2_Init+0x134>)
 8001360:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001364:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 8001366:	4b3c      	ldr	r3, [pc, #240]	@ (8001458 <MX_TIM2_Init+0x134>)
 8001368:	223f      	movs	r2, #63	@ 0x3f
 800136a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800136c:	4b3a      	ldr	r3, [pc, #232]	@ (8001458 <MX_TIM2_Init+0x134>)
 800136e:	2200      	movs	r2, #0
 8001370:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001372:	4b39      	ldr	r3, [pc, #228]	@ (8001458 <MX_TIM2_Init+0x134>)
 8001374:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001378:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800137a:	4b37      	ldr	r3, [pc, #220]	@ (8001458 <MX_TIM2_Init+0x134>)
 800137c:	2200      	movs	r2, #0
 800137e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001380:	4b35      	ldr	r3, [pc, #212]	@ (8001458 <MX_TIM2_Init+0x134>)
 8001382:	2200      	movs	r2, #0
 8001384:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001386:	4834      	ldr	r0, [pc, #208]	@ (8001458 <MX_TIM2_Init+0x134>)
 8001388:	f001 fa56 	bl	8002838 <HAL_TIM_Base_Init>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001392:	f7ff fefb 	bl	800118c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001396:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800139a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800139c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80013a0:	4619      	mov	r1, r3
 80013a2:	482d      	ldr	r0, [pc, #180]	@ (8001458 <MX_TIM2_Init+0x134>)
 80013a4:	f001 fe94 	bl	80030d0 <HAL_TIM_ConfigClockSource>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80013ae:	f7ff feed 	bl	800118c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80013b2:	4829      	ldr	r0, [pc, #164]	@ (8001458 <MX_TIM2_Init+0x134>)
 80013b4:	f001 fc4c 	bl	8002c50 <HAL_TIM_IC_Init>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80013be:	f7ff fee5 	bl	800118c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80013c2:	2304      	movs	r3, #4
 80013c4:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80013c6:	2350      	movs	r3, #80	@ 0x50
 80013c8:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80013ca:	2300      	movs	r3, #0
 80013cc:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 80013ce:	2300      	movs	r3, #0
 80013d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 80013d2:	2300      	movs	r3, #0
 80013d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80013d6:	f107 031c 	add.w	r3, r7, #28
 80013da:	4619      	mov	r1, r3
 80013dc:	481e      	ldr	r0, [pc, #120]	@ (8001458 <MX_TIM2_Init+0x134>)
 80013de:	f001 ff3e 	bl	800325e <HAL_TIM_SlaveConfigSynchro>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <MX_TIM2_Init+0xc8>
  {
    Error_Handler();
 80013e8:	f7ff fed0 	bl	800118c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80013ec:	2300      	movs	r3, #0
 80013ee:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80013f0:	2301      	movs	r3, #1
 80013f2:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80013f4:	2300      	movs	r3, #0
 80013f6:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 80013f8:	2300      	movs	r3, #0
 80013fa:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80013fc:	f107 030c 	add.w	r3, r7, #12
 8001400:	2200      	movs	r2, #0
 8001402:	4619      	mov	r1, r3
 8001404:	4814      	ldr	r0, [pc, #80]	@ (8001458 <MX_TIM2_Init+0x134>)
 8001406:	f001 fdc7 	bl	8002f98 <HAL_TIM_IC_ConfigChannel>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8001410:	f7ff febc 	bl	800118c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001414:	2302      	movs	r3, #2
 8001416:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001418:	2302      	movs	r3, #2
 800141a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800141c:	f107 030c 	add.w	r3, r7, #12
 8001420:	2204      	movs	r2, #4
 8001422:	4619      	mov	r1, r3
 8001424:	480c      	ldr	r0, [pc, #48]	@ (8001458 <MX_TIM2_Init+0x134>)
 8001426:	f001 fdb7 	bl	8002f98 <HAL_TIM_IC_ConfigChannel>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <MX_TIM2_Init+0x110>
  {
    Error_Handler();
 8001430:	f7ff feac 	bl	800118c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001434:	2300      	movs	r3, #0
 8001436:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001438:	2300      	movs	r3, #0
 800143a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800143c:	1d3b      	adds	r3, r7, #4
 800143e:	4619      	mov	r1, r3
 8001440:	4805      	ldr	r0, [pc, #20]	@ (8001458 <MX_TIM2_Init+0x134>)
 8001442:	f002 fbc3 	bl	8003bcc <HAL_TIMEx_MasterConfigSynchronization>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_TIM2_Init+0x12c>
  {
    Error_Handler();
 800144c:	f7ff fe9e 	bl	800118c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001450:	bf00      	nop
 8001452:	3740      	adds	r7, #64	@ 0x40
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	200011fc 	.word	0x200011fc

0800145c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b08a      	sub	sp, #40	@ 0x28
 8001460:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001462:	f107 0320 	add.w	r3, r7, #32
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800146c:	1d3b      	adds	r3, r7, #4
 800146e:	2200      	movs	r2, #0
 8001470:	601a      	str	r2, [r3, #0]
 8001472:	605a      	str	r2, [r3, #4]
 8001474:	609a      	str	r2, [r3, #8]
 8001476:	60da      	str	r2, [r3, #12]
 8001478:	611a      	str	r2, [r3, #16]
 800147a:	615a      	str	r2, [r3, #20]
 800147c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800147e:	4b20      	ldr	r3, [pc, #128]	@ (8001500 <MX_TIM3_Init+0xa4>)
 8001480:	4a20      	ldr	r2, [pc, #128]	@ (8001504 <MX_TIM3_Init+0xa8>)
 8001482:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8001484:	4b1e      	ldr	r3, [pc, #120]	@ (8001500 <MX_TIM3_Init+0xa4>)
 8001486:	223f      	movs	r2, #63	@ 0x3f
 8001488:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800148a:	4b1d      	ldr	r3, [pc, #116]	@ (8001500 <MX_TIM3_Init+0xa4>)
 800148c:	2200      	movs	r2, #0
 800148e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001490:	4b1b      	ldr	r3, [pc, #108]	@ (8001500 <MX_TIM3_Init+0xa4>)
 8001492:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001496:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001498:	4b19      	ldr	r3, [pc, #100]	@ (8001500 <MX_TIM3_Init+0xa4>)
 800149a:	2200      	movs	r2, #0
 800149c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800149e:	4b18      	ldr	r3, [pc, #96]	@ (8001500 <MX_TIM3_Init+0xa4>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 80014a4:	4816      	ldr	r0, [pc, #88]	@ (8001500 <MX_TIM3_Init+0xa4>)
 80014a6:	f001 fae1 	bl	8002a6c <HAL_TIM_OC_Init>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80014b0:	f7ff fe6c 	bl	800118c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014b4:	2300      	movs	r3, #0
 80014b6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014b8:	2300      	movs	r3, #0
 80014ba:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014bc:	f107 0320 	add.w	r3, r7, #32
 80014c0:	4619      	mov	r1, r3
 80014c2:	480f      	ldr	r0, [pc, #60]	@ (8001500 <MX_TIM3_Init+0xa4>)
 80014c4:	f002 fb82 	bl	8003bcc <HAL_TIMEx_MasterConfigSynchronization>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80014ce:	f7ff fe5d 	bl	800118c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80014d2:	2300      	movs	r3, #0
 80014d4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80014d6:	2300      	movs	r3, #0
 80014d8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014da:	2300      	movs	r3, #0
 80014dc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014de:	2300      	movs	r3, #0
 80014e0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014e2:	1d3b      	adds	r3, r7, #4
 80014e4:	2200      	movs	r2, #0
 80014e6:	4619      	mov	r1, r3
 80014e8:	4805      	ldr	r0, [pc, #20]	@ (8001500 <MX_TIM3_Init+0xa4>)
 80014ea:	f001 fcf9 	bl	8002ee0 <HAL_TIM_OC_ConfigChannel>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80014f4:	f7ff fe4a 	bl	800118c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80014f8:	bf00      	nop
 80014fa:	3728      	adds	r7, #40	@ 0x28
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	20001244 	.word	0x20001244
 8001504:	40000400 	.word	0x40000400

08001508 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b08a      	sub	sp, #40	@ 0x28
 800150c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800150e:	f107 0320 	add.w	r3, r7, #32
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001518:	1d3b      	adds	r3, r7, #4
 800151a:	2200      	movs	r2, #0
 800151c:	601a      	str	r2, [r3, #0]
 800151e:	605a      	str	r2, [r3, #4]
 8001520:	609a      	str	r2, [r3, #8]
 8001522:	60da      	str	r2, [r3, #12]
 8001524:	611a      	str	r2, [r3, #16]
 8001526:	615a      	str	r2, [r3, #20]
 8001528:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800152a:	4b21      	ldr	r3, [pc, #132]	@ (80015b0 <MX_TIM4_Init+0xa8>)
 800152c:	4a21      	ldr	r2, [pc, #132]	@ (80015b4 <MX_TIM4_Init+0xac>)
 800152e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 63999;
 8001530:	4b1f      	ldr	r3, [pc, #124]	@ (80015b0 <MX_TIM4_Init+0xa8>)
 8001532:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 8001536:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001538:	4b1d      	ldr	r3, [pc, #116]	@ (80015b0 <MX_TIM4_Init+0xa8>)
 800153a:	2200      	movs	r2, #0
 800153c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 5000;
 800153e:	4b1c      	ldr	r3, [pc, #112]	@ (80015b0 <MX_TIM4_Init+0xa8>)
 8001540:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001544:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001546:	4b1a      	ldr	r3, [pc, #104]	@ (80015b0 <MX_TIM4_Init+0xa8>)
 8001548:	2200      	movs	r2, #0
 800154a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800154c:	4b18      	ldr	r3, [pc, #96]	@ (80015b0 <MX_TIM4_Init+0xa8>)
 800154e:	2200      	movs	r2, #0
 8001550:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8001552:	4817      	ldr	r0, [pc, #92]	@ (80015b0 <MX_TIM4_Init+0xa8>)
 8001554:	f001 fa8a 	bl	8002a6c <HAL_TIM_OC_Init>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 800155e:	f7ff fe15 	bl	800118c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001562:	2300      	movs	r3, #0
 8001564:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001566:	2300      	movs	r3, #0
 8001568:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800156a:	f107 0320 	add.w	r3, r7, #32
 800156e:	4619      	mov	r1, r3
 8001570:	480f      	ldr	r0, [pc, #60]	@ (80015b0 <MX_TIM4_Init+0xa8>)
 8001572:	f002 fb2b 	bl	8003bcc <HAL_TIMEx_MasterConfigSynchronization>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 800157c:	f7ff fe06 	bl	800118c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001580:	2300      	movs	r3, #0
 8001582:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001584:	2300      	movs	r3, #0
 8001586:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001588:	2300      	movs	r3, #0
 800158a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800158c:	2300      	movs	r3, #0
 800158e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001590:	1d3b      	adds	r3, r7, #4
 8001592:	2200      	movs	r2, #0
 8001594:	4619      	mov	r1, r3
 8001596:	4806      	ldr	r0, [pc, #24]	@ (80015b0 <MX_TIM4_Init+0xa8>)
 8001598:	f001 fca2 	bl	8002ee0 <HAL_TIM_OC_ConfigChannel>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80015a2:	f7ff fdf3 	bl	800118c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80015a6:	bf00      	nop
 80015a8:	3728      	adds	r7, #40	@ 0x28
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	2000128c 	.word	0x2000128c
 80015b4:	40000800 	.word	0x40000800

080015b8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b088      	sub	sp, #32
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c0:	f107 0310 	add.w	r3, r7, #16
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	605a      	str	r2, [r3, #4]
 80015ca:	609a      	str	r2, [r3, #8]
 80015cc:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM2)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80015d6:	d12b      	bne.n	8001630 <HAL_TIM_Base_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015d8:	4b17      	ldr	r3, [pc, #92]	@ (8001638 <HAL_TIM_Base_MspInit+0x80>)
 80015da:	69db      	ldr	r3, [r3, #28]
 80015dc:	4a16      	ldr	r2, [pc, #88]	@ (8001638 <HAL_TIM_Base_MspInit+0x80>)
 80015de:	f043 0301 	orr.w	r3, r3, #1
 80015e2:	61d3      	str	r3, [r2, #28]
 80015e4:	4b14      	ldr	r3, [pc, #80]	@ (8001638 <HAL_TIM_Base_MspInit+0x80>)
 80015e6:	69db      	ldr	r3, [r3, #28]
 80015e8:	f003 0301 	and.w	r3, r3, #1
 80015ec:	60fb      	str	r3, [r7, #12]
 80015ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f0:	4b11      	ldr	r3, [pc, #68]	@ (8001638 <HAL_TIM_Base_MspInit+0x80>)
 80015f2:	699b      	ldr	r3, [r3, #24]
 80015f4:	4a10      	ldr	r2, [pc, #64]	@ (8001638 <HAL_TIM_Base_MspInit+0x80>)
 80015f6:	f043 0304 	orr.w	r3, r3, #4
 80015fa:	6193      	str	r3, [r2, #24]
 80015fc:	4b0e      	ldr	r3, [pc, #56]	@ (8001638 <HAL_TIM_Base_MspInit+0x80>)
 80015fe:	699b      	ldr	r3, [r3, #24]
 8001600:	f003 0304 	and.w	r3, r3, #4
 8001604:	60bb      	str	r3, [r7, #8]
 8001606:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001608:	2301      	movs	r3, #1
 800160a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800160c:	2300      	movs	r3, #0
 800160e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001610:	2300      	movs	r3, #0
 8001612:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001614:	f107 0310 	add.w	r3, r7, #16
 8001618:	4619      	mov	r1, r3
 800161a:	4808      	ldr	r0, [pc, #32]	@ (800163c <HAL_TIM_Base_MspInit+0x84>)
 800161c:	f000 fb26 	bl	8001c6c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001620:	2200      	movs	r2, #0
 8001622:	2100      	movs	r1, #0
 8001624:	201c      	movs	r0, #28
 8001626:	f000 fa38 	bl	8001a9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800162a:	201c      	movs	r0, #28
 800162c:	f000 fa51 	bl	8001ad2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001630:	bf00      	nop
 8001632:	3720      	adds	r7, #32
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	40021000 	.word	0x40021000
 800163c:	40010800 	.word	0x40010800

08001640 <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* tim_ocHandle)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]

  if(tim_ocHandle->Instance==TIM3)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a16      	ldr	r2, [pc, #88]	@ (80016a8 <HAL_TIM_OC_MspInit+0x68>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d10c      	bne.n	800166c <HAL_TIM_OC_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001652:	4b16      	ldr	r3, [pc, #88]	@ (80016ac <HAL_TIM_OC_MspInit+0x6c>)
 8001654:	69db      	ldr	r3, [r3, #28]
 8001656:	4a15      	ldr	r2, [pc, #84]	@ (80016ac <HAL_TIM_OC_MspInit+0x6c>)
 8001658:	f043 0302 	orr.w	r3, r3, #2
 800165c:	61d3      	str	r3, [r2, #28]
 800165e:	4b13      	ldr	r3, [pc, #76]	@ (80016ac <HAL_TIM_OC_MspInit+0x6c>)
 8001660:	69db      	ldr	r3, [r3, #28]
 8001662:	f003 0302 	and.w	r3, r3, #2
 8001666:	60fb      	str	r3, [r7, #12]
 8001668:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800166a:	e018      	b.n	800169e <HAL_TIM_OC_MspInit+0x5e>
  else if(tim_ocHandle->Instance==TIM4)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a0f      	ldr	r2, [pc, #60]	@ (80016b0 <HAL_TIM_OC_MspInit+0x70>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d113      	bne.n	800169e <HAL_TIM_OC_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001676:	4b0d      	ldr	r3, [pc, #52]	@ (80016ac <HAL_TIM_OC_MspInit+0x6c>)
 8001678:	69db      	ldr	r3, [r3, #28]
 800167a:	4a0c      	ldr	r2, [pc, #48]	@ (80016ac <HAL_TIM_OC_MspInit+0x6c>)
 800167c:	f043 0304 	orr.w	r3, r3, #4
 8001680:	61d3      	str	r3, [r2, #28]
 8001682:	4b0a      	ldr	r3, [pc, #40]	@ (80016ac <HAL_TIM_OC_MspInit+0x6c>)
 8001684:	69db      	ldr	r3, [r3, #28]
 8001686:	f003 0304 	and.w	r3, r3, #4
 800168a:	60bb      	str	r3, [r7, #8]
 800168c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800168e:	2200      	movs	r2, #0
 8001690:	2100      	movs	r1, #0
 8001692:	201e      	movs	r0, #30
 8001694:	f000 fa01 	bl	8001a9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001698:	201e      	movs	r0, #30
 800169a:	f000 fa1a 	bl	8001ad2 <HAL_NVIC_EnableIRQ>
}
 800169e:	bf00      	nop
 80016a0:	3710      	adds	r7, #16
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	40000400 	.word	0x40000400
 80016ac:	40021000 	.word	0x40021000
 80016b0:	40000800 	.word	0x40000800

080016b4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016b8:	4b11      	ldr	r3, [pc, #68]	@ (8001700 <MX_USART2_UART_Init+0x4c>)
 80016ba:	4a12      	ldr	r2, [pc, #72]	@ (8001704 <MX_USART2_UART_Init+0x50>)
 80016bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016be:	4b10      	ldr	r3, [pc, #64]	@ (8001700 <MX_USART2_UART_Init+0x4c>)
 80016c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001700 <MX_USART2_UART_Init+0x4c>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001700 <MX_USART2_UART_Init+0x4c>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001700 <MX_USART2_UART_Init+0x4c>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016d8:	4b09      	ldr	r3, [pc, #36]	@ (8001700 <MX_USART2_UART_Init+0x4c>)
 80016da:	220c      	movs	r2, #12
 80016dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016de:	4b08      	ldr	r3, [pc, #32]	@ (8001700 <MX_USART2_UART_Init+0x4c>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016e4:	4b06      	ldr	r3, [pc, #24]	@ (8001700 <MX_USART2_UART_Init+0x4c>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016ea:	4805      	ldr	r0, [pc, #20]	@ (8001700 <MX_USART2_UART_Init+0x4c>)
 80016ec:	f002 fade 	bl	8003cac <HAL_UART_Init>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80016f6:	f7ff fd49 	bl	800118c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016fa:	bf00      	nop
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	200012d4 	.word	0x200012d4
 8001704:	40004400 	.word	0x40004400

08001708 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b088      	sub	sp, #32
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001710:	f107 0310 	add.w	r3, r7, #16
 8001714:	2200      	movs	r2, #0
 8001716:	601a      	str	r2, [r3, #0]
 8001718:	605a      	str	r2, [r3, #4]
 800171a:	609a      	str	r2, [r3, #8]
 800171c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a19      	ldr	r2, [pc, #100]	@ (8001788 <HAL_UART_MspInit+0x80>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d12b      	bne.n	8001780 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001728:	4b18      	ldr	r3, [pc, #96]	@ (800178c <HAL_UART_MspInit+0x84>)
 800172a:	69db      	ldr	r3, [r3, #28]
 800172c:	4a17      	ldr	r2, [pc, #92]	@ (800178c <HAL_UART_MspInit+0x84>)
 800172e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001732:	61d3      	str	r3, [r2, #28]
 8001734:	4b15      	ldr	r3, [pc, #84]	@ (800178c <HAL_UART_MspInit+0x84>)
 8001736:	69db      	ldr	r3, [r3, #28]
 8001738:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800173c:	60fb      	str	r3, [r7, #12]
 800173e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001740:	4b12      	ldr	r3, [pc, #72]	@ (800178c <HAL_UART_MspInit+0x84>)
 8001742:	699b      	ldr	r3, [r3, #24]
 8001744:	4a11      	ldr	r2, [pc, #68]	@ (800178c <HAL_UART_MspInit+0x84>)
 8001746:	f043 0304 	orr.w	r3, r3, #4
 800174a:	6193      	str	r3, [r2, #24]
 800174c:	4b0f      	ldr	r3, [pc, #60]	@ (800178c <HAL_UART_MspInit+0x84>)
 800174e:	699b      	ldr	r3, [r3, #24]
 8001750:	f003 0304 	and.w	r3, r3, #4
 8001754:	60bb      	str	r3, [r7, #8]
 8001756:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001758:	230c      	movs	r3, #12
 800175a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800175c:	2302      	movs	r3, #2
 800175e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001760:	2302      	movs	r3, #2
 8001762:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001764:	f107 0310 	add.w	r3, r7, #16
 8001768:	4619      	mov	r1, r3
 800176a:	4809      	ldr	r0, [pc, #36]	@ (8001790 <HAL_UART_MspInit+0x88>)
 800176c:	f000 fa7e 	bl	8001c6c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001770:	2200      	movs	r2, #0
 8001772:	2100      	movs	r1, #0
 8001774:	2026      	movs	r0, #38	@ 0x26
 8001776:	f000 f990 	bl	8001a9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800177a:	2026      	movs	r0, #38	@ 0x26
 800177c:	f000 f9a9 	bl	8001ad2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001780:	bf00      	nop
 8001782:	3720      	adds	r7, #32
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	40004400 	.word	0x40004400
 800178c:	40021000 	.word	0x40021000
 8001790:	40010800 	.word	0x40010800

08001794 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001794:	f7ff fdc0 	bl	8001318 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001798:	480b      	ldr	r0, [pc, #44]	@ (80017c8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800179a:	490c      	ldr	r1, [pc, #48]	@ (80017cc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800179c:	4a0c      	ldr	r2, [pc, #48]	@ (80017d0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800179e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017a0:	e002      	b.n	80017a8 <LoopCopyDataInit>

080017a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017a6:	3304      	adds	r3, #4

080017a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017ac:	d3f9      	bcc.n	80017a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ae:	4a09      	ldr	r2, [pc, #36]	@ (80017d4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80017b0:	4c09      	ldr	r4, [pc, #36]	@ (80017d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017b4:	e001      	b.n	80017ba <LoopFillZerobss>

080017b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017b8:	3204      	adds	r2, #4

080017ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017bc:	d3fb      	bcc.n	80017b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017be:	f003 f975 	bl	8004aac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017c2:	f7ff fc41 	bl	8001048 <main>
  bx lr
 80017c6:	4770      	bx	lr
  ldr r0, =_sdata
 80017c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017cc:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80017d0:	080055f4 	.word	0x080055f4
  ldr r2, =_sbss
 80017d4:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80017d8:	20001468 	.word	0x20001468

080017dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017dc:	e7fe      	b.n	80017dc <ADC1_2_IRQHandler>
	...

080017e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017e4:	4b08      	ldr	r3, [pc, #32]	@ (8001808 <HAL_Init+0x28>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a07      	ldr	r2, [pc, #28]	@ (8001808 <HAL_Init+0x28>)
 80017ea:	f043 0310 	orr.w	r3, r3, #16
 80017ee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017f0:	2003      	movs	r0, #3
 80017f2:	f000 f947 	bl	8001a84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017f6:	2000      	movs	r0, #0
 80017f8:	f000 f808 	bl	800180c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017fc:	f7ff fcd2 	bl	80011a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001800:	2300      	movs	r3, #0
}
 8001802:	4618      	mov	r0, r3
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	40022000 	.word	0x40022000

0800180c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001814:	4b12      	ldr	r3, [pc, #72]	@ (8001860 <HAL_InitTick+0x54>)
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	4b12      	ldr	r3, [pc, #72]	@ (8001864 <HAL_InitTick+0x58>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	4619      	mov	r1, r3
 800181e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001822:	fbb3 f3f1 	udiv	r3, r3, r1
 8001826:	fbb2 f3f3 	udiv	r3, r2, r3
 800182a:	4618      	mov	r0, r3
 800182c:	f000 f95f 	bl	8001aee <HAL_SYSTICK_Config>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e00e      	b.n	8001858 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2b0f      	cmp	r3, #15
 800183e:	d80a      	bhi.n	8001856 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001840:	2200      	movs	r2, #0
 8001842:	6879      	ldr	r1, [r7, #4]
 8001844:	f04f 30ff 	mov.w	r0, #4294967295
 8001848:	f000 f927 	bl	8001a9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800184c:	4a06      	ldr	r2, [pc, #24]	@ (8001868 <HAL_InitTick+0x5c>)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001852:	2300      	movs	r3, #0
 8001854:	e000      	b.n	8001858 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
}
 8001858:	4618      	mov	r0, r3
 800185a:	3708      	adds	r7, #8
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	20000008 	.word	0x20000008
 8001864:	20000010 	.word	0x20000010
 8001868:	2000000c 	.word	0x2000000c

0800186c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001870:	4b05      	ldr	r3, [pc, #20]	@ (8001888 <HAL_IncTick+0x1c>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	461a      	mov	r2, r3
 8001876:	4b05      	ldr	r3, [pc, #20]	@ (800188c <HAL_IncTick+0x20>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4413      	add	r3, r2
 800187c:	4a03      	ldr	r2, [pc, #12]	@ (800188c <HAL_IncTick+0x20>)
 800187e:	6013      	str	r3, [r2, #0]
}
 8001880:	bf00      	nop
 8001882:	46bd      	mov	sp, r7
 8001884:	bc80      	pop	{r7}
 8001886:	4770      	bx	lr
 8001888:	20000010 	.word	0x20000010
 800188c:	2000131c 	.word	0x2000131c

08001890 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  return uwTick;
 8001894:	4b02      	ldr	r3, [pc, #8]	@ (80018a0 <HAL_GetTick+0x10>)
 8001896:	681b      	ldr	r3, [r3, #0]
}
 8001898:	4618      	mov	r0, r3
 800189a:	46bd      	mov	sp, r7
 800189c:	bc80      	pop	{r7}
 800189e:	4770      	bx	lr
 80018a0:	2000131c 	.word	0x2000131c

080018a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018ac:	f7ff fff0 	bl	8001890 <HAL_GetTick>
 80018b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018bc:	d005      	beq.n	80018ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018be:	4b0a      	ldr	r3, [pc, #40]	@ (80018e8 <HAL_Delay+0x44>)
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	461a      	mov	r2, r3
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	4413      	add	r3, r2
 80018c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018ca:	bf00      	nop
 80018cc:	f7ff ffe0 	bl	8001890 <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	68fa      	ldr	r2, [r7, #12]
 80018d8:	429a      	cmp	r2, r3
 80018da:	d8f7      	bhi.n	80018cc <HAL_Delay+0x28>
  {
  }
}
 80018dc:	bf00      	nop
 80018de:	bf00      	nop
 80018e0:	3710      	adds	r7, #16
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	20000010 	.word	0x20000010

080018ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b085      	sub	sp, #20
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	f003 0307 	and.w	r3, r3, #7
 80018fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001930 <__NVIC_SetPriorityGrouping+0x44>)
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001902:	68ba      	ldr	r2, [r7, #8]
 8001904:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001908:	4013      	ands	r3, r2
 800190a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001914:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001918:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800191c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800191e:	4a04      	ldr	r2, [pc, #16]	@ (8001930 <__NVIC_SetPriorityGrouping+0x44>)
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	60d3      	str	r3, [r2, #12]
}
 8001924:	bf00      	nop
 8001926:	3714      	adds	r7, #20
 8001928:	46bd      	mov	sp, r7
 800192a:	bc80      	pop	{r7}
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	e000ed00 	.word	0xe000ed00

08001934 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001938:	4b04      	ldr	r3, [pc, #16]	@ (800194c <__NVIC_GetPriorityGrouping+0x18>)
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	0a1b      	lsrs	r3, r3, #8
 800193e:	f003 0307 	and.w	r3, r3, #7
}
 8001942:	4618      	mov	r0, r3
 8001944:	46bd      	mov	sp, r7
 8001946:	bc80      	pop	{r7}
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	e000ed00 	.word	0xe000ed00

08001950 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	4603      	mov	r3, r0
 8001958:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800195a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195e:	2b00      	cmp	r3, #0
 8001960:	db0b      	blt.n	800197a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001962:	79fb      	ldrb	r3, [r7, #7]
 8001964:	f003 021f 	and.w	r2, r3, #31
 8001968:	4906      	ldr	r1, [pc, #24]	@ (8001984 <__NVIC_EnableIRQ+0x34>)
 800196a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196e:	095b      	lsrs	r3, r3, #5
 8001970:	2001      	movs	r0, #1
 8001972:	fa00 f202 	lsl.w	r2, r0, r2
 8001976:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800197a:	bf00      	nop
 800197c:	370c      	adds	r7, #12
 800197e:	46bd      	mov	sp, r7
 8001980:	bc80      	pop	{r7}
 8001982:	4770      	bx	lr
 8001984:	e000e100 	.word	0xe000e100

08001988 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	4603      	mov	r3, r0
 8001990:	6039      	str	r1, [r7, #0]
 8001992:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001994:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001998:	2b00      	cmp	r3, #0
 800199a:	db0a      	blt.n	80019b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	b2da      	uxtb	r2, r3
 80019a0:	490c      	ldr	r1, [pc, #48]	@ (80019d4 <__NVIC_SetPriority+0x4c>)
 80019a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a6:	0112      	lsls	r2, r2, #4
 80019a8:	b2d2      	uxtb	r2, r2
 80019aa:	440b      	add	r3, r1
 80019ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019b0:	e00a      	b.n	80019c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	b2da      	uxtb	r2, r3
 80019b6:	4908      	ldr	r1, [pc, #32]	@ (80019d8 <__NVIC_SetPriority+0x50>)
 80019b8:	79fb      	ldrb	r3, [r7, #7]
 80019ba:	f003 030f 	and.w	r3, r3, #15
 80019be:	3b04      	subs	r3, #4
 80019c0:	0112      	lsls	r2, r2, #4
 80019c2:	b2d2      	uxtb	r2, r2
 80019c4:	440b      	add	r3, r1
 80019c6:	761a      	strb	r2, [r3, #24]
}
 80019c8:	bf00      	nop
 80019ca:	370c      	adds	r7, #12
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bc80      	pop	{r7}
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	e000e100 	.word	0xe000e100
 80019d8:	e000ed00 	.word	0xe000ed00

080019dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019dc:	b480      	push	{r7}
 80019de:	b089      	sub	sp, #36	@ 0x24
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	60f8      	str	r0, [r7, #12]
 80019e4:	60b9      	str	r1, [r7, #8]
 80019e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	f003 0307 	and.w	r3, r3, #7
 80019ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	f1c3 0307 	rsb	r3, r3, #7
 80019f6:	2b04      	cmp	r3, #4
 80019f8:	bf28      	it	cs
 80019fa:	2304      	movcs	r3, #4
 80019fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	3304      	adds	r3, #4
 8001a02:	2b06      	cmp	r3, #6
 8001a04:	d902      	bls.n	8001a0c <NVIC_EncodePriority+0x30>
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	3b03      	subs	r3, #3
 8001a0a:	e000      	b.n	8001a0e <NVIC_EncodePriority+0x32>
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a10:	f04f 32ff 	mov.w	r2, #4294967295
 8001a14:	69bb      	ldr	r3, [r7, #24]
 8001a16:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1a:	43da      	mvns	r2, r3
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	401a      	ands	r2, r3
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a24:	f04f 31ff 	mov.w	r1, #4294967295
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a2e:	43d9      	mvns	r1, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a34:	4313      	orrs	r3, r2
         );
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3724      	adds	r7, #36	@ 0x24
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bc80      	pop	{r7}
 8001a3e:	4770      	bx	lr

08001a40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	3b01      	subs	r3, #1
 8001a4c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a50:	d301      	bcc.n	8001a56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a52:	2301      	movs	r3, #1
 8001a54:	e00f      	b.n	8001a76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a56:	4a0a      	ldr	r2, [pc, #40]	@ (8001a80 <SysTick_Config+0x40>)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	3b01      	subs	r3, #1
 8001a5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a5e:	210f      	movs	r1, #15
 8001a60:	f04f 30ff 	mov.w	r0, #4294967295
 8001a64:	f7ff ff90 	bl	8001988 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a68:	4b05      	ldr	r3, [pc, #20]	@ (8001a80 <SysTick_Config+0x40>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a6e:	4b04      	ldr	r3, [pc, #16]	@ (8001a80 <SysTick_Config+0x40>)
 8001a70:	2207      	movs	r2, #7
 8001a72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a74:	2300      	movs	r3, #0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	e000e010 	.word	0xe000e010

08001a84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f7ff ff2d 	bl	80018ec <__NVIC_SetPriorityGrouping>
}
 8001a92:	bf00      	nop
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}

08001a9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a9a:	b580      	push	{r7, lr}
 8001a9c:	b086      	sub	sp, #24
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	60b9      	str	r1, [r7, #8]
 8001aa4:	607a      	str	r2, [r7, #4]
 8001aa6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001aac:	f7ff ff42 	bl	8001934 <__NVIC_GetPriorityGrouping>
 8001ab0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ab2:	687a      	ldr	r2, [r7, #4]
 8001ab4:	68b9      	ldr	r1, [r7, #8]
 8001ab6:	6978      	ldr	r0, [r7, #20]
 8001ab8:	f7ff ff90 	bl	80019dc <NVIC_EncodePriority>
 8001abc:	4602      	mov	r2, r0
 8001abe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ac2:	4611      	mov	r1, r2
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7ff ff5f 	bl	8001988 <__NVIC_SetPriority>
}
 8001aca:	bf00      	nop
 8001acc:	3718      	adds	r7, #24
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b082      	sub	sp, #8
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	4603      	mov	r3, r0
 8001ada:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001adc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7ff ff35 	bl	8001950 <__NVIC_EnableIRQ>
}
 8001ae6:	bf00      	nop
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b082      	sub	sp, #8
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f7ff ffa2 	bl	8001a40 <SysTick_Config>
 8001afc:	4603      	mov	r3, r0
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}

08001b06 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b06:	b480      	push	{r7}
 8001b08:	b085      	sub	sp, #20
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d008      	beq.n	8001b30 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2204      	movs	r2, #4
 8001b22:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2200      	movs	r2, #0
 8001b28:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e020      	b.n	8001b72 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f022 020e 	bic.w	r2, r2, #14
 8001b3e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f022 0201 	bic.w	r2, r2, #1
 8001b4e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b58:	2101      	movs	r1, #1
 8001b5a:	fa01 f202 	lsl.w	r2, r1, r2
 8001b5e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2201      	movs	r2, #1
 8001b64:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3714      	adds	r7, #20
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bc80      	pop	{r7}
 8001b7a:	4770      	bx	lr

08001b7c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b84:	2300      	movs	r3, #0
 8001b86:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d005      	beq.n	8001ba0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2204      	movs	r2, #4
 8001b98:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	73fb      	strb	r3, [r7, #15]
 8001b9e:	e051      	b.n	8001c44 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f022 020e 	bic.w	r2, r2, #14
 8001bae:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f022 0201 	bic.w	r2, r2, #1
 8001bbe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a22      	ldr	r2, [pc, #136]	@ (8001c50 <HAL_DMA_Abort_IT+0xd4>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d029      	beq.n	8001c1e <HAL_DMA_Abort_IT+0xa2>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a21      	ldr	r2, [pc, #132]	@ (8001c54 <HAL_DMA_Abort_IT+0xd8>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d022      	beq.n	8001c1a <HAL_DMA_Abort_IT+0x9e>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a1f      	ldr	r2, [pc, #124]	@ (8001c58 <HAL_DMA_Abort_IT+0xdc>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d01a      	beq.n	8001c14 <HAL_DMA_Abort_IT+0x98>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a1e      	ldr	r2, [pc, #120]	@ (8001c5c <HAL_DMA_Abort_IT+0xe0>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d012      	beq.n	8001c0e <HAL_DMA_Abort_IT+0x92>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a1c      	ldr	r2, [pc, #112]	@ (8001c60 <HAL_DMA_Abort_IT+0xe4>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d00a      	beq.n	8001c08 <HAL_DMA_Abort_IT+0x8c>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a1b      	ldr	r2, [pc, #108]	@ (8001c64 <HAL_DMA_Abort_IT+0xe8>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d102      	bne.n	8001c02 <HAL_DMA_Abort_IT+0x86>
 8001bfc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001c00:	e00e      	b.n	8001c20 <HAL_DMA_Abort_IT+0xa4>
 8001c02:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001c06:	e00b      	b.n	8001c20 <HAL_DMA_Abort_IT+0xa4>
 8001c08:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001c0c:	e008      	b.n	8001c20 <HAL_DMA_Abort_IT+0xa4>
 8001c0e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c12:	e005      	b.n	8001c20 <HAL_DMA_Abort_IT+0xa4>
 8001c14:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c18:	e002      	b.n	8001c20 <HAL_DMA_Abort_IT+0xa4>
 8001c1a:	2310      	movs	r3, #16
 8001c1c:	e000      	b.n	8001c20 <HAL_DMA_Abort_IT+0xa4>
 8001c1e:	2301      	movs	r3, #1
 8001c20:	4a11      	ldr	r2, [pc, #68]	@ (8001c68 <HAL_DMA_Abort_IT+0xec>)
 8001c22:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2201      	movs	r2, #1
 8001c28:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d003      	beq.n	8001c44 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	4798      	blx	r3
    } 
  }
  return status;
 8001c44:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3710      	adds	r7, #16
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	40020008 	.word	0x40020008
 8001c54:	4002001c 	.word	0x4002001c
 8001c58:	40020030 	.word	0x40020030
 8001c5c:	40020044 	.word	0x40020044
 8001c60:	40020058 	.word	0x40020058
 8001c64:	4002006c 	.word	0x4002006c
 8001c68:	40020000 	.word	0x40020000

08001c6c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b08b      	sub	sp, #44	@ 0x2c
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c76:	2300      	movs	r3, #0
 8001c78:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c7e:	e169      	b.n	8001f54 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c80:	2201      	movs	r2, #1
 8001c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c84:	fa02 f303 	lsl.w	r3, r2, r3
 8001c88:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	69fa      	ldr	r2, [r7, #28]
 8001c90:	4013      	ands	r3, r2
 8001c92:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	f040 8158 	bne.w	8001f4e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	4a9a      	ldr	r2, [pc, #616]	@ (8001f0c <HAL_GPIO_Init+0x2a0>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d05e      	beq.n	8001d66 <HAL_GPIO_Init+0xfa>
 8001ca8:	4a98      	ldr	r2, [pc, #608]	@ (8001f0c <HAL_GPIO_Init+0x2a0>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d875      	bhi.n	8001d9a <HAL_GPIO_Init+0x12e>
 8001cae:	4a98      	ldr	r2, [pc, #608]	@ (8001f10 <HAL_GPIO_Init+0x2a4>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d058      	beq.n	8001d66 <HAL_GPIO_Init+0xfa>
 8001cb4:	4a96      	ldr	r2, [pc, #600]	@ (8001f10 <HAL_GPIO_Init+0x2a4>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d86f      	bhi.n	8001d9a <HAL_GPIO_Init+0x12e>
 8001cba:	4a96      	ldr	r2, [pc, #600]	@ (8001f14 <HAL_GPIO_Init+0x2a8>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d052      	beq.n	8001d66 <HAL_GPIO_Init+0xfa>
 8001cc0:	4a94      	ldr	r2, [pc, #592]	@ (8001f14 <HAL_GPIO_Init+0x2a8>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d869      	bhi.n	8001d9a <HAL_GPIO_Init+0x12e>
 8001cc6:	4a94      	ldr	r2, [pc, #592]	@ (8001f18 <HAL_GPIO_Init+0x2ac>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d04c      	beq.n	8001d66 <HAL_GPIO_Init+0xfa>
 8001ccc:	4a92      	ldr	r2, [pc, #584]	@ (8001f18 <HAL_GPIO_Init+0x2ac>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d863      	bhi.n	8001d9a <HAL_GPIO_Init+0x12e>
 8001cd2:	4a92      	ldr	r2, [pc, #584]	@ (8001f1c <HAL_GPIO_Init+0x2b0>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d046      	beq.n	8001d66 <HAL_GPIO_Init+0xfa>
 8001cd8:	4a90      	ldr	r2, [pc, #576]	@ (8001f1c <HAL_GPIO_Init+0x2b0>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d85d      	bhi.n	8001d9a <HAL_GPIO_Init+0x12e>
 8001cde:	2b12      	cmp	r3, #18
 8001ce0:	d82a      	bhi.n	8001d38 <HAL_GPIO_Init+0xcc>
 8001ce2:	2b12      	cmp	r3, #18
 8001ce4:	d859      	bhi.n	8001d9a <HAL_GPIO_Init+0x12e>
 8001ce6:	a201      	add	r2, pc, #4	@ (adr r2, 8001cec <HAL_GPIO_Init+0x80>)
 8001ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cec:	08001d67 	.word	0x08001d67
 8001cf0:	08001d41 	.word	0x08001d41
 8001cf4:	08001d53 	.word	0x08001d53
 8001cf8:	08001d95 	.word	0x08001d95
 8001cfc:	08001d9b 	.word	0x08001d9b
 8001d00:	08001d9b 	.word	0x08001d9b
 8001d04:	08001d9b 	.word	0x08001d9b
 8001d08:	08001d9b 	.word	0x08001d9b
 8001d0c:	08001d9b 	.word	0x08001d9b
 8001d10:	08001d9b 	.word	0x08001d9b
 8001d14:	08001d9b 	.word	0x08001d9b
 8001d18:	08001d9b 	.word	0x08001d9b
 8001d1c:	08001d9b 	.word	0x08001d9b
 8001d20:	08001d9b 	.word	0x08001d9b
 8001d24:	08001d9b 	.word	0x08001d9b
 8001d28:	08001d9b 	.word	0x08001d9b
 8001d2c:	08001d9b 	.word	0x08001d9b
 8001d30:	08001d49 	.word	0x08001d49
 8001d34:	08001d5d 	.word	0x08001d5d
 8001d38:	4a79      	ldr	r2, [pc, #484]	@ (8001f20 <HAL_GPIO_Init+0x2b4>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d013      	beq.n	8001d66 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d3e:	e02c      	b.n	8001d9a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	623b      	str	r3, [r7, #32]
          break;
 8001d46:	e029      	b.n	8001d9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	3304      	adds	r3, #4
 8001d4e:	623b      	str	r3, [r7, #32]
          break;
 8001d50:	e024      	b.n	8001d9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	68db      	ldr	r3, [r3, #12]
 8001d56:	3308      	adds	r3, #8
 8001d58:	623b      	str	r3, [r7, #32]
          break;
 8001d5a:	e01f      	b.n	8001d9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	330c      	adds	r3, #12
 8001d62:	623b      	str	r3, [r7, #32]
          break;
 8001d64:	e01a      	b.n	8001d9c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d102      	bne.n	8001d74 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001d6e:	2304      	movs	r3, #4
 8001d70:	623b      	str	r3, [r7, #32]
          break;
 8001d72:	e013      	b.n	8001d9c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d105      	bne.n	8001d88 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d7c:	2308      	movs	r3, #8
 8001d7e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	69fa      	ldr	r2, [r7, #28]
 8001d84:	611a      	str	r2, [r3, #16]
          break;
 8001d86:	e009      	b.n	8001d9c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d88:	2308      	movs	r3, #8
 8001d8a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	69fa      	ldr	r2, [r7, #28]
 8001d90:	615a      	str	r2, [r3, #20]
          break;
 8001d92:	e003      	b.n	8001d9c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d94:	2300      	movs	r3, #0
 8001d96:	623b      	str	r3, [r7, #32]
          break;
 8001d98:	e000      	b.n	8001d9c <HAL_GPIO_Init+0x130>
          break;
 8001d9a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d9c:	69bb      	ldr	r3, [r7, #24]
 8001d9e:	2bff      	cmp	r3, #255	@ 0xff
 8001da0:	d801      	bhi.n	8001da6 <HAL_GPIO_Init+0x13a>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	e001      	b.n	8001daa <HAL_GPIO_Init+0x13e>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	3304      	adds	r3, #4
 8001daa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001dac:	69bb      	ldr	r3, [r7, #24]
 8001dae:	2bff      	cmp	r3, #255	@ 0xff
 8001db0:	d802      	bhi.n	8001db8 <HAL_GPIO_Init+0x14c>
 8001db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	e002      	b.n	8001dbe <HAL_GPIO_Init+0x152>
 8001db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dba:	3b08      	subs	r3, #8
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	210f      	movs	r1, #15
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dcc:	43db      	mvns	r3, r3
 8001dce:	401a      	ands	r2, r3
 8001dd0:	6a39      	ldr	r1, [r7, #32]
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	fa01 f303 	lsl.w	r3, r1, r3
 8001dd8:	431a      	orrs	r2, r3
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	f000 80b1 	beq.w	8001f4e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001dec:	4b4d      	ldr	r3, [pc, #308]	@ (8001f24 <HAL_GPIO_Init+0x2b8>)
 8001dee:	699b      	ldr	r3, [r3, #24]
 8001df0:	4a4c      	ldr	r2, [pc, #304]	@ (8001f24 <HAL_GPIO_Init+0x2b8>)
 8001df2:	f043 0301 	orr.w	r3, r3, #1
 8001df6:	6193      	str	r3, [r2, #24]
 8001df8:	4b4a      	ldr	r3, [pc, #296]	@ (8001f24 <HAL_GPIO_Init+0x2b8>)
 8001dfa:	699b      	ldr	r3, [r3, #24]
 8001dfc:	f003 0301 	and.w	r3, r3, #1
 8001e00:	60bb      	str	r3, [r7, #8]
 8001e02:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e04:	4a48      	ldr	r2, [pc, #288]	@ (8001f28 <HAL_GPIO_Init+0x2bc>)
 8001e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e08:	089b      	lsrs	r3, r3, #2
 8001e0a:	3302      	adds	r3, #2
 8001e0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e10:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e14:	f003 0303 	and.w	r3, r3, #3
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	220f      	movs	r2, #15
 8001e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e20:	43db      	mvns	r3, r3
 8001e22:	68fa      	ldr	r2, [r7, #12]
 8001e24:	4013      	ands	r3, r2
 8001e26:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	4a40      	ldr	r2, [pc, #256]	@ (8001f2c <HAL_GPIO_Init+0x2c0>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d013      	beq.n	8001e58 <HAL_GPIO_Init+0x1ec>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	4a3f      	ldr	r2, [pc, #252]	@ (8001f30 <HAL_GPIO_Init+0x2c4>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d00d      	beq.n	8001e54 <HAL_GPIO_Init+0x1e8>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	4a3e      	ldr	r2, [pc, #248]	@ (8001f34 <HAL_GPIO_Init+0x2c8>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d007      	beq.n	8001e50 <HAL_GPIO_Init+0x1e4>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	4a3d      	ldr	r2, [pc, #244]	@ (8001f38 <HAL_GPIO_Init+0x2cc>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d101      	bne.n	8001e4c <HAL_GPIO_Init+0x1e0>
 8001e48:	2303      	movs	r3, #3
 8001e4a:	e006      	b.n	8001e5a <HAL_GPIO_Init+0x1ee>
 8001e4c:	2304      	movs	r3, #4
 8001e4e:	e004      	b.n	8001e5a <HAL_GPIO_Init+0x1ee>
 8001e50:	2302      	movs	r3, #2
 8001e52:	e002      	b.n	8001e5a <HAL_GPIO_Init+0x1ee>
 8001e54:	2301      	movs	r3, #1
 8001e56:	e000      	b.n	8001e5a <HAL_GPIO_Init+0x1ee>
 8001e58:	2300      	movs	r3, #0
 8001e5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e5c:	f002 0203 	and.w	r2, r2, #3
 8001e60:	0092      	lsls	r2, r2, #2
 8001e62:	4093      	lsls	r3, r2
 8001e64:	68fa      	ldr	r2, [r7, #12]
 8001e66:	4313      	orrs	r3, r2
 8001e68:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001e6a:	492f      	ldr	r1, [pc, #188]	@ (8001f28 <HAL_GPIO_Init+0x2bc>)
 8001e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e6e:	089b      	lsrs	r3, r3, #2
 8001e70:	3302      	adds	r3, #2
 8001e72:	68fa      	ldr	r2, [r7, #12]
 8001e74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d006      	beq.n	8001e92 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e84:	4b2d      	ldr	r3, [pc, #180]	@ (8001f3c <HAL_GPIO_Init+0x2d0>)
 8001e86:	689a      	ldr	r2, [r3, #8]
 8001e88:	492c      	ldr	r1, [pc, #176]	@ (8001f3c <HAL_GPIO_Init+0x2d0>)
 8001e8a:	69bb      	ldr	r3, [r7, #24]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	608b      	str	r3, [r1, #8]
 8001e90:	e006      	b.n	8001ea0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e92:	4b2a      	ldr	r3, [pc, #168]	@ (8001f3c <HAL_GPIO_Init+0x2d0>)
 8001e94:	689a      	ldr	r2, [r3, #8]
 8001e96:	69bb      	ldr	r3, [r7, #24]
 8001e98:	43db      	mvns	r3, r3
 8001e9a:	4928      	ldr	r1, [pc, #160]	@ (8001f3c <HAL_GPIO_Init+0x2d0>)
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d006      	beq.n	8001eba <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001eac:	4b23      	ldr	r3, [pc, #140]	@ (8001f3c <HAL_GPIO_Init+0x2d0>)
 8001eae:	68da      	ldr	r2, [r3, #12]
 8001eb0:	4922      	ldr	r1, [pc, #136]	@ (8001f3c <HAL_GPIO_Init+0x2d0>)
 8001eb2:	69bb      	ldr	r3, [r7, #24]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	60cb      	str	r3, [r1, #12]
 8001eb8:	e006      	b.n	8001ec8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001eba:	4b20      	ldr	r3, [pc, #128]	@ (8001f3c <HAL_GPIO_Init+0x2d0>)
 8001ebc:	68da      	ldr	r2, [r3, #12]
 8001ebe:	69bb      	ldr	r3, [r7, #24]
 8001ec0:	43db      	mvns	r3, r3
 8001ec2:	491e      	ldr	r1, [pc, #120]	@ (8001f3c <HAL_GPIO_Init+0x2d0>)
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d006      	beq.n	8001ee2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ed4:	4b19      	ldr	r3, [pc, #100]	@ (8001f3c <HAL_GPIO_Init+0x2d0>)
 8001ed6:	685a      	ldr	r2, [r3, #4]
 8001ed8:	4918      	ldr	r1, [pc, #96]	@ (8001f3c <HAL_GPIO_Init+0x2d0>)
 8001eda:	69bb      	ldr	r3, [r7, #24]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	604b      	str	r3, [r1, #4]
 8001ee0:	e006      	b.n	8001ef0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ee2:	4b16      	ldr	r3, [pc, #88]	@ (8001f3c <HAL_GPIO_Init+0x2d0>)
 8001ee4:	685a      	ldr	r2, [r3, #4]
 8001ee6:	69bb      	ldr	r3, [r7, #24]
 8001ee8:	43db      	mvns	r3, r3
 8001eea:	4914      	ldr	r1, [pc, #80]	@ (8001f3c <HAL_GPIO_Init+0x2d0>)
 8001eec:	4013      	ands	r3, r2
 8001eee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d021      	beq.n	8001f40 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001efc:	4b0f      	ldr	r3, [pc, #60]	@ (8001f3c <HAL_GPIO_Init+0x2d0>)
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	490e      	ldr	r1, [pc, #56]	@ (8001f3c <HAL_GPIO_Init+0x2d0>)
 8001f02:	69bb      	ldr	r3, [r7, #24]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	600b      	str	r3, [r1, #0]
 8001f08:	e021      	b.n	8001f4e <HAL_GPIO_Init+0x2e2>
 8001f0a:	bf00      	nop
 8001f0c:	10320000 	.word	0x10320000
 8001f10:	10310000 	.word	0x10310000
 8001f14:	10220000 	.word	0x10220000
 8001f18:	10210000 	.word	0x10210000
 8001f1c:	10120000 	.word	0x10120000
 8001f20:	10110000 	.word	0x10110000
 8001f24:	40021000 	.word	0x40021000
 8001f28:	40010000 	.word	0x40010000
 8001f2c:	40010800 	.word	0x40010800
 8001f30:	40010c00 	.word	0x40010c00
 8001f34:	40011000 	.word	0x40011000
 8001f38:	40011400 	.word	0x40011400
 8001f3c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f40:	4b0b      	ldr	r3, [pc, #44]	@ (8001f70 <HAL_GPIO_Init+0x304>)
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	43db      	mvns	r3, r3
 8001f48:	4909      	ldr	r1, [pc, #36]	@ (8001f70 <HAL_GPIO_Init+0x304>)
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f50:	3301      	adds	r3, #1
 8001f52:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f5a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	f47f ae8e 	bne.w	8001c80 <HAL_GPIO_Init+0x14>
  }
}
 8001f64:	bf00      	nop
 8001f66:	bf00      	nop
 8001f68:	372c      	adds	r7, #44	@ 0x2c
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bc80      	pop	{r7}
 8001f6e:	4770      	bx	lr
 8001f70:	40010400 	.word	0x40010400

08001f74 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b085      	sub	sp, #20
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	689a      	ldr	r2, [r3, #8]
 8001f84:	887b      	ldrh	r3, [r7, #2]
 8001f86:	4013      	ands	r3, r2
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d002      	beq.n	8001f92 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	73fb      	strb	r3, [r7, #15]
 8001f90:	e001      	b.n	8001f96 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f92:	2300      	movs	r3, #0
 8001f94:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f96:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3714      	adds	r7, #20
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bc80      	pop	{r7}
 8001fa0:	4770      	bx	lr

08001fa2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fa2:	b480      	push	{r7}
 8001fa4:	b083      	sub	sp, #12
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	6078      	str	r0, [r7, #4]
 8001faa:	460b      	mov	r3, r1
 8001fac:	807b      	strh	r3, [r7, #2]
 8001fae:	4613      	mov	r3, r2
 8001fb0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001fb2:	787b      	ldrb	r3, [r7, #1]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d003      	beq.n	8001fc0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fb8:	887a      	ldrh	r2, [r7, #2]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001fbe:	e003      	b.n	8001fc8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001fc0:	887b      	ldrh	r3, [r7, #2]
 8001fc2:	041a      	lsls	r2, r3, #16
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	611a      	str	r2, [r3, #16]
}
 8001fc8:	bf00      	nop
 8001fca:	370c      	adds	r7, #12
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bc80      	pop	{r7}
 8001fd0:	4770      	bx	lr
	...

08001fd4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	4603      	mov	r3, r0
 8001fdc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001fde:	4b08      	ldr	r3, [pc, #32]	@ (8002000 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fe0:	695a      	ldr	r2, [r3, #20]
 8001fe2:	88fb      	ldrh	r3, [r7, #6]
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d006      	beq.n	8001ff8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001fea:	4a05      	ldr	r2, [pc, #20]	@ (8002000 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fec:	88fb      	ldrh	r3, [r7, #6]
 8001fee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ff0:	88fb      	ldrh	r3, [r7, #6]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f000 f806 	bl	8002004 <HAL_GPIO_EXTI_Callback>
  }
}
 8001ff8:	bf00      	nop
 8001ffa:	3708      	adds	r7, #8
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	40010400 	.word	0x40010400

08002004 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	4603      	mov	r3, r0
 800200c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800200e:	bf00      	nop
 8002010:	370c      	adds	r7, #12
 8002012:	46bd      	mov	sp, r7
 8002014:	bc80      	pop	{r7}
 8002016:	4770      	bx	lr

08002018 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b086      	sub	sp, #24
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d101      	bne.n	800202a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e272      	b.n	8002510 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0301 	and.w	r3, r3, #1
 8002032:	2b00      	cmp	r3, #0
 8002034:	f000 8087 	beq.w	8002146 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002038:	4b92      	ldr	r3, [pc, #584]	@ (8002284 <HAL_RCC_OscConfig+0x26c>)
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f003 030c 	and.w	r3, r3, #12
 8002040:	2b04      	cmp	r3, #4
 8002042:	d00c      	beq.n	800205e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002044:	4b8f      	ldr	r3, [pc, #572]	@ (8002284 <HAL_RCC_OscConfig+0x26c>)
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f003 030c 	and.w	r3, r3, #12
 800204c:	2b08      	cmp	r3, #8
 800204e:	d112      	bne.n	8002076 <HAL_RCC_OscConfig+0x5e>
 8002050:	4b8c      	ldr	r3, [pc, #560]	@ (8002284 <HAL_RCC_OscConfig+0x26c>)
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002058:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800205c:	d10b      	bne.n	8002076 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800205e:	4b89      	ldr	r3, [pc, #548]	@ (8002284 <HAL_RCC_OscConfig+0x26c>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d06c      	beq.n	8002144 <HAL_RCC_OscConfig+0x12c>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d168      	bne.n	8002144 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e24c      	b.n	8002510 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800207e:	d106      	bne.n	800208e <HAL_RCC_OscConfig+0x76>
 8002080:	4b80      	ldr	r3, [pc, #512]	@ (8002284 <HAL_RCC_OscConfig+0x26c>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a7f      	ldr	r2, [pc, #508]	@ (8002284 <HAL_RCC_OscConfig+0x26c>)
 8002086:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800208a:	6013      	str	r3, [r2, #0]
 800208c:	e02e      	b.n	80020ec <HAL_RCC_OscConfig+0xd4>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d10c      	bne.n	80020b0 <HAL_RCC_OscConfig+0x98>
 8002096:	4b7b      	ldr	r3, [pc, #492]	@ (8002284 <HAL_RCC_OscConfig+0x26c>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a7a      	ldr	r2, [pc, #488]	@ (8002284 <HAL_RCC_OscConfig+0x26c>)
 800209c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020a0:	6013      	str	r3, [r2, #0]
 80020a2:	4b78      	ldr	r3, [pc, #480]	@ (8002284 <HAL_RCC_OscConfig+0x26c>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a77      	ldr	r2, [pc, #476]	@ (8002284 <HAL_RCC_OscConfig+0x26c>)
 80020a8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020ac:	6013      	str	r3, [r2, #0]
 80020ae:	e01d      	b.n	80020ec <HAL_RCC_OscConfig+0xd4>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80020b8:	d10c      	bne.n	80020d4 <HAL_RCC_OscConfig+0xbc>
 80020ba:	4b72      	ldr	r3, [pc, #456]	@ (8002284 <HAL_RCC_OscConfig+0x26c>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a71      	ldr	r2, [pc, #452]	@ (8002284 <HAL_RCC_OscConfig+0x26c>)
 80020c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020c4:	6013      	str	r3, [r2, #0]
 80020c6:	4b6f      	ldr	r3, [pc, #444]	@ (8002284 <HAL_RCC_OscConfig+0x26c>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a6e      	ldr	r2, [pc, #440]	@ (8002284 <HAL_RCC_OscConfig+0x26c>)
 80020cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020d0:	6013      	str	r3, [r2, #0]
 80020d2:	e00b      	b.n	80020ec <HAL_RCC_OscConfig+0xd4>
 80020d4:	4b6b      	ldr	r3, [pc, #428]	@ (8002284 <HAL_RCC_OscConfig+0x26c>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a6a      	ldr	r2, [pc, #424]	@ (8002284 <HAL_RCC_OscConfig+0x26c>)
 80020da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020de:	6013      	str	r3, [r2, #0]
 80020e0:	4b68      	ldr	r3, [pc, #416]	@ (8002284 <HAL_RCC_OscConfig+0x26c>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a67      	ldr	r2, [pc, #412]	@ (8002284 <HAL_RCC_OscConfig+0x26c>)
 80020e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020ea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d013      	beq.n	800211c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f4:	f7ff fbcc 	bl	8001890 <HAL_GetTick>
 80020f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020fa:	e008      	b.n	800210e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020fc:	f7ff fbc8 	bl	8001890 <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	2b64      	cmp	r3, #100	@ 0x64
 8002108:	d901      	bls.n	800210e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e200      	b.n	8002510 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800210e:	4b5d      	ldr	r3, [pc, #372]	@ (8002284 <HAL_RCC_OscConfig+0x26c>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d0f0      	beq.n	80020fc <HAL_RCC_OscConfig+0xe4>
 800211a:	e014      	b.n	8002146 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800211c:	f7ff fbb8 	bl	8001890 <HAL_GetTick>
 8002120:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002122:	e008      	b.n	8002136 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002124:	f7ff fbb4 	bl	8001890 <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	2b64      	cmp	r3, #100	@ 0x64
 8002130:	d901      	bls.n	8002136 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e1ec      	b.n	8002510 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002136:	4b53      	ldr	r3, [pc, #332]	@ (8002284 <HAL_RCC_OscConfig+0x26c>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d1f0      	bne.n	8002124 <HAL_RCC_OscConfig+0x10c>
 8002142:	e000      	b.n	8002146 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002144:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0302 	and.w	r3, r3, #2
 800214e:	2b00      	cmp	r3, #0
 8002150:	d063      	beq.n	800221a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002152:	4b4c      	ldr	r3, [pc, #304]	@ (8002284 <HAL_RCC_OscConfig+0x26c>)
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f003 030c 	and.w	r3, r3, #12
 800215a:	2b00      	cmp	r3, #0
 800215c:	d00b      	beq.n	8002176 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800215e:	4b49      	ldr	r3, [pc, #292]	@ (8002284 <HAL_RCC_OscConfig+0x26c>)
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	f003 030c 	and.w	r3, r3, #12
 8002166:	2b08      	cmp	r3, #8
 8002168:	d11c      	bne.n	80021a4 <HAL_RCC_OscConfig+0x18c>
 800216a:	4b46      	ldr	r3, [pc, #280]	@ (8002284 <HAL_RCC_OscConfig+0x26c>)
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d116      	bne.n	80021a4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002176:	4b43      	ldr	r3, [pc, #268]	@ (8002284 <HAL_RCC_OscConfig+0x26c>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0302 	and.w	r3, r3, #2
 800217e:	2b00      	cmp	r3, #0
 8002180:	d005      	beq.n	800218e <HAL_RCC_OscConfig+0x176>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	691b      	ldr	r3, [r3, #16]
 8002186:	2b01      	cmp	r3, #1
 8002188:	d001      	beq.n	800218e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e1c0      	b.n	8002510 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800218e:	4b3d      	ldr	r3, [pc, #244]	@ (8002284 <HAL_RCC_OscConfig+0x26c>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	695b      	ldr	r3, [r3, #20]
 800219a:	00db      	lsls	r3, r3, #3
 800219c:	4939      	ldr	r1, [pc, #228]	@ (8002284 <HAL_RCC_OscConfig+0x26c>)
 800219e:	4313      	orrs	r3, r2
 80021a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021a2:	e03a      	b.n	800221a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	691b      	ldr	r3, [r3, #16]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d020      	beq.n	80021ee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021ac:	4b36      	ldr	r3, [pc, #216]	@ (8002288 <HAL_RCC_OscConfig+0x270>)
 80021ae:	2201      	movs	r2, #1
 80021b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b2:	f7ff fb6d 	bl	8001890 <HAL_GetTick>
 80021b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021b8:	e008      	b.n	80021cc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021ba:	f7ff fb69 	bl	8001890 <HAL_GetTick>
 80021be:	4602      	mov	r2, r0
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d901      	bls.n	80021cc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e1a1      	b.n	8002510 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021cc:	4b2d      	ldr	r3, [pc, #180]	@ (8002284 <HAL_RCC_OscConfig+0x26c>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0302 	and.w	r3, r3, #2
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d0f0      	beq.n	80021ba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021d8:	4b2a      	ldr	r3, [pc, #168]	@ (8002284 <HAL_RCC_OscConfig+0x26c>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	695b      	ldr	r3, [r3, #20]
 80021e4:	00db      	lsls	r3, r3, #3
 80021e6:	4927      	ldr	r1, [pc, #156]	@ (8002284 <HAL_RCC_OscConfig+0x26c>)
 80021e8:	4313      	orrs	r3, r2
 80021ea:	600b      	str	r3, [r1, #0]
 80021ec:	e015      	b.n	800221a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021ee:	4b26      	ldr	r3, [pc, #152]	@ (8002288 <HAL_RCC_OscConfig+0x270>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f4:	f7ff fb4c 	bl	8001890 <HAL_GetTick>
 80021f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021fa:	e008      	b.n	800220e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021fc:	f7ff fb48 	bl	8001890 <HAL_GetTick>
 8002200:	4602      	mov	r2, r0
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	2b02      	cmp	r3, #2
 8002208:	d901      	bls.n	800220e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e180      	b.n	8002510 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800220e:	4b1d      	ldr	r3, [pc, #116]	@ (8002284 <HAL_RCC_OscConfig+0x26c>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0302 	and.w	r3, r3, #2
 8002216:	2b00      	cmp	r3, #0
 8002218:	d1f0      	bne.n	80021fc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0308 	and.w	r3, r3, #8
 8002222:	2b00      	cmp	r3, #0
 8002224:	d03a      	beq.n	800229c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	699b      	ldr	r3, [r3, #24]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d019      	beq.n	8002262 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800222e:	4b17      	ldr	r3, [pc, #92]	@ (800228c <HAL_RCC_OscConfig+0x274>)
 8002230:	2201      	movs	r2, #1
 8002232:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002234:	f7ff fb2c 	bl	8001890 <HAL_GetTick>
 8002238:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800223a:	e008      	b.n	800224e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800223c:	f7ff fb28 	bl	8001890 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	2b02      	cmp	r3, #2
 8002248:	d901      	bls.n	800224e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e160      	b.n	8002510 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800224e:	4b0d      	ldr	r3, [pc, #52]	@ (8002284 <HAL_RCC_OscConfig+0x26c>)
 8002250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002252:	f003 0302 	and.w	r3, r3, #2
 8002256:	2b00      	cmp	r3, #0
 8002258:	d0f0      	beq.n	800223c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800225a:	2001      	movs	r0, #1
 800225c:	f000 face 	bl	80027fc <RCC_Delay>
 8002260:	e01c      	b.n	800229c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002262:	4b0a      	ldr	r3, [pc, #40]	@ (800228c <HAL_RCC_OscConfig+0x274>)
 8002264:	2200      	movs	r2, #0
 8002266:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002268:	f7ff fb12 	bl	8001890 <HAL_GetTick>
 800226c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800226e:	e00f      	b.n	8002290 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002270:	f7ff fb0e 	bl	8001890 <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	2b02      	cmp	r3, #2
 800227c:	d908      	bls.n	8002290 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e146      	b.n	8002510 <HAL_RCC_OscConfig+0x4f8>
 8002282:	bf00      	nop
 8002284:	40021000 	.word	0x40021000
 8002288:	42420000 	.word	0x42420000
 800228c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002290:	4b92      	ldr	r3, [pc, #584]	@ (80024dc <HAL_RCC_OscConfig+0x4c4>)
 8002292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002294:	f003 0302 	and.w	r3, r3, #2
 8002298:	2b00      	cmp	r3, #0
 800229a:	d1e9      	bne.n	8002270 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0304 	and.w	r3, r3, #4
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	f000 80a6 	beq.w	80023f6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022aa:	2300      	movs	r3, #0
 80022ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022ae:	4b8b      	ldr	r3, [pc, #556]	@ (80024dc <HAL_RCC_OscConfig+0x4c4>)
 80022b0:	69db      	ldr	r3, [r3, #28]
 80022b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d10d      	bne.n	80022d6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022ba:	4b88      	ldr	r3, [pc, #544]	@ (80024dc <HAL_RCC_OscConfig+0x4c4>)
 80022bc:	69db      	ldr	r3, [r3, #28]
 80022be:	4a87      	ldr	r2, [pc, #540]	@ (80024dc <HAL_RCC_OscConfig+0x4c4>)
 80022c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022c4:	61d3      	str	r3, [r2, #28]
 80022c6:	4b85      	ldr	r3, [pc, #532]	@ (80024dc <HAL_RCC_OscConfig+0x4c4>)
 80022c8:	69db      	ldr	r3, [r3, #28]
 80022ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022ce:	60bb      	str	r3, [r7, #8]
 80022d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022d2:	2301      	movs	r3, #1
 80022d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022d6:	4b82      	ldr	r3, [pc, #520]	@ (80024e0 <HAL_RCC_OscConfig+0x4c8>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d118      	bne.n	8002314 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022e2:	4b7f      	ldr	r3, [pc, #508]	@ (80024e0 <HAL_RCC_OscConfig+0x4c8>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a7e      	ldr	r2, [pc, #504]	@ (80024e0 <HAL_RCC_OscConfig+0x4c8>)
 80022e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022ee:	f7ff facf 	bl	8001890 <HAL_GetTick>
 80022f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022f4:	e008      	b.n	8002308 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022f6:	f7ff facb 	bl	8001890 <HAL_GetTick>
 80022fa:	4602      	mov	r2, r0
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	2b64      	cmp	r3, #100	@ 0x64
 8002302:	d901      	bls.n	8002308 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002304:	2303      	movs	r3, #3
 8002306:	e103      	b.n	8002510 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002308:	4b75      	ldr	r3, [pc, #468]	@ (80024e0 <HAL_RCC_OscConfig+0x4c8>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002310:	2b00      	cmp	r3, #0
 8002312:	d0f0      	beq.n	80022f6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	2b01      	cmp	r3, #1
 800231a:	d106      	bne.n	800232a <HAL_RCC_OscConfig+0x312>
 800231c:	4b6f      	ldr	r3, [pc, #444]	@ (80024dc <HAL_RCC_OscConfig+0x4c4>)
 800231e:	6a1b      	ldr	r3, [r3, #32]
 8002320:	4a6e      	ldr	r2, [pc, #440]	@ (80024dc <HAL_RCC_OscConfig+0x4c4>)
 8002322:	f043 0301 	orr.w	r3, r3, #1
 8002326:	6213      	str	r3, [r2, #32]
 8002328:	e02d      	b.n	8002386 <HAL_RCC_OscConfig+0x36e>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	68db      	ldr	r3, [r3, #12]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d10c      	bne.n	800234c <HAL_RCC_OscConfig+0x334>
 8002332:	4b6a      	ldr	r3, [pc, #424]	@ (80024dc <HAL_RCC_OscConfig+0x4c4>)
 8002334:	6a1b      	ldr	r3, [r3, #32]
 8002336:	4a69      	ldr	r2, [pc, #420]	@ (80024dc <HAL_RCC_OscConfig+0x4c4>)
 8002338:	f023 0301 	bic.w	r3, r3, #1
 800233c:	6213      	str	r3, [r2, #32]
 800233e:	4b67      	ldr	r3, [pc, #412]	@ (80024dc <HAL_RCC_OscConfig+0x4c4>)
 8002340:	6a1b      	ldr	r3, [r3, #32]
 8002342:	4a66      	ldr	r2, [pc, #408]	@ (80024dc <HAL_RCC_OscConfig+0x4c4>)
 8002344:	f023 0304 	bic.w	r3, r3, #4
 8002348:	6213      	str	r3, [r2, #32]
 800234a:	e01c      	b.n	8002386 <HAL_RCC_OscConfig+0x36e>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	2b05      	cmp	r3, #5
 8002352:	d10c      	bne.n	800236e <HAL_RCC_OscConfig+0x356>
 8002354:	4b61      	ldr	r3, [pc, #388]	@ (80024dc <HAL_RCC_OscConfig+0x4c4>)
 8002356:	6a1b      	ldr	r3, [r3, #32]
 8002358:	4a60      	ldr	r2, [pc, #384]	@ (80024dc <HAL_RCC_OscConfig+0x4c4>)
 800235a:	f043 0304 	orr.w	r3, r3, #4
 800235e:	6213      	str	r3, [r2, #32]
 8002360:	4b5e      	ldr	r3, [pc, #376]	@ (80024dc <HAL_RCC_OscConfig+0x4c4>)
 8002362:	6a1b      	ldr	r3, [r3, #32]
 8002364:	4a5d      	ldr	r2, [pc, #372]	@ (80024dc <HAL_RCC_OscConfig+0x4c4>)
 8002366:	f043 0301 	orr.w	r3, r3, #1
 800236a:	6213      	str	r3, [r2, #32]
 800236c:	e00b      	b.n	8002386 <HAL_RCC_OscConfig+0x36e>
 800236e:	4b5b      	ldr	r3, [pc, #364]	@ (80024dc <HAL_RCC_OscConfig+0x4c4>)
 8002370:	6a1b      	ldr	r3, [r3, #32]
 8002372:	4a5a      	ldr	r2, [pc, #360]	@ (80024dc <HAL_RCC_OscConfig+0x4c4>)
 8002374:	f023 0301 	bic.w	r3, r3, #1
 8002378:	6213      	str	r3, [r2, #32]
 800237a:	4b58      	ldr	r3, [pc, #352]	@ (80024dc <HAL_RCC_OscConfig+0x4c4>)
 800237c:	6a1b      	ldr	r3, [r3, #32]
 800237e:	4a57      	ldr	r2, [pc, #348]	@ (80024dc <HAL_RCC_OscConfig+0x4c4>)
 8002380:	f023 0304 	bic.w	r3, r3, #4
 8002384:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	68db      	ldr	r3, [r3, #12]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d015      	beq.n	80023ba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800238e:	f7ff fa7f 	bl	8001890 <HAL_GetTick>
 8002392:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002394:	e00a      	b.n	80023ac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002396:	f7ff fa7b 	bl	8001890 <HAL_GetTick>
 800239a:	4602      	mov	r2, r0
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d901      	bls.n	80023ac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	e0b1      	b.n	8002510 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023ac:	4b4b      	ldr	r3, [pc, #300]	@ (80024dc <HAL_RCC_OscConfig+0x4c4>)
 80023ae:	6a1b      	ldr	r3, [r3, #32]
 80023b0:	f003 0302 	and.w	r3, r3, #2
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d0ee      	beq.n	8002396 <HAL_RCC_OscConfig+0x37e>
 80023b8:	e014      	b.n	80023e4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023ba:	f7ff fa69 	bl	8001890 <HAL_GetTick>
 80023be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023c0:	e00a      	b.n	80023d8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023c2:	f7ff fa65 	bl	8001890 <HAL_GetTick>
 80023c6:	4602      	mov	r2, r0
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d901      	bls.n	80023d8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80023d4:	2303      	movs	r3, #3
 80023d6:	e09b      	b.n	8002510 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023d8:	4b40      	ldr	r3, [pc, #256]	@ (80024dc <HAL_RCC_OscConfig+0x4c4>)
 80023da:	6a1b      	ldr	r3, [r3, #32]
 80023dc:	f003 0302 	and.w	r3, r3, #2
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d1ee      	bne.n	80023c2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80023e4:	7dfb      	ldrb	r3, [r7, #23]
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d105      	bne.n	80023f6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023ea:	4b3c      	ldr	r3, [pc, #240]	@ (80024dc <HAL_RCC_OscConfig+0x4c4>)
 80023ec:	69db      	ldr	r3, [r3, #28]
 80023ee:	4a3b      	ldr	r2, [pc, #236]	@ (80024dc <HAL_RCC_OscConfig+0x4c4>)
 80023f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023f4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	69db      	ldr	r3, [r3, #28]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	f000 8087 	beq.w	800250e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002400:	4b36      	ldr	r3, [pc, #216]	@ (80024dc <HAL_RCC_OscConfig+0x4c4>)
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f003 030c 	and.w	r3, r3, #12
 8002408:	2b08      	cmp	r3, #8
 800240a:	d061      	beq.n	80024d0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	69db      	ldr	r3, [r3, #28]
 8002410:	2b02      	cmp	r3, #2
 8002412:	d146      	bne.n	80024a2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002414:	4b33      	ldr	r3, [pc, #204]	@ (80024e4 <HAL_RCC_OscConfig+0x4cc>)
 8002416:	2200      	movs	r2, #0
 8002418:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800241a:	f7ff fa39 	bl	8001890 <HAL_GetTick>
 800241e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002420:	e008      	b.n	8002434 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002422:	f7ff fa35 	bl	8001890 <HAL_GetTick>
 8002426:	4602      	mov	r2, r0
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	2b02      	cmp	r3, #2
 800242e:	d901      	bls.n	8002434 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002430:	2303      	movs	r3, #3
 8002432:	e06d      	b.n	8002510 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002434:	4b29      	ldr	r3, [pc, #164]	@ (80024dc <HAL_RCC_OscConfig+0x4c4>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800243c:	2b00      	cmp	r3, #0
 800243e:	d1f0      	bne.n	8002422 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6a1b      	ldr	r3, [r3, #32]
 8002444:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002448:	d108      	bne.n	800245c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800244a:	4b24      	ldr	r3, [pc, #144]	@ (80024dc <HAL_RCC_OscConfig+0x4c4>)
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	4921      	ldr	r1, [pc, #132]	@ (80024dc <HAL_RCC_OscConfig+0x4c4>)
 8002458:	4313      	orrs	r3, r2
 800245a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800245c:	4b1f      	ldr	r3, [pc, #124]	@ (80024dc <HAL_RCC_OscConfig+0x4c4>)
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6a19      	ldr	r1, [r3, #32]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800246c:	430b      	orrs	r3, r1
 800246e:	491b      	ldr	r1, [pc, #108]	@ (80024dc <HAL_RCC_OscConfig+0x4c4>)
 8002470:	4313      	orrs	r3, r2
 8002472:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002474:	4b1b      	ldr	r3, [pc, #108]	@ (80024e4 <HAL_RCC_OscConfig+0x4cc>)
 8002476:	2201      	movs	r2, #1
 8002478:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800247a:	f7ff fa09 	bl	8001890 <HAL_GetTick>
 800247e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002480:	e008      	b.n	8002494 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002482:	f7ff fa05 	bl	8001890 <HAL_GetTick>
 8002486:	4602      	mov	r2, r0
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	2b02      	cmp	r3, #2
 800248e:	d901      	bls.n	8002494 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002490:	2303      	movs	r3, #3
 8002492:	e03d      	b.n	8002510 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002494:	4b11      	ldr	r3, [pc, #68]	@ (80024dc <HAL_RCC_OscConfig+0x4c4>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d0f0      	beq.n	8002482 <HAL_RCC_OscConfig+0x46a>
 80024a0:	e035      	b.n	800250e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024a2:	4b10      	ldr	r3, [pc, #64]	@ (80024e4 <HAL_RCC_OscConfig+0x4cc>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a8:	f7ff f9f2 	bl	8001890 <HAL_GetTick>
 80024ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024ae:	e008      	b.n	80024c2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024b0:	f7ff f9ee 	bl	8001890 <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d901      	bls.n	80024c2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e026      	b.n	8002510 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024c2:	4b06      	ldr	r3, [pc, #24]	@ (80024dc <HAL_RCC_OscConfig+0x4c4>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d1f0      	bne.n	80024b0 <HAL_RCC_OscConfig+0x498>
 80024ce:	e01e      	b.n	800250e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	69db      	ldr	r3, [r3, #28]
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d107      	bne.n	80024e8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e019      	b.n	8002510 <HAL_RCC_OscConfig+0x4f8>
 80024dc:	40021000 	.word	0x40021000
 80024e0:	40007000 	.word	0x40007000
 80024e4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80024e8:	4b0b      	ldr	r3, [pc, #44]	@ (8002518 <HAL_RCC_OscConfig+0x500>)
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6a1b      	ldr	r3, [r3, #32]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d106      	bne.n	800250a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002506:	429a      	cmp	r2, r3
 8002508:	d001      	beq.n	800250e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e000      	b.n	8002510 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800250e:	2300      	movs	r3, #0
}
 8002510:	4618      	mov	r0, r3
 8002512:	3718      	adds	r7, #24
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	40021000 	.word	0x40021000

0800251c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d101      	bne.n	8002530 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e0d0      	b.n	80026d2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002530:	4b6a      	ldr	r3, [pc, #424]	@ (80026dc <HAL_RCC_ClockConfig+0x1c0>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0307 	and.w	r3, r3, #7
 8002538:	683a      	ldr	r2, [r7, #0]
 800253a:	429a      	cmp	r2, r3
 800253c:	d910      	bls.n	8002560 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800253e:	4b67      	ldr	r3, [pc, #412]	@ (80026dc <HAL_RCC_ClockConfig+0x1c0>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f023 0207 	bic.w	r2, r3, #7
 8002546:	4965      	ldr	r1, [pc, #404]	@ (80026dc <HAL_RCC_ClockConfig+0x1c0>)
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	4313      	orrs	r3, r2
 800254c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800254e:	4b63      	ldr	r3, [pc, #396]	@ (80026dc <HAL_RCC_ClockConfig+0x1c0>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0307 	and.w	r3, r3, #7
 8002556:	683a      	ldr	r2, [r7, #0]
 8002558:	429a      	cmp	r2, r3
 800255a:	d001      	beq.n	8002560 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e0b8      	b.n	80026d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0302 	and.w	r3, r3, #2
 8002568:	2b00      	cmp	r3, #0
 800256a:	d020      	beq.n	80025ae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0304 	and.w	r3, r3, #4
 8002574:	2b00      	cmp	r3, #0
 8002576:	d005      	beq.n	8002584 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002578:	4b59      	ldr	r3, [pc, #356]	@ (80026e0 <HAL_RCC_ClockConfig+0x1c4>)
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	4a58      	ldr	r2, [pc, #352]	@ (80026e0 <HAL_RCC_ClockConfig+0x1c4>)
 800257e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002582:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0308 	and.w	r3, r3, #8
 800258c:	2b00      	cmp	r3, #0
 800258e:	d005      	beq.n	800259c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002590:	4b53      	ldr	r3, [pc, #332]	@ (80026e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	4a52      	ldr	r2, [pc, #328]	@ (80026e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002596:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800259a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800259c:	4b50      	ldr	r3, [pc, #320]	@ (80026e0 <HAL_RCC_ClockConfig+0x1c4>)
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	494d      	ldr	r1, [pc, #308]	@ (80026e0 <HAL_RCC_ClockConfig+0x1c4>)
 80025aa:	4313      	orrs	r3, r2
 80025ac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d040      	beq.n	800263c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d107      	bne.n	80025d2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025c2:	4b47      	ldr	r3, [pc, #284]	@ (80026e0 <HAL_RCC_ClockConfig+0x1c4>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d115      	bne.n	80025fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e07f      	b.n	80026d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d107      	bne.n	80025ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025da:	4b41      	ldr	r3, [pc, #260]	@ (80026e0 <HAL_RCC_ClockConfig+0x1c4>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d109      	bne.n	80025fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e073      	b.n	80026d2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025ea:	4b3d      	ldr	r3, [pc, #244]	@ (80026e0 <HAL_RCC_ClockConfig+0x1c4>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d101      	bne.n	80025fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e06b      	b.n	80026d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025fa:	4b39      	ldr	r3, [pc, #228]	@ (80026e0 <HAL_RCC_ClockConfig+0x1c4>)
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	f023 0203 	bic.w	r2, r3, #3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	4936      	ldr	r1, [pc, #216]	@ (80026e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002608:	4313      	orrs	r3, r2
 800260a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800260c:	f7ff f940 	bl	8001890 <HAL_GetTick>
 8002610:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002612:	e00a      	b.n	800262a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002614:	f7ff f93c 	bl	8001890 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002622:	4293      	cmp	r3, r2
 8002624:	d901      	bls.n	800262a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e053      	b.n	80026d2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800262a:	4b2d      	ldr	r3, [pc, #180]	@ (80026e0 <HAL_RCC_ClockConfig+0x1c4>)
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f003 020c 	and.w	r2, r3, #12
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	429a      	cmp	r2, r3
 800263a:	d1eb      	bne.n	8002614 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800263c:	4b27      	ldr	r3, [pc, #156]	@ (80026dc <HAL_RCC_ClockConfig+0x1c0>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0307 	and.w	r3, r3, #7
 8002644:	683a      	ldr	r2, [r7, #0]
 8002646:	429a      	cmp	r2, r3
 8002648:	d210      	bcs.n	800266c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800264a:	4b24      	ldr	r3, [pc, #144]	@ (80026dc <HAL_RCC_ClockConfig+0x1c0>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f023 0207 	bic.w	r2, r3, #7
 8002652:	4922      	ldr	r1, [pc, #136]	@ (80026dc <HAL_RCC_ClockConfig+0x1c0>)
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	4313      	orrs	r3, r2
 8002658:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800265a:	4b20      	ldr	r3, [pc, #128]	@ (80026dc <HAL_RCC_ClockConfig+0x1c0>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0307 	and.w	r3, r3, #7
 8002662:	683a      	ldr	r2, [r7, #0]
 8002664:	429a      	cmp	r2, r3
 8002666:	d001      	beq.n	800266c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e032      	b.n	80026d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0304 	and.w	r3, r3, #4
 8002674:	2b00      	cmp	r3, #0
 8002676:	d008      	beq.n	800268a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002678:	4b19      	ldr	r3, [pc, #100]	@ (80026e0 <HAL_RCC_ClockConfig+0x1c4>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	4916      	ldr	r1, [pc, #88]	@ (80026e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002686:	4313      	orrs	r3, r2
 8002688:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0308 	and.w	r3, r3, #8
 8002692:	2b00      	cmp	r3, #0
 8002694:	d009      	beq.n	80026aa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002696:	4b12      	ldr	r3, [pc, #72]	@ (80026e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	691b      	ldr	r3, [r3, #16]
 80026a2:	00db      	lsls	r3, r3, #3
 80026a4:	490e      	ldr	r1, [pc, #56]	@ (80026e0 <HAL_RCC_ClockConfig+0x1c4>)
 80026a6:	4313      	orrs	r3, r2
 80026a8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026aa:	f000 f821 	bl	80026f0 <HAL_RCC_GetSysClockFreq>
 80026ae:	4602      	mov	r2, r0
 80026b0:	4b0b      	ldr	r3, [pc, #44]	@ (80026e0 <HAL_RCC_ClockConfig+0x1c4>)
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	091b      	lsrs	r3, r3, #4
 80026b6:	f003 030f 	and.w	r3, r3, #15
 80026ba:	490a      	ldr	r1, [pc, #40]	@ (80026e4 <HAL_RCC_ClockConfig+0x1c8>)
 80026bc:	5ccb      	ldrb	r3, [r1, r3]
 80026be:	fa22 f303 	lsr.w	r3, r2, r3
 80026c2:	4a09      	ldr	r2, [pc, #36]	@ (80026e8 <HAL_RCC_ClockConfig+0x1cc>)
 80026c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80026c6:	4b09      	ldr	r3, [pc, #36]	@ (80026ec <HAL_RCC_ClockConfig+0x1d0>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7ff f89e 	bl	800180c <HAL_InitTick>

  return HAL_OK;
 80026d0:	2300      	movs	r3, #0
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3710      	adds	r7, #16
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	40022000 	.word	0x40022000
 80026e0:	40021000 	.word	0x40021000
 80026e4:	08005484 	.word	0x08005484
 80026e8:	20000008 	.word	0x20000008
 80026ec:	2000000c 	.word	0x2000000c

080026f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b087      	sub	sp, #28
 80026f4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80026f6:	2300      	movs	r3, #0
 80026f8:	60fb      	str	r3, [r7, #12]
 80026fa:	2300      	movs	r3, #0
 80026fc:	60bb      	str	r3, [r7, #8]
 80026fe:	2300      	movs	r3, #0
 8002700:	617b      	str	r3, [r7, #20]
 8002702:	2300      	movs	r3, #0
 8002704:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002706:	2300      	movs	r3, #0
 8002708:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800270a:	4b1e      	ldr	r3, [pc, #120]	@ (8002784 <HAL_RCC_GetSysClockFreq+0x94>)
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f003 030c 	and.w	r3, r3, #12
 8002716:	2b04      	cmp	r3, #4
 8002718:	d002      	beq.n	8002720 <HAL_RCC_GetSysClockFreq+0x30>
 800271a:	2b08      	cmp	r3, #8
 800271c:	d003      	beq.n	8002726 <HAL_RCC_GetSysClockFreq+0x36>
 800271e:	e027      	b.n	8002770 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002720:	4b19      	ldr	r3, [pc, #100]	@ (8002788 <HAL_RCC_GetSysClockFreq+0x98>)
 8002722:	613b      	str	r3, [r7, #16]
      break;
 8002724:	e027      	b.n	8002776 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	0c9b      	lsrs	r3, r3, #18
 800272a:	f003 030f 	and.w	r3, r3, #15
 800272e:	4a17      	ldr	r2, [pc, #92]	@ (800278c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002730:	5cd3      	ldrb	r3, [r2, r3]
 8002732:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d010      	beq.n	8002760 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800273e:	4b11      	ldr	r3, [pc, #68]	@ (8002784 <HAL_RCC_GetSysClockFreq+0x94>)
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	0c5b      	lsrs	r3, r3, #17
 8002744:	f003 0301 	and.w	r3, r3, #1
 8002748:	4a11      	ldr	r2, [pc, #68]	@ (8002790 <HAL_RCC_GetSysClockFreq+0xa0>)
 800274a:	5cd3      	ldrb	r3, [r2, r3]
 800274c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a0d      	ldr	r2, [pc, #52]	@ (8002788 <HAL_RCC_GetSysClockFreq+0x98>)
 8002752:	fb03 f202 	mul.w	r2, r3, r2
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	fbb2 f3f3 	udiv	r3, r2, r3
 800275c:	617b      	str	r3, [r7, #20]
 800275e:	e004      	b.n	800276a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	4a0c      	ldr	r2, [pc, #48]	@ (8002794 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002764:	fb02 f303 	mul.w	r3, r2, r3
 8002768:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	613b      	str	r3, [r7, #16]
      break;
 800276e:	e002      	b.n	8002776 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002770:	4b05      	ldr	r3, [pc, #20]	@ (8002788 <HAL_RCC_GetSysClockFreq+0x98>)
 8002772:	613b      	str	r3, [r7, #16]
      break;
 8002774:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002776:	693b      	ldr	r3, [r7, #16]
}
 8002778:	4618      	mov	r0, r3
 800277a:	371c      	adds	r7, #28
 800277c:	46bd      	mov	sp, r7
 800277e:	bc80      	pop	{r7}
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop
 8002784:	40021000 	.word	0x40021000
 8002788:	007a1200 	.word	0x007a1200
 800278c:	0800549c 	.word	0x0800549c
 8002790:	080054ac 	.word	0x080054ac
 8002794:	003d0900 	.word	0x003d0900

08002798 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002798:	b480      	push	{r7}
 800279a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800279c:	4b02      	ldr	r3, [pc, #8]	@ (80027a8 <HAL_RCC_GetHCLKFreq+0x10>)
 800279e:	681b      	ldr	r3, [r3, #0]
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bc80      	pop	{r7}
 80027a6:	4770      	bx	lr
 80027a8:	20000008 	.word	0x20000008

080027ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80027b0:	f7ff fff2 	bl	8002798 <HAL_RCC_GetHCLKFreq>
 80027b4:	4602      	mov	r2, r0
 80027b6:	4b05      	ldr	r3, [pc, #20]	@ (80027cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	0a1b      	lsrs	r3, r3, #8
 80027bc:	f003 0307 	and.w	r3, r3, #7
 80027c0:	4903      	ldr	r1, [pc, #12]	@ (80027d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027c2:	5ccb      	ldrb	r3, [r1, r3]
 80027c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	40021000 	.word	0x40021000
 80027d0:	08005494 	.word	0x08005494

080027d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80027d8:	f7ff ffde 	bl	8002798 <HAL_RCC_GetHCLKFreq>
 80027dc:	4602      	mov	r2, r0
 80027de:	4b05      	ldr	r3, [pc, #20]	@ (80027f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	0adb      	lsrs	r3, r3, #11
 80027e4:	f003 0307 	and.w	r3, r3, #7
 80027e8:	4903      	ldr	r1, [pc, #12]	@ (80027f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027ea:	5ccb      	ldrb	r3, [r1, r3]
 80027ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	40021000 	.word	0x40021000
 80027f8:	08005494 	.word	0x08005494

080027fc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b085      	sub	sp, #20
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002804:	4b0a      	ldr	r3, [pc, #40]	@ (8002830 <RCC_Delay+0x34>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a0a      	ldr	r2, [pc, #40]	@ (8002834 <RCC_Delay+0x38>)
 800280a:	fba2 2303 	umull	r2, r3, r2, r3
 800280e:	0a5b      	lsrs	r3, r3, #9
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	fb02 f303 	mul.w	r3, r2, r3
 8002816:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002818:	bf00      	nop
  }
  while (Delay --);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	1e5a      	subs	r2, r3, #1
 800281e:	60fa      	str	r2, [r7, #12]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d1f9      	bne.n	8002818 <RCC_Delay+0x1c>
}
 8002824:	bf00      	nop
 8002826:	bf00      	nop
 8002828:	3714      	adds	r7, #20
 800282a:	46bd      	mov	sp, r7
 800282c:	bc80      	pop	{r7}
 800282e:	4770      	bx	lr
 8002830:	20000008 	.word	0x20000008
 8002834:	10624dd3 	.word	0x10624dd3

08002838 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d101      	bne.n	800284a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e041      	b.n	80028ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002850:	b2db      	uxtb	r3, r3
 8002852:	2b00      	cmp	r3, #0
 8002854:	d106      	bne.n	8002864 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f7fe feaa 	bl	80015b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2202      	movs	r2, #2
 8002868:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	3304      	adds	r3, #4
 8002874:	4619      	mov	r1, r3
 8002876:	4610      	mov	r0, r2
 8002878:	f000 fd58 	bl	800332c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2201      	movs	r2, #1
 8002880:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2201      	movs	r2, #1
 8002888:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2201      	movs	r2, #1
 8002890:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2201      	movs	r2, #1
 80028a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2201      	movs	r2, #1
 80028b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2201      	movs	r2, #1
 80028c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2201      	movs	r2, #1
 80028c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80028cc:	2300      	movs	r3, #0
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3708      	adds	r7, #8
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
	...

080028d8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80028d8:	b480      	push	{r7}
 80028da:	b085      	sub	sp, #20
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d001      	beq.n	80028f0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e032      	b.n	8002956 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2202      	movs	r2, #2
 80028f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a18      	ldr	r2, [pc, #96]	@ (8002960 <HAL_TIM_Base_Start+0x88>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d00e      	beq.n	8002920 <HAL_TIM_Base_Start+0x48>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800290a:	d009      	beq.n	8002920 <HAL_TIM_Base_Start+0x48>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a14      	ldr	r2, [pc, #80]	@ (8002964 <HAL_TIM_Base_Start+0x8c>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d004      	beq.n	8002920 <HAL_TIM_Base_Start+0x48>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a13      	ldr	r2, [pc, #76]	@ (8002968 <HAL_TIM_Base_Start+0x90>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d111      	bne.n	8002944 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	f003 0307 	and.w	r3, r3, #7
 800292a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2b06      	cmp	r3, #6
 8002930:	d010      	beq.n	8002954 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f042 0201 	orr.w	r2, r2, #1
 8002940:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002942:	e007      	b.n	8002954 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f042 0201 	orr.w	r2, r2, #1
 8002952:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002954:	2300      	movs	r3, #0
}
 8002956:	4618      	mov	r0, r3
 8002958:	3714      	adds	r7, #20
 800295a:	46bd      	mov	sp, r7
 800295c:	bc80      	pop	{r7}
 800295e:	4770      	bx	lr
 8002960:	40012c00 	.word	0x40012c00
 8002964:	40000400 	.word	0x40000400
 8002968:	40000800 	.word	0x40000800

0800296c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800296c:	b480      	push	{r7}
 800296e:	b085      	sub	sp, #20
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800297a:	b2db      	uxtb	r3, r3
 800297c:	2b01      	cmp	r3, #1
 800297e:	d001      	beq.n	8002984 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e03a      	b.n	80029fa <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2202      	movs	r2, #2
 8002988:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	68da      	ldr	r2, [r3, #12]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f042 0201 	orr.w	r2, r2, #1
 800299a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a18      	ldr	r2, [pc, #96]	@ (8002a04 <HAL_TIM_Base_Start_IT+0x98>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d00e      	beq.n	80029c4 <HAL_TIM_Base_Start_IT+0x58>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029ae:	d009      	beq.n	80029c4 <HAL_TIM_Base_Start_IT+0x58>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a14      	ldr	r2, [pc, #80]	@ (8002a08 <HAL_TIM_Base_Start_IT+0x9c>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d004      	beq.n	80029c4 <HAL_TIM_Base_Start_IT+0x58>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a13      	ldr	r2, [pc, #76]	@ (8002a0c <HAL_TIM_Base_Start_IT+0xa0>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d111      	bne.n	80029e8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	f003 0307 	and.w	r3, r3, #7
 80029ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2b06      	cmp	r3, #6
 80029d4:	d010      	beq.n	80029f8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f042 0201 	orr.w	r2, r2, #1
 80029e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029e6:	e007      	b.n	80029f8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f042 0201 	orr.w	r2, r2, #1
 80029f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029f8:	2300      	movs	r3, #0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3714      	adds	r7, #20
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bc80      	pop	{r7}
 8002a02:	4770      	bx	lr
 8002a04:	40012c00 	.word	0x40012c00
 8002a08:	40000400 	.word	0x40000400
 8002a0c:	40000800 	.word	0x40000800

08002a10 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	68da      	ldr	r2, [r3, #12]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f022 0201 	bic.w	r2, r2, #1
 8002a26:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	6a1a      	ldr	r2, [r3, #32]
 8002a2e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002a32:	4013      	ands	r3, r2
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d10f      	bne.n	8002a58 <HAL_TIM_Base_Stop_IT+0x48>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	6a1a      	ldr	r2, [r3, #32]
 8002a3e:	f240 4344 	movw	r3, #1092	@ 0x444
 8002a42:	4013      	ands	r3, r2
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d107      	bne.n	8002a58 <HAL_TIM_Base_Stop_IT+0x48>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f022 0201 	bic.w	r2, r2, #1
 8002a56:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	370c      	adds	r7, #12
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bc80      	pop	{r7}
 8002a6a:	4770      	bx	lr

08002a6c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d101      	bne.n	8002a7e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e041      	b.n	8002b02 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d106      	bne.n	8002a98 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f7fe fdd4 	bl	8001640 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2202      	movs	r2, #2
 8002a9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	3304      	adds	r3, #4
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	4610      	mov	r0, r2
 8002aac:	f000 fc3e 	bl	800332c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2201      	movs	r2, #1
 8002acc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2201      	movs	r2, #1
 8002adc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2201      	movs	r2, #1
 8002aec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2201      	movs	r2, #1
 8002af4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2201      	movs	r2, #1
 8002afc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3708      	adds	r7, #8
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
	...

08002b0c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d109      	bne.n	8002b30 <HAL_TIM_PWM_Start+0x24>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	bf14      	ite	ne
 8002b28:	2301      	movne	r3, #1
 8002b2a:	2300      	moveq	r3, #0
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	e022      	b.n	8002b76 <HAL_TIM_PWM_Start+0x6a>
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	2b04      	cmp	r3, #4
 8002b34:	d109      	bne.n	8002b4a <HAL_TIM_PWM_Start+0x3e>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	bf14      	ite	ne
 8002b42:	2301      	movne	r3, #1
 8002b44:	2300      	moveq	r3, #0
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	e015      	b.n	8002b76 <HAL_TIM_PWM_Start+0x6a>
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	2b08      	cmp	r3, #8
 8002b4e:	d109      	bne.n	8002b64 <HAL_TIM_PWM_Start+0x58>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	bf14      	ite	ne
 8002b5c:	2301      	movne	r3, #1
 8002b5e:	2300      	moveq	r3, #0
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	e008      	b.n	8002b76 <HAL_TIM_PWM_Start+0x6a>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	bf14      	ite	ne
 8002b70:	2301      	movne	r3, #1
 8002b72:	2300      	moveq	r3, #0
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d001      	beq.n	8002b7e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e05e      	b.n	8002c3c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d104      	bne.n	8002b8e <HAL_TIM_PWM_Start+0x82>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2202      	movs	r2, #2
 8002b88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b8c:	e013      	b.n	8002bb6 <HAL_TIM_PWM_Start+0xaa>
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	2b04      	cmp	r3, #4
 8002b92:	d104      	bne.n	8002b9e <HAL_TIM_PWM_Start+0x92>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2202      	movs	r2, #2
 8002b98:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002b9c:	e00b      	b.n	8002bb6 <HAL_TIM_PWM_Start+0xaa>
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	2b08      	cmp	r3, #8
 8002ba2:	d104      	bne.n	8002bae <HAL_TIM_PWM_Start+0xa2>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2202      	movs	r2, #2
 8002ba8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002bac:	e003      	b.n	8002bb6 <HAL_TIM_PWM_Start+0xaa>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2202      	movs	r2, #2
 8002bb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	6839      	ldr	r1, [r7, #0]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f000 ffdf 	bl	8003b82 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a1e      	ldr	r2, [pc, #120]	@ (8002c44 <HAL_TIM_PWM_Start+0x138>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d107      	bne.n	8002bde <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002bdc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a18      	ldr	r2, [pc, #96]	@ (8002c44 <HAL_TIM_PWM_Start+0x138>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d00e      	beq.n	8002c06 <HAL_TIM_PWM_Start+0xfa>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bf0:	d009      	beq.n	8002c06 <HAL_TIM_PWM_Start+0xfa>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a14      	ldr	r2, [pc, #80]	@ (8002c48 <HAL_TIM_PWM_Start+0x13c>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d004      	beq.n	8002c06 <HAL_TIM_PWM_Start+0xfa>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a12      	ldr	r2, [pc, #72]	@ (8002c4c <HAL_TIM_PWM_Start+0x140>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d111      	bne.n	8002c2a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	f003 0307 	and.w	r3, r3, #7
 8002c10:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2b06      	cmp	r3, #6
 8002c16:	d010      	beq.n	8002c3a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f042 0201 	orr.w	r2, r2, #1
 8002c26:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c28:	e007      	b.n	8002c3a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f042 0201 	orr.w	r2, r2, #1
 8002c38:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c3a:	2300      	movs	r3, #0
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3710      	adds	r7, #16
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	40012c00 	.word	0x40012c00
 8002c48:	40000400 	.word	0x40000400
 8002c4c:	40000800 	.word	0x40000800

08002c50 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d101      	bne.n	8002c62 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e041      	b.n	8002ce6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d106      	bne.n	8002c7c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2200      	movs	r2, #0
 8002c72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f000 f839 	bl	8002cee <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2202      	movs	r2, #2
 8002c80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	3304      	adds	r3, #4
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	4610      	mov	r0, r2
 8002c90:	f000 fb4c 	bl	800332c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002ce4:	2300      	movs	r3, #0
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3708      	adds	r7, #8
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}

08002cee <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002cee:	b480      	push	{r7}
 8002cf0:	b083      	sub	sp, #12
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002cf6:	bf00      	nop
 8002cf8:	370c      	adds	r7, #12
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bc80      	pop	{r7}
 8002cfe:	4770      	bx	lr

08002d00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	691b      	ldr	r3, [r3, #16]
 8002d16:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	f003 0302 	and.w	r3, r3, #2
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d020      	beq.n	8002d64 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	f003 0302 	and.w	r3, r3, #2
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d01b      	beq.n	8002d64 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f06f 0202 	mvn.w	r2, #2
 8002d34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2201      	movs	r2, #1
 8002d3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	699b      	ldr	r3, [r3, #24]
 8002d42:	f003 0303 	and.w	r3, r3, #3
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d003      	beq.n	8002d52 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f000 fad2 	bl	80032f4 <HAL_TIM_IC_CaptureCallback>
 8002d50:	e005      	b.n	8002d5e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f000 fac5 	bl	80032e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f000 fad4 	bl	8003306 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	f003 0304 	and.w	r3, r3, #4
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d020      	beq.n	8002db0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	f003 0304 	and.w	r3, r3, #4
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d01b      	beq.n	8002db0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f06f 0204 	mvn.w	r2, #4
 8002d80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2202      	movs	r2, #2
 8002d86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	699b      	ldr	r3, [r3, #24]
 8002d8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d003      	beq.n	8002d9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f000 faac 	bl	80032f4 <HAL_TIM_IC_CaptureCallback>
 8002d9c:	e005      	b.n	8002daa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f000 fa9f 	bl	80032e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f000 faae 	bl	8003306 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2200      	movs	r2, #0
 8002dae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	f003 0308 	and.w	r3, r3, #8
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d020      	beq.n	8002dfc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	f003 0308 	and.w	r3, r3, #8
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d01b      	beq.n	8002dfc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f06f 0208 	mvn.w	r2, #8
 8002dcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2204      	movs	r2, #4
 8002dd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	69db      	ldr	r3, [r3, #28]
 8002dda:	f003 0303 	and.w	r3, r3, #3
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d003      	beq.n	8002dea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f000 fa86 	bl	80032f4 <HAL_TIM_IC_CaptureCallback>
 8002de8:	e005      	b.n	8002df6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f000 fa79 	bl	80032e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f000 fa88 	bl	8003306 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	f003 0310 	and.w	r3, r3, #16
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d020      	beq.n	8002e48 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	f003 0310 	and.w	r3, r3, #16
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d01b      	beq.n	8002e48 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f06f 0210 	mvn.w	r2, #16
 8002e18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2208      	movs	r2, #8
 8002e1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	69db      	ldr	r3, [r3, #28]
 8002e26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d003      	beq.n	8002e36 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f000 fa60 	bl	80032f4 <HAL_TIM_IC_CaptureCallback>
 8002e34:	e005      	b.n	8002e42 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f000 fa53 	bl	80032e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f000 fa62 	bl	8003306 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	f003 0301 	and.w	r3, r3, #1
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d00c      	beq.n	8002e6c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	f003 0301 	and.w	r3, r3, #1
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d007      	beq.n	8002e6c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f06f 0201 	mvn.w	r2, #1
 8002e64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f7fd fcee 	bl	8000848 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d00c      	beq.n	8002e90 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d007      	beq.n	8002e90 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002e88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f000 ff05 	bl	8003c9a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d00c      	beq.n	8002eb4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d007      	beq.n	8002eb4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002eac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f000 fa32 	bl	8003318 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	f003 0320 	and.w	r3, r3, #32
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d00c      	beq.n	8002ed8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	f003 0320 	and.w	r3, r3, #32
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d007      	beq.n	8002ed8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f06f 0220 	mvn.w	r2, #32
 8002ed0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f000 fed8 	bl	8003c88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ed8:	bf00      	nop
 8002eda:	3710      	adds	r7, #16
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b086      	sub	sp, #24
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	60f8      	str	r0, [r7, #12]
 8002ee8:	60b9      	str	r1, [r7, #8]
 8002eea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002eec:	2300      	movs	r3, #0
 8002eee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d101      	bne.n	8002efe <HAL_TIM_OC_ConfigChannel+0x1e>
 8002efa:	2302      	movs	r3, #2
 8002efc:	e048      	b.n	8002f90 <HAL_TIM_OC_ConfigChannel+0xb0>
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2201      	movs	r2, #1
 8002f02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2b0c      	cmp	r3, #12
 8002f0a:	d839      	bhi.n	8002f80 <HAL_TIM_OC_ConfigChannel+0xa0>
 8002f0c:	a201      	add	r2, pc, #4	@ (adr r2, 8002f14 <HAL_TIM_OC_ConfigChannel+0x34>)
 8002f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f12:	bf00      	nop
 8002f14:	08002f49 	.word	0x08002f49
 8002f18:	08002f81 	.word	0x08002f81
 8002f1c:	08002f81 	.word	0x08002f81
 8002f20:	08002f81 	.word	0x08002f81
 8002f24:	08002f57 	.word	0x08002f57
 8002f28:	08002f81 	.word	0x08002f81
 8002f2c:	08002f81 	.word	0x08002f81
 8002f30:	08002f81 	.word	0x08002f81
 8002f34:	08002f65 	.word	0x08002f65
 8002f38:	08002f81 	.word	0x08002f81
 8002f3c:	08002f81 	.word	0x08002f81
 8002f40:	08002f81 	.word	0x08002f81
 8002f44:	08002f73 	.word	0x08002f73
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	68b9      	ldr	r1, [r7, #8]
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f000 fa5a 	bl	8003408 <TIM_OC1_SetConfig>
      break;
 8002f54:	e017      	b.n	8002f86 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	68b9      	ldr	r1, [r7, #8]
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f000 fab9 	bl	80034d4 <TIM_OC2_SetConfig>
      break;
 8002f62:	e010      	b.n	8002f86 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	68b9      	ldr	r1, [r7, #8]
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f000 fb1c 	bl	80035a8 <TIM_OC3_SetConfig>
      break;
 8002f70:	e009      	b.n	8002f86 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	68b9      	ldr	r1, [r7, #8]
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f000 fb7f 	bl	800367c <TIM_OC4_SetConfig>
      break;
 8002f7e:	e002      	b.n	8002f86 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	75fb      	strb	r3, [r7, #23]
      break;
 8002f84:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002f8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3718      	adds	r7, #24
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b086      	sub	sp, #24
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	60f8      	str	r0, [r7, #12]
 8002fa0:	60b9      	str	r1, [r7, #8]
 8002fa2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d101      	bne.n	8002fb6 <HAL_TIM_IC_ConfigChannel+0x1e>
 8002fb2:	2302      	movs	r3, #2
 8002fb4:	e088      	b.n	80030c8 <HAL_TIM_IC_ConfigChannel+0x130>
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2201      	movs	r2, #1
 8002fba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d11b      	bne.n	8002ffc <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8002fd4:	f000 fc32 	bl	800383c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	699a      	ldr	r2, [r3, #24]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f022 020c 	bic.w	r2, r2, #12
 8002fe6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	6999      	ldr	r1, [r3, #24]
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	689a      	ldr	r2, [r3, #8]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	430a      	orrs	r2, r1
 8002ff8:	619a      	str	r2, [r3, #24]
 8002ffa:	e060      	b.n	80030be <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2b04      	cmp	r3, #4
 8003000:	d11c      	bne.n	800303c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003012:	f000 fc9b 	bl	800394c <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	699a      	ldr	r2, [r3, #24]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003024:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	6999      	ldr	r1, [r3, #24]
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	021a      	lsls	r2, r3, #8
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	430a      	orrs	r2, r1
 8003038:	619a      	str	r2, [r3, #24]
 800303a:	e040      	b.n	80030be <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2b08      	cmp	r3, #8
 8003040:	d11b      	bne.n	800307a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8003052:	f000 fce6 	bl	8003a22 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	69da      	ldr	r2, [r3, #28]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f022 020c 	bic.w	r2, r2, #12
 8003064:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	69d9      	ldr	r1, [r3, #28]
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	689a      	ldr	r2, [r3, #8]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	430a      	orrs	r2, r1
 8003076:	61da      	str	r2, [r3, #28]
 8003078:	e021      	b.n	80030be <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2b0c      	cmp	r3, #12
 800307e:	d11c      	bne.n	80030ba <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003090:	f000 fd02 	bl	8003a98 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	69da      	ldr	r2, [r3, #28]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80030a2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	69d9      	ldr	r1, [r3, #28]
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	021a      	lsls	r2, r3, #8
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	430a      	orrs	r2, r1
 80030b6:	61da      	str	r2, [r3, #28]
 80030b8:	e001      	b.n	80030be <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80030c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3718      	adds	r7, #24
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030da:	2300      	movs	r3, #0
 80030dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d101      	bne.n	80030ec <HAL_TIM_ConfigClockSource+0x1c>
 80030e8:	2302      	movs	r3, #2
 80030ea:	e0b4      	b.n	8003256 <HAL_TIM_ConfigClockSource+0x186>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2201      	movs	r2, #1
 80030f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2202      	movs	r2, #2
 80030f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800310a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003112:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	68ba      	ldr	r2, [r7, #8]
 800311a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003124:	d03e      	beq.n	80031a4 <HAL_TIM_ConfigClockSource+0xd4>
 8003126:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800312a:	f200 8087 	bhi.w	800323c <HAL_TIM_ConfigClockSource+0x16c>
 800312e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003132:	f000 8086 	beq.w	8003242 <HAL_TIM_ConfigClockSource+0x172>
 8003136:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800313a:	d87f      	bhi.n	800323c <HAL_TIM_ConfigClockSource+0x16c>
 800313c:	2b70      	cmp	r3, #112	@ 0x70
 800313e:	d01a      	beq.n	8003176 <HAL_TIM_ConfigClockSource+0xa6>
 8003140:	2b70      	cmp	r3, #112	@ 0x70
 8003142:	d87b      	bhi.n	800323c <HAL_TIM_ConfigClockSource+0x16c>
 8003144:	2b60      	cmp	r3, #96	@ 0x60
 8003146:	d050      	beq.n	80031ea <HAL_TIM_ConfigClockSource+0x11a>
 8003148:	2b60      	cmp	r3, #96	@ 0x60
 800314a:	d877      	bhi.n	800323c <HAL_TIM_ConfigClockSource+0x16c>
 800314c:	2b50      	cmp	r3, #80	@ 0x50
 800314e:	d03c      	beq.n	80031ca <HAL_TIM_ConfigClockSource+0xfa>
 8003150:	2b50      	cmp	r3, #80	@ 0x50
 8003152:	d873      	bhi.n	800323c <HAL_TIM_ConfigClockSource+0x16c>
 8003154:	2b40      	cmp	r3, #64	@ 0x40
 8003156:	d058      	beq.n	800320a <HAL_TIM_ConfigClockSource+0x13a>
 8003158:	2b40      	cmp	r3, #64	@ 0x40
 800315a:	d86f      	bhi.n	800323c <HAL_TIM_ConfigClockSource+0x16c>
 800315c:	2b30      	cmp	r3, #48	@ 0x30
 800315e:	d064      	beq.n	800322a <HAL_TIM_ConfigClockSource+0x15a>
 8003160:	2b30      	cmp	r3, #48	@ 0x30
 8003162:	d86b      	bhi.n	800323c <HAL_TIM_ConfigClockSource+0x16c>
 8003164:	2b20      	cmp	r3, #32
 8003166:	d060      	beq.n	800322a <HAL_TIM_ConfigClockSource+0x15a>
 8003168:	2b20      	cmp	r3, #32
 800316a:	d867      	bhi.n	800323c <HAL_TIM_ConfigClockSource+0x16c>
 800316c:	2b00      	cmp	r3, #0
 800316e:	d05c      	beq.n	800322a <HAL_TIM_ConfigClockSource+0x15a>
 8003170:	2b10      	cmp	r3, #16
 8003172:	d05a      	beq.n	800322a <HAL_TIM_ConfigClockSource+0x15a>
 8003174:	e062      	b.n	800323c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003186:	f000 fcdd 	bl	8003b44 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003198:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	68ba      	ldr	r2, [r7, #8]
 80031a0:	609a      	str	r2, [r3, #8]
      break;
 80031a2:	e04f      	b.n	8003244 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80031b4:	f000 fcc6 	bl	8003b44 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	689a      	ldr	r2, [r3, #8]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80031c6:	609a      	str	r2, [r3, #8]
      break;
 80031c8:	e03c      	b.n	8003244 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031d6:	461a      	mov	r2, r3
 80031d8:	f000 fb8a 	bl	80038f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2150      	movs	r1, #80	@ 0x50
 80031e2:	4618      	mov	r0, r3
 80031e4:	f000 fc94 	bl	8003b10 <TIM_ITRx_SetConfig>
      break;
 80031e8:	e02c      	b.n	8003244 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80031f6:	461a      	mov	r2, r3
 80031f8:	f000 fbe4 	bl	80039c4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2160      	movs	r1, #96	@ 0x60
 8003202:	4618      	mov	r0, r3
 8003204:	f000 fc84 	bl	8003b10 <TIM_ITRx_SetConfig>
      break;
 8003208:	e01c      	b.n	8003244 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003216:	461a      	mov	r2, r3
 8003218:	f000 fb6a 	bl	80038f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2140      	movs	r1, #64	@ 0x40
 8003222:	4618      	mov	r0, r3
 8003224:	f000 fc74 	bl	8003b10 <TIM_ITRx_SetConfig>
      break;
 8003228:	e00c      	b.n	8003244 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4619      	mov	r1, r3
 8003234:	4610      	mov	r0, r2
 8003236:	f000 fc6b 	bl	8003b10 <TIM_ITRx_SetConfig>
      break;
 800323a:	e003      	b.n	8003244 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	73fb      	strb	r3, [r7, #15]
      break;
 8003240:	e000      	b.n	8003244 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003242:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003254:	7bfb      	ldrb	r3, [r7, #15]
}
 8003256:	4618      	mov	r0, r3
 8003258:	3710      	adds	r7, #16
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}

0800325e <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800325e:	b580      	push	{r7, lr}
 8003260:	b082      	sub	sp, #8
 8003262:	af00      	add	r7, sp, #0
 8003264:	6078      	str	r0, [r7, #4]
 8003266:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800326e:	2b01      	cmp	r3, #1
 8003270:	d101      	bne.n	8003276 <HAL_TIM_SlaveConfigSynchro+0x18>
 8003272:	2302      	movs	r3, #2
 8003274:	e031      	b.n	80032da <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2201      	movs	r2, #1
 800327a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2202      	movs	r2, #2
 8003282:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003286:	6839      	ldr	r1, [r7, #0]
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	f000 fa45 	bl	8003718 <TIM_SlaveTimer_SetConfig>
 800328e:	4603      	mov	r3, r0
 8003290:	2b00      	cmp	r3, #0
 8003292:	d009      	beq.n	80032a8 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2201      	movs	r2, #1
 8003298:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e018      	b.n	80032da <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	68da      	ldr	r2, [r3, #12]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80032b6:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	68da      	ldr	r2, [r3, #12]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80032c6:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2200      	movs	r2, #0
 80032d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80032d8:	2300      	movs	r3, #0
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3708      	adds	r7, #8
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}

080032e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032e2:	b480      	push	{r7}
 80032e4:	b083      	sub	sp, #12
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80032ea:	bf00      	nop
 80032ec:	370c      	adds	r7, #12
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bc80      	pop	{r7}
 80032f2:	4770      	bx	lr

080032f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80032fc:	bf00      	nop
 80032fe:	370c      	adds	r7, #12
 8003300:	46bd      	mov	sp, r7
 8003302:	bc80      	pop	{r7}
 8003304:	4770      	bx	lr

08003306 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003306:	b480      	push	{r7}
 8003308:	b083      	sub	sp, #12
 800330a:	af00      	add	r7, sp, #0
 800330c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800330e:	bf00      	nop
 8003310:	370c      	adds	r7, #12
 8003312:	46bd      	mov	sp, r7
 8003314:	bc80      	pop	{r7}
 8003316:	4770      	bx	lr

08003318 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003320:	bf00      	nop
 8003322:	370c      	adds	r7, #12
 8003324:	46bd      	mov	sp, r7
 8003326:	bc80      	pop	{r7}
 8003328:	4770      	bx	lr
	...

0800332c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800332c:	b480      	push	{r7}
 800332e:	b085      	sub	sp, #20
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	4a2f      	ldr	r2, [pc, #188]	@ (80033fc <TIM_Base_SetConfig+0xd0>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d00b      	beq.n	800335c <TIM_Base_SetConfig+0x30>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800334a:	d007      	beq.n	800335c <TIM_Base_SetConfig+0x30>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	4a2c      	ldr	r2, [pc, #176]	@ (8003400 <TIM_Base_SetConfig+0xd4>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d003      	beq.n	800335c <TIM_Base_SetConfig+0x30>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	4a2b      	ldr	r2, [pc, #172]	@ (8003404 <TIM_Base_SetConfig+0xd8>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d108      	bne.n	800336e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003362:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	68fa      	ldr	r2, [r7, #12]
 800336a:	4313      	orrs	r3, r2
 800336c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4a22      	ldr	r2, [pc, #136]	@ (80033fc <TIM_Base_SetConfig+0xd0>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d00b      	beq.n	800338e <TIM_Base_SetConfig+0x62>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800337c:	d007      	beq.n	800338e <TIM_Base_SetConfig+0x62>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a1f      	ldr	r2, [pc, #124]	@ (8003400 <TIM_Base_SetConfig+0xd4>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d003      	beq.n	800338e <TIM_Base_SetConfig+0x62>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a1e      	ldr	r2, [pc, #120]	@ (8003404 <TIM_Base_SetConfig+0xd8>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d108      	bne.n	80033a0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003394:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	68db      	ldr	r3, [r3, #12]
 800339a:	68fa      	ldr	r2, [r7, #12]
 800339c:	4313      	orrs	r3, r2
 800339e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	695b      	ldr	r3, [r3, #20]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	68fa      	ldr	r2, [r7, #12]
 80033b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	689a      	ldr	r2, [r3, #8]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	4a0d      	ldr	r2, [pc, #52]	@ (80033fc <TIM_Base_SetConfig+0xd0>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d103      	bne.n	80033d4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	691a      	ldr	r2, [r3, #16]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	691b      	ldr	r3, [r3, #16]
 80033de:	f003 0301 	and.w	r3, r3, #1
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d005      	beq.n	80033f2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	691b      	ldr	r3, [r3, #16]
 80033ea:	f023 0201 	bic.w	r2, r3, #1
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	611a      	str	r2, [r3, #16]
  }
}
 80033f2:	bf00      	nop
 80033f4:	3714      	adds	r7, #20
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bc80      	pop	{r7}
 80033fa:	4770      	bx	lr
 80033fc:	40012c00 	.word	0x40012c00
 8003400:	40000400 	.word	0x40000400
 8003404:	40000800 	.word	0x40000800

08003408 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003408:	b480      	push	{r7}
 800340a:	b087      	sub	sp, #28
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6a1b      	ldr	r3, [r3, #32]
 8003416:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6a1b      	ldr	r3, [r3, #32]
 800341c:	f023 0201 	bic.w	r2, r3, #1
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	699b      	ldr	r3, [r3, #24]
 800342e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003436:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f023 0303 	bic.w	r3, r3, #3
 800343e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	68fa      	ldr	r2, [r7, #12]
 8003446:	4313      	orrs	r3, r2
 8003448:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	f023 0302 	bic.w	r3, r3, #2
 8003450:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	697a      	ldr	r2, [r7, #20]
 8003458:	4313      	orrs	r3, r2
 800345a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	4a1c      	ldr	r2, [pc, #112]	@ (80034d0 <TIM_OC1_SetConfig+0xc8>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d10c      	bne.n	800347e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	f023 0308 	bic.w	r3, r3, #8
 800346a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	697a      	ldr	r2, [r7, #20]
 8003472:	4313      	orrs	r3, r2
 8003474:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	f023 0304 	bic.w	r3, r3, #4
 800347c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4a13      	ldr	r2, [pc, #76]	@ (80034d0 <TIM_OC1_SetConfig+0xc8>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d111      	bne.n	80034aa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800348c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003494:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	695b      	ldr	r3, [r3, #20]
 800349a:	693a      	ldr	r2, [r7, #16]
 800349c:	4313      	orrs	r3, r2
 800349e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	699b      	ldr	r3, [r3, #24]
 80034a4:	693a      	ldr	r2, [r7, #16]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	693a      	ldr	r2, [r7, #16]
 80034ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	68fa      	ldr	r2, [r7, #12]
 80034b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	685a      	ldr	r2, [r3, #4]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	697a      	ldr	r2, [r7, #20]
 80034c2:	621a      	str	r2, [r3, #32]
}
 80034c4:	bf00      	nop
 80034c6:	371c      	adds	r7, #28
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bc80      	pop	{r7}
 80034cc:	4770      	bx	lr
 80034ce:	bf00      	nop
 80034d0:	40012c00 	.word	0x40012c00

080034d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b087      	sub	sp, #28
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a1b      	ldr	r3, [r3, #32]
 80034e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6a1b      	ldr	r3, [r3, #32]
 80034e8:	f023 0210 	bic.w	r2, r3, #16
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	699b      	ldr	r3, [r3, #24]
 80034fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003502:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800350a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	021b      	lsls	r3, r3, #8
 8003512:	68fa      	ldr	r2, [r7, #12]
 8003514:	4313      	orrs	r3, r2
 8003516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	f023 0320 	bic.w	r3, r3, #32
 800351e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	011b      	lsls	r3, r3, #4
 8003526:	697a      	ldr	r2, [r7, #20]
 8003528:	4313      	orrs	r3, r2
 800352a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	4a1d      	ldr	r2, [pc, #116]	@ (80035a4 <TIM_OC2_SetConfig+0xd0>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d10d      	bne.n	8003550 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800353a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	011b      	lsls	r3, r3, #4
 8003542:	697a      	ldr	r2, [r7, #20]
 8003544:	4313      	orrs	r3, r2
 8003546:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800354e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	4a14      	ldr	r2, [pc, #80]	@ (80035a4 <TIM_OC2_SetConfig+0xd0>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d113      	bne.n	8003580 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800355e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003566:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	695b      	ldr	r3, [r3, #20]
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	693a      	ldr	r2, [r7, #16]
 8003570:	4313      	orrs	r3, r2
 8003572:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	699b      	ldr	r3, [r3, #24]
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	693a      	ldr	r2, [r7, #16]
 800357c:	4313      	orrs	r3, r2
 800357e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	693a      	ldr	r2, [r7, #16]
 8003584:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	68fa      	ldr	r2, [r7, #12]
 800358a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	685a      	ldr	r2, [r3, #4]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	697a      	ldr	r2, [r7, #20]
 8003598:	621a      	str	r2, [r3, #32]
}
 800359a:	bf00      	nop
 800359c:	371c      	adds	r7, #28
 800359e:	46bd      	mov	sp, r7
 80035a0:	bc80      	pop	{r7}
 80035a2:	4770      	bx	lr
 80035a4:	40012c00 	.word	0x40012c00

080035a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b087      	sub	sp, #28
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6a1b      	ldr	r3, [r3, #32]
 80035b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6a1b      	ldr	r3, [r3, #32]
 80035bc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	69db      	ldr	r3, [r3, #28]
 80035ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f023 0303 	bic.w	r3, r3, #3
 80035de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	68fa      	ldr	r2, [r7, #12]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80035f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	021b      	lsls	r3, r3, #8
 80035f8:	697a      	ldr	r2, [r7, #20]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a1d      	ldr	r2, [pc, #116]	@ (8003678 <TIM_OC3_SetConfig+0xd0>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d10d      	bne.n	8003622 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800360c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	021b      	lsls	r3, r3, #8
 8003614:	697a      	ldr	r2, [r7, #20]
 8003616:	4313      	orrs	r3, r2
 8003618:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003620:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4a14      	ldr	r2, [pc, #80]	@ (8003678 <TIM_OC3_SetConfig+0xd0>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d113      	bne.n	8003652 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003630:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003638:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	695b      	ldr	r3, [r3, #20]
 800363e:	011b      	lsls	r3, r3, #4
 8003640:	693a      	ldr	r2, [r7, #16]
 8003642:	4313      	orrs	r3, r2
 8003644:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	699b      	ldr	r3, [r3, #24]
 800364a:	011b      	lsls	r3, r3, #4
 800364c:	693a      	ldr	r2, [r7, #16]
 800364e:	4313      	orrs	r3, r2
 8003650:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	693a      	ldr	r2, [r7, #16]
 8003656:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	68fa      	ldr	r2, [r7, #12]
 800365c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	685a      	ldr	r2, [r3, #4]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	697a      	ldr	r2, [r7, #20]
 800366a:	621a      	str	r2, [r3, #32]
}
 800366c:	bf00      	nop
 800366e:	371c      	adds	r7, #28
 8003670:	46bd      	mov	sp, r7
 8003672:	bc80      	pop	{r7}
 8003674:	4770      	bx	lr
 8003676:	bf00      	nop
 8003678:	40012c00 	.word	0x40012c00

0800367c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800367c:	b480      	push	{r7}
 800367e:	b087      	sub	sp, #28
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6a1b      	ldr	r3, [r3, #32]
 800368a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6a1b      	ldr	r3, [r3, #32]
 8003690:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	69db      	ldr	r3, [r3, #28]
 80036a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80036aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	021b      	lsls	r3, r3, #8
 80036ba:	68fa      	ldr	r2, [r7, #12]
 80036bc:	4313      	orrs	r3, r2
 80036be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80036c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	031b      	lsls	r3, r3, #12
 80036ce:	693a      	ldr	r2, [r7, #16]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	4a0f      	ldr	r2, [pc, #60]	@ (8003714 <TIM_OC4_SetConfig+0x98>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d109      	bne.n	80036f0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80036e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	695b      	ldr	r3, [r3, #20]
 80036e8:	019b      	lsls	r3, r3, #6
 80036ea:	697a      	ldr	r2, [r7, #20]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	697a      	ldr	r2, [r7, #20]
 80036f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	68fa      	ldr	r2, [r7, #12]
 80036fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	685a      	ldr	r2, [r3, #4]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	693a      	ldr	r2, [r7, #16]
 8003708:	621a      	str	r2, [r3, #32]
}
 800370a:	bf00      	nop
 800370c:	371c      	adds	r7, #28
 800370e:	46bd      	mov	sp, r7
 8003710:	bc80      	pop	{r7}
 8003712:	4770      	bx	lr
 8003714:	40012c00 	.word	0x40012c00

08003718 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b086      	sub	sp, #24
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003722:	2300      	movs	r3, #0
 8003724:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003734:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	693a      	ldr	r2, [r7, #16]
 800373c:	4313      	orrs	r3, r2
 800373e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	f023 0307 	bic.w	r3, r3, #7
 8003746:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	693a      	ldr	r2, [r7, #16]
 800374e:	4313      	orrs	r3, r2
 8003750:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	693a      	ldr	r2, [r7, #16]
 8003758:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	2b70      	cmp	r3, #112	@ 0x70
 8003760:	d01a      	beq.n	8003798 <TIM_SlaveTimer_SetConfig+0x80>
 8003762:	2b70      	cmp	r3, #112	@ 0x70
 8003764:	d860      	bhi.n	8003828 <TIM_SlaveTimer_SetConfig+0x110>
 8003766:	2b60      	cmp	r3, #96	@ 0x60
 8003768:	d054      	beq.n	8003814 <TIM_SlaveTimer_SetConfig+0xfc>
 800376a:	2b60      	cmp	r3, #96	@ 0x60
 800376c:	d85c      	bhi.n	8003828 <TIM_SlaveTimer_SetConfig+0x110>
 800376e:	2b50      	cmp	r3, #80	@ 0x50
 8003770:	d046      	beq.n	8003800 <TIM_SlaveTimer_SetConfig+0xe8>
 8003772:	2b50      	cmp	r3, #80	@ 0x50
 8003774:	d858      	bhi.n	8003828 <TIM_SlaveTimer_SetConfig+0x110>
 8003776:	2b40      	cmp	r3, #64	@ 0x40
 8003778:	d019      	beq.n	80037ae <TIM_SlaveTimer_SetConfig+0x96>
 800377a:	2b40      	cmp	r3, #64	@ 0x40
 800377c:	d854      	bhi.n	8003828 <TIM_SlaveTimer_SetConfig+0x110>
 800377e:	2b30      	cmp	r3, #48	@ 0x30
 8003780:	d055      	beq.n	800382e <TIM_SlaveTimer_SetConfig+0x116>
 8003782:	2b30      	cmp	r3, #48	@ 0x30
 8003784:	d850      	bhi.n	8003828 <TIM_SlaveTimer_SetConfig+0x110>
 8003786:	2b20      	cmp	r3, #32
 8003788:	d051      	beq.n	800382e <TIM_SlaveTimer_SetConfig+0x116>
 800378a:	2b20      	cmp	r3, #32
 800378c:	d84c      	bhi.n	8003828 <TIM_SlaveTimer_SetConfig+0x110>
 800378e:	2b00      	cmp	r3, #0
 8003790:	d04d      	beq.n	800382e <TIM_SlaveTimer_SetConfig+0x116>
 8003792:	2b10      	cmp	r3, #16
 8003794:	d04b      	beq.n	800382e <TIM_SlaveTimer_SetConfig+0x116>
 8003796:	e047      	b.n	8003828 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80037a8:	f000 f9cc 	bl	8003b44 <TIM_ETR_SetConfig>
      break;
 80037ac:	e040      	b.n	8003830 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	2b05      	cmp	r3, #5
 80037b4:	d101      	bne.n	80037ba <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e03b      	b.n	8003832 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	6a1b      	ldr	r3, [r3, #32]
 80037c0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	6a1a      	ldr	r2, [r3, #32]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f022 0201 	bic.w	r2, r2, #1
 80037d0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	699b      	ldr	r3, [r3, #24]
 80037d8:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80037e0:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	691b      	ldr	r3, [r3, #16]
 80037e6:	011b      	lsls	r3, r3, #4
 80037e8:	68ba      	ldr	r2, [r7, #8]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	68ba      	ldr	r2, [r7, #8]
 80037f4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	68fa      	ldr	r2, [r7, #12]
 80037fc:	621a      	str	r2, [r3, #32]
      break;
 80037fe:	e017      	b.n	8003830 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800380c:	461a      	mov	r2, r3
 800380e:	f000 f86f 	bl	80038f0 <TIM_TI1_ConfigInputStage>
      break;
 8003812:	e00d      	b.n	8003830 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003820:	461a      	mov	r2, r3
 8003822:	f000 f8cf 	bl	80039c4 <TIM_TI2_ConfigInputStage>
      break;
 8003826:	e003      	b.n	8003830 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	75fb      	strb	r3, [r7, #23]
      break;
 800382c:	e000      	b.n	8003830 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800382e:	bf00      	nop
  }

  return status;
 8003830:	7dfb      	ldrb	r3, [r7, #23]
}
 8003832:	4618      	mov	r0, r3
 8003834:	3718      	adds	r7, #24
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
	...

0800383c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800383c:	b480      	push	{r7}
 800383e:	b087      	sub	sp, #28
 8003840:	af00      	add	r7, sp, #0
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	60b9      	str	r1, [r7, #8]
 8003846:	607a      	str	r2, [r7, #4]
 8003848:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	6a1b      	ldr	r3, [r3, #32]
 800384e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6a1b      	ldr	r3, [r3, #32]
 8003854:	f023 0201 	bic.w	r2, r3, #1
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	699b      	ldr	r3, [r3, #24]
 8003860:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	4a1f      	ldr	r2, [pc, #124]	@ (80038e4 <TIM_TI1_SetConfig+0xa8>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d00b      	beq.n	8003882 <TIM_TI1_SetConfig+0x46>
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003870:	d007      	beq.n	8003882 <TIM_TI1_SetConfig+0x46>
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	4a1c      	ldr	r2, [pc, #112]	@ (80038e8 <TIM_TI1_SetConfig+0xac>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d003      	beq.n	8003882 <TIM_TI1_SetConfig+0x46>
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	4a1b      	ldr	r2, [pc, #108]	@ (80038ec <TIM_TI1_SetConfig+0xb0>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d101      	bne.n	8003886 <TIM_TI1_SetConfig+0x4a>
 8003882:	2301      	movs	r3, #1
 8003884:	e000      	b.n	8003888 <TIM_TI1_SetConfig+0x4c>
 8003886:	2300      	movs	r3, #0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d008      	beq.n	800389e <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	f023 0303 	bic.w	r3, r3, #3
 8003892:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003894:	697a      	ldr	r2, [r7, #20]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4313      	orrs	r3, r2
 800389a:	617b      	str	r3, [r7, #20]
 800389c:	e003      	b.n	80038a6 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	f043 0301 	orr.w	r3, r3, #1
 80038a4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80038ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	011b      	lsls	r3, r3, #4
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	697a      	ldr	r2, [r7, #20]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	f023 030a 	bic.w	r3, r3, #10
 80038c0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	f003 030a 	and.w	r3, r3, #10
 80038c8:	693a      	ldr	r2, [r7, #16]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	697a      	ldr	r2, [r7, #20]
 80038d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	693a      	ldr	r2, [r7, #16]
 80038d8:	621a      	str	r2, [r3, #32]
}
 80038da:	bf00      	nop
 80038dc:	371c      	adds	r7, #28
 80038de:	46bd      	mov	sp, r7
 80038e0:	bc80      	pop	{r7}
 80038e2:	4770      	bx	lr
 80038e4:	40012c00 	.word	0x40012c00
 80038e8:	40000400 	.word	0x40000400
 80038ec:	40000800 	.word	0x40000800

080038f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b087      	sub	sp, #28
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	60b9      	str	r1, [r7, #8]
 80038fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6a1b      	ldr	r3, [r3, #32]
 8003900:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6a1b      	ldr	r3, [r3, #32]
 8003906:	f023 0201 	bic.w	r2, r3, #1
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	699b      	ldr	r3, [r3, #24]
 8003912:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800391a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	011b      	lsls	r3, r3, #4
 8003920:	693a      	ldr	r2, [r7, #16]
 8003922:	4313      	orrs	r3, r2
 8003924:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	f023 030a 	bic.w	r3, r3, #10
 800392c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800392e:	697a      	ldr	r2, [r7, #20]
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	4313      	orrs	r3, r2
 8003934:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	693a      	ldr	r2, [r7, #16]
 800393a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	697a      	ldr	r2, [r7, #20]
 8003940:	621a      	str	r2, [r3, #32]
}
 8003942:	bf00      	nop
 8003944:	371c      	adds	r7, #28
 8003946:	46bd      	mov	sp, r7
 8003948:	bc80      	pop	{r7}
 800394a:	4770      	bx	lr

0800394c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800394c:	b480      	push	{r7}
 800394e:	b087      	sub	sp, #28
 8003950:	af00      	add	r7, sp, #0
 8003952:	60f8      	str	r0, [r7, #12]
 8003954:	60b9      	str	r1, [r7, #8]
 8003956:	607a      	str	r2, [r7, #4]
 8003958:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6a1b      	ldr	r3, [r3, #32]
 800395e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6a1b      	ldr	r3, [r3, #32]
 8003964:	f023 0210 	bic.w	r2, r3, #16
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	699b      	ldr	r3, [r3, #24]
 8003970:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003978:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	021b      	lsls	r3, r3, #8
 800397e:	693a      	ldr	r2, [r7, #16]
 8003980:	4313      	orrs	r3, r2
 8003982:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800398a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	031b      	lsls	r3, r3, #12
 8003990:	b29b      	uxth	r3, r3
 8003992:	693a      	ldr	r2, [r7, #16]
 8003994:	4313      	orrs	r3, r2
 8003996:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800399e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	011b      	lsls	r3, r3, #4
 80039a4:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80039a8:	697a      	ldr	r2, [r7, #20]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	693a      	ldr	r2, [r7, #16]
 80039b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	697a      	ldr	r2, [r7, #20]
 80039b8:	621a      	str	r2, [r3, #32]
}
 80039ba:	bf00      	nop
 80039bc:	371c      	adds	r7, #28
 80039be:	46bd      	mov	sp, r7
 80039c0:	bc80      	pop	{r7}
 80039c2:	4770      	bx	lr

080039c4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b087      	sub	sp, #28
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	60f8      	str	r0, [r7, #12]
 80039cc:	60b9      	str	r1, [r7, #8]
 80039ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	6a1b      	ldr	r3, [r3, #32]
 80039d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	6a1b      	ldr	r3, [r3, #32]
 80039da:	f023 0210 	bic.w	r2, r3, #16
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	699b      	ldr	r3, [r3, #24]
 80039e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80039ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	031b      	lsls	r3, r3, #12
 80039f4:	693a      	ldr	r2, [r7, #16]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003a00:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	011b      	lsls	r3, r3, #4
 8003a06:	697a      	ldr	r2, [r7, #20]
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	693a      	ldr	r2, [r7, #16]
 8003a10:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	697a      	ldr	r2, [r7, #20]
 8003a16:	621a      	str	r2, [r3, #32]
}
 8003a18:	bf00      	nop
 8003a1a:	371c      	adds	r7, #28
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bc80      	pop	{r7}
 8003a20:	4770      	bx	lr

08003a22 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003a22:	b480      	push	{r7}
 8003a24:	b087      	sub	sp, #28
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	60f8      	str	r0, [r7, #12]
 8003a2a:	60b9      	str	r1, [r7, #8]
 8003a2c:	607a      	str	r2, [r7, #4]
 8003a2e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6a1b      	ldr	r3, [r3, #32]
 8003a34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6a1b      	ldr	r3, [r3, #32]
 8003a3a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	69db      	ldr	r3, [r3, #28]
 8003a46:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	f023 0303 	bic.w	r3, r3, #3
 8003a4e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8003a50:	693a      	ldr	r2, [r7, #16]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003a5e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	011b      	lsls	r3, r3, #4
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	693a      	ldr	r2, [r7, #16]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003a72:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	021b      	lsls	r3, r3, #8
 8003a78:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a7c:	697a      	ldr	r2, [r7, #20]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	693a      	ldr	r2, [r7, #16]
 8003a86:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	697a      	ldr	r2, [r7, #20]
 8003a8c:	621a      	str	r2, [r3, #32]
}
 8003a8e:	bf00      	nop
 8003a90:	371c      	adds	r7, #28
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bc80      	pop	{r7}
 8003a96:	4770      	bx	lr

08003a98 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b087      	sub	sp, #28
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	60b9      	str	r1, [r7, #8]
 8003aa2:	607a      	str	r2, [r7, #4]
 8003aa4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	6a1b      	ldr	r3, [r3, #32]
 8003aaa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6a1b      	ldr	r3, [r3, #32]
 8003ab0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	69db      	ldr	r3, [r3, #28]
 8003abc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ac4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	021b      	lsls	r3, r3, #8
 8003aca:	693a      	ldr	r2, [r7, #16]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003ad6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	031b      	lsls	r3, r3, #12
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	693a      	ldr	r2, [r7, #16]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003aea:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	031b      	lsls	r3, r3, #12
 8003af0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003af4:	697a      	ldr	r2, [r7, #20]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	693a      	ldr	r2, [r7, #16]
 8003afe:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	697a      	ldr	r2, [r7, #20]
 8003b04:	621a      	str	r2, [r3, #32]
}
 8003b06:	bf00      	nop
 8003b08:	371c      	adds	r7, #28
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bc80      	pop	{r7}
 8003b0e:	4770      	bx	lr

08003b10 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b085      	sub	sp, #20
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b26:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b28:	683a      	ldr	r2, [r7, #0]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	f043 0307 	orr.w	r3, r3, #7
 8003b32:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	68fa      	ldr	r2, [r7, #12]
 8003b38:	609a      	str	r2, [r3, #8]
}
 8003b3a:	bf00      	nop
 8003b3c:	3714      	adds	r7, #20
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bc80      	pop	{r7}
 8003b42:	4770      	bx	lr

08003b44 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b087      	sub	sp, #28
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	60f8      	str	r0, [r7, #12]
 8003b4c:	60b9      	str	r1, [r7, #8]
 8003b4e:	607a      	str	r2, [r7, #4]
 8003b50:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003b5e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	021a      	lsls	r2, r3, #8
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	431a      	orrs	r2, r3
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	697a      	ldr	r2, [r7, #20]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	697a      	ldr	r2, [r7, #20]
 8003b76:	609a      	str	r2, [r3, #8]
}
 8003b78:	bf00      	nop
 8003b7a:	371c      	adds	r7, #28
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bc80      	pop	{r7}
 8003b80:	4770      	bx	lr

08003b82 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003b82:	b480      	push	{r7}
 8003b84:	b087      	sub	sp, #28
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	60f8      	str	r0, [r7, #12]
 8003b8a:	60b9      	str	r1, [r7, #8]
 8003b8c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	f003 031f 	and.w	r3, r3, #31
 8003b94:	2201      	movs	r2, #1
 8003b96:	fa02 f303 	lsl.w	r3, r2, r3
 8003b9a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6a1a      	ldr	r2, [r3, #32]
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	43db      	mvns	r3, r3
 8003ba4:	401a      	ands	r2, r3
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	6a1a      	ldr	r2, [r3, #32]
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	f003 031f 	and.w	r3, r3, #31
 8003bb4:	6879      	ldr	r1, [r7, #4]
 8003bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8003bba:	431a      	orrs	r2, r3
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	621a      	str	r2, [r3, #32]
}
 8003bc0:	bf00      	nop
 8003bc2:	371c      	adds	r7, #28
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bc80      	pop	{r7}
 8003bc8:	4770      	bx	lr
	...

08003bcc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b085      	sub	sp, #20
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d101      	bne.n	8003be4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003be0:	2302      	movs	r3, #2
 8003be2:	e046      	b.n	8003c72 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2202      	movs	r2, #2
 8003bf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	68fa      	ldr	r2, [r7, #12]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	68fa      	ldr	r2, [r7, #12]
 8003c1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a16      	ldr	r2, [pc, #88]	@ (8003c7c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d00e      	beq.n	8003c46 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c30:	d009      	beq.n	8003c46 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a12      	ldr	r2, [pc, #72]	@ (8003c80 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d004      	beq.n	8003c46 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a10      	ldr	r2, [pc, #64]	@ (8003c84 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d10c      	bne.n	8003c60 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c4c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	68ba      	ldr	r2, [r7, #8]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	68ba      	ldr	r2, [r7, #8]
 8003c5e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003c70:	2300      	movs	r3, #0
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3714      	adds	r7, #20
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bc80      	pop	{r7}
 8003c7a:	4770      	bx	lr
 8003c7c:	40012c00 	.word	0x40012c00
 8003c80:	40000400 	.word	0x40000400
 8003c84:	40000800 	.word	0x40000800

08003c88 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b083      	sub	sp, #12
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c90:	bf00      	nop
 8003c92:	370c      	adds	r7, #12
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bc80      	pop	{r7}
 8003c98:	4770      	bx	lr

08003c9a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c9a:	b480      	push	{r7}
 8003c9c:	b083      	sub	sp, #12
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ca2:	bf00      	nop
 8003ca4:	370c      	adds	r7, #12
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bc80      	pop	{r7}
 8003caa:	4770      	bx	lr

08003cac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b082      	sub	sp, #8
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d101      	bne.n	8003cbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e042      	b.n	8003d44 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d106      	bne.n	8003cd8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f7fd fd18 	bl	8001708 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2224      	movs	r2, #36	@ 0x24
 8003cdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	68da      	ldr	r2, [r3, #12]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003cee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f000 fcff 	bl	80046f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	691a      	ldr	r2, [r3, #16]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003d04:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	695a      	ldr	r2, [r3, #20]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003d14:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	68da      	ldr	r2, [r3, #12]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003d24:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2220      	movs	r2, #32
 8003d30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2220      	movs	r2, #32
 8003d38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003d42:	2300      	movs	r3, #0
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3708      	adds	r7, #8
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b085      	sub	sp, #20
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	60f8      	str	r0, [r7, #12]
 8003d54:	60b9      	str	r1, [r7, #8]
 8003d56:	4613      	mov	r3, r2
 8003d58:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	2b20      	cmp	r3, #32
 8003d64:	d121      	bne.n	8003daa <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d002      	beq.n	8003d72 <HAL_UART_Transmit_IT+0x26>
 8003d6c:	88fb      	ldrh	r3, [r7, #6]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d101      	bne.n	8003d76 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e01a      	b.n	8003dac <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	68ba      	ldr	r2, [r7, #8]
 8003d7a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	88fa      	ldrh	r2, [r7, #6]
 8003d80:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	88fa      	ldrh	r2, [r7, #6]
 8003d86:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2221      	movs	r2, #33	@ 0x21
 8003d92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	68da      	ldr	r2, [r3, #12]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003da4:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003da6:	2300      	movs	r3, #0
 8003da8:	e000      	b.n	8003dac <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8003daa:	2302      	movs	r3, #2
  }
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3714      	adds	r7, #20
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bc80      	pop	{r7}
 8003db4:	4770      	bx	lr

08003db6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003db6:	b580      	push	{r7, lr}
 8003db8:	b084      	sub	sp, #16
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	60f8      	str	r0, [r7, #12]
 8003dbe:	60b9      	str	r1, [r7, #8]
 8003dc0:	4613      	mov	r3, r2
 8003dc2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	2b20      	cmp	r3, #32
 8003dce:	d112      	bne.n	8003df6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d002      	beq.n	8003ddc <HAL_UART_Receive_IT+0x26>
 8003dd6:	88fb      	ldrh	r3, [r7, #6]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d101      	bne.n	8003de0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e00b      	b.n	8003df8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2200      	movs	r2, #0
 8003de4:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003de6:	88fb      	ldrh	r3, [r7, #6]
 8003de8:	461a      	mov	r2, r3
 8003dea:	68b9      	ldr	r1, [r7, #8]
 8003dec:	68f8      	ldr	r0, [r7, #12]
 8003dee:	f000 faad 	bl	800434c <UART_Start_Receive_IT>
 8003df2:	4603      	mov	r3, r0
 8003df4:	e000      	b.n	8003df8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003df6:	2302      	movs	r3, #2
  }
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3710      	adds	r7, #16
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}

08003e00 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b0ba      	sub	sp, #232	@ 0xe8
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	695b      	ldr	r3, [r3, #20]
 8003e22:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003e26:	2300      	movs	r3, #0
 8003e28:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003e32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e36:	f003 030f 	and.w	r3, r3, #15
 8003e3a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003e3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d10f      	bne.n	8003e66 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e4a:	f003 0320 	and.w	r3, r3, #32
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d009      	beq.n	8003e66 <HAL_UART_IRQHandler+0x66>
 8003e52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e56:	f003 0320 	and.w	r3, r3, #32
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d003      	beq.n	8003e66 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f000 fb8a 	bl	8004578 <UART_Receive_IT>
      return;
 8003e64:	e25b      	b.n	800431e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003e66:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	f000 80de 	beq.w	800402c <HAL_UART_IRQHandler+0x22c>
 8003e70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e74:	f003 0301 	and.w	r3, r3, #1
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d106      	bne.n	8003e8a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003e7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e80:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	f000 80d1 	beq.w	800402c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003e8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e8e:	f003 0301 	and.w	r3, r3, #1
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d00b      	beq.n	8003eae <HAL_UART_IRQHandler+0xae>
 8003e96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d005      	beq.n	8003eae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ea6:	f043 0201 	orr.w	r2, r3, #1
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003eae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003eb2:	f003 0304 	and.w	r3, r3, #4
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d00b      	beq.n	8003ed2 <HAL_UART_IRQHandler+0xd2>
 8003eba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ebe:	f003 0301 	and.w	r3, r3, #1
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d005      	beq.n	8003ed2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eca:	f043 0202 	orr.w	r2, r3, #2
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ed2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ed6:	f003 0302 	and.w	r3, r3, #2
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d00b      	beq.n	8003ef6 <HAL_UART_IRQHandler+0xf6>
 8003ede:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ee2:	f003 0301 	and.w	r3, r3, #1
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d005      	beq.n	8003ef6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eee:	f043 0204 	orr.w	r2, r3, #4
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003ef6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003efa:	f003 0308 	and.w	r3, r3, #8
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d011      	beq.n	8003f26 <HAL_UART_IRQHandler+0x126>
 8003f02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f06:	f003 0320 	and.w	r3, r3, #32
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d105      	bne.n	8003f1a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003f0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f12:	f003 0301 	and.w	r3, r3, #1
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d005      	beq.n	8003f26 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f1e:	f043 0208 	orr.w	r2, r3, #8
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	f000 81f2 	beq.w	8004314 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f34:	f003 0320 	and.w	r3, r3, #32
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d008      	beq.n	8003f4e <HAL_UART_IRQHandler+0x14e>
 8003f3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f40:	f003 0320 	and.w	r3, r3, #32
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d002      	beq.n	8003f4e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f000 fb15 	bl	8004578 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	695b      	ldr	r3, [r3, #20]
 8003f54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	bf14      	ite	ne
 8003f5c:	2301      	movne	r3, #1
 8003f5e:	2300      	moveq	r3, #0
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f6a:	f003 0308 	and.w	r3, r3, #8
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d103      	bne.n	8003f7a <HAL_UART_IRQHandler+0x17a>
 8003f72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d04f      	beq.n	800401a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f000 fa1f 	bl	80043be <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	695b      	ldr	r3, [r3, #20]
 8003f86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d041      	beq.n	8004012 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	3314      	adds	r3, #20
 8003f94:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f98:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003f9c:	e853 3f00 	ldrex	r3, [r3]
 8003fa0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003fa4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003fa8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003fac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	3314      	adds	r3, #20
 8003fb6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003fba:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003fbe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fc2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003fc6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003fca:	e841 2300 	strex	r3, r2, [r1]
 8003fce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003fd2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d1d9      	bne.n	8003f8e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d013      	beq.n	800400a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fe6:	4a7e      	ldr	r2, [pc, #504]	@ (80041e0 <HAL_UART_IRQHandler+0x3e0>)
 8003fe8:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f7fd fdc4 	bl	8001b7c <HAL_DMA_Abort_IT>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d016      	beq.n	8004028 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ffe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004000:	687a      	ldr	r2, [r7, #4]
 8004002:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004004:	4610      	mov	r0, r2
 8004006:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004008:	e00e      	b.n	8004028 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f000 f98a 	bl	8004324 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004010:	e00a      	b.n	8004028 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f000 f986 	bl	8004324 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004018:	e006      	b.n	8004028 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f000 f982 	bl	8004324 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004026:	e175      	b.n	8004314 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004028:	bf00      	nop
    return;
 800402a:	e173      	b.n	8004314 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004030:	2b01      	cmp	r3, #1
 8004032:	f040 814f 	bne.w	80042d4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004036:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800403a:	f003 0310 	and.w	r3, r3, #16
 800403e:	2b00      	cmp	r3, #0
 8004040:	f000 8148 	beq.w	80042d4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004044:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004048:	f003 0310 	and.w	r3, r3, #16
 800404c:	2b00      	cmp	r3, #0
 800404e:	f000 8141 	beq.w	80042d4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004052:	2300      	movs	r3, #0
 8004054:	60bb      	str	r3, [r7, #8]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	60bb      	str	r3, [r7, #8]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	60bb      	str	r3, [r7, #8]
 8004066:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	695b      	ldr	r3, [r3, #20]
 800406e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004072:	2b00      	cmp	r3, #0
 8004074:	f000 80b6 	beq.w	80041e4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004084:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004088:	2b00      	cmp	r3, #0
 800408a:	f000 8145 	beq.w	8004318 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004092:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004096:	429a      	cmp	r2, r3
 8004098:	f080 813e 	bcs.w	8004318 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80040a2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040a8:	699b      	ldr	r3, [r3, #24]
 80040aa:	2b20      	cmp	r3, #32
 80040ac:	f000 8088 	beq.w	80041c0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	330c      	adds	r3, #12
 80040b6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80040be:	e853 3f00 	ldrex	r3, [r3]
 80040c2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80040c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80040ca:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80040ce:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	330c      	adds	r3, #12
 80040d8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80040dc:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80040e0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e4:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80040e8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80040ec:	e841 2300 	strex	r3, r2, [r1]
 80040f0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80040f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d1d9      	bne.n	80040b0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	3314      	adds	r3, #20
 8004102:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004104:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004106:	e853 3f00 	ldrex	r3, [r3]
 800410a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800410c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800410e:	f023 0301 	bic.w	r3, r3, #1
 8004112:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	3314      	adds	r3, #20
 800411c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004120:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004124:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004126:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004128:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800412c:	e841 2300 	strex	r3, r2, [r1]
 8004130:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004132:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004134:	2b00      	cmp	r3, #0
 8004136:	d1e1      	bne.n	80040fc <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	3314      	adds	r3, #20
 800413e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004140:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004142:	e853 3f00 	ldrex	r3, [r3]
 8004146:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004148:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800414a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800414e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	3314      	adds	r3, #20
 8004158:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800415c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800415e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004160:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004162:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004164:	e841 2300 	strex	r3, r2, [r1]
 8004168:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800416a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800416c:	2b00      	cmp	r3, #0
 800416e:	d1e3      	bne.n	8004138 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2220      	movs	r2, #32
 8004174:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	330c      	adds	r3, #12
 8004184:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004186:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004188:	e853 3f00 	ldrex	r3, [r3]
 800418c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800418e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004190:	f023 0310 	bic.w	r3, r3, #16
 8004194:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	330c      	adds	r3, #12
 800419e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80041a2:	65ba      	str	r2, [r7, #88]	@ 0x58
 80041a4:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041a6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80041a8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80041aa:	e841 2300 	strex	r3, r2, [r1]
 80041ae:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80041b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d1e3      	bne.n	800417e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041ba:	4618      	mov	r0, r3
 80041bc:	f7fd fca3 	bl	8001b06 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2202      	movs	r2, #2
 80041c4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	4619      	mov	r1, r3
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f000 f8ad 	bl	8004336 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80041dc:	e09c      	b.n	8004318 <HAL_UART_IRQHandler+0x518>
 80041de:	bf00      	nop
 80041e0:	08004483 	.word	0x08004483
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	1ad3      	subs	r3, r2, r3
 80041f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80041f8:	b29b      	uxth	r3, r3
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	f000 808e 	beq.w	800431c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004200:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004204:	2b00      	cmp	r3, #0
 8004206:	f000 8089 	beq.w	800431c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	330c      	adds	r3, #12
 8004210:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004212:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004214:	e853 3f00 	ldrex	r3, [r3]
 8004218:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800421a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800421c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004220:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	330c      	adds	r3, #12
 800422a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800422e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004230:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004232:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004234:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004236:	e841 2300 	strex	r3, r2, [r1]
 800423a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800423c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800423e:	2b00      	cmp	r3, #0
 8004240:	d1e3      	bne.n	800420a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	3314      	adds	r3, #20
 8004248:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800424a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800424c:	e853 3f00 	ldrex	r3, [r3]
 8004250:	623b      	str	r3, [r7, #32]
   return(result);
 8004252:	6a3b      	ldr	r3, [r7, #32]
 8004254:	f023 0301 	bic.w	r3, r3, #1
 8004258:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	3314      	adds	r3, #20
 8004262:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004266:	633a      	str	r2, [r7, #48]	@ 0x30
 8004268:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800426a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800426c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800426e:	e841 2300 	strex	r3, r2, [r1]
 8004272:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004276:	2b00      	cmp	r3, #0
 8004278:	d1e3      	bne.n	8004242 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2220      	movs	r2, #32
 800427e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2200      	movs	r2, #0
 8004286:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	330c      	adds	r3, #12
 800428e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	e853 3f00 	ldrex	r3, [r3]
 8004296:	60fb      	str	r3, [r7, #12]
   return(result);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f023 0310 	bic.w	r3, r3, #16
 800429e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	330c      	adds	r3, #12
 80042a8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80042ac:	61fa      	str	r2, [r7, #28]
 80042ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b0:	69b9      	ldr	r1, [r7, #24]
 80042b2:	69fa      	ldr	r2, [r7, #28]
 80042b4:	e841 2300 	strex	r3, r2, [r1]
 80042b8:	617b      	str	r3, [r7, #20]
   return(result);
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d1e3      	bne.n	8004288 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2202      	movs	r2, #2
 80042c4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80042c6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80042ca:	4619      	mov	r1, r3
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f000 f832 	bl	8004336 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80042d2:	e023      	b.n	800431c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80042d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d009      	beq.n	80042f4 <HAL_UART_IRQHandler+0x4f4>
 80042e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d003      	beq.n	80042f4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f000 f8dc 	bl	80044aa <UART_Transmit_IT>
    return;
 80042f2:	e014      	b.n	800431e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80042f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d00e      	beq.n	800431e <HAL_UART_IRQHandler+0x51e>
 8004300:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004304:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004308:	2b00      	cmp	r3, #0
 800430a:	d008      	beq.n	800431e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	f000 f91b 	bl	8004548 <UART_EndTransmit_IT>
    return;
 8004312:	e004      	b.n	800431e <HAL_UART_IRQHandler+0x51e>
    return;
 8004314:	bf00      	nop
 8004316:	e002      	b.n	800431e <HAL_UART_IRQHandler+0x51e>
      return;
 8004318:	bf00      	nop
 800431a:	e000      	b.n	800431e <HAL_UART_IRQHandler+0x51e>
      return;
 800431c:	bf00      	nop
  }
}
 800431e:	37e8      	adds	r7, #232	@ 0xe8
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}

08004324 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004324:	b480      	push	{r7}
 8004326:	b083      	sub	sp, #12
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800432c:	bf00      	nop
 800432e:	370c      	adds	r7, #12
 8004330:	46bd      	mov	sp, r7
 8004332:	bc80      	pop	{r7}
 8004334:	4770      	bx	lr

08004336 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004336:	b480      	push	{r7}
 8004338:	b083      	sub	sp, #12
 800433a:	af00      	add	r7, sp, #0
 800433c:	6078      	str	r0, [r7, #4]
 800433e:	460b      	mov	r3, r1
 8004340:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004342:	bf00      	nop
 8004344:	370c      	adds	r7, #12
 8004346:	46bd      	mov	sp, r7
 8004348:	bc80      	pop	{r7}
 800434a:	4770      	bx	lr

0800434c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800434c:	b480      	push	{r7}
 800434e:	b085      	sub	sp, #20
 8004350:	af00      	add	r7, sp, #0
 8004352:	60f8      	str	r0, [r7, #12]
 8004354:	60b9      	str	r1, [r7, #8]
 8004356:	4613      	mov	r3, r2
 8004358:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	68ba      	ldr	r2, [r7, #8]
 800435e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	88fa      	ldrh	r2, [r7, #6]
 8004364:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	88fa      	ldrh	r2, [r7, #6]
 800436a:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2200      	movs	r2, #0
 8004370:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2222      	movs	r2, #34	@ 0x22
 8004376:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	691b      	ldr	r3, [r3, #16]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d007      	beq.n	8004392 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	68da      	ldr	r2, [r3, #12]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004390:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	695a      	ldr	r2, [r3, #20]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f042 0201 	orr.w	r2, r2, #1
 80043a0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	68da      	ldr	r2, [r3, #12]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f042 0220 	orr.w	r2, r2, #32
 80043b0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80043b2:	2300      	movs	r3, #0
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3714      	adds	r7, #20
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bc80      	pop	{r7}
 80043bc:	4770      	bx	lr

080043be <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80043be:	b480      	push	{r7}
 80043c0:	b095      	sub	sp, #84	@ 0x54
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	330c      	adds	r3, #12
 80043cc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043d0:	e853 3f00 	ldrex	r3, [r3]
 80043d4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80043d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80043dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	330c      	adds	r3, #12
 80043e4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80043e6:	643a      	str	r2, [r7, #64]	@ 0x40
 80043e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ea:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80043ec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80043ee:	e841 2300 	strex	r3, r2, [r1]
 80043f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80043f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d1e5      	bne.n	80043c6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	3314      	adds	r3, #20
 8004400:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004402:	6a3b      	ldr	r3, [r7, #32]
 8004404:	e853 3f00 	ldrex	r3, [r3]
 8004408:	61fb      	str	r3, [r7, #28]
   return(result);
 800440a:	69fb      	ldr	r3, [r7, #28]
 800440c:	f023 0301 	bic.w	r3, r3, #1
 8004410:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	3314      	adds	r3, #20
 8004418:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800441a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800441c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800441e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004420:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004422:	e841 2300 	strex	r3, r2, [r1]
 8004426:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800442a:	2b00      	cmp	r3, #0
 800442c:	d1e5      	bne.n	80043fa <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004432:	2b01      	cmp	r3, #1
 8004434:	d119      	bne.n	800446a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	330c      	adds	r3, #12
 800443c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	e853 3f00 	ldrex	r3, [r3]
 8004444:	60bb      	str	r3, [r7, #8]
   return(result);
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	f023 0310 	bic.w	r3, r3, #16
 800444c:	647b      	str	r3, [r7, #68]	@ 0x44
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	330c      	adds	r3, #12
 8004454:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004456:	61ba      	str	r2, [r7, #24]
 8004458:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800445a:	6979      	ldr	r1, [r7, #20]
 800445c:	69ba      	ldr	r2, [r7, #24]
 800445e:	e841 2300 	strex	r3, r2, [r1]
 8004462:	613b      	str	r3, [r7, #16]
   return(result);
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d1e5      	bne.n	8004436 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2220      	movs	r2, #32
 800446e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004478:	bf00      	nop
 800447a:	3754      	adds	r7, #84	@ 0x54
 800447c:	46bd      	mov	sp, r7
 800447e:	bc80      	pop	{r7}
 8004480:	4770      	bx	lr

08004482 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004482:	b580      	push	{r7, lr}
 8004484:	b084      	sub	sp, #16
 8004486:	af00      	add	r7, sp, #0
 8004488:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800448e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2200      	movs	r2, #0
 8004494:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2200      	movs	r2, #0
 800449a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800449c:	68f8      	ldr	r0, [r7, #12]
 800449e:	f7ff ff41 	bl	8004324 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80044a2:	bf00      	nop
 80044a4:	3710      	adds	r7, #16
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}

080044aa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80044aa:	b480      	push	{r7}
 80044ac:	b085      	sub	sp, #20
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	2b21      	cmp	r3, #33	@ 0x21
 80044bc:	d13e      	bne.n	800453c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044c6:	d114      	bne.n	80044f2 <UART_Transmit_IT+0x48>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	691b      	ldr	r3, [r3, #16]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d110      	bne.n	80044f2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6a1b      	ldr	r3, [r3, #32]
 80044d4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	881b      	ldrh	r3, [r3, #0]
 80044da:	461a      	mov	r2, r3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044e4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6a1b      	ldr	r3, [r3, #32]
 80044ea:	1c9a      	adds	r2, r3, #2
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	621a      	str	r2, [r3, #32]
 80044f0:	e008      	b.n	8004504 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6a1b      	ldr	r3, [r3, #32]
 80044f6:	1c59      	adds	r1, r3, #1
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	6211      	str	r1, [r2, #32]
 80044fc:	781a      	ldrb	r2, [r3, #0]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004508:	b29b      	uxth	r3, r3
 800450a:	3b01      	subs	r3, #1
 800450c:	b29b      	uxth	r3, r3
 800450e:	687a      	ldr	r2, [r7, #4]
 8004510:	4619      	mov	r1, r3
 8004512:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004514:	2b00      	cmp	r3, #0
 8004516:	d10f      	bne.n	8004538 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	68da      	ldr	r2, [r3, #12]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004526:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	68da      	ldr	r2, [r3, #12]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004536:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004538:	2300      	movs	r3, #0
 800453a:	e000      	b.n	800453e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800453c:	2302      	movs	r3, #2
  }
}
 800453e:	4618      	mov	r0, r3
 8004540:	3714      	adds	r7, #20
 8004542:	46bd      	mov	sp, r7
 8004544:	bc80      	pop	{r7}
 8004546:	4770      	bx	lr

08004548 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b082      	sub	sp, #8
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	68da      	ldr	r2, [r3, #12]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800455e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2220      	movs	r2, #32
 8004564:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f7fc f8e9 	bl	8000740 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800456e:	2300      	movs	r3, #0
}
 8004570:	4618      	mov	r0, r3
 8004572:	3708      	adds	r7, #8
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}

08004578 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b08c      	sub	sp, #48	@ 0x30
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004586:	b2db      	uxtb	r3, r3
 8004588:	2b22      	cmp	r3, #34	@ 0x22
 800458a:	f040 80ae 	bne.w	80046ea <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004596:	d117      	bne.n	80045c8 <UART_Receive_IT+0x50>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	691b      	ldr	r3, [r3, #16]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d113      	bne.n	80045c8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80045a0:	2300      	movs	r3, #0
 80045a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045a8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	b29b      	uxth	r3, r3
 80045b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045b6:	b29a      	uxth	r2, r3
 80045b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045ba:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045c0:	1c9a      	adds	r2, r3, #2
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	629a      	str	r2, [r3, #40]	@ 0x28
 80045c6:	e026      	b.n	8004616 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80045ce:	2300      	movs	r3, #0
 80045d0:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045da:	d007      	beq.n	80045ec <UART_Receive_IT+0x74>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d10a      	bne.n	80045fa <UART_Receive_IT+0x82>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	691b      	ldr	r3, [r3, #16]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d106      	bne.n	80045fa <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	b2da      	uxtb	r2, r3
 80045f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045f6:	701a      	strb	r2, [r3, #0]
 80045f8:	e008      	b.n	800460c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	b2db      	uxtb	r3, r3
 8004602:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004606:	b2da      	uxtb	r2, r3
 8004608:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800460a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004610:	1c5a      	adds	r2, r3, #1
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800461a:	b29b      	uxth	r3, r3
 800461c:	3b01      	subs	r3, #1
 800461e:	b29b      	uxth	r3, r3
 8004620:	687a      	ldr	r2, [r7, #4]
 8004622:	4619      	mov	r1, r3
 8004624:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004626:	2b00      	cmp	r3, #0
 8004628:	d15d      	bne.n	80046e6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	68da      	ldr	r2, [r3, #12]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f022 0220 	bic.w	r2, r2, #32
 8004638:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	68da      	ldr	r2, [r3, #12]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004648:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	695a      	ldr	r2, [r3, #20]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f022 0201 	bic.w	r2, r2, #1
 8004658:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2220      	movs	r2, #32
 800465e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800466c:	2b01      	cmp	r3, #1
 800466e:	d135      	bne.n	80046dc <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2200      	movs	r2, #0
 8004674:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	330c      	adds	r3, #12
 800467c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	e853 3f00 	ldrex	r3, [r3]
 8004684:	613b      	str	r3, [r7, #16]
   return(result);
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	f023 0310 	bic.w	r3, r3, #16
 800468c:	627b      	str	r3, [r7, #36]	@ 0x24
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	330c      	adds	r3, #12
 8004694:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004696:	623a      	str	r2, [r7, #32]
 8004698:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800469a:	69f9      	ldr	r1, [r7, #28]
 800469c:	6a3a      	ldr	r2, [r7, #32]
 800469e:	e841 2300 	strex	r3, r2, [r1]
 80046a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80046a4:	69bb      	ldr	r3, [r7, #24]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d1e5      	bne.n	8004676 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 0310 	and.w	r3, r3, #16
 80046b4:	2b10      	cmp	r3, #16
 80046b6:	d10a      	bne.n	80046ce <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80046b8:	2300      	movs	r3, #0
 80046ba:	60fb      	str	r3, [r7, #12]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	60fb      	str	r3, [r7, #12]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	60fb      	str	r3, [r7, #12]
 80046cc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80046d2:	4619      	mov	r1, r3
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f7ff fe2e 	bl	8004336 <HAL_UARTEx_RxEventCallback>
 80046da:	e002      	b.n	80046e2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f7fc f803 	bl	80006e8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80046e2:	2300      	movs	r3, #0
 80046e4:	e002      	b.n	80046ec <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80046e6:	2300      	movs	r3, #0
 80046e8:	e000      	b.n	80046ec <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80046ea:	2302      	movs	r3, #2
  }
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3730      	adds	r7, #48	@ 0x30
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}

080046f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b084      	sub	sp, #16
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	691b      	ldr	r3, [r3, #16]
 8004702:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	68da      	ldr	r2, [r3, #12]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	430a      	orrs	r2, r1
 8004710:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	689a      	ldr	r2, [r3, #8]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	691b      	ldr	r3, [r3, #16]
 800471a:	431a      	orrs	r2, r3
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	695b      	ldr	r3, [r3, #20]
 8004720:	4313      	orrs	r3, r2
 8004722:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800472e:	f023 030c 	bic.w	r3, r3, #12
 8004732:	687a      	ldr	r2, [r7, #4]
 8004734:	6812      	ldr	r2, [r2, #0]
 8004736:	68b9      	ldr	r1, [r7, #8]
 8004738:	430b      	orrs	r3, r1
 800473a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	695b      	ldr	r3, [r3, #20]
 8004742:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	699a      	ldr	r2, [r3, #24]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	430a      	orrs	r2, r1
 8004750:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a2c      	ldr	r2, [pc, #176]	@ (8004808 <UART_SetConfig+0x114>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d103      	bne.n	8004764 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800475c:	f7fe f83a 	bl	80027d4 <HAL_RCC_GetPCLK2Freq>
 8004760:	60f8      	str	r0, [r7, #12]
 8004762:	e002      	b.n	800476a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004764:	f7fe f822 	bl	80027ac <HAL_RCC_GetPCLK1Freq>
 8004768:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800476a:	68fa      	ldr	r2, [r7, #12]
 800476c:	4613      	mov	r3, r2
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	4413      	add	r3, r2
 8004772:	009a      	lsls	r2, r3, #2
 8004774:	441a      	add	r2, r3
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004780:	4a22      	ldr	r2, [pc, #136]	@ (800480c <UART_SetConfig+0x118>)
 8004782:	fba2 2303 	umull	r2, r3, r2, r3
 8004786:	095b      	lsrs	r3, r3, #5
 8004788:	0119      	lsls	r1, r3, #4
 800478a:	68fa      	ldr	r2, [r7, #12]
 800478c:	4613      	mov	r3, r2
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	4413      	add	r3, r2
 8004792:	009a      	lsls	r2, r3, #2
 8004794:	441a      	add	r2, r3
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	fbb2 f2f3 	udiv	r2, r2, r3
 80047a0:	4b1a      	ldr	r3, [pc, #104]	@ (800480c <UART_SetConfig+0x118>)
 80047a2:	fba3 0302 	umull	r0, r3, r3, r2
 80047a6:	095b      	lsrs	r3, r3, #5
 80047a8:	2064      	movs	r0, #100	@ 0x64
 80047aa:	fb00 f303 	mul.w	r3, r0, r3
 80047ae:	1ad3      	subs	r3, r2, r3
 80047b0:	011b      	lsls	r3, r3, #4
 80047b2:	3332      	adds	r3, #50	@ 0x32
 80047b4:	4a15      	ldr	r2, [pc, #84]	@ (800480c <UART_SetConfig+0x118>)
 80047b6:	fba2 2303 	umull	r2, r3, r2, r3
 80047ba:	095b      	lsrs	r3, r3, #5
 80047bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80047c0:	4419      	add	r1, r3
 80047c2:	68fa      	ldr	r2, [r7, #12]
 80047c4:	4613      	mov	r3, r2
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	4413      	add	r3, r2
 80047ca:	009a      	lsls	r2, r3, #2
 80047cc:	441a      	add	r2, r3
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	009b      	lsls	r3, r3, #2
 80047d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80047d8:	4b0c      	ldr	r3, [pc, #48]	@ (800480c <UART_SetConfig+0x118>)
 80047da:	fba3 0302 	umull	r0, r3, r3, r2
 80047de:	095b      	lsrs	r3, r3, #5
 80047e0:	2064      	movs	r0, #100	@ 0x64
 80047e2:	fb00 f303 	mul.w	r3, r0, r3
 80047e6:	1ad3      	subs	r3, r2, r3
 80047e8:	011b      	lsls	r3, r3, #4
 80047ea:	3332      	adds	r3, #50	@ 0x32
 80047ec:	4a07      	ldr	r2, [pc, #28]	@ (800480c <UART_SetConfig+0x118>)
 80047ee:	fba2 2303 	umull	r2, r3, r2, r3
 80047f2:	095b      	lsrs	r3, r3, #5
 80047f4:	f003 020f 	and.w	r2, r3, #15
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	440a      	add	r2, r1
 80047fe:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004800:	bf00      	nop
 8004802:	3710      	adds	r7, #16
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}
 8004808:	40013800 	.word	0x40013800
 800480c:	51eb851f 	.word	0x51eb851f

08004810 <atoi>:
 8004810:	220a      	movs	r2, #10
 8004812:	2100      	movs	r1, #0
 8004814:	f000 b87a 	b.w	800490c <strtol>

08004818 <_strtol_l.constprop.0>:
 8004818:	2b24      	cmp	r3, #36	@ 0x24
 800481a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800481e:	4686      	mov	lr, r0
 8004820:	4690      	mov	r8, r2
 8004822:	d801      	bhi.n	8004828 <_strtol_l.constprop.0+0x10>
 8004824:	2b01      	cmp	r3, #1
 8004826:	d106      	bne.n	8004836 <_strtol_l.constprop.0+0x1e>
 8004828:	f000 f93a 	bl	8004aa0 <__errno>
 800482c:	2316      	movs	r3, #22
 800482e:	6003      	str	r3, [r0, #0]
 8004830:	2000      	movs	r0, #0
 8004832:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004836:	460d      	mov	r5, r1
 8004838:	4833      	ldr	r0, [pc, #204]	@ (8004908 <_strtol_l.constprop.0+0xf0>)
 800483a:	462a      	mov	r2, r5
 800483c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004840:	5d06      	ldrb	r6, [r0, r4]
 8004842:	f016 0608 	ands.w	r6, r6, #8
 8004846:	d1f8      	bne.n	800483a <_strtol_l.constprop.0+0x22>
 8004848:	2c2d      	cmp	r4, #45	@ 0x2d
 800484a:	d12d      	bne.n	80048a8 <_strtol_l.constprop.0+0x90>
 800484c:	2601      	movs	r6, #1
 800484e:	782c      	ldrb	r4, [r5, #0]
 8004850:	1c95      	adds	r5, r2, #2
 8004852:	f033 0210 	bics.w	r2, r3, #16
 8004856:	d109      	bne.n	800486c <_strtol_l.constprop.0+0x54>
 8004858:	2c30      	cmp	r4, #48	@ 0x30
 800485a:	d12a      	bne.n	80048b2 <_strtol_l.constprop.0+0x9a>
 800485c:	782a      	ldrb	r2, [r5, #0]
 800485e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8004862:	2a58      	cmp	r2, #88	@ 0x58
 8004864:	d125      	bne.n	80048b2 <_strtol_l.constprop.0+0x9a>
 8004866:	2310      	movs	r3, #16
 8004868:	786c      	ldrb	r4, [r5, #1]
 800486a:	3502      	adds	r5, #2
 800486c:	2200      	movs	r2, #0
 800486e:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8004872:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004876:	fbbc f9f3 	udiv	r9, ip, r3
 800487a:	4610      	mov	r0, r2
 800487c:	fb03 ca19 	mls	sl, r3, r9, ip
 8004880:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8004884:	2f09      	cmp	r7, #9
 8004886:	d81b      	bhi.n	80048c0 <_strtol_l.constprop.0+0xa8>
 8004888:	463c      	mov	r4, r7
 800488a:	42a3      	cmp	r3, r4
 800488c:	dd27      	ble.n	80048de <_strtol_l.constprop.0+0xc6>
 800488e:	1c57      	adds	r7, r2, #1
 8004890:	d007      	beq.n	80048a2 <_strtol_l.constprop.0+0x8a>
 8004892:	4581      	cmp	r9, r0
 8004894:	d320      	bcc.n	80048d8 <_strtol_l.constprop.0+0xc0>
 8004896:	d101      	bne.n	800489c <_strtol_l.constprop.0+0x84>
 8004898:	45a2      	cmp	sl, r4
 800489a:	db1d      	blt.n	80048d8 <_strtol_l.constprop.0+0xc0>
 800489c:	2201      	movs	r2, #1
 800489e:	fb00 4003 	mla	r0, r0, r3, r4
 80048a2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80048a6:	e7eb      	b.n	8004880 <_strtol_l.constprop.0+0x68>
 80048a8:	2c2b      	cmp	r4, #43	@ 0x2b
 80048aa:	bf04      	itt	eq
 80048ac:	782c      	ldrbeq	r4, [r5, #0]
 80048ae:	1c95      	addeq	r5, r2, #2
 80048b0:	e7cf      	b.n	8004852 <_strtol_l.constprop.0+0x3a>
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d1da      	bne.n	800486c <_strtol_l.constprop.0+0x54>
 80048b6:	2c30      	cmp	r4, #48	@ 0x30
 80048b8:	bf0c      	ite	eq
 80048ba:	2308      	moveq	r3, #8
 80048bc:	230a      	movne	r3, #10
 80048be:	e7d5      	b.n	800486c <_strtol_l.constprop.0+0x54>
 80048c0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80048c4:	2f19      	cmp	r7, #25
 80048c6:	d801      	bhi.n	80048cc <_strtol_l.constprop.0+0xb4>
 80048c8:	3c37      	subs	r4, #55	@ 0x37
 80048ca:	e7de      	b.n	800488a <_strtol_l.constprop.0+0x72>
 80048cc:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80048d0:	2f19      	cmp	r7, #25
 80048d2:	d804      	bhi.n	80048de <_strtol_l.constprop.0+0xc6>
 80048d4:	3c57      	subs	r4, #87	@ 0x57
 80048d6:	e7d8      	b.n	800488a <_strtol_l.constprop.0+0x72>
 80048d8:	f04f 32ff 	mov.w	r2, #4294967295
 80048dc:	e7e1      	b.n	80048a2 <_strtol_l.constprop.0+0x8a>
 80048de:	1c53      	adds	r3, r2, #1
 80048e0:	d108      	bne.n	80048f4 <_strtol_l.constprop.0+0xdc>
 80048e2:	2322      	movs	r3, #34	@ 0x22
 80048e4:	4660      	mov	r0, ip
 80048e6:	f8ce 3000 	str.w	r3, [lr]
 80048ea:	f1b8 0f00 	cmp.w	r8, #0
 80048ee:	d0a0      	beq.n	8004832 <_strtol_l.constprop.0+0x1a>
 80048f0:	1e69      	subs	r1, r5, #1
 80048f2:	e006      	b.n	8004902 <_strtol_l.constprop.0+0xea>
 80048f4:	b106      	cbz	r6, 80048f8 <_strtol_l.constprop.0+0xe0>
 80048f6:	4240      	negs	r0, r0
 80048f8:	f1b8 0f00 	cmp.w	r8, #0
 80048fc:	d099      	beq.n	8004832 <_strtol_l.constprop.0+0x1a>
 80048fe:	2a00      	cmp	r2, #0
 8004900:	d1f6      	bne.n	80048f0 <_strtol_l.constprop.0+0xd8>
 8004902:	f8c8 1000 	str.w	r1, [r8]
 8004906:	e794      	b.n	8004832 <_strtol_l.constprop.0+0x1a>
 8004908:	080054af 	.word	0x080054af

0800490c <strtol>:
 800490c:	4613      	mov	r3, r2
 800490e:	460a      	mov	r2, r1
 8004910:	4601      	mov	r1, r0
 8004912:	4802      	ldr	r0, [pc, #8]	@ (800491c <strtol+0x10>)
 8004914:	6800      	ldr	r0, [r0, #0]
 8004916:	f7ff bf7f 	b.w	8004818 <_strtol_l.constprop.0>
 800491a:	bf00      	nop
 800491c:	20000014 	.word	0x20000014

08004920 <_strtoul_l.constprop.0>:
 8004920:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004924:	4686      	mov	lr, r0
 8004926:	460d      	mov	r5, r1
 8004928:	4e33      	ldr	r6, [pc, #204]	@ (80049f8 <_strtoul_l.constprop.0+0xd8>)
 800492a:	4628      	mov	r0, r5
 800492c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004930:	5d37      	ldrb	r7, [r6, r4]
 8004932:	f017 0708 	ands.w	r7, r7, #8
 8004936:	d1f8      	bne.n	800492a <_strtoul_l.constprop.0+0xa>
 8004938:	2c2d      	cmp	r4, #45	@ 0x2d
 800493a:	d12f      	bne.n	800499c <_strtoul_l.constprop.0+0x7c>
 800493c:	2701      	movs	r7, #1
 800493e:	782c      	ldrb	r4, [r5, #0]
 8004940:	1c85      	adds	r5, r0, #2
 8004942:	f033 0010 	bics.w	r0, r3, #16
 8004946:	d109      	bne.n	800495c <_strtoul_l.constprop.0+0x3c>
 8004948:	2c30      	cmp	r4, #48	@ 0x30
 800494a:	d12c      	bne.n	80049a6 <_strtoul_l.constprop.0+0x86>
 800494c:	7828      	ldrb	r0, [r5, #0]
 800494e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8004952:	2858      	cmp	r0, #88	@ 0x58
 8004954:	d127      	bne.n	80049a6 <_strtoul_l.constprop.0+0x86>
 8004956:	2310      	movs	r3, #16
 8004958:	786c      	ldrb	r4, [r5, #1]
 800495a:	3502      	adds	r5, #2
 800495c:	f04f 38ff 	mov.w	r8, #4294967295
 8004960:	fbb8 f8f3 	udiv	r8, r8, r3
 8004964:	2600      	movs	r6, #0
 8004966:	fb03 f908 	mul.w	r9, r3, r8
 800496a:	4630      	mov	r0, r6
 800496c:	ea6f 0909 	mvn.w	r9, r9
 8004970:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8004974:	f1bc 0f09 	cmp.w	ip, #9
 8004978:	d81c      	bhi.n	80049b4 <_strtoul_l.constprop.0+0x94>
 800497a:	4664      	mov	r4, ip
 800497c:	42a3      	cmp	r3, r4
 800497e:	dd2a      	ble.n	80049d6 <_strtoul_l.constprop.0+0xb6>
 8004980:	f1b6 3fff 	cmp.w	r6, #4294967295
 8004984:	d007      	beq.n	8004996 <_strtoul_l.constprop.0+0x76>
 8004986:	4580      	cmp	r8, r0
 8004988:	d322      	bcc.n	80049d0 <_strtoul_l.constprop.0+0xb0>
 800498a:	d101      	bne.n	8004990 <_strtoul_l.constprop.0+0x70>
 800498c:	45a1      	cmp	r9, r4
 800498e:	db1f      	blt.n	80049d0 <_strtoul_l.constprop.0+0xb0>
 8004990:	2601      	movs	r6, #1
 8004992:	fb00 4003 	mla	r0, r0, r3, r4
 8004996:	f815 4b01 	ldrb.w	r4, [r5], #1
 800499a:	e7e9      	b.n	8004970 <_strtoul_l.constprop.0+0x50>
 800499c:	2c2b      	cmp	r4, #43	@ 0x2b
 800499e:	bf04      	itt	eq
 80049a0:	782c      	ldrbeq	r4, [r5, #0]
 80049a2:	1c85      	addeq	r5, r0, #2
 80049a4:	e7cd      	b.n	8004942 <_strtoul_l.constprop.0+0x22>
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d1d8      	bne.n	800495c <_strtoul_l.constprop.0+0x3c>
 80049aa:	2c30      	cmp	r4, #48	@ 0x30
 80049ac:	bf0c      	ite	eq
 80049ae:	2308      	moveq	r3, #8
 80049b0:	230a      	movne	r3, #10
 80049b2:	e7d3      	b.n	800495c <_strtoul_l.constprop.0+0x3c>
 80049b4:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80049b8:	f1bc 0f19 	cmp.w	ip, #25
 80049bc:	d801      	bhi.n	80049c2 <_strtoul_l.constprop.0+0xa2>
 80049be:	3c37      	subs	r4, #55	@ 0x37
 80049c0:	e7dc      	b.n	800497c <_strtoul_l.constprop.0+0x5c>
 80049c2:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80049c6:	f1bc 0f19 	cmp.w	ip, #25
 80049ca:	d804      	bhi.n	80049d6 <_strtoul_l.constprop.0+0xb6>
 80049cc:	3c57      	subs	r4, #87	@ 0x57
 80049ce:	e7d5      	b.n	800497c <_strtoul_l.constprop.0+0x5c>
 80049d0:	f04f 36ff 	mov.w	r6, #4294967295
 80049d4:	e7df      	b.n	8004996 <_strtoul_l.constprop.0+0x76>
 80049d6:	1c73      	adds	r3, r6, #1
 80049d8:	d106      	bne.n	80049e8 <_strtoul_l.constprop.0+0xc8>
 80049da:	2322      	movs	r3, #34	@ 0x22
 80049dc:	4630      	mov	r0, r6
 80049de:	f8ce 3000 	str.w	r3, [lr]
 80049e2:	b932      	cbnz	r2, 80049f2 <_strtoul_l.constprop.0+0xd2>
 80049e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80049e8:	b107      	cbz	r7, 80049ec <_strtoul_l.constprop.0+0xcc>
 80049ea:	4240      	negs	r0, r0
 80049ec:	2a00      	cmp	r2, #0
 80049ee:	d0f9      	beq.n	80049e4 <_strtoul_l.constprop.0+0xc4>
 80049f0:	b106      	cbz	r6, 80049f4 <_strtoul_l.constprop.0+0xd4>
 80049f2:	1e69      	subs	r1, r5, #1
 80049f4:	6011      	str	r1, [r2, #0]
 80049f6:	e7f5      	b.n	80049e4 <_strtoul_l.constprop.0+0xc4>
 80049f8:	080054af 	.word	0x080054af

080049fc <strtoul>:
 80049fc:	4613      	mov	r3, r2
 80049fe:	460a      	mov	r2, r1
 8004a00:	4601      	mov	r1, r0
 8004a02:	4802      	ldr	r0, [pc, #8]	@ (8004a0c <strtoul+0x10>)
 8004a04:	6800      	ldr	r0, [r0, #0]
 8004a06:	f7ff bf8b 	b.w	8004920 <_strtoul_l.constprop.0>
 8004a0a:	bf00      	nop
 8004a0c:	20000014 	.word	0x20000014

08004a10 <_vsiprintf_r>:
 8004a10:	b500      	push	{lr}
 8004a12:	b09b      	sub	sp, #108	@ 0x6c
 8004a14:	9100      	str	r1, [sp, #0]
 8004a16:	9104      	str	r1, [sp, #16]
 8004a18:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004a1c:	9105      	str	r1, [sp, #20]
 8004a1e:	9102      	str	r1, [sp, #8]
 8004a20:	4905      	ldr	r1, [pc, #20]	@ (8004a38 <_vsiprintf_r+0x28>)
 8004a22:	9103      	str	r1, [sp, #12]
 8004a24:	4669      	mov	r1, sp
 8004a26:	f000 f9c7 	bl	8004db8 <_svfiprintf_r>
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	9b00      	ldr	r3, [sp, #0]
 8004a2e:	701a      	strb	r2, [r3, #0]
 8004a30:	b01b      	add	sp, #108	@ 0x6c
 8004a32:	f85d fb04 	ldr.w	pc, [sp], #4
 8004a36:	bf00      	nop
 8004a38:	ffff0208 	.word	0xffff0208

08004a3c <vsiprintf>:
 8004a3c:	4613      	mov	r3, r2
 8004a3e:	460a      	mov	r2, r1
 8004a40:	4601      	mov	r1, r0
 8004a42:	4802      	ldr	r0, [pc, #8]	@ (8004a4c <vsiprintf+0x10>)
 8004a44:	6800      	ldr	r0, [r0, #0]
 8004a46:	f7ff bfe3 	b.w	8004a10 <_vsiprintf_r>
 8004a4a:	bf00      	nop
 8004a4c:	20000014 	.word	0x20000014

08004a50 <memset>:
 8004a50:	4603      	mov	r3, r0
 8004a52:	4402      	add	r2, r0
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d100      	bne.n	8004a5a <memset+0xa>
 8004a58:	4770      	bx	lr
 8004a5a:	f803 1b01 	strb.w	r1, [r3], #1
 8004a5e:	e7f9      	b.n	8004a54 <memset+0x4>

08004a60 <strchr>:
 8004a60:	4603      	mov	r3, r0
 8004a62:	b2c9      	uxtb	r1, r1
 8004a64:	4618      	mov	r0, r3
 8004a66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004a6a:	b112      	cbz	r2, 8004a72 <strchr+0x12>
 8004a6c:	428a      	cmp	r2, r1
 8004a6e:	d1f9      	bne.n	8004a64 <strchr+0x4>
 8004a70:	4770      	bx	lr
 8004a72:	2900      	cmp	r1, #0
 8004a74:	bf18      	it	ne
 8004a76:	2000      	movne	r0, #0
 8004a78:	4770      	bx	lr

08004a7a <strncmp>:
 8004a7a:	b510      	push	{r4, lr}
 8004a7c:	b16a      	cbz	r2, 8004a9a <strncmp+0x20>
 8004a7e:	3901      	subs	r1, #1
 8004a80:	1884      	adds	r4, r0, r2
 8004a82:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a86:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	d103      	bne.n	8004a96 <strncmp+0x1c>
 8004a8e:	42a0      	cmp	r0, r4
 8004a90:	d001      	beq.n	8004a96 <strncmp+0x1c>
 8004a92:	2a00      	cmp	r2, #0
 8004a94:	d1f5      	bne.n	8004a82 <strncmp+0x8>
 8004a96:	1ad0      	subs	r0, r2, r3
 8004a98:	bd10      	pop	{r4, pc}
 8004a9a:	4610      	mov	r0, r2
 8004a9c:	e7fc      	b.n	8004a98 <strncmp+0x1e>
	...

08004aa0 <__errno>:
 8004aa0:	4b01      	ldr	r3, [pc, #4]	@ (8004aa8 <__errno+0x8>)
 8004aa2:	6818      	ldr	r0, [r3, #0]
 8004aa4:	4770      	bx	lr
 8004aa6:	bf00      	nop
 8004aa8:	20000014 	.word	0x20000014

08004aac <__libc_init_array>:
 8004aac:	b570      	push	{r4, r5, r6, lr}
 8004aae:	2600      	movs	r6, #0
 8004ab0:	4d0c      	ldr	r5, [pc, #48]	@ (8004ae4 <__libc_init_array+0x38>)
 8004ab2:	4c0d      	ldr	r4, [pc, #52]	@ (8004ae8 <__libc_init_array+0x3c>)
 8004ab4:	1b64      	subs	r4, r4, r5
 8004ab6:	10a4      	asrs	r4, r4, #2
 8004ab8:	42a6      	cmp	r6, r4
 8004aba:	d109      	bne.n	8004ad0 <__libc_init_array+0x24>
 8004abc:	f000 fc78 	bl	80053b0 <_init>
 8004ac0:	2600      	movs	r6, #0
 8004ac2:	4d0a      	ldr	r5, [pc, #40]	@ (8004aec <__libc_init_array+0x40>)
 8004ac4:	4c0a      	ldr	r4, [pc, #40]	@ (8004af0 <__libc_init_array+0x44>)
 8004ac6:	1b64      	subs	r4, r4, r5
 8004ac8:	10a4      	asrs	r4, r4, #2
 8004aca:	42a6      	cmp	r6, r4
 8004acc:	d105      	bne.n	8004ada <__libc_init_array+0x2e>
 8004ace:	bd70      	pop	{r4, r5, r6, pc}
 8004ad0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ad4:	4798      	blx	r3
 8004ad6:	3601      	adds	r6, #1
 8004ad8:	e7ee      	b.n	8004ab8 <__libc_init_array+0xc>
 8004ada:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ade:	4798      	blx	r3
 8004ae0:	3601      	adds	r6, #1
 8004ae2:	e7f2      	b.n	8004aca <__libc_init_array+0x1e>
 8004ae4:	080055ec 	.word	0x080055ec
 8004ae8:	080055ec 	.word	0x080055ec
 8004aec:	080055ec 	.word	0x080055ec
 8004af0:	080055f0 	.word	0x080055f0

08004af4 <__retarget_lock_acquire_recursive>:
 8004af4:	4770      	bx	lr

08004af6 <__retarget_lock_release_recursive>:
 8004af6:	4770      	bx	lr

08004af8 <memcpy>:
 8004af8:	440a      	add	r2, r1
 8004afa:	4291      	cmp	r1, r2
 8004afc:	f100 33ff 	add.w	r3, r0, #4294967295
 8004b00:	d100      	bne.n	8004b04 <memcpy+0xc>
 8004b02:	4770      	bx	lr
 8004b04:	b510      	push	{r4, lr}
 8004b06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b0a:	4291      	cmp	r1, r2
 8004b0c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b10:	d1f9      	bne.n	8004b06 <memcpy+0xe>
 8004b12:	bd10      	pop	{r4, pc}

08004b14 <_free_r>:
 8004b14:	b538      	push	{r3, r4, r5, lr}
 8004b16:	4605      	mov	r5, r0
 8004b18:	2900      	cmp	r1, #0
 8004b1a:	d040      	beq.n	8004b9e <_free_r+0x8a>
 8004b1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b20:	1f0c      	subs	r4, r1, #4
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	bfb8      	it	lt
 8004b26:	18e4      	addlt	r4, r4, r3
 8004b28:	f000 f8de 	bl	8004ce8 <__malloc_lock>
 8004b2c:	4a1c      	ldr	r2, [pc, #112]	@ (8004ba0 <_free_r+0x8c>)
 8004b2e:	6813      	ldr	r3, [r2, #0]
 8004b30:	b933      	cbnz	r3, 8004b40 <_free_r+0x2c>
 8004b32:	6063      	str	r3, [r4, #4]
 8004b34:	6014      	str	r4, [r2, #0]
 8004b36:	4628      	mov	r0, r5
 8004b38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004b3c:	f000 b8da 	b.w	8004cf4 <__malloc_unlock>
 8004b40:	42a3      	cmp	r3, r4
 8004b42:	d908      	bls.n	8004b56 <_free_r+0x42>
 8004b44:	6820      	ldr	r0, [r4, #0]
 8004b46:	1821      	adds	r1, r4, r0
 8004b48:	428b      	cmp	r3, r1
 8004b4a:	bf01      	itttt	eq
 8004b4c:	6819      	ldreq	r1, [r3, #0]
 8004b4e:	685b      	ldreq	r3, [r3, #4]
 8004b50:	1809      	addeq	r1, r1, r0
 8004b52:	6021      	streq	r1, [r4, #0]
 8004b54:	e7ed      	b.n	8004b32 <_free_r+0x1e>
 8004b56:	461a      	mov	r2, r3
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	b10b      	cbz	r3, 8004b60 <_free_r+0x4c>
 8004b5c:	42a3      	cmp	r3, r4
 8004b5e:	d9fa      	bls.n	8004b56 <_free_r+0x42>
 8004b60:	6811      	ldr	r1, [r2, #0]
 8004b62:	1850      	adds	r0, r2, r1
 8004b64:	42a0      	cmp	r0, r4
 8004b66:	d10b      	bne.n	8004b80 <_free_r+0x6c>
 8004b68:	6820      	ldr	r0, [r4, #0]
 8004b6a:	4401      	add	r1, r0
 8004b6c:	1850      	adds	r0, r2, r1
 8004b6e:	4283      	cmp	r3, r0
 8004b70:	6011      	str	r1, [r2, #0]
 8004b72:	d1e0      	bne.n	8004b36 <_free_r+0x22>
 8004b74:	6818      	ldr	r0, [r3, #0]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	4408      	add	r0, r1
 8004b7a:	6010      	str	r0, [r2, #0]
 8004b7c:	6053      	str	r3, [r2, #4]
 8004b7e:	e7da      	b.n	8004b36 <_free_r+0x22>
 8004b80:	d902      	bls.n	8004b88 <_free_r+0x74>
 8004b82:	230c      	movs	r3, #12
 8004b84:	602b      	str	r3, [r5, #0]
 8004b86:	e7d6      	b.n	8004b36 <_free_r+0x22>
 8004b88:	6820      	ldr	r0, [r4, #0]
 8004b8a:	1821      	adds	r1, r4, r0
 8004b8c:	428b      	cmp	r3, r1
 8004b8e:	bf01      	itttt	eq
 8004b90:	6819      	ldreq	r1, [r3, #0]
 8004b92:	685b      	ldreq	r3, [r3, #4]
 8004b94:	1809      	addeq	r1, r1, r0
 8004b96:	6021      	streq	r1, [r4, #0]
 8004b98:	6063      	str	r3, [r4, #4]
 8004b9a:	6054      	str	r4, [r2, #4]
 8004b9c:	e7cb      	b.n	8004b36 <_free_r+0x22>
 8004b9e:	bd38      	pop	{r3, r4, r5, pc}
 8004ba0:	20001464 	.word	0x20001464

08004ba4 <sbrk_aligned>:
 8004ba4:	b570      	push	{r4, r5, r6, lr}
 8004ba6:	4e0f      	ldr	r6, [pc, #60]	@ (8004be4 <sbrk_aligned+0x40>)
 8004ba8:	460c      	mov	r4, r1
 8004baa:	6831      	ldr	r1, [r6, #0]
 8004bac:	4605      	mov	r5, r0
 8004bae:	b911      	cbnz	r1, 8004bb6 <sbrk_aligned+0x12>
 8004bb0:	f000 fbaa 	bl	8005308 <_sbrk_r>
 8004bb4:	6030      	str	r0, [r6, #0]
 8004bb6:	4621      	mov	r1, r4
 8004bb8:	4628      	mov	r0, r5
 8004bba:	f000 fba5 	bl	8005308 <_sbrk_r>
 8004bbe:	1c43      	adds	r3, r0, #1
 8004bc0:	d103      	bne.n	8004bca <sbrk_aligned+0x26>
 8004bc2:	f04f 34ff 	mov.w	r4, #4294967295
 8004bc6:	4620      	mov	r0, r4
 8004bc8:	bd70      	pop	{r4, r5, r6, pc}
 8004bca:	1cc4      	adds	r4, r0, #3
 8004bcc:	f024 0403 	bic.w	r4, r4, #3
 8004bd0:	42a0      	cmp	r0, r4
 8004bd2:	d0f8      	beq.n	8004bc6 <sbrk_aligned+0x22>
 8004bd4:	1a21      	subs	r1, r4, r0
 8004bd6:	4628      	mov	r0, r5
 8004bd8:	f000 fb96 	bl	8005308 <_sbrk_r>
 8004bdc:	3001      	adds	r0, #1
 8004bde:	d1f2      	bne.n	8004bc6 <sbrk_aligned+0x22>
 8004be0:	e7ef      	b.n	8004bc2 <sbrk_aligned+0x1e>
 8004be2:	bf00      	nop
 8004be4:	20001460 	.word	0x20001460

08004be8 <_malloc_r>:
 8004be8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004bec:	1ccd      	adds	r5, r1, #3
 8004bee:	f025 0503 	bic.w	r5, r5, #3
 8004bf2:	3508      	adds	r5, #8
 8004bf4:	2d0c      	cmp	r5, #12
 8004bf6:	bf38      	it	cc
 8004bf8:	250c      	movcc	r5, #12
 8004bfa:	2d00      	cmp	r5, #0
 8004bfc:	4606      	mov	r6, r0
 8004bfe:	db01      	blt.n	8004c04 <_malloc_r+0x1c>
 8004c00:	42a9      	cmp	r1, r5
 8004c02:	d904      	bls.n	8004c0e <_malloc_r+0x26>
 8004c04:	230c      	movs	r3, #12
 8004c06:	6033      	str	r3, [r6, #0]
 8004c08:	2000      	movs	r0, #0
 8004c0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c0e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004ce4 <_malloc_r+0xfc>
 8004c12:	f000 f869 	bl	8004ce8 <__malloc_lock>
 8004c16:	f8d8 3000 	ldr.w	r3, [r8]
 8004c1a:	461c      	mov	r4, r3
 8004c1c:	bb44      	cbnz	r4, 8004c70 <_malloc_r+0x88>
 8004c1e:	4629      	mov	r1, r5
 8004c20:	4630      	mov	r0, r6
 8004c22:	f7ff ffbf 	bl	8004ba4 <sbrk_aligned>
 8004c26:	1c43      	adds	r3, r0, #1
 8004c28:	4604      	mov	r4, r0
 8004c2a:	d158      	bne.n	8004cde <_malloc_r+0xf6>
 8004c2c:	f8d8 4000 	ldr.w	r4, [r8]
 8004c30:	4627      	mov	r7, r4
 8004c32:	2f00      	cmp	r7, #0
 8004c34:	d143      	bne.n	8004cbe <_malloc_r+0xd6>
 8004c36:	2c00      	cmp	r4, #0
 8004c38:	d04b      	beq.n	8004cd2 <_malloc_r+0xea>
 8004c3a:	6823      	ldr	r3, [r4, #0]
 8004c3c:	4639      	mov	r1, r7
 8004c3e:	4630      	mov	r0, r6
 8004c40:	eb04 0903 	add.w	r9, r4, r3
 8004c44:	f000 fb60 	bl	8005308 <_sbrk_r>
 8004c48:	4581      	cmp	r9, r0
 8004c4a:	d142      	bne.n	8004cd2 <_malloc_r+0xea>
 8004c4c:	6821      	ldr	r1, [r4, #0]
 8004c4e:	4630      	mov	r0, r6
 8004c50:	1a6d      	subs	r5, r5, r1
 8004c52:	4629      	mov	r1, r5
 8004c54:	f7ff ffa6 	bl	8004ba4 <sbrk_aligned>
 8004c58:	3001      	adds	r0, #1
 8004c5a:	d03a      	beq.n	8004cd2 <_malloc_r+0xea>
 8004c5c:	6823      	ldr	r3, [r4, #0]
 8004c5e:	442b      	add	r3, r5
 8004c60:	6023      	str	r3, [r4, #0]
 8004c62:	f8d8 3000 	ldr.w	r3, [r8]
 8004c66:	685a      	ldr	r2, [r3, #4]
 8004c68:	bb62      	cbnz	r2, 8004cc4 <_malloc_r+0xdc>
 8004c6a:	f8c8 7000 	str.w	r7, [r8]
 8004c6e:	e00f      	b.n	8004c90 <_malloc_r+0xa8>
 8004c70:	6822      	ldr	r2, [r4, #0]
 8004c72:	1b52      	subs	r2, r2, r5
 8004c74:	d420      	bmi.n	8004cb8 <_malloc_r+0xd0>
 8004c76:	2a0b      	cmp	r2, #11
 8004c78:	d917      	bls.n	8004caa <_malloc_r+0xc2>
 8004c7a:	1961      	adds	r1, r4, r5
 8004c7c:	42a3      	cmp	r3, r4
 8004c7e:	6025      	str	r5, [r4, #0]
 8004c80:	bf18      	it	ne
 8004c82:	6059      	strne	r1, [r3, #4]
 8004c84:	6863      	ldr	r3, [r4, #4]
 8004c86:	bf08      	it	eq
 8004c88:	f8c8 1000 	streq.w	r1, [r8]
 8004c8c:	5162      	str	r2, [r4, r5]
 8004c8e:	604b      	str	r3, [r1, #4]
 8004c90:	4630      	mov	r0, r6
 8004c92:	f000 f82f 	bl	8004cf4 <__malloc_unlock>
 8004c96:	f104 000b 	add.w	r0, r4, #11
 8004c9a:	1d23      	adds	r3, r4, #4
 8004c9c:	f020 0007 	bic.w	r0, r0, #7
 8004ca0:	1ac2      	subs	r2, r0, r3
 8004ca2:	bf1c      	itt	ne
 8004ca4:	1a1b      	subne	r3, r3, r0
 8004ca6:	50a3      	strne	r3, [r4, r2]
 8004ca8:	e7af      	b.n	8004c0a <_malloc_r+0x22>
 8004caa:	6862      	ldr	r2, [r4, #4]
 8004cac:	42a3      	cmp	r3, r4
 8004cae:	bf0c      	ite	eq
 8004cb0:	f8c8 2000 	streq.w	r2, [r8]
 8004cb4:	605a      	strne	r2, [r3, #4]
 8004cb6:	e7eb      	b.n	8004c90 <_malloc_r+0xa8>
 8004cb8:	4623      	mov	r3, r4
 8004cba:	6864      	ldr	r4, [r4, #4]
 8004cbc:	e7ae      	b.n	8004c1c <_malloc_r+0x34>
 8004cbe:	463c      	mov	r4, r7
 8004cc0:	687f      	ldr	r7, [r7, #4]
 8004cc2:	e7b6      	b.n	8004c32 <_malloc_r+0x4a>
 8004cc4:	461a      	mov	r2, r3
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	42a3      	cmp	r3, r4
 8004cca:	d1fb      	bne.n	8004cc4 <_malloc_r+0xdc>
 8004ccc:	2300      	movs	r3, #0
 8004cce:	6053      	str	r3, [r2, #4]
 8004cd0:	e7de      	b.n	8004c90 <_malloc_r+0xa8>
 8004cd2:	230c      	movs	r3, #12
 8004cd4:	4630      	mov	r0, r6
 8004cd6:	6033      	str	r3, [r6, #0]
 8004cd8:	f000 f80c 	bl	8004cf4 <__malloc_unlock>
 8004cdc:	e794      	b.n	8004c08 <_malloc_r+0x20>
 8004cde:	6005      	str	r5, [r0, #0]
 8004ce0:	e7d6      	b.n	8004c90 <_malloc_r+0xa8>
 8004ce2:	bf00      	nop
 8004ce4:	20001464 	.word	0x20001464

08004ce8 <__malloc_lock>:
 8004ce8:	4801      	ldr	r0, [pc, #4]	@ (8004cf0 <__malloc_lock+0x8>)
 8004cea:	f7ff bf03 	b.w	8004af4 <__retarget_lock_acquire_recursive>
 8004cee:	bf00      	nop
 8004cf0:	2000145c 	.word	0x2000145c

08004cf4 <__malloc_unlock>:
 8004cf4:	4801      	ldr	r0, [pc, #4]	@ (8004cfc <__malloc_unlock+0x8>)
 8004cf6:	f7ff befe 	b.w	8004af6 <__retarget_lock_release_recursive>
 8004cfa:	bf00      	nop
 8004cfc:	2000145c 	.word	0x2000145c

08004d00 <__ssputs_r>:
 8004d00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d04:	461f      	mov	r7, r3
 8004d06:	688e      	ldr	r6, [r1, #8]
 8004d08:	4682      	mov	sl, r0
 8004d0a:	42be      	cmp	r6, r7
 8004d0c:	460c      	mov	r4, r1
 8004d0e:	4690      	mov	r8, r2
 8004d10:	680b      	ldr	r3, [r1, #0]
 8004d12:	d82d      	bhi.n	8004d70 <__ssputs_r+0x70>
 8004d14:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004d18:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004d1c:	d026      	beq.n	8004d6c <__ssputs_r+0x6c>
 8004d1e:	6965      	ldr	r5, [r4, #20]
 8004d20:	6909      	ldr	r1, [r1, #16]
 8004d22:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004d26:	eba3 0901 	sub.w	r9, r3, r1
 8004d2a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004d2e:	1c7b      	adds	r3, r7, #1
 8004d30:	444b      	add	r3, r9
 8004d32:	106d      	asrs	r5, r5, #1
 8004d34:	429d      	cmp	r5, r3
 8004d36:	bf38      	it	cc
 8004d38:	461d      	movcc	r5, r3
 8004d3a:	0553      	lsls	r3, r2, #21
 8004d3c:	d527      	bpl.n	8004d8e <__ssputs_r+0x8e>
 8004d3e:	4629      	mov	r1, r5
 8004d40:	f7ff ff52 	bl	8004be8 <_malloc_r>
 8004d44:	4606      	mov	r6, r0
 8004d46:	b360      	cbz	r0, 8004da2 <__ssputs_r+0xa2>
 8004d48:	464a      	mov	r2, r9
 8004d4a:	6921      	ldr	r1, [r4, #16]
 8004d4c:	f7ff fed4 	bl	8004af8 <memcpy>
 8004d50:	89a3      	ldrh	r3, [r4, #12]
 8004d52:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004d56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d5a:	81a3      	strh	r3, [r4, #12]
 8004d5c:	6126      	str	r6, [r4, #16]
 8004d5e:	444e      	add	r6, r9
 8004d60:	6026      	str	r6, [r4, #0]
 8004d62:	463e      	mov	r6, r7
 8004d64:	6165      	str	r5, [r4, #20]
 8004d66:	eba5 0509 	sub.w	r5, r5, r9
 8004d6a:	60a5      	str	r5, [r4, #8]
 8004d6c:	42be      	cmp	r6, r7
 8004d6e:	d900      	bls.n	8004d72 <__ssputs_r+0x72>
 8004d70:	463e      	mov	r6, r7
 8004d72:	4632      	mov	r2, r6
 8004d74:	4641      	mov	r1, r8
 8004d76:	6820      	ldr	r0, [r4, #0]
 8004d78:	f000 faac 	bl	80052d4 <memmove>
 8004d7c:	2000      	movs	r0, #0
 8004d7e:	68a3      	ldr	r3, [r4, #8]
 8004d80:	1b9b      	subs	r3, r3, r6
 8004d82:	60a3      	str	r3, [r4, #8]
 8004d84:	6823      	ldr	r3, [r4, #0]
 8004d86:	4433      	add	r3, r6
 8004d88:	6023      	str	r3, [r4, #0]
 8004d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d8e:	462a      	mov	r2, r5
 8004d90:	f000 fad8 	bl	8005344 <_realloc_r>
 8004d94:	4606      	mov	r6, r0
 8004d96:	2800      	cmp	r0, #0
 8004d98:	d1e0      	bne.n	8004d5c <__ssputs_r+0x5c>
 8004d9a:	4650      	mov	r0, sl
 8004d9c:	6921      	ldr	r1, [r4, #16]
 8004d9e:	f7ff feb9 	bl	8004b14 <_free_r>
 8004da2:	230c      	movs	r3, #12
 8004da4:	f8ca 3000 	str.w	r3, [sl]
 8004da8:	89a3      	ldrh	r3, [r4, #12]
 8004daa:	f04f 30ff 	mov.w	r0, #4294967295
 8004dae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004db2:	81a3      	strh	r3, [r4, #12]
 8004db4:	e7e9      	b.n	8004d8a <__ssputs_r+0x8a>
	...

08004db8 <_svfiprintf_r>:
 8004db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dbc:	4698      	mov	r8, r3
 8004dbe:	898b      	ldrh	r3, [r1, #12]
 8004dc0:	4607      	mov	r7, r0
 8004dc2:	061b      	lsls	r3, r3, #24
 8004dc4:	460d      	mov	r5, r1
 8004dc6:	4614      	mov	r4, r2
 8004dc8:	b09d      	sub	sp, #116	@ 0x74
 8004dca:	d510      	bpl.n	8004dee <_svfiprintf_r+0x36>
 8004dcc:	690b      	ldr	r3, [r1, #16]
 8004dce:	b973      	cbnz	r3, 8004dee <_svfiprintf_r+0x36>
 8004dd0:	2140      	movs	r1, #64	@ 0x40
 8004dd2:	f7ff ff09 	bl	8004be8 <_malloc_r>
 8004dd6:	6028      	str	r0, [r5, #0]
 8004dd8:	6128      	str	r0, [r5, #16]
 8004dda:	b930      	cbnz	r0, 8004dea <_svfiprintf_r+0x32>
 8004ddc:	230c      	movs	r3, #12
 8004dde:	603b      	str	r3, [r7, #0]
 8004de0:	f04f 30ff 	mov.w	r0, #4294967295
 8004de4:	b01d      	add	sp, #116	@ 0x74
 8004de6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dea:	2340      	movs	r3, #64	@ 0x40
 8004dec:	616b      	str	r3, [r5, #20]
 8004dee:	2300      	movs	r3, #0
 8004df0:	9309      	str	r3, [sp, #36]	@ 0x24
 8004df2:	2320      	movs	r3, #32
 8004df4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004df8:	2330      	movs	r3, #48	@ 0x30
 8004dfa:	f04f 0901 	mov.w	r9, #1
 8004dfe:	f8cd 800c 	str.w	r8, [sp, #12]
 8004e02:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8004f9c <_svfiprintf_r+0x1e4>
 8004e06:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004e0a:	4623      	mov	r3, r4
 8004e0c:	469a      	mov	sl, r3
 8004e0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004e12:	b10a      	cbz	r2, 8004e18 <_svfiprintf_r+0x60>
 8004e14:	2a25      	cmp	r2, #37	@ 0x25
 8004e16:	d1f9      	bne.n	8004e0c <_svfiprintf_r+0x54>
 8004e18:	ebba 0b04 	subs.w	fp, sl, r4
 8004e1c:	d00b      	beq.n	8004e36 <_svfiprintf_r+0x7e>
 8004e1e:	465b      	mov	r3, fp
 8004e20:	4622      	mov	r2, r4
 8004e22:	4629      	mov	r1, r5
 8004e24:	4638      	mov	r0, r7
 8004e26:	f7ff ff6b 	bl	8004d00 <__ssputs_r>
 8004e2a:	3001      	adds	r0, #1
 8004e2c:	f000 80a7 	beq.w	8004f7e <_svfiprintf_r+0x1c6>
 8004e30:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004e32:	445a      	add	r2, fp
 8004e34:	9209      	str	r2, [sp, #36]	@ 0x24
 8004e36:	f89a 3000 	ldrb.w	r3, [sl]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	f000 809f 	beq.w	8004f7e <_svfiprintf_r+0x1c6>
 8004e40:	2300      	movs	r3, #0
 8004e42:	f04f 32ff 	mov.w	r2, #4294967295
 8004e46:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004e4a:	f10a 0a01 	add.w	sl, sl, #1
 8004e4e:	9304      	str	r3, [sp, #16]
 8004e50:	9307      	str	r3, [sp, #28]
 8004e52:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004e56:	931a      	str	r3, [sp, #104]	@ 0x68
 8004e58:	4654      	mov	r4, sl
 8004e5a:	2205      	movs	r2, #5
 8004e5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e60:	484e      	ldr	r0, [pc, #312]	@ (8004f9c <_svfiprintf_r+0x1e4>)
 8004e62:	f000 fa61 	bl	8005328 <memchr>
 8004e66:	9a04      	ldr	r2, [sp, #16]
 8004e68:	b9d8      	cbnz	r0, 8004ea2 <_svfiprintf_r+0xea>
 8004e6a:	06d0      	lsls	r0, r2, #27
 8004e6c:	bf44      	itt	mi
 8004e6e:	2320      	movmi	r3, #32
 8004e70:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004e74:	0711      	lsls	r1, r2, #28
 8004e76:	bf44      	itt	mi
 8004e78:	232b      	movmi	r3, #43	@ 0x2b
 8004e7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004e7e:	f89a 3000 	ldrb.w	r3, [sl]
 8004e82:	2b2a      	cmp	r3, #42	@ 0x2a
 8004e84:	d015      	beq.n	8004eb2 <_svfiprintf_r+0xfa>
 8004e86:	4654      	mov	r4, sl
 8004e88:	2000      	movs	r0, #0
 8004e8a:	f04f 0c0a 	mov.w	ip, #10
 8004e8e:	9a07      	ldr	r2, [sp, #28]
 8004e90:	4621      	mov	r1, r4
 8004e92:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004e96:	3b30      	subs	r3, #48	@ 0x30
 8004e98:	2b09      	cmp	r3, #9
 8004e9a:	d94b      	bls.n	8004f34 <_svfiprintf_r+0x17c>
 8004e9c:	b1b0      	cbz	r0, 8004ecc <_svfiprintf_r+0x114>
 8004e9e:	9207      	str	r2, [sp, #28]
 8004ea0:	e014      	b.n	8004ecc <_svfiprintf_r+0x114>
 8004ea2:	eba0 0308 	sub.w	r3, r0, r8
 8004ea6:	fa09 f303 	lsl.w	r3, r9, r3
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	46a2      	mov	sl, r4
 8004eae:	9304      	str	r3, [sp, #16]
 8004eb0:	e7d2      	b.n	8004e58 <_svfiprintf_r+0xa0>
 8004eb2:	9b03      	ldr	r3, [sp, #12]
 8004eb4:	1d19      	adds	r1, r3, #4
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	9103      	str	r1, [sp, #12]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	bfbb      	ittet	lt
 8004ebe:	425b      	neglt	r3, r3
 8004ec0:	f042 0202 	orrlt.w	r2, r2, #2
 8004ec4:	9307      	strge	r3, [sp, #28]
 8004ec6:	9307      	strlt	r3, [sp, #28]
 8004ec8:	bfb8      	it	lt
 8004eca:	9204      	strlt	r2, [sp, #16]
 8004ecc:	7823      	ldrb	r3, [r4, #0]
 8004ece:	2b2e      	cmp	r3, #46	@ 0x2e
 8004ed0:	d10a      	bne.n	8004ee8 <_svfiprintf_r+0x130>
 8004ed2:	7863      	ldrb	r3, [r4, #1]
 8004ed4:	2b2a      	cmp	r3, #42	@ 0x2a
 8004ed6:	d132      	bne.n	8004f3e <_svfiprintf_r+0x186>
 8004ed8:	9b03      	ldr	r3, [sp, #12]
 8004eda:	3402      	adds	r4, #2
 8004edc:	1d1a      	adds	r2, r3, #4
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	9203      	str	r2, [sp, #12]
 8004ee2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004ee6:	9305      	str	r3, [sp, #20]
 8004ee8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8004fa0 <_svfiprintf_r+0x1e8>
 8004eec:	2203      	movs	r2, #3
 8004eee:	4650      	mov	r0, sl
 8004ef0:	7821      	ldrb	r1, [r4, #0]
 8004ef2:	f000 fa19 	bl	8005328 <memchr>
 8004ef6:	b138      	cbz	r0, 8004f08 <_svfiprintf_r+0x150>
 8004ef8:	2240      	movs	r2, #64	@ 0x40
 8004efa:	9b04      	ldr	r3, [sp, #16]
 8004efc:	eba0 000a 	sub.w	r0, r0, sl
 8004f00:	4082      	lsls	r2, r0
 8004f02:	4313      	orrs	r3, r2
 8004f04:	3401      	adds	r4, #1
 8004f06:	9304      	str	r3, [sp, #16]
 8004f08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f0c:	2206      	movs	r2, #6
 8004f0e:	4825      	ldr	r0, [pc, #148]	@ (8004fa4 <_svfiprintf_r+0x1ec>)
 8004f10:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004f14:	f000 fa08 	bl	8005328 <memchr>
 8004f18:	2800      	cmp	r0, #0
 8004f1a:	d036      	beq.n	8004f8a <_svfiprintf_r+0x1d2>
 8004f1c:	4b22      	ldr	r3, [pc, #136]	@ (8004fa8 <_svfiprintf_r+0x1f0>)
 8004f1e:	bb1b      	cbnz	r3, 8004f68 <_svfiprintf_r+0x1b0>
 8004f20:	9b03      	ldr	r3, [sp, #12]
 8004f22:	3307      	adds	r3, #7
 8004f24:	f023 0307 	bic.w	r3, r3, #7
 8004f28:	3308      	adds	r3, #8
 8004f2a:	9303      	str	r3, [sp, #12]
 8004f2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f2e:	4433      	add	r3, r6
 8004f30:	9309      	str	r3, [sp, #36]	@ 0x24
 8004f32:	e76a      	b.n	8004e0a <_svfiprintf_r+0x52>
 8004f34:	460c      	mov	r4, r1
 8004f36:	2001      	movs	r0, #1
 8004f38:	fb0c 3202 	mla	r2, ip, r2, r3
 8004f3c:	e7a8      	b.n	8004e90 <_svfiprintf_r+0xd8>
 8004f3e:	2300      	movs	r3, #0
 8004f40:	f04f 0c0a 	mov.w	ip, #10
 8004f44:	4619      	mov	r1, r3
 8004f46:	3401      	adds	r4, #1
 8004f48:	9305      	str	r3, [sp, #20]
 8004f4a:	4620      	mov	r0, r4
 8004f4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f50:	3a30      	subs	r2, #48	@ 0x30
 8004f52:	2a09      	cmp	r2, #9
 8004f54:	d903      	bls.n	8004f5e <_svfiprintf_r+0x1a6>
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d0c6      	beq.n	8004ee8 <_svfiprintf_r+0x130>
 8004f5a:	9105      	str	r1, [sp, #20]
 8004f5c:	e7c4      	b.n	8004ee8 <_svfiprintf_r+0x130>
 8004f5e:	4604      	mov	r4, r0
 8004f60:	2301      	movs	r3, #1
 8004f62:	fb0c 2101 	mla	r1, ip, r1, r2
 8004f66:	e7f0      	b.n	8004f4a <_svfiprintf_r+0x192>
 8004f68:	ab03      	add	r3, sp, #12
 8004f6a:	9300      	str	r3, [sp, #0]
 8004f6c:	462a      	mov	r2, r5
 8004f6e:	4638      	mov	r0, r7
 8004f70:	4b0e      	ldr	r3, [pc, #56]	@ (8004fac <_svfiprintf_r+0x1f4>)
 8004f72:	a904      	add	r1, sp, #16
 8004f74:	f3af 8000 	nop.w
 8004f78:	1c42      	adds	r2, r0, #1
 8004f7a:	4606      	mov	r6, r0
 8004f7c:	d1d6      	bne.n	8004f2c <_svfiprintf_r+0x174>
 8004f7e:	89ab      	ldrh	r3, [r5, #12]
 8004f80:	065b      	lsls	r3, r3, #25
 8004f82:	f53f af2d 	bmi.w	8004de0 <_svfiprintf_r+0x28>
 8004f86:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004f88:	e72c      	b.n	8004de4 <_svfiprintf_r+0x2c>
 8004f8a:	ab03      	add	r3, sp, #12
 8004f8c:	9300      	str	r3, [sp, #0]
 8004f8e:	462a      	mov	r2, r5
 8004f90:	4638      	mov	r0, r7
 8004f92:	4b06      	ldr	r3, [pc, #24]	@ (8004fac <_svfiprintf_r+0x1f4>)
 8004f94:	a904      	add	r1, sp, #16
 8004f96:	f000 f87d 	bl	8005094 <_printf_i>
 8004f9a:	e7ed      	b.n	8004f78 <_svfiprintf_r+0x1c0>
 8004f9c:	080055af 	.word	0x080055af
 8004fa0:	080055b5 	.word	0x080055b5
 8004fa4:	080055b9 	.word	0x080055b9
 8004fa8:	00000000 	.word	0x00000000
 8004fac:	08004d01 	.word	0x08004d01

08004fb0 <_printf_common>:
 8004fb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fb4:	4616      	mov	r6, r2
 8004fb6:	4698      	mov	r8, r3
 8004fb8:	688a      	ldr	r2, [r1, #8]
 8004fba:	690b      	ldr	r3, [r1, #16]
 8004fbc:	4607      	mov	r7, r0
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	bfb8      	it	lt
 8004fc2:	4613      	movlt	r3, r2
 8004fc4:	6033      	str	r3, [r6, #0]
 8004fc6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004fca:	460c      	mov	r4, r1
 8004fcc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004fd0:	b10a      	cbz	r2, 8004fd6 <_printf_common+0x26>
 8004fd2:	3301      	adds	r3, #1
 8004fd4:	6033      	str	r3, [r6, #0]
 8004fd6:	6823      	ldr	r3, [r4, #0]
 8004fd8:	0699      	lsls	r1, r3, #26
 8004fda:	bf42      	ittt	mi
 8004fdc:	6833      	ldrmi	r3, [r6, #0]
 8004fde:	3302      	addmi	r3, #2
 8004fe0:	6033      	strmi	r3, [r6, #0]
 8004fe2:	6825      	ldr	r5, [r4, #0]
 8004fe4:	f015 0506 	ands.w	r5, r5, #6
 8004fe8:	d106      	bne.n	8004ff8 <_printf_common+0x48>
 8004fea:	f104 0a19 	add.w	sl, r4, #25
 8004fee:	68e3      	ldr	r3, [r4, #12]
 8004ff0:	6832      	ldr	r2, [r6, #0]
 8004ff2:	1a9b      	subs	r3, r3, r2
 8004ff4:	42ab      	cmp	r3, r5
 8004ff6:	dc2b      	bgt.n	8005050 <_printf_common+0xa0>
 8004ff8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004ffc:	6822      	ldr	r2, [r4, #0]
 8004ffe:	3b00      	subs	r3, #0
 8005000:	bf18      	it	ne
 8005002:	2301      	movne	r3, #1
 8005004:	0692      	lsls	r2, r2, #26
 8005006:	d430      	bmi.n	800506a <_printf_common+0xba>
 8005008:	4641      	mov	r1, r8
 800500a:	4638      	mov	r0, r7
 800500c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005010:	47c8      	blx	r9
 8005012:	3001      	adds	r0, #1
 8005014:	d023      	beq.n	800505e <_printf_common+0xae>
 8005016:	6823      	ldr	r3, [r4, #0]
 8005018:	6922      	ldr	r2, [r4, #16]
 800501a:	f003 0306 	and.w	r3, r3, #6
 800501e:	2b04      	cmp	r3, #4
 8005020:	bf14      	ite	ne
 8005022:	2500      	movne	r5, #0
 8005024:	6833      	ldreq	r3, [r6, #0]
 8005026:	f04f 0600 	mov.w	r6, #0
 800502a:	bf08      	it	eq
 800502c:	68e5      	ldreq	r5, [r4, #12]
 800502e:	f104 041a 	add.w	r4, r4, #26
 8005032:	bf08      	it	eq
 8005034:	1aed      	subeq	r5, r5, r3
 8005036:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800503a:	bf08      	it	eq
 800503c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005040:	4293      	cmp	r3, r2
 8005042:	bfc4      	itt	gt
 8005044:	1a9b      	subgt	r3, r3, r2
 8005046:	18ed      	addgt	r5, r5, r3
 8005048:	42b5      	cmp	r5, r6
 800504a:	d11a      	bne.n	8005082 <_printf_common+0xd2>
 800504c:	2000      	movs	r0, #0
 800504e:	e008      	b.n	8005062 <_printf_common+0xb2>
 8005050:	2301      	movs	r3, #1
 8005052:	4652      	mov	r2, sl
 8005054:	4641      	mov	r1, r8
 8005056:	4638      	mov	r0, r7
 8005058:	47c8      	blx	r9
 800505a:	3001      	adds	r0, #1
 800505c:	d103      	bne.n	8005066 <_printf_common+0xb6>
 800505e:	f04f 30ff 	mov.w	r0, #4294967295
 8005062:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005066:	3501      	adds	r5, #1
 8005068:	e7c1      	b.n	8004fee <_printf_common+0x3e>
 800506a:	2030      	movs	r0, #48	@ 0x30
 800506c:	18e1      	adds	r1, r4, r3
 800506e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005072:	1c5a      	adds	r2, r3, #1
 8005074:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005078:	4422      	add	r2, r4
 800507a:	3302      	adds	r3, #2
 800507c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005080:	e7c2      	b.n	8005008 <_printf_common+0x58>
 8005082:	2301      	movs	r3, #1
 8005084:	4622      	mov	r2, r4
 8005086:	4641      	mov	r1, r8
 8005088:	4638      	mov	r0, r7
 800508a:	47c8      	blx	r9
 800508c:	3001      	adds	r0, #1
 800508e:	d0e6      	beq.n	800505e <_printf_common+0xae>
 8005090:	3601      	adds	r6, #1
 8005092:	e7d9      	b.n	8005048 <_printf_common+0x98>

08005094 <_printf_i>:
 8005094:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005098:	7e0f      	ldrb	r7, [r1, #24]
 800509a:	4691      	mov	r9, r2
 800509c:	2f78      	cmp	r7, #120	@ 0x78
 800509e:	4680      	mov	r8, r0
 80050a0:	460c      	mov	r4, r1
 80050a2:	469a      	mov	sl, r3
 80050a4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80050a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80050aa:	d807      	bhi.n	80050bc <_printf_i+0x28>
 80050ac:	2f62      	cmp	r7, #98	@ 0x62
 80050ae:	d80a      	bhi.n	80050c6 <_printf_i+0x32>
 80050b0:	2f00      	cmp	r7, #0
 80050b2:	f000 80d3 	beq.w	800525c <_printf_i+0x1c8>
 80050b6:	2f58      	cmp	r7, #88	@ 0x58
 80050b8:	f000 80ba 	beq.w	8005230 <_printf_i+0x19c>
 80050bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80050c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80050c4:	e03a      	b.n	800513c <_printf_i+0xa8>
 80050c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80050ca:	2b15      	cmp	r3, #21
 80050cc:	d8f6      	bhi.n	80050bc <_printf_i+0x28>
 80050ce:	a101      	add	r1, pc, #4	@ (adr r1, 80050d4 <_printf_i+0x40>)
 80050d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80050d4:	0800512d 	.word	0x0800512d
 80050d8:	08005141 	.word	0x08005141
 80050dc:	080050bd 	.word	0x080050bd
 80050e0:	080050bd 	.word	0x080050bd
 80050e4:	080050bd 	.word	0x080050bd
 80050e8:	080050bd 	.word	0x080050bd
 80050ec:	08005141 	.word	0x08005141
 80050f0:	080050bd 	.word	0x080050bd
 80050f4:	080050bd 	.word	0x080050bd
 80050f8:	080050bd 	.word	0x080050bd
 80050fc:	080050bd 	.word	0x080050bd
 8005100:	08005243 	.word	0x08005243
 8005104:	0800516b 	.word	0x0800516b
 8005108:	080051fd 	.word	0x080051fd
 800510c:	080050bd 	.word	0x080050bd
 8005110:	080050bd 	.word	0x080050bd
 8005114:	08005265 	.word	0x08005265
 8005118:	080050bd 	.word	0x080050bd
 800511c:	0800516b 	.word	0x0800516b
 8005120:	080050bd 	.word	0x080050bd
 8005124:	080050bd 	.word	0x080050bd
 8005128:	08005205 	.word	0x08005205
 800512c:	6833      	ldr	r3, [r6, #0]
 800512e:	1d1a      	adds	r2, r3, #4
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	6032      	str	r2, [r6, #0]
 8005134:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005138:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800513c:	2301      	movs	r3, #1
 800513e:	e09e      	b.n	800527e <_printf_i+0x1ea>
 8005140:	6833      	ldr	r3, [r6, #0]
 8005142:	6820      	ldr	r0, [r4, #0]
 8005144:	1d19      	adds	r1, r3, #4
 8005146:	6031      	str	r1, [r6, #0]
 8005148:	0606      	lsls	r6, r0, #24
 800514a:	d501      	bpl.n	8005150 <_printf_i+0xbc>
 800514c:	681d      	ldr	r5, [r3, #0]
 800514e:	e003      	b.n	8005158 <_printf_i+0xc4>
 8005150:	0645      	lsls	r5, r0, #25
 8005152:	d5fb      	bpl.n	800514c <_printf_i+0xb8>
 8005154:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005158:	2d00      	cmp	r5, #0
 800515a:	da03      	bge.n	8005164 <_printf_i+0xd0>
 800515c:	232d      	movs	r3, #45	@ 0x2d
 800515e:	426d      	negs	r5, r5
 8005160:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005164:	230a      	movs	r3, #10
 8005166:	4859      	ldr	r0, [pc, #356]	@ (80052cc <_printf_i+0x238>)
 8005168:	e011      	b.n	800518e <_printf_i+0xfa>
 800516a:	6821      	ldr	r1, [r4, #0]
 800516c:	6833      	ldr	r3, [r6, #0]
 800516e:	0608      	lsls	r0, r1, #24
 8005170:	f853 5b04 	ldr.w	r5, [r3], #4
 8005174:	d402      	bmi.n	800517c <_printf_i+0xe8>
 8005176:	0649      	lsls	r1, r1, #25
 8005178:	bf48      	it	mi
 800517a:	b2ad      	uxthmi	r5, r5
 800517c:	2f6f      	cmp	r7, #111	@ 0x6f
 800517e:	6033      	str	r3, [r6, #0]
 8005180:	bf14      	ite	ne
 8005182:	230a      	movne	r3, #10
 8005184:	2308      	moveq	r3, #8
 8005186:	4851      	ldr	r0, [pc, #324]	@ (80052cc <_printf_i+0x238>)
 8005188:	2100      	movs	r1, #0
 800518a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800518e:	6866      	ldr	r6, [r4, #4]
 8005190:	2e00      	cmp	r6, #0
 8005192:	bfa8      	it	ge
 8005194:	6821      	ldrge	r1, [r4, #0]
 8005196:	60a6      	str	r6, [r4, #8]
 8005198:	bfa4      	itt	ge
 800519a:	f021 0104 	bicge.w	r1, r1, #4
 800519e:	6021      	strge	r1, [r4, #0]
 80051a0:	b90d      	cbnz	r5, 80051a6 <_printf_i+0x112>
 80051a2:	2e00      	cmp	r6, #0
 80051a4:	d04b      	beq.n	800523e <_printf_i+0x1aa>
 80051a6:	4616      	mov	r6, r2
 80051a8:	fbb5 f1f3 	udiv	r1, r5, r3
 80051ac:	fb03 5711 	mls	r7, r3, r1, r5
 80051b0:	5dc7      	ldrb	r7, [r0, r7]
 80051b2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80051b6:	462f      	mov	r7, r5
 80051b8:	42bb      	cmp	r3, r7
 80051ba:	460d      	mov	r5, r1
 80051bc:	d9f4      	bls.n	80051a8 <_printf_i+0x114>
 80051be:	2b08      	cmp	r3, #8
 80051c0:	d10b      	bne.n	80051da <_printf_i+0x146>
 80051c2:	6823      	ldr	r3, [r4, #0]
 80051c4:	07df      	lsls	r7, r3, #31
 80051c6:	d508      	bpl.n	80051da <_printf_i+0x146>
 80051c8:	6923      	ldr	r3, [r4, #16]
 80051ca:	6861      	ldr	r1, [r4, #4]
 80051cc:	4299      	cmp	r1, r3
 80051ce:	bfde      	ittt	le
 80051d0:	2330      	movle	r3, #48	@ 0x30
 80051d2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80051d6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80051da:	1b92      	subs	r2, r2, r6
 80051dc:	6122      	str	r2, [r4, #16]
 80051de:	464b      	mov	r3, r9
 80051e0:	4621      	mov	r1, r4
 80051e2:	4640      	mov	r0, r8
 80051e4:	f8cd a000 	str.w	sl, [sp]
 80051e8:	aa03      	add	r2, sp, #12
 80051ea:	f7ff fee1 	bl	8004fb0 <_printf_common>
 80051ee:	3001      	adds	r0, #1
 80051f0:	d14a      	bne.n	8005288 <_printf_i+0x1f4>
 80051f2:	f04f 30ff 	mov.w	r0, #4294967295
 80051f6:	b004      	add	sp, #16
 80051f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051fc:	6823      	ldr	r3, [r4, #0]
 80051fe:	f043 0320 	orr.w	r3, r3, #32
 8005202:	6023      	str	r3, [r4, #0]
 8005204:	2778      	movs	r7, #120	@ 0x78
 8005206:	4832      	ldr	r0, [pc, #200]	@ (80052d0 <_printf_i+0x23c>)
 8005208:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800520c:	6823      	ldr	r3, [r4, #0]
 800520e:	6831      	ldr	r1, [r6, #0]
 8005210:	061f      	lsls	r7, r3, #24
 8005212:	f851 5b04 	ldr.w	r5, [r1], #4
 8005216:	d402      	bmi.n	800521e <_printf_i+0x18a>
 8005218:	065f      	lsls	r7, r3, #25
 800521a:	bf48      	it	mi
 800521c:	b2ad      	uxthmi	r5, r5
 800521e:	6031      	str	r1, [r6, #0]
 8005220:	07d9      	lsls	r1, r3, #31
 8005222:	bf44      	itt	mi
 8005224:	f043 0320 	orrmi.w	r3, r3, #32
 8005228:	6023      	strmi	r3, [r4, #0]
 800522a:	b11d      	cbz	r5, 8005234 <_printf_i+0x1a0>
 800522c:	2310      	movs	r3, #16
 800522e:	e7ab      	b.n	8005188 <_printf_i+0xf4>
 8005230:	4826      	ldr	r0, [pc, #152]	@ (80052cc <_printf_i+0x238>)
 8005232:	e7e9      	b.n	8005208 <_printf_i+0x174>
 8005234:	6823      	ldr	r3, [r4, #0]
 8005236:	f023 0320 	bic.w	r3, r3, #32
 800523a:	6023      	str	r3, [r4, #0]
 800523c:	e7f6      	b.n	800522c <_printf_i+0x198>
 800523e:	4616      	mov	r6, r2
 8005240:	e7bd      	b.n	80051be <_printf_i+0x12a>
 8005242:	6833      	ldr	r3, [r6, #0]
 8005244:	6825      	ldr	r5, [r4, #0]
 8005246:	1d18      	adds	r0, r3, #4
 8005248:	6961      	ldr	r1, [r4, #20]
 800524a:	6030      	str	r0, [r6, #0]
 800524c:	062e      	lsls	r6, r5, #24
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	d501      	bpl.n	8005256 <_printf_i+0x1c2>
 8005252:	6019      	str	r1, [r3, #0]
 8005254:	e002      	b.n	800525c <_printf_i+0x1c8>
 8005256:	0668      	lsls	r0, r5, #25
 8005258:	d5fb      	bpl.n	8005252 <_printf_i+0x1be>
 800525a:	8019      	strh	r1, [r3, #0]
 800525c:	2300      	movs	r3, #0
 800525e:	4616      	mov	r6, r2
 8005260:	6123      	str	r3, [r4, #16]
 8005262:	e7bc      	b.n	80051de <_printf_i+0x14a>
 8005264:	6833      	ldr	r3, [r6, #0]
 8005266:	2100      	movs	r1, #0
 8005268:	1d1a      	adds	r2, r3, #4
 800526a:	6032      	str	r2, [r6, #0]
 800526c:	681e      	ldr	r6, [r3, #0]
 800526e:	6862      	ldr	r2, [r4, #4]
 8005270:	4630      	mov	r0, r6
 8005272:	f000 f859 	bl	8005328 <memchr>
 8005276:	b108      	cbz	r0, 800527c <_printf_i+0x1e8>
 8005278:	1b80      	subs	r0, r0, r6
 800527a:	6060      	str	r0, [r4, #4]
 800527c:	6863      	ldr	r3, [r4, #4]
 800527e:	6123      	str	r3, [r4, #16]
 8005280:	2300      	movs	r3, #0
 8005282:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005286:	e7aa      	b.n	80051de <_printf_i+0x14a>
 8005288:	4632      	mov	r2, r6
 800528a:	4649      	mov	r1, r9
 800528c:	4640      	mov	r0, r8
 800528e:	6923      	ldr	r3, [r4, #16]
 8005290:	47d0      	blx	sl
 8005292:	3001      	adds	r0, #1
 8005294:	d0ad      	beq.n	80051f2 <_printf_i+0x15e>
 8005296:	6823      	ldr	r3, [r4, #0]
 8005298:	079b      	lsls	r3, r3, #30
 800529a:	d413      	bmi.n	80052c4 <_printf_i+0x230>
 800529c:	68e0      	ldr	r0, [r4, #12]
 800529e:	9b03      	ldr	r3, [sp, #12]
 80052a0:	4298      	cmp	r0, r3
 80052a2:	bfb8      	it	lt
 80052a4:	4618      	movlt	r0, r3
 80052a6:	e7a6      	b.n	80051f6 <_printf_i+0x162>
 80052a8:	2301      	movs	r3, #1
 80052aa:	4632      	mov	r2, r6
 80052ac:	4649      	mov	r1, r9
 80052ae:	4640      	mov	r0, r8
 80052b0:	47d0      	blx	sl
 80052b2:	3001      	adds	r0, #1
 80052b4:	d09d      	beq.n	80051f2 <_printf_i+0x15e>
 80052b6:	3501      	adds	r5, #1
 80052b8:	68e3      	ldr	r3, [r4, #12]
 80052ba:	9903      	ldr	r1, [sp, #12]
 80052bc:	1a5b      	subs	r3, r3, r1
 80052be:	42ab      	cmp	r3, r5
 80052c0:	dcf2      	bgt.n	80052a8 <_printf_i+0x214>
 80052c2:	e7eb      	b.n	800529c <_printf_i+0x208>
 80052c4:	2500      	movs	r5, #0
 80052c6:	f104 0619 	add.w	r6, r4, #25
 80052ca:	e7f5      	b.n	80052b8 <_printf_i+0x224>
 80052cc:	080055c0 	.word	0x080055c0
 80052d0:	080055d1 	.word	0x080055d1

080052d4 <memmove>:
 80052d4:	4288      	cmp	r0, r1
 80052d6:	b510      	push	{r4, lr}
 80052d8:	eb01 0402 	add.w	r4, r1, r2
 80052dc:	d902      	bls.n	80052e4 <memmove+0x10>
 80052de:	4284      	cmp	r4, r0
 80052e0:	4623      	mov	r3, r4
 80052e2:	d807      	bhi.n	80052f4 <memmove+0x20>
 80052e4:	1e43      	subs	r3, r0, #1
 80052e6:	42a1      	cmp	r1, r4
 80052e8:	d008      	beq.n	80052fc <memmove+0x28>
 80052ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80052ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80052f2:	e7f8      	b.n	80052e6 <memmove+0x12>
 80052f4:	4601      	mov	r1, r0
 80052f6:	4402      	add	r2, r0
 80052f8:	428a      	cmp	r2, r1
 80052fa:	d100      	bne.n	80052fe <memmove+0x2a>
 80052fc:	bd10      	pop	{r4, pc}
 80052fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005302:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005306:	e7f7      	b.n	80052f8 <memmove+0x24>

08005308 <_sbrk_r>:
 8005308:	b538      	push	{r3, r4, r5, lr}
 800530a:	2300      	movs	r3, #0
 800530c:	4d05      	ldr	r5, [pc, #20]	@ (8005324 <_sbrk_r+0x1c>)
 800530e:	4604      	mov	r4, r0
 8005310:	4608      	mov	r0, r1
 8005312:	602b      	str	r3, [r5, #0]
 8005314:	f7fb ffca 	bl	80012ac <_sbrk>
 8005318:	1c43      	adds	r3, r0, #1
 800531a:	d102      	bne.n	8005322 <_sbrk_r+0x1a>
 800531c:	682b      	ldr	r3, [r5, #0]
 800531e:	b103      	cbz	r3, 8005322 <_sbrk_r+0x1a>
 8005320:	6023      	str	r3, [r4, #0]
 8005322:	bd38      	pop	{r3, r4, r5, pc}
 8005324:	20001458 	.word	0x20001458

08005328 <memchr>:
 8005328:	4603      	mov	r3, r0
 800532a:	b510      	push	{r4, lr}
 800532c:	b2c9      	uxtb	r1, r1
 800532e:	4402      	add	r2, r0
 8005330:	4293      	cmp	r3, r2
 8005332:	4618      	mov	r0, r3
 8005334:	d101      	bne.n	800533a <memchr+0x12>
 8005336:	2000      	movs	r0, #0
 8005338:	e003      	b.n	8005342 <memchr+0x1a>
 800533a:	7804      	ldrb	r4, [r0, #0]
 800533c:	3301      	adds	r3, #1
 800533e:	428c      	cmp	r4, r1
 8005340:	d1f6      	bne.n	8005330 <memchr+0x8>
 8005342:	bd10      	pop	{r4, pc}

08005344 <_realloc_r>:
 8005344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005348:	4680      	mov	r8, r0
 800534a:	4615      	mov	r5, r2
 800534c:	460c      	mov	r4, r1
 800534e:	b921      	cbnz	r1, 800535a <_realloc_r+0x16>
 8005350:	4611      	mov	r1, r2
 8005352:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005356:	f7ff bc47 	b.w	8004be8 <_malloc_r>
 800535a:	b92a      	cbnz	r2, 8005368 <_realloc_r+0x24>
 800535c:	f7ff fbda 	bl	8004b14 <_free_r>
 8005360:	2400      	movs	r4, #0
 8005362:	4620      	mov	r0, r4
 8005364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005368:	f000 f81a 	bl	80053a0 <_malloc_usable_size_r>
 800536c:	4285      	cmp	r5, r0
 800536e:	4606      	mov	r6, r0
 8005370:	d802      	bhi.n	8005378 <_realloc_r+0x34>
 8005372:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005376:	d8f4      	bhi.n	8005362 <_realloc_r+0x1e>
 8005378:	4629      	mov	r1, r5
 800537a:	4640      	mov	r0, r8
 800537c:	f7ff fc34 	bl	8004be8 <_malloc_r>
 8005380:	4607      	mov	r7, r0
 8005382:	2800      	cmp	r0, #0
 8005384:	d0ec      	beq.n	8005360 <_realloc_r+0x1c>
 8005386:	42b5      	cmp	r5, r6
 8005388:	462a      	mov	r2, r5
 800538a:	4621      	mov	r1, r4
 800538c:	bf28      	it	cs
 800538e:	4632      	movcs	r2, r6
 8005390:	f7ff fbb2 	bl	8004af8 <memcpy>
 8005394:	4621      	mov	r1, r4
 8005396:	4640      	mov	r0, r8
 8005398:	f7ff fbbc 	bl	8004b14 <_free_r>
 800539c:	463c      	mov	r4, r7
 800539e:	e7e0      	b.n	8005362 <_realloc_r+0x1e>

080053a0 <_malloc_usable_size_r>:
 80053a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053a4:	1f18      	subs	r0, r3, #4
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	bfbc      	itt	lt
 80053aa:	580b      	ldrlt	r3, [r1, r0]
 80053ac:	18c0      	addlt	r0, r0, r3
 80053ae:	4770      	bx	lr

080053b0 <_init>:
 80053b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053b2:	bf00      	nop
 80053b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053b6:	bc08      	pop	{r3}
 80053b8:	469e      	mov	lr, r3
 80053ba:	4770      	bx	lr

080053bc <_fini>:
 80053bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053be:	bf00      	nop
 80053c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053c2:	bc08      	pop	{r3}
 80053c4:	469e      	mov	lr, r3
 80053c6:	4770      	bx	lr
