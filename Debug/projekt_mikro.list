
projekt_mikro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d84  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000208  08004e90  08004e90  00005e90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005098  08005098  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  08005098  08005098  00006098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080050a0  080050a0  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050a0  080050a0  000060a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080050a4  080050a4  000060a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080050a8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008ac  20000068  08005110  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000914  08005110  00007914  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d21a  00000000  00000000  00007091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002379  00000000  00000000  000142ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d88  00000000  00000000  00016628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a81  00000000  00000000  000173b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018d5e  00000000  00000000  00017e31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fe3a  00000000  00000000  00030b8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c700  00000000  00000000  000409c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cd0c9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000415c  00000000  00000000  000cd10c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000d1268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08004e78 	.word	0x08004e78

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08004e78 	.word	0x08004e78

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b088      	sub	sp, #32
 8000160:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000162:	f107 0310 	add.w	r3, r7, #16
 8000166:	2200      	movs	r2, #0
 8000168:	601a      	str	r2, [r3, #0]
 800016a:	605a      	str	r2, [r3, #4]
 800016c:	609a      	str	r2, [r3, #8]
 800016e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000170:	4b2d      	ldr	r3, [pc, #180]	@ (8000228 <MX_GPIO_Init+0xcc>)
 8000172:	699b      	ldr	r3, [r3, #24]
 8000174:	4a2c      	ldr	r2, [pc, #176]	@ (8000228 <MX_GPIO_Init+0xcc>)
 8000176:	f043 0310 	orr.w	r3, r3, #16
 800017a:	6193      	str	r3, [r2, #24]
 800017c:	4b2a      	ldr	r3, [pc, #168]	@ (8000228 <MX_GPIO_Init+0xcc>)
 800017e:	699b      	ldr	r3, [r3, #24]
 8000180:	f003 0310 	and.w	r3, r3, #16
 8000184:	60fb      	str	r3, [r7, #12]
 8000186:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000188:	4b27      	ldr	r3, [pc, #156]	@ (8000228 <MX_GPIO_Init+0xcc>)
 800018a:	699b      	ldr	r3, [r3, #24]
 800018c:	4a26      	ldr	r2, [pc, #152]	@ (8000228 <MX_GPIO_Init+0xcc>)
 800018e:	f043 0320 	orr.w	r3, r3, #32
 8000192:	6193      	str	r3, [r2, #24]
 8000194:	4b24      	ldr	r3, [pc, #144]	@ (8000228 <MX_GPIO_Init+0xcc>)
 8000196:	699b      	ldr	r3, [r3, #24]
 8000198:	f003 0320 	and.w	r3, r3, #32
 800019c:	60bb      	str	r3, [r7, #8]
 800019e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001a0:	4b21      	ldr	r3, [pc, #132]	@ (8000228 <MX_GPIO_Init+0xcc>)
 80001a2:	699b      	ldr	r3, [r3, #24]
 80001a4:	4a20      	ldr	r2, [pc, #128]	@ (8000228 <MX_GPIO_Init+0xcc>)
 80001a6:	f043 0304 	orr.w	r3, r3, #4
 80001aa:	6193      	str	r3, [r2, #24]
 80001ac:	4b1e      	ldr	r3, [pc, #120]	@ (8000228 <MX_GPIO_Init+0xcc>)
 80001ae:	699b      	ldr	r3, [r3, #24]
 80001b0:	f003 0304 	and.w	r3, r3, #4
 80001b4:	607b      	str	r3, [r7, #4]
 80001b6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001b8:	4b1b      	ldr	r3, [pc, #108]	@ (8000228 <MX_GPIO_Init+0xcc>)
 80001ba:	699b      	ldr	r3, [r3, #24]
 80001bc:	4a1a      	ldr	r2, [pc, #104]	@ (8000228 <MX_GPIO_Init+0xcc>)
 80001be:	f043 0308 	orr.w	r3, r3, #8
 80001c2:	6193      	str	r3, [r2, #24]
 80001c4:	4b18      	ldr	r3, [pc, #96]	@ (8000228 <MX_GPIO_Init+0xcc>)
 80001c6:	699b      	ldr	r3, [r3, #24]
 80001c8:	f003 0308 	and.w	r3, r3, #8
 80001cc:	603b      	str	r3, [r7, #0]
 80001ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80001d0:	2200      	movs	r2, #0
 80001d2:	2120      	movs	r1, #32
 80001d4:	4815      	ldr	r0, [pc, #84]	@ (800022c <MX_GPIO_Init+0xd0>)
 80001d6:	f001 fc2b 	bl	8001a30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80001da:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80001de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80001e0:	4b13      	ldr	r3, [pc, #76]	@ (8000230 <MX_GPIO_Init+0xd4>)
 80001e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001e4:	2300      	movs	r3, #0
 80001e6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80001e8:	f107 0310 	add.w	r3, r7, #16
 80001ec:	4619      	mov	r1, r3
 80001ee:	4811      	ldr	r0, [pc, #68]	@ (8000234 <MX_GPIO_Init+0xd8>)
 80001f0:	f001 fa9a 	bl	8001728 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80001f4:	2320      	movs	r3, #32
 80001f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001f8:	2301      	movs	r3, #1
 80001fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001fc:	2300      	movs	r3, #0
 80001fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000200:	2302      	movs	r3, #2
 8000202:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000204:	f107 0310 	add.w	r3, r7, #16
 8000208:	4619      	mov	r1, r3
 800020a:	4808      	ldr	r0, [pc, #32]	@ (800022c <MX_GPIO_Init+0xd0>)
 800020c:	f001 fa8c 	bl	8001728 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000210:	2200      	movs	r2, #0
 8000212:	2100      	movs	r1, #0
 8000214:	2028      	movs	r0, #40	@ 0x28
 8000216:	f001 f99e 	bl	8001556 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800021a:	2028      	movs	r0, #40	@ 0x28
 800021c:	f001 f9b7 	bl	800158e <HAL_NVIC_EnableIRQ>

}
 8000220:	bf00      	nop
 8000222:	3720      	adds	r7, #32
 8000224:	46bd      	mov	sp, r7
 8000226:	bd80      	pop	{r7, pc}
 8000228:	40021000 	.word	0x40021000
 800022c:	40010800 	.word	0x40010800
 8000230:	10110000 	.word	0x10110000
 8000234:	40011000 	.word	0x40011000

08000238 <calculate_crc>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* === CRC === */
uint16_t calculate_crc(const char *data, size_t length) {
 8000238:	b480      	push	{r7}
 800023a:	b087      	sub	sp, #28
 800023c:	af00      	add	r7, sp, #0
 800023e:	6078      	str	r0, [r7, #4]
 8000240:	6039      	str	r1, [r7, #0]
	uint16_t crc = 0x0000; // początkowa wartość
 8000242:	2300      	movs	r3, #0
 8000244:	82fb      	strh	r3, [r7, #22]
	uint16_t polynomial = 0xA001; // polinom (odwrócony 0x8005)
 8000246:	f24a 0301 	movw	r3, #40961	@ 0xa001
 800024a:	81bb      	strh	r3, [r7, #12]

	for (size_t i = 0; i < length; i++) {
 800024c:	2300      	movs	r3, #0
 800024e:	613b      	str	r3, [r7, #16]
 8000250:	e022      	b.n	8000298 <calculate_crc+0x60>
		crc ^= (uint8_t)data[i]; // XOR z bieżącym bajtem
 8000252:	687a      	ldr	r2, [r7, #4]
 8000254:	693b      	ldr	r3, [r7, #16]
 8000256:	4413      	add	r3, r2
 8000258:	781b      	ldrb	r3, [r3, #0]
 800025a:	461a      	mov	r2, r3
 800025c:	8afb      	ldrh	r3, [r7, #22]
 800025e:	4053      	eors	r3, r2
 8000260:	82fb      	strh	r3, [r7, #22]
		for (uint8_t bit = 0; bit < 8; bit++) {
 8000262:	2300      	movs	r3, #0
 8000264:	73fb      	strb	r3, [r7, #15]
 8000266:	e011      	b.n	800028c <calculate_crc+0x54>
			if (crc & 0x0001) crc = (crc >> 1) ^ polynomial;
 8000268:	8afb      	ldrh	r3, [r7, #22]
 800026a:	f003 0301 	and.w	r3, r3, #1
 800026e:	2b00      	cmp	r3, #0
 8000270:	d006      	beq.n	8000280 <calculate_crc+0x48>
 8000272:	8afb      	ldrh	r3, [r7, #22]
 8000274:	085b      	lsrs	r3, r3, #1
 8000276:	b29a      	uxth	r2, r3
 8000278:	89bb      	ldrh	r3, [r7, #12]
 800027a:	4053      	eors	r3, r2
 800027c:	82fb      	strh	r3, [r7, #22]
 800027e:	e002      	b.n	8000286 <calculate_crc+0x4e>
			else crc >>= 1;
 8000280:	8afb      	ldrh	r3, [r7, #22]
 8000282:	085b      	lsrs	r3, r3, #1
 8000284:	82fb      	strh	r3, [r7, #22]
		for (uint8_t bit = 0; bit < 8; bit++) {
 8000286:	7bfb      	ldrb	r3, [r7, #15]
 8000288:	3301      	adds	r3, #1
 800028a:	73fb      	strb	r3, [r7, #15]
 800028c:	7bfb      	ldrb	r3, [r7, #15]
 800028e:	2b07      	cmp	r3, #7
 8000290:	d9ea      	bls.n	8000268 <calculate_crc+0x30>
	for (size_t i = 0; i < length; i++) {
 8000292:	693b      	ldr	r3, [r7, #16]
 8000294:	3301      	adds	r3, #1
 8000296:	613b      	str	r3, [r7, #16]
 8000298:	693a      	ldr	r2, [r7, #16]
 800029a:	683b      	ldr	r3, [r7, #0]
 800029c:	429a      	cmp	r2, r3
 800029e:	d3d8      	bcc.n	8000252 <calculate_crc+0x1a>
		}
	}
	return crc;
 80002a0:	8afb      	ldrh	r3, [r7, #22]
}
 80002a2:	4618      	mov	r0, r3
 80002a4:	371c      	adds	r7, #28
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bc80      	pop	{r7}
 80002aa:	4770      	bx	lr

080002ac <calculate_frame_crc>:

uint16_t calculate_frame_crc(Frame *frame) {
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b084      	sub	sp, #16
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
    uint16_t crc = 0x0000; // Początkowa wartość CRC
 80002b4:	2300      	movs	r3, #0
 80002b6:	81fb      	strh	r3, [r7, #14]

    // Oblicz CRC dla pola receiver
    crc = calculate_crc((const char *)frame->receiver, sizeof(frame->receiver)) ^ crc;
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	3303      	adds	r3, #3
 80002bc:	2103      	movs	r1, #3
 80002be:	4618      	mov	r0, r3
 80002c0:	f7ff ffba 	bl	8000238 <calculate_crc>
 80002c4:	4603      	mov	r3, r0
 80002c6:	461a      	mov	r2, r3
 80002c8:	89fb      	ldrh	r3, [r7, #14]
 80002ca:	4053      	eors	r3, r2
 80002cc:	81fb      	strh	r3, [r7, #14]

    // Oblicz CRC dla pola sender
    crc = calculate_crc((const char *)frame->sender, sizeof(frame->sender)) ^ crc;
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	2103      	movs	r1, #3
 80002d2:	4618      	mov	r0, r3
 80002d4:	f7ff ffb0 	bl	8000238 <calculate_crc>
 80002d8:	4603      	mov	r3, r0
 80002da:	461a      	mov	r2, r3
 80002dc:	89fb      	ldrh	r3, [r7, #14]
 80002de:	4053      	eors	r3, r2
 80002e0:	81fb      	strh	r3, [r7, #14]

    // Oblicz CRC dla pola length
    crc = calculate_crc((const char *)frame->length, sizeof(frame->length)) ^ crc;
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	3306      	adds	r3, #6
 80002e6:	2104      	movs	r1, #4
 80002e8:	4618      	mov	r0, r3
 80002ea:	f7ff ffa5 	bl	8000238 <calculate_crc>
 80002ee:	4603      	mov	r3, r0
 80002f0:	461a      	mov	r2, r3
 80002f2:	89fb      	ldrh	r3, [r7, #14]
 80002f4:	4053      	eors	r3, r2
 80002f6:	81fb      	strh	r3, [r7, #14]

    // Oblicz CRC dla pola data
    crc = calculate_crc((const char *)frame->data_raw, sizeof(frame->data_raw)) ^ crc;
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	330a      	adds	r3, #10
 80002fc:	f240 1101 	movw	r1, #257	@ 0x101
 8000300:	4618      	mov	r0, r3
 8000302:	f7ff ff99 	bl	8000238 <calculate_crc>
 8000306:	4603      	mov	r3, r0
 8000308:	461a      	mov	r2, r3
 800030a:	89fb      	ldrh	r3, [r7, #14]
 800030c:	4053      	eors	r3, r2
 800030e:	81fb      	strh	r3, [r7, #14]

    return crc;
 8000310:	89fb      	ldrh	r3, [r7, #14]
}
 8000312:	4618      	mov	r0, r3
 8000314:	3710      	adds	r7, #16
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}
	...

0800031c <USART_fsend>:
	} else {
		return 1;
	}
}

void USART_fsend(char* format, ...) {
 800031c:	b40f      	push	{r0, r1, r2, r3}
 800031e:	b580      	push	{r7, lr}
 8000320:	b0c4      	sub	sp, #272	@ 0x110
 8000322:	af00      	add	r7, sp, #0
	char tmp[256];
	va_list arglist;
	va_start(arglist, format);
 8000324:	f507 728e 	add.w	r2, r7, #284	@ 0x11c
 8000328:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800032c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000330:	601a      	str	r2, [r3, #0]
	vsprintf(tmp, format, arglist);
 8000332:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000336:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800033a:	f107 000c 	add.w	r0, r7, #12
 800033e:	681a      	ldr	r2, [r3, #0]
 8000340:	f8d7 1118 	ldr.w	r1, [r7, #280]	@ 0x118
 8000344:	f003 fe52 	bl	8003fec <vsiprintf>
	va_end(arglist);
	volatile int idx = USART_TX_EMPTY;
 8000348:	4b44      	ldr	r3, [pc, #272]	@ (800045c <USART_fsend+0x140>)
 800034a:	881b      	ldrh	r3, [r3, #0]
 800034c:	b29b      	uxth	r3, r3
 800034e:	461a      	mov	r2, r3
 8000350:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000354:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000358:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < strlen(tmp); i++) {
 800035a:	2300      	movs	r3, #0
 800035c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8000360:	e025      	b.n	80003ae <USART_fsend+0x92>
		USART_BUF_TX[idx] = tmp[i];
 8000362:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000366:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000370:	f5a2 7182 	sub.w	r1, r2, #260	@ 0x104
 8000374:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8000378:	440a      	add	r2, r1
 800037a:	7811      	ldrb	r1, [r2, #0]
 800037c:	4a38      	ldr	r2, [pc, #224]	@ (8000460 <USART_fsend+0x144>)
 800037e:	54d1      	strb	r1, [r2, r3]
		idx = (idx + 1) % USART_TXBUF_SIZE;
 8000380:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000384:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	3301      	adds	r3, #1
 800038c:	425a      	negs	r2, r3
 800038e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000392:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8000396:	bf58      	it	pl
 8000398:	4253      	negpl	r3, r2
 800039a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800039e:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80003a2:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < strlen(tmp); i++) {
 80003a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80003a8:	3301      	adds	r3, #1
 80003aa:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80003ae:	f107 030c 	add.w	r3, r7, #12
 80003b2:	4618      	mov	r0, r3
 80003b4:	f7ff feca 	bl	800014c <strlen>
 80003b8:	4602      	mov	r2, r0
 80003ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80003be:	429a      	cmp	r2, r3
 80003c0:	d8cf      	bhi.n	8000362 <USART_fsend+0x46>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003c2:	b672      	cpsid	i
}
 80003c4:	bf00      	nop
	}

	__disable_irq();
	if (USART_TX_EMPTY == USART_TX_BUSY && __HAL_UART_GET_FLAG(&huart2, UART_FLAG_TXE) == SET) {
 80003c6:	4b25      	ldr	r3, [pc, #148]	@ (800045c <USART_fsend+0x140>)
 80003c8:	881b      	ldrh	r3, [r3, #0]
 80003ca:	b29a      	uxth	r2, r3
 80003cc:	4b25      	ldr	r3, [pc, #148]	@ (8000464 <USART_fsend+0x148>)
 80003ce:	881b      	ldrh	r3, [r3, #0]
 80003d0:	b29b      	uxth	r3, r3
 80003d2:	429a      	cmp	r2, r3
 80003d4:	d130      	bne.n	8000438 <USART_fsend+0x11c>
 80003d6:	4b24      	ldr	r3, [pc, #144]	@ (8000468 <USART_fsend+0x14c>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80003e0:	2b80      	cmp	r3, #128	@ 0x80
 80003e2:	d129      	bne.n	8000438 <USART_fsend+0x11c>
		USART_TX_EMPTY = idx;
 80003e4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80003e8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	b29a      	uxth	r2, r3
 80003f0:	4b1a      	ldr	r3, [pc, #104]	@ (800045c <USART_fsend+0x140>)
 80003f2:	801a      	strh	r2, [r3, #0]
		uint8_t tmp = USART_BUF_TX[USART_TX_BUSY];
 80003f4:	4b1b      	ldr	r3, [pc, #108]	@ (8000464 <USART_fsend+0x148>)
 80003f6:	881b      	ldrh	r3, [r3, #0]
 80003f8:	b29b      	uxth	r3, r3
 80003fa:	461a      	mov	r2, r3
 80003fc:	4b18      	ldr	r3, [pc, #96]	@ (8000460 <USART_fsend+0x144>)
 80003fe:	5c9a      	ldrb	r2, [r3, r2]
 8000400:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000404:	f2a3 130d 	subw	r3, r3, #269	@ 0x10d
 8000408:	701a      	strb	r2, [r3, #0]
		USART_TX_BUSY++;
 800040a:	4b16      	ldr	r3, [pc, #88]	@ (8000464 <USART_fsend+0x148>)
 800040c:	881b      	ldrh	r3, [r3, #0]
 800040e:	b29b      	uxth	r3, r3
 8000410:	3301      	adds	r3, #1
 8000412:	b29a      	uxth	r2, r3
 8000414:	4b13      	ldr	r3, [pc, #76]	@ (8000464 <USART_fsend+0x148>)
 8000416:	801a      	strh	r2, [r3, #0]
		if (USART_TX_BUSY >= USART_TXBUF_SIZE) USART_TX_BUSY = 0;
 8000418:	4b12      	ldr	r3, [pc, #72]	@ (8000464 <USART_fsend+0x148>)
 800041a:	881b      	ldrh	r3, [r3, #0]
 800041c:	b29b      	uxth	r3, r3
 800041e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000422:	d302      	bcc.n	800042a <USART_fsend+0x10e>
 8000424:	4b0f      	ldr	r3, [pc, #60]	@ (8000464 <USART_fsend+0x148>)
 8000426:	2200      	movs	r2, #0
 8000428:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart2, &tmp, 1);
 800042a:	1cfb      	adds	r3, r7, #3
 800042c:	2201      	movs	r2, #1
 800042e:	4619      	mov	r1, r3
 8000430:	480d      	ldr	r0, [pc, #52]	@ (8000468 <USART_fsend+0x14c>)
 8000432:	f002 fe15 	bl	8003060 <HAL_UART_Transmit_IT>
	if (USART_TX_EMPTY == USART_TX_BUSY && __HAL_UART_GET_FLAG(&huart2, UART_FLAG_TXE) == SET) {
 8000436:	e007      	b.n	8000448 <USART_fsend+0x12c>
	}
	else USART_TX_EMPTY = idx;
 8000438:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800043c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	b29a      	uxth	r2, r3
 8000444:	4b05      	ldr	r3, [pc, #20]	@ (800045c <USART_fsend+0x140>)
 8000446:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000448:	b662      	cpsie	i
}
 800044a:	bf00      	nop
	__enable_irq();
}
 800044c:	bf00      	nop
 800044e:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8000452:	46bd      	mov	sp, r7
 8000454:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000458:	b004      	add	sp, #16
 800045a:	4770      	bx	lr
 800045c:	20000508 	.word	0x20000508
 8000460:	20000108 	.word	0x20000108
 8000464:	2000050a 	.word	0x2000050a
 8000468:	2000077c 	.word	0x2000077c

0800046c <HAL_UART_RxCpltCallback>:

/* === USART CALLBACK RECEIVE === */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800046c:	b580      	push	{r7, lr}
 800046e:	b082      	sub	sp, #8
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
	if (huart == &huart2) {
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	4a10      	ldr	r2, [pc, #64]	@ (80004b8 <HAL_UART_RxCpltCallback+0x4c>)
 8000478:	4293      	cmp	r3, r2
 800047a:	d119      	bne.n	80004b0 <HAL_UART_RxCpltCallback+0x44>
		USART_RX_EMPTY++;
 800047c:	4b0f      	ldr	r3, [pc, #60]	@ (80004bc <HAL_UART_RxCpltCallback+0x50>)
 800047e:	881b      	ldrh	r3, [r3, #0]
 8000480:	b29b      	uxth	r3, r3
 8000482:	3301      	adds	r3, #1
 8000484:	b29a      	uxth	r2, r3
 8000486:	4b0d      	ldr	r3, [pc, #52]	@ (80004bc <HAL_UART_RxCpltCallback+0x50>)
 8000488:	801a      	strh	r2, [r3, #0]
		if (USART_RX_EMPTY >= USART_RXBUF_SIZE) USART_RX_EMPTY = 0;
 800048a:	4b0c      	ldr	r3, [pc, #48]	@ (80004bc <HAL_UART_RxCpltCallback+0x50>)
 800048c:	881b      	ldrh	r3, [r3, #0]
 800048e:	b29b      	uxth	r3, r3
 8000490:	2b7f      	cmp	r3, #127	@ 0x7f
 8000492:	d902      	bls.n	800049a <HAL_UART_RxCpltCallback+0x2e>
 8000494:	4b09      	ldr	r3, [pc, #36]	@ (80004bc <HAL_UART_RxCpltCallback+0x50>)
 8000496:	2200      	movs	r2, #0
 8000498:	801a      	strh	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, &USART_BUF_RX[USART_RX_EMPTY], 1);
 800049a:	4b08      	ldr	r3, [pc, #32]	@ (80004bc <HAL_UART_RxCpltCallback+0x50>)
 800049c:	881b      	ldrh	r3, [r3, #0]
 800049e:	b29b      	uxth	r3, r3
 80004a0:	461a      	mov	r2, r3
 80004a2:	4b07      	ldr	r3, [pc, #28]	@ (80004c0 <HAL_UART_RxCpltCallback+0x54>)
 80004a4:	4413      	add	r3, r2
 80004a6:	2201      	movs	r2, #1
 80004a8:	4619      	mov	r1, r3
 80004aa:	4803      	ldr	r0, [pc, #12]	@ (80004b8 <HAL_UART_RxCpltCallback+0x4c>)
 80004ac:	f002 fe0d 	bl	80030ca <HAL_UART_Receive_IT>
	}
}
 80004b0:	bf00      	nop
 80004b2:	3708      	adds	r7, #8
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	2000077c 	.word	0x2000077c
 80004bc:	20000104 	.word	0x20000104
 80004c0:	20000084 	.word	0x20000084

080004c4 <HAL_UART_TxCpltCallback>:

/* === USART TRANSMIT CALLBACK === */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b084      	sub	sp, #16
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
    if (huart == &huart2) {
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	4a16      	ldr	r2, [pc, #88]	@ (8000528 <HAL_UART_TxCpltCallback+0x64>)
 80004d0:	4293      	cmp	r3, r2
 80004d2:	d125      	bne.n	8000520 <HAL_UART_TxCpltCallback+0x5c>
        // sprawdzenie, czy są dane do wysłania
        if (USART_TX_EMPTY != USART_TX_BUSY) {
 80004d4:	4b15      	ldr	r3, [pc, #84]	@ (800052c <HAL_UART_TxCpltCallback+0x68>)
 80004d6:	881b      	ldrh	r3, [r3, #0]
 80004d8:	b29a      	uxth	r2, r3
 80004da:	4b15      	ldr	r3, [pc, #84]	@ (8000530 <HAL_UART_TxCpltCallback+0x6c>)
 80004dc:	881b      	ldrh	r3, [r3, #0]
 80004de:	b29b      	uxth	r3, r3
 80004e0:	429a      	cmp	r2, r3
 80004e2:	d01d      	beq.n	8000520 <HAL_UART_TxCpltCallback+0x5c>
        	uint8_t tmp = USART_BUF_TX[USART_TX_BUSY];
 80004e4:	4b12      	ldr	r3, [pc, #72]	@ (8000530 <HAL_UART_TxCpltCallback+0x6c>)
 80004e6:	881b      	ldrh	r3, [r3, #0]
 80004e8:	b29b      	uxth	r3, r3
 80004ea:	461a      	mov	r2, r3
 80004ec:	4b11      	ldr	r3, [pc, #68]	@ (8000534 <HAL_UART_TxCpltCallback+0x70>)
 80004ee:	5c9b      	ldrb	r3, [r3, r2]
 80004f0:	73fb      	strb	r3, [r7, #15]
        	USART_TX_BUSY++;
 80004f2:	4b0f      	ldr	r3, [pc, #60]	@ (8000530 <HAL_UART_TxCpltCallback+0x6c>)
 80004f4:	881b      	ldrh	r3, [r3, #0]
 80004f6:	b29b      	uxth	r3, r3
 80004f8:	3301      	adds	r3, #1
 80004fa:	b29a      	uxth	r2, r3
 80004fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000530 <HAL_UART_TxCpltCallback+0x6c>)
 80004fe:	801a      	strh	r2, [r3, #0]
        	if (USART_TX_BUSY >= USART_TXBUF_SIZE) USART_TX_BUSY = 0;
 8000500:	4b0b      	ldr	r3, [pc, #44]	@ (8000530 <HAL_UART_TxCpltCallback+0x6c>)
 8000502:	881b      	ldrh	r3, [r3, #0]
 8000504:	b29b      	uxth	r3, r3
 8000506:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800050a:	d302      	bcc.n	8000512 <HAL_UART_TxCpltCallback+0x4e>
 800050c:	4b08      	ldr	r3, [pc, #32]	@ (8000530 <HAL_UART_TxCpltCallback+0x6c>)
 800050e:	2200      	movs	r2, #0
 8000510:	801a      	strh	r2, [r3, #0]
            HAL_UART_Transmit_IT(&huart2, &tmp, 1); // bajt wysłany, można wysłać następny
 8000512:	f107 030f 	add.w	r3, r7, #15
 8000516:	2201      	movs	r2, #1
 8000518:	4619      	mov	r1, r3
 800051a:	4803      	ldr	r0, [pc, #12]	@ (8000528 <HAL_UART_TxCpltCallback+0x64>)
 800051c:	f002 fda0 	bl	8003060 <HAL_UART_Transmit_IT>
        }
    }
}
 8000520:	bf00      	nop
 8000522:	3710      	adds	r7, #16
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}
 8000528:	2000077c 	.word	0x2000077c
 800052c:	20000508 	.word	0x20000508
 8000530:	2000050a 	.word	0x2000050a
 8000534:	20000108 	.word	0x20000108

08000538 <USART_getchar>:

int16_t USART_getchar(){
 8000538:	b480      	push	{r7}
 800053a:	b083      	sub	sp, #12
 800053c:	af00      	add	r7, sp, #0
	int16_t tmp;
	if (USART_RX_EMPTY != USART_RX_BUSY) {
 800053e:	4b14      	ldr	r3, [pc, #80]	@ (8000590 <USART_getchar+0x58>)
 8000540:	881b      	ldrh	r3, [r3, #0]
 8000542:	b29a      	uxth	r2, r3
 8000544:	4b13      	ldr	r3, [pc, #76]	@ (8000594 <USART_getchar+0x5c>)
 8000546:	881b      	ldrh	r3, [r3, #0]
 8000548:	b29b      	uxth	r3, r3
 800054a:	429a      	cmp	r2, r3
 800054c:	d018      	beq.n	8000580 <USART_getchar+0x48>
		 tmp = USART_BUF_RX[USART_RX_BUSY];
 800054e:	4b11      	ldr	r3, [pc, #68]	@ (8000594 <USART_getchar+0x5c>)
 8000550:	881b      	ldrh	r3, [r3, #0]
 8000552:	b29b      	uxth	r3, r3
 8000554:	461a      	mov	r2, r3
 8000556:	4b10      	ldr	r3, [pc, #64]	@ (8000598 <USART_getchar+0x60>)
 8000558:	5c9b      	ldrb	r3, [r3, r2]
 800055a:	80fb      	strh	r3, [r7, #6]
		 USART_RX_BUSY++;
 800055c:	4b0d      	ldr	r3, [pc, #52]	@ (8000594 <USART_getchar+0x5c>)
 800055e:	881b      	ldrh	r3, [r3, #0]
 8000560:	b29b      	uxth	r3, r3
 8000562:	3301      	adds	r3, #1
 8000564:	b29a      	uxth	r2, r3
 8000566:	4b0b      	ldr	r3, [pc, #44]	@ (8000594 <USART_getchar+0x5c>)
 8000568:	801a      	strh	r2, [r3, #0]
		 if (USART_RX_BUSY >= USART_RXBUF_SIZE) USART_RX_BUSY = 0;
 800056a:	4b0a      	ldr	r3, [pc, #40]	@ (8000594 <USART_getchar+0x5c>)
 800056c:	881b      	ldrh	r3, [r3, #0]
 800056e:	b29b      	uxth	r3, r3
 8000570:	2b7f      	cmp	r3, #127	@ 0x7f
 8000572:	d902      	bls.n	800057a <USART_getchar+0x42>
 8000574:	4b07      	ldr	r3, [pc, #28]	@ (8000594 <USART_getchar+0x5c>)
 8000576:	2200      	movs	r2, #0
 8000578:	801a      	strh	r2, [r3, #0]
		 return tmp;
 800057a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800057e:	e001      	b.n	8000584 <USART_getchar+0x4c>
	} else return -1;
 8000580:	f04f 33ff 	mov.w	r3, #4294967295

}
 8000584:	4618      	mov	r0, r3
 8000586:	370c      	adds	r7, #12
 8000588:	46bd      	mov	sp, r7
 800058a:	bc80      	pop	{r7}
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop
 8000590:	20000104 	.word	0x20000104
 8000594:	20000106 	.word	0x20000106
 8000598:	20000084 	.word	0x20000084

0800059c <validate_and_atoi>:
	return 0;
}



uint16_t validate_and_atoi(const char *str, size_t length) {
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
 80005a4:	6039      	str	r1, [r7, #0]
    uint16_t result = 0;
 80005a6:	2300      	movs	r3, #0
 80005a8:	81fb      	strh	r3, [r7, #14]

    // sprawdzanie czy kazdy znak to cyfra
    for (size_t i = 0; i < length; i++) {
 80005aa:	2300      	movs	r3, #0
 80005ac:	60bb      	str	r3, [r7, #8]
 80005ae:	e027      	b.n	8000600 <validate_and_atoi+0x64>
        if (str[i] < '0' || str[i] > '9') {
 80005b0:	687a      	ldr	r2, [r7, #4]
 80005b2:	68bb      	ldr	r3, [r7, #8]
 80005b4:	4413      	add	r3, r2
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	2b2f      	cmp	r3, #47	@ 0x2f
 80005ba:	d905      	bls.n	80005c8 <validate_and_atoi+0x2c>
 80005bc:	687a      	ldr	r2, [r7, #4]
 80005be:	68bb      	ldr	r3, [r7, #8]
 80005c0:	4413      	add	r3, r2
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	2b39      	cmp	r3, #57	@ 0x39
 80005c6:	d90a      	bls.n	80005de <validate_and_atoi+0x42>
            USART_fsend("invalid char '%c' during atoi\n", str[i]);
 80005c8:	687a      	ldr	r2, [r7, #4]
 80005ca:	68bb      	ldr	r3, [r7, #8]
 80005cc:	4413      	add	r3, r2
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	4619      	mov	r1, r3
 80005d2:	4810      	ldr	r0, [pc, #64]	@ (8000614 <validate_and_atoi+0x78>)
 80005d4:	f7ff fea2 	bl	800031c <USART_fsend>
            return 65535; // maksymalna wartosc uint16 jako kod bledu
 80005d8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80005dc:	e015      	b.n	800060a <validate_and_atoi+0x6e>
        }
        result = (result * 10) + (str[i] - '0');
 80005de:	89fb      	ldrh	r3, [r7, #14]
 80005e0:	461a      	mov	r2, r3
 80005e2:	0092      	lsls	r2, r2, #2
 80005e4:	4413      	add	r3, r2
 80005e6:	005b      	lsls	r3, r3, #1
 80005e8:	b29b      	uxth	r3, r3
 80005ea:	6879      	ldr	r1, [r7, #4]
 80005ec:	68ba      	ldr	r2, [r7, #8]
 80005ee:	440a      	add	r2, r1
 80005f0:	7812      	ldrb	r2, [r2, #0]
 80005f2:	4413      	add	r3, r2
 80005f4:	b29b      	uxth	r3, r3
 80005f6:	3b30      	subs	r3, #48	@ 0x30
 80005f8:	81fb      	strh	r3, [r7, #14]
    for (size_t i = 0; i < length; i++) {
 80005fa:	68bb      	ldr	r3, [r7, #8]
 80005fc:	3301      	adds	r3, #1
 80005fe:	60bb      	str	r3, [r7, #8]
 8000600:	68ba      	ldr	r2, [r7, #8]
 8000602:	683b      	ldr	r3, [r7, #0]
 8000604:	429a      	cmp	r2, r3
 8000606:	d3d3      	bcc.n	80005b0 <validate_and_atoi+0x14>
    }

    return result;
 8000608:	89fb      	ldrh	r3, [r7, #14]
}
 800060a:	4618      	mov	r0, r3
 800060c:	3710      	adds	r7, #16
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	08004e98 	.word	0x08004e98

08000618 <process_frame>:

void process_frame() {
 8000618:	b590      	push	{r4, r7, lr}
 800061a:	b087      	sub	sp, #28
 800061c:	af00      	add	r7, sp, #0

	if (frame.crc != calculate_frame_crc(&frame)) return;
 800061e:	4b5f      	ldr	r3, [pc, #380]	@ (800079c <process_frame+0x184>)
 8000620:	f8b3 420c 	ldrh.w	r4, [r3, #524]	@ 0x20c
 8000624:	485d      	ldr	r0, [pc, #372]	@ (800079c <process_frame+0x184>)
 8000626:	f7ff fe41 	bl	80002ac <calculate_frame_crc>
 800062a:	4603      	mov	r3, r0
 800062c:	429c      	cmp	r4, r3
 800062e:	f040 80b1 	bne.w	8000794 <process_frame+0x17c>

	//uint16_t length = (atoi(frame.length[0]) * 100) + (atoi(frame.length[1] * 10)) + atoi(frame.length[3]);

	char length_str[4] = {frame.length[0], frame.length[1], frame.length[3], '\0'};
 8000632:	4b5a      	ldr	r3, [pc, #360]	@ (800079c <process_frame+0x184>)
 8000634:	799b      	ldrb	r3, [r3, #6]
 8000636:	733b      	strb	r3, [r7, #12]
 8000638:	4b58      	ldr	r3, [pc, #352]	@ (800079c <process_frame+0x184>)
 800063a:	79db      	ldrb	r3, [r3, #7]
 800063c:	737b      	strb	r3, [r7, #13]
 800063e:	4b57      	ldr	r3, [pc, #348]	@ (800079c <process_frame+0x184>)
 8000640:	7a5b      	ldrb	r3, [r3, #9]
 8000642:	73bb      	strb	r3, [r7, #14]
 8000644:	2300      	movs	r3, #0
 8000646:	73fb      	strb	r3, [r7, #15]
	uint16_t length = atoi(length_str);
 8000648:	f107 030c 	add.w	r3, r7, #12
 800064c:	4618      	mov	r0, r3
 800064e:	f003 fa69 	bl	8003b24 <atoi>
 8000652:	4603      	mov	r3, r0
 8000654:	82fb      	strh	r3, [r7, #22]

	if (length < 5 || length > 256) {
 8000656:	8afb      	ldrh	r3, [r7, #22]
 8000658:	2b04      	cmp	r3, #4
 800065a:	d903      	bls.n	8000664 <process_frame+0x4c>
 800065c:	8afb      	ldrh	r3, [r7, #22]
 800065e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000662:	d903      	bls.n	800066c <process_frame+0x54>
		USART_fsend("wrong length");
 8000664:	484e      	ldr	r0, [pc, #312]	@ (80007a0 <process_frame+0x188>)
 8000666:	f7ff fe59 	bl	800031c <USART_fsend>
		//err01();
		return;
 800066a:	e094      	b.n	8000796 <process_frame+0x17e>
	}

	length -= frame.masked_counter; // dla odkodowanej ramki dlugosc musi byc pomniejszona o ilosc zamaskowanych znakow
 800066c:	4b4b      	ldr	r3, [pc, #300]	@ (800079c <process_frame+0x184>)
 800066e:	f8b3 321a 	ldrh.w	r3, [r3, #538]	@ 0x21a
 8000672:	8afa      	ldrh	r2, [r7, #22]
 8000674:	1ad3      	subs	r3, r2, r3
 8000676:	82fb      	strh	r3, [r7, #22]


	if (strncmp((char *)frame.data, "READ", 4) == 0) {
 8000678:	2204      	movs	r2, #4
 800067a:	494a      	ldr	r1, [pc, #296]	@ (80007a4 <process_frame+0x18c>)
 800067c:	484a      	ldr	r0, [pc, #296]	@ (80007a8 <process_frame+0x190>)
 800067e:	f003 fcc7 	bl	8004010 <strncmp>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d128      	bne.n	80006da <process_frame+0xc2>
		if (length != 7) {
 8000688:	8afb      	ldrh	r3, [r7, #22]
 800068a:	2b07      	cmp	r3, #7
 800068c:	d003      	beq.n	8000696 <process_frame+0x7e>
			USART_fsend("wrong parameter");
 800068e:	4847      	ldr	r0, [pc, #284]	@ (80007ac <process_frame+0x194>)
 8000690:	f7ff fe44 	bl	800031c <USART_fsend>
			//err03();
			return;
 8000694:	e07f      	b.n	8000796 <process_frame+0x17e>
		}

		char parameter_str[4] = {frame.data[4], frame.data[5], frame.data[6]};
 8000696:	2300      	movs	r3, #0
 8000698:	60bb      	str	r3, [r7, #8]
 800069a:	4b40      	ldr	r3, [pc, #256]	@ (800079c <process_frame+0x184>)
 800069c:	f893 310f 	ldrb.w	r3, [r3, #271]	@ 0x10f
 80006a0:	723b      	strb	r3, [r7, #8]
 80006a2:	4b3e      	ldr	r3, [pc, #248]	@ (800079c <process_frame+0x184>)
 80006a4:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 80006a8:	727b      	strb	r3, [r7, #9]
 80006aa:	4b3c      	ldr	r3, [pc, #240]	@ (800079c <process_frame+0x184>)
 80006ac:	f893 3111 	ldrb.w	r3, [r3, #273]	@ 0x111
 80006b0:	72bb      	strb	r3, [r7, #10]
		uint16_t parameter = validate_and_atoi(parameter_str, 3);
 80006b2:	f107 0308 	add.w	r3, r7, #8
 80006b6:	2103      	movs	r1, #3
 80006b8:	4618      	mov	r0, r3
 80006ba:	f7ff ff6f 	bl	800059c <validate_and_atoi>
 80006be:	4603      	mov	r3, r0
 80006c0:	827b      	strh	r3, [r7, #18]

		if (parameter < 1 || parameter > 750) {
 80006c2:	8a7b      	ldrh	r3, [r7, #18]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d004      	beq.n	80006d2 <process_frame+0xba>
 80006c8:	8a7b      	ldrh	r3, [r7, #18]
 80006ca:	f240 22ee 	movw	r2, #750	@ 0x2ee
 80006ce:	4293      	cmp	r3, r2
 80006d0:	d961      	bls.n	8000796 <process_frame+0x17e>
			printf("wrong parameter");
 80006d2:	4836      	ldr	r0, [pc, #216]	@ (80007ac <process_frame+0x194>)
 80006d4:	f003 fc1e 	bl	8003f14 <iprintf>
			//err03();
			return;
 80006d8:	e05d      	b.n	8000796 <process_frame+0x17e>
//		else {
//			read(length);
//			return;
//		}
	}
	else if (strncmp((char *)frame.data, "COUNT_DATA", 10) == 0) {
 80006da:	220a      	movs	r2, #10
 80006dc:	4934      	ldr	r1, [pc, #208]	@ (80007b0 <process_frame+0x198>)
 80006de:	4832      	ldr	r0, [pc, #200]	@ (80007a8 <process_frame+0x190>)
 80006e0:	f003 fc96 	bl	8004010 <strncmp>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d108      	bne.n	80006fc <process_frame+0xe4>
		if (frame.length_int != 10) {
 80006ea:	4b2c      	ldr	r3, [pc, #176]	@ (800079c <process_frame+0x184>)
 80006ec:	f8b3 3218 	ldrh.w	r3, [r3, #536]	@ 0x218
 80006f0:	2b0a      	cmp	r3, #10
 80006f2:	d050      	beq.n	8000796 <process_frame+0x17e>
			USART_fsend("wrong command");
 80006f4:	482f      	ldr	r0, [pc, #188]	@ (80007b4 <process_frame+0x19c>)
 80006f6:	f7ff fe11 	bl	800031c <USART_fsend>
			//err02();
			return;
 80006fa:	e04c      	b.n	8000796 <process_frame+0x17e>
//			count_data();
//			return;
//		}
	}

	else if (strncmp((char *)frame.data, "SET_INTERVAL", 12) == 0) {
 80006fc:	220c      	movs	r2, #12
 80006fe:	492e      	ldr	r1, [pc, #184]	@ (80007b8 <process_frame+0x1a0>)
 8000700:	4829      	ldr	r0, [pc, #164]	@ (80007a8 <process_frame+0x190>)
 8000702:	f003 fc85 	bl	8004010 <strncmp>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d132      	bne.n	8000772 <process_frame+0x15a>
		if (frame.length_int != 17) {
 800070c:	4b23      	ldr	r3, [pc, #140]	@ (800079c <process_frame+0x184>)
 800070e:	f8b3 3218 	ldrh.w	r3, [r3, #536]	@ 0x218
 8000712:	2b11      	cmp	r3, #17
 8000714:	d003      	beq.n	800071e <process_frame+0x106>
			USART_fsend("wrong command");
 8000716:	4827      	ldr	r0, [pc, #156]	@ (80007b4 <process_frame+0x19c>)
 8000718:	f7ff fe00 	bl	800031c <USART_fsend>
			//err02();
			return;
 800071c:	e03b      	b.n	8000796 <process_frame+0x17e>
		}

		char parameter_str[6] = { frame.data[12], frame.data[13], frame.data[14], frame.data[15], frame.data[16], '\0' };
 800071e:	4b1f      	ldr	r3, [pc, #124]	@ (800079c <process_frame+0x184>)
 8000720:	f893 3117 	ldrb.w	r3, [r3, #279]	@ 0x117
 8000724:	703b      	strb	r3, [r7, #0]
 8000726:	4b1d      	ldr	r3, [pc, #116]	@ (800079c <process_frame+0x184>)
 8000728:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800072c:	707b      	strb	r3, [r7, #1]
 800072e:	4b1b      	ldr	r3, [pc, #108]	@ (800079c <process_frame+0x184>)
 8000730:	f893 3119 	ldrb.w	r3, [r3, #281]	@ 0x119
 8000734:	70bb      	strb	r3, [r7, #2]
 8000736:	4b19      	ldr	r3, [pc, #100]	@ (800079c <process_frame+0x184>)
 8000738:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 800073c:	70fb      	strb	r3, [r7, #3]
 800073e:	4b17      	ldr	r3, [pc, #92]	@ (800079c <process_frame+0x184>)
 8000740:	f893 311b 	ldrb.w	r3, [r3, #283]	@ 0x11b
 8000744:	713b      	strb	r3, [r7, #4]
 8000746:	2300      	movs	r3, #0
 8000748:	717b      	strb	r3, [r7, #5]
		uint16_t parameter = validate_and_atoi(parameter_str, 5);
 800074a:	463b      	mov	r3, r7
 800074c:	2105      	movs	r1, #5
 800074e:	4618      	mov	r0, r3
 8000750:	f7ff ff24 	bl	800059c <validate_and_atoi>
 8000754:	4603      	mov	r3, r0
 8000756:	82bb      	strh	r3, [r7, #20]

		if (parameter < 2000 || parameter > 20000) {
 8000758:	8abb      	ldrh	r3, [r7, #20]
 800075a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800075e:	d304      	bcc.n	800076a <process_frame+0x152>
 8000760:	8abb      	ldrh	r3, [r7, #20]
 8000762:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8000766:	4293      	cmp	r3, r2
 8000768:	d915      	bls.n	8000796 <process_frame+0x17e>
			USART_fsend("wrong parameter");
 800076a:	4810      	ldr	r0, [pc, #64]	@ (80007ac <process_frame+0x194>)
 800076c:	f7ff fdd6 	bl	800031c <USART_fsend>
			//err03();
			return;
 8000770:	e011      	b.n	8000796 <process_frame+0x17e>
//			set_interval(parameter);
//			return;
//		}
	}

	else if (strncmp((char *)frame.data, "GET_INTERVAL", 12) == 0) {
 8000772:	220c      	movs	r2, #12
 8000774:	4911      	ldr	r1, [pc, #68]	@ (80007bc <process_frame+0x1a4>)
 8000776:	480c      	ldr	r0, [pc, #48]	@ (80007a8 <process_frame+0x190>)
 8000778:	f003 fc4a 	bl	8004010 <strncmp>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d109      	bne.n	8000796 <process_frame+0x17e>
		if (frame.length_int != 12) {
 8000782:	4b06      	ldr	r3, [pc, #24]	@ (800079c <process_frame+0x184>)
 8000784:	f8b3 3218 	ldrh.w	r3, [r3, #536]	@ 0x218
 8000788:	2b0c      	cmp	r3, #12
 800078a:	d004      	beq.n	8000796 <process_frame+0x17e>
			USART_fsend("wrong command");
 800078c:	4809      	ldr	r0, [pc, #36]	@ (80007b4 <process_frame+0x19c>)
 800078e:	f7ff fdc5 	bl	800031c <USART_fsend>
			//err02();
			return;
 8000792:	e000      	b.n	8000796 <process_frame+0x17e>
	if (frame.crc != calculate_frame_crc(&frame)) return;
 8000794:	bf00      	nop
//		else {
//			get_interval();
//			return
//		}
	}
}
 8000796:	371c      	adds	r7, #28
 8000798:	46bd      	mov	sp, r7
 800079a:	bd90      	pop	{r4, r7, pc}
 800079c:	20000510 	.word	0x20000510
 80007a0:	08004eb8 	.word	0x08004eb8
 80007a4:	08004ec8 	.word	0x08004ec8
 80007a8:	2000061b 	.word	0x2000061b
 80007ac:	08004ed0 	.word	0x08004ed0
 80007b0:	08004ee0 	.word	0x08004ee0
 80007b4:	08004eec 	.word	0x08004eec
 80007b8:	08004efc 	.word	0x08004efc
 80007bc:	08004f0c 	.word	0x08004f0c

080007c0 <reset_frame>:

void reset_frame() {
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
	memset(&frame, 0, sizeof(Frame));
 80007c4:	f240 221e 	movw	r2, #542	@ 0x21e
 80007c8:	2100      	movs	r1, #0
 80007ca:	4804      	ldr	r0, [pc, #16]	@ (80007dc <reset_frame+0x1c>)
 80007cc:	f003 fc18 	bl	8004000 <memset>
	frame.state = FIND_START;
 80007d0:	4b02      	ldr	r3, [pc, #8]	@ (80007dc <reset_frame+0x1c>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	f883 221c 	strb.w	r2, [r3, #540]	@ 0x21c
}
 80007d8:	bf00      	nop
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	20000510 	.word	0x20000510

080007e0 <get_frame>:

void get_frame(uint8_t ch) {
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b084      	sub	sp, #16
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	4603      	mov	r3, r0
 80007e8:	71fb      	strb	r3, [r7, #7]
	switch (frame.state) {
 80007ea:	4ba2      	ldr	r3, [pc, #648]	@ (8000a74 <get_frame+0x294>)
 80007ec:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 80007f0:	2b08      	cmp	r3, #8
 80007f2:	f200 8234 	bhi.w	8000c5e <get_frame+0x47e>
 80007f6:	a201      	add	r2, pc, #4	@ (adr r2, 80007fc <get_frame+0x1c>)
 80007f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007fc:	08000821 	.word	0x08000821
 8000800:	08000837 	.word	0x08000837
 8000804:	080008b9 	.word	0x080008b9
 8000808:	0800093d 	.word	0x0800093d
 800080c:	080009b7 	.word	0x080009b7
 8000810:	08000b3b 	.word	0x08000b3b
 8000814:	08000c25 	.word	0x08000c25
 8000818:	08000a89 	.word	0x08000a89
 800081c:	08000c53 	.word	0x08000c53

	case FIND_START: {
		if (ch == FRAME_START) {
 8000820:	79fb      	ldrb	r3, [r7, #7]
 8000822:	2b3a      	cmp	r3, #58	@ 0x3a
 8000824:	f040 821a 	bne.w	8000c5c <get_frame+0x47c>
			reset_frame();
 8000828:	f7ff ffca 	bl	80007c0 <reset_frame>
			frame.state = FIND_SENDER;
 800082c:	4b91      	ldr	r3, [pc, #580]	@ (8000a74 <get_frame+0x294>)
 800082e:	2201      	movs	r2, #1
 8000830:	f883 221c 	strb.w	r2, [r3, #540]	@ 0x21c
		}
		return;
 8000834:	e212      	b.n	8000c5c <get_frame+0x47c>
	}

	case FIND_SENDER: {
		if (ch >= 'A' && ch <= 'Z') {
 8000836:	79fb      	ldrb	r3, [r7, #7]
 8000838:	2b40      	cmp	r3, #64	@ 0x40
 800083a:	d92c      	bls.n	8000896 <get_frame+0xb6>
 800083c:	79fb      	ldrb	r3, [r7, #7]
 800083e:	2b5a      	cmp	r3, #90	@ 0x5a
 8000840:	d829      	bhi.n	8000896 <get_frame+0xb6>
			frame.sender[frame.sender_id] = ch;
 8000842:	4b8c      	ldr	r3, [pc, #560]	@ (8000a74 <get_frame+0x294>)
 8000844:	f893 320e 	ldrb.w	r3, [r3, #526]	@ 0x20e
 8000848:	4619      	mov	r1, r3
 800084a:	4a8a      	ldr	r2, [pc, #552]	@ (8000a74 <get_frame+0x294>)
 800084c:	79fb      	ldrb	r3, [r7, #7]
 800084e:	5453      	strb	r3, [r2, r1]
			if (frame.sender_id == 1) {
 8000850:	4b88      	ldr	r3, [pc, #544]	@ (8000a74 <get_frame+0x294>)
 8000852:	f893 320e 	ldrb.w	r3, [r3, #526]	@ 0x20e
 8000856:	2b01      	cmp	r3, #1
 8000858:	d114      	bne.n	8000884 <get_frame+0xa4>
				frame.sender[2] = '\0';
 800085a:	4b86      	ldr	r3, [pc, #536]	@ (8000a74 <get_frame+0x294>)
 800085c:	2200      	movs	r2, #0
 800085e:	709a      	strb	r2, [r3, #2]
				if (strncmp((char *)frame.sender, SENDER, 2) == 0){
 8000860:	2202      	movs	r2, #2
 8000862:	4985      	ldr	r1, [pc, #532]	@ (8000a78 <get_frame+0x298>)
 8000864:	4883      	ldr	r0, [pc, #524]	@ (8000a74 <get_frame+0x294>)
 8000866:	f003 fbd3 	bl	8004010 <strncmp>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d104      	bne.n	800087a <get_frame+0x9a>
//					USART_fsend("sender ok");
					frame.state = FIND_RECEIVER;
 8000870:	4b80      	ldr	r3, [pc, #512]	@ (8000a74 <get_frame+0x294>)
 8000872:	2202      	movs	r2, #2
 8000874:	f883 221c 	strb.w	r2, [r3, #540]	@ 0x21c
					return;
 8000878:	e1f1      	b.n	8000c5e <get_frame+0x47e>
				}
				else frame.state = FRAME_ERROR;
 800087a:	4b7e      	ldr	r3, [pc, #504]	@ (8000a74 <get_frame+0x294>)
 800087c:	2208      	movs	r2, #8
 800087e:	f883 221c 	strb.w	r2, [r3, #540]	@ 0x21c
			if (frame.sender_id == 1) {
 8000882:	e018      	b.n	80008b6 <get_frame+0xd6>
			}
			else frame.sender_id++;
 8000884:	4b7b      	ldr	r3, [pc, #492]	@ (8000a74 <get_frame+0x294>)
 8000886:	f893 320e 	ldrb.w	r3, [r3, #526]	@ 0x20e
 800088a:	3301      	adds	r3, #1
 800088c:	b2da      	uxtb	r2, r3
 800088e:	4b79      	ldr	r3, [pc, #484]	@ (8000a74 <get_frame+0x294>)
 8000890:	f883 220e 	strb.w	r2, [r3, #526]	@ 0x20e
			if (frame.sender_id == 1) {
 8000894:	e00f      	b.n	80008b6 <get_frame+0xd6>
		}
		else if (ch == FRAME_START || ch == FRAME_END) frame.state = FIND_START;
 8000896:	79fb      	ldrb	r3, [r7, #7]
 8000898:	2b3a      	cmp	r3, #58	@ 0x3a
 800089a:	d002      	beq.n	80008a2 <get_frame+0xc2>
 800089c:	79fb      	ldrb	r3, [r7, #7]
 800089e:	2b3b      	cmp	r3, #59	@ 0x3b
 80008a0:	d104      	bne.n	80008ac <get_frame+0xcc>
 80008a2:	4b74      	ldr	r3, [pc, #464]	@ (8000a74 <get_frame+0x294>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	f883 221c 	strb.w	r2, [r3, #540]	@ 0x21c
 80008aa:	e004      	b.n	80008b6 <get_frame+0xd6>
		else frame.state = FRAME_ERROR;
 80008ac:	4b71      	ldr	r3, [pc, #452]	@ (8000a74 <get_frame+0x294>)
 80008ae:	2208      	movs	r2, #8
 80008b0:	f883 221c 	strb.w	r2, [r3, #540]	@ 0x21c
		break;
 80008b4:	e1d3      	b.n	8000c5e <get_frame+0x47e>
 80008b6:	e1d2      	b.n	8000c5e <get_frame+0x47e>
	}

	case FIND_RECEIVER: {
		if (ch >= 'A' && ch <= 'Z') {
 80008b8:	79fb      	ldrb	r3, [r7, #7]
 80008ba:	2b40      	cmp	r3, #64	@ 0x40
 80008bc:	d92d      	bls.n	800091a <get_frame+0x13a>
 80008be:	79fb      	ldrb	r3, [r7, #7]
 80008c0:	2b5a      	cmp	r3, #90	@ 0x5a
 80008c2:	d82a      	bhi.n	800091a <get_frame+0x13a>
			frame.receiver[frame.receiver_id] = ch;
 80008c4:	4b6b      	ldr	r3, [pc, #428]	@ (8000a74 <get_frame+0x294>)
 80008c6:	f893 320f 	ldrb.w	r3, [r3, #527]	@ 0x20f
 80008ca:	461a      	mov	r2, r3
 80008cc:	4b69      	ldr	r3, [pc, #420]	@ (8000a74 <get_frame+0x294>)
 80008ce:	4413      	add	r3, r2
 80008d0:	79fa      	ldrb	r2, [r7, #7]
 80008d2:	70da      	strb	r2, [r3, #3]
			if (frame.receiver_id == 1) {
 80008d4:	4b67      	ldr	r3, [pc, #412]	@ (8000a74 <get_frame+0x294>)
 80008d6:	f893 320f 	ldrb.w	r3, [r3, #527]	@ 0x20f
 80008da:	2b01      	cmp	r3, #1
 80008dc:	d114      	bne.n	8000908 <get_frame+0x128>
				frame.receiver[2] = '\0';
 80008de:	4b65      	ldr	r3, [pc, #404]	@ (8000a74 <get_frame+0x294>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	715a      	strb	r2, [r3, #5]
				if (strncmp((char *)frame.receiver, RECEIVER, 2) == 0) {
 80008e4:	2202      	movs	r2, #2
 80008e6:	4965      	ldr	r1, [pc, #404]	@ (8000a7c <get_frame+0x29c>)
 80008e8:	4865      	ldr	r0, [pc, #404]	@ (8000a80 <get_frame+0x2a0>)
 80008ea:	f003 fb91 	bl	8004010 <strncmp>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d104      	bne.n	80008fe <get_frame+0x11e>
//					USART_fsend("receiver ok");
					frame.state = FIND_LENGTH;
 80008f4:	4b5f      	ldr	r3, [pc, #380]	@ (8000a74 <get_frame+0x294>)
 80008f6:	2203      	movs	r2, #3
 80008f8:	f883 221c 	strb.w	r2, [r3, #540]	@ 0x21c
					return;
 80008fc:	e1af      	b.n	8000c5e <get_frame+0x47e>
				}
				else frame.state = FRAME_ERROR;
 80008fe:	4b5d      	ldr	r3, [pc, #372]	@ (8000a74 <get_frame+0x294>)
 8000900:	2208      	movs	r2, #8
 8000902:	f883 221c 	strb.w	r2, [r3, #540]	@ 0x21c
			if (frame.receiver_id == 1) {
 8000906:	e018      	b.n	800093a <get_frame+0x15a>
			}
			else frame.receiver_id++;
 8000908:	4b5a      	ldr	r3, [pc, #360]	@ (8000a74 <get_frame+0x294>)
 800090a:	f893 320f 	ldrb.w	r3, [r3, #527]	@ 0x20f
 800090e:	3301      	adds	r3, #1
 8000910:	b2da      	uxtb	r2, r3
 8000912:	4b58      	ldr	r3, [pc, #352]	@ (8000a74 <get_frame+0x294>)
 8000914:	f883 220f 	strb.w	r2, [r3, #527]	@ 0x20f
			if (frame.receiver_id == 1) {
 8000918:	e00f      	b.n	800093a <get_frame+0x15a>
		}
		else if (ch == FRAME_START || ch == FRAME_END) frame.state = FIND_START;
 800091a:	79fb      	ldrb	r3, [r7, #7]
 800091c:	2b3a      	cmp	r3, #58	@ 0x3a
 800091e:	d002      	beq.n	8000926 <get_frame+0x146>
 8000920:	79fb      	ldrb	r3, [r7, #7]
 8000922:	2b3b      	cmp	r3, #59	@ 0x3b
 8000924:	d104      	bne.n	8000930 <get_frame+0x150>
 8000926:	4b53      	ldr	r3, [pc, #332]	@ (8000a74 <get_frame+0x294>)
 8000928:	2200      	movs	r2, #0
 800092a:	f883 221c 	strb.w	r2, [r3, #540]	@ 0x21c
 800092e:	e004      	b.n	800093a <get_frame+0x15a>
		else frame.state = FRAME_ERROR;
 8000930:	4b50      	ldr	r3, [pc, #320]	@ (8000a74 <get_frame+0x294>)
 8000932:	2208      	movs	r2, #8
 8000934:	f883 221c 	strb.w	r2, [r3, #540]	@ 0x21c
		break;
 8000938:	e191      	b.n	8000c5e <get_frame+0x47e>
 800093a:	e190      	b.n	8000c5e <get_frame+0x47e>
	}

	case FIND_LENGTH: {
		if (ch >= '0' && ch <= '9') {
 800093c:	79fb      	ldrb	r3, [r7, #7]
 800093e:	2b2f      	cmp	r3, #47	@ 0x2f
 8000940:	d928      	bls.n	8000994 <get_frame+0x1b4>
 8000942:	79fb      	ldrb	r3, [r7, #7]
 8000944:	2b39      	cmp	r3, #57	@ 0x39
 8000946:	d825      	bhi.n	8000994 <get_frame+0x1b4>
			frame.length[frame.length_id] = ch;
 8000948:	4b4a      	ldr	r3, [pc, #296]	@ (8000a74 <get_frame+0x294>)
 800094a:	f893 3210 	ldrb.w	r3, [r3, #528]	@ 0x210
 800094e:	461a      	mov	r2, r3
 8000950:	4b48      	ldr	r3, [pc, #288]	@ (8000a74 <get_frame+0x294>)
 8000952:	4413      	add	r3, r2
 8000954:	79fa      	ldrb	r2, [r7, #7]
 8000956:	719a      	strb	r2, [r3, #6]
			if (frame.length_id == 2) {
 8000958:	4b46      	ldr	r3, [pc, #280]	@ (8000a74 <get_frame+0x294>)
 800095a:	f893 3210 	ldrb.w	r3, [r3, #528]	@ 0x210
 800095e:	2b02      	cmp	r3, #2
 8000960:	d10f      	bne.n	8000982 <get_frame+0x1a2>
				frame.length[3] = '\0';
 8000962:	4b44      	ldr	r3, [pc, #272]	@ (8000a74 <get_frame+0x294>)
 8000964:	2200      	movs	r2, #0
 8000966:	725a      	strb	r2, [r3, #9]
				frame.length_int = atoi((char *)frame.length);
 8000968:	4846      	ldr	r0, [pc, #280]	@ (8000a84 <get_frame+0x2a4>)
 800096a:	f003 f8db 	bl	8003b24 <atoi>
 800096e:	4603      	mov	r3, r0
 8000970:	b29a      	uxth	r2, r3
 8000972:	4b40      	ldr	r3, [pc, #256]	@ (8000a74 <get_frame+0x294>)
 8000974:	f8a3 2218 	strh.w	r2, [r3, #536]	@ 0x218
				frame.state = FIND_DATA;
 8000978:	4b3e      	ldr	r3, [pc, #248]	@ (8000a74 <get_frame+0x294>)
 800097a:	2204      	movs	r2, #4
 800097c:	f883 221c 	strb.w	r2, [r3, #540]	@ 0x21c
				return;
 8000980:	e16d      	b.n	8000c5e <get_frame+0x47e>
			}
			else frame.length_id++;
 8000982:	4b3c      	ldr	r3, [pc, #240]	@ (8000a74 <get_frame+0x294>)
 8000984:	f893 3210 	ldrb.w	r3, [r3, #528]	@ 0x210
 8000988:	3301      	adds	r3, #1
 800098a:	b2da      	uxtb	r2, r3
 800098c:	4b39      	ldr	r3, [pc, #228]	@ (8000a74 <get_frame+0x294>)
 800098e:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
			if (frame.length_id == 2) {
 8000992:	e00f      	b.n	80009b4 <get_frame+0x1d4>
		}
		else if (ch == FRAME_START || ch == FRAME_END) frame.state = FIND_START;
 8000994:	79fb      	ldrb	r3, [r7, #7]
 8000996:	2b3a      	cmp	r3, #58	@ 0x3a
 8000998:	d002      	beq.n	80009a0 <get_frame+0x1c0>
 800099a:	79fb      	ldrb	r3, [r7, #7]
 800099c:	2b3b      	cmp	r3, #59	@ 0x3b
 800099e:	d104      	bne.n	80009aa <get_frame+0x1ca>
 80009a0:	4b34      	ldr	r3, [pc, #208]	@ (8000a74 <get_frame+0x294>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	f883 221c 	strb.w	r2, [r3, #540]	@ 0x21c
 80009a8:	e004      	b.n	80009b4 <get_frame+0x1d4>
		else frame.state = FRAME_ERROR;
 80009aa:	4b32      	ldr	r3, [pc, #200]	@ (8000a74 <get_frame+0x294>)
 80009ac:	2208      	movs	r2, #8
 80009ae:	f883 221c 	strb.w	r2, [r3, #540]	@ 0x21c
		break;
 80009b2:	e154      	b.n	8000c5e <get_frame+0x47e>
 80009b4:	e153      	b.n	8000c5e <get_frame+0x47e>
	}

	case FIND_DATA: {
		frame.data_raw[frame.data_raw_id++] = ch;
 80009b6:	4b2f      	ldr	r3, [pc, #188]	@ (8000a74 <get_frame+0x294>)
 80009b8:	f8b3 3214 	ldrh.w	r3, [r3, #532]	@ 0x214
 80009bc:	1c5a      	adds	r2, r3, #1
 80009be:	b291      	uxth	r1, r2
 80009c0:	4a2c      	ldr	r2, [pc, #176]	@ (8000a74 <get_frame+0x294>)
 80009c2:	f8a2 1214 	strh.w	r1, [r2, #532]	@ 0x214
 80009c6:	461a      	mov	r2, r3
 80009c8:	4b2a      	ldr	r3, [pc, #168]	@ (8000a74 <get_frame+0x294>)
 80009ca:	4413      	add	r3, r2
 80009cc:	79fa      	ldrb	r2, [r7, #7]
 80009ce:	729a      	strb	r2, [r3, #10]

		if (frame.data_id < frame.length_int) {
 80009d0:	4b28      	ldr	r3, [pc, #160]	@ (8000a74 <get_frame+0x294>)
 80009d2:	f8b3 2212 	ldrh.w	r2, [r3, #530]	@ 0x212
 80009d6:	4b27      	ldr	r3, [pc, #156]	@ (8000a74 <get_frame+0x294>)
 80009d8:	f8b3 3218 	ldrh.w	r3, [r3, #536]	@ 0x218
 80009dc:	429a      	cmp	r2, r3
 80009de:	d233      	bcs.n	8000a48 <get_frame+0x268>
			if (ch == MASK) {
 80009e0:	79fb      	ldrb	r3, [r7, #7]
 80009e2:	2b2f      	cmp	r3, #47	@ 0x2f
 80009e4:	d113      	bne.n	8000a0e <get_frame+0x22e>
				if (frame.data_id < frame.length_int - 1) {
 80009e6:	4b23      	ldr	r3, [pc, #140]	@ (8000a74 <get_frame+0x294>)
 80009e8:	f8b3 3212 	ldrh.w	r3, [r3, #530]	@ 0x212
 80009ec:	461a      	mov	r2, r3
 80009ee:	4b21      	ldr	r3, [pc, #132]	@ (8000a74 <get_frame+0x294>)
 80009f0:	f8b3 3218 	ldrh.w	r3, [r3, #536]	@ 0x218
 80009f4:	3b01      	subs	r3, #1
 80009f6:	429a      	cmp	r2, r3
 80009f8:	da04      	bge.n	8000a04 <get_frame+0x224>
					frame.state = FIND_MASKED;
 80009fa:	4b1e      	ldr	r3, [pc, #120]	@ (8000a74 <get_frame+0x294>)
 80009fc:	2207      	movs	r2, #7
 80009fe:	f883 221c 	strb.w	r2, [r3, #540]	@ 0x21c
					return;
 8000a02:	e12c      	b.n	8000c5e <get_frame+0x47e>
				}
				else {	// jeśli znak maskujący jest ostatnim w danych, wtedy błąd
					frame.state = FRAME_ERROR;
 8000a04:	4b1b      	ldr	r3, [pc, #108]	@ (8000a74 <get_frame+0x294>)
 8000a06:	2208      	movs	r2, #8
 8000a08:	f883 221c 	strb.w	r2, [r3, #540]	@ 0x21c
 8000a0c:	e03c      	b.n	8000a88 <get_frame+0x2a8>
				}
			}
			else if (ch == FRAME_START || ch == FRAME_END) {
 8000a0e:	79fb      	ldrb	r3, [r7, #7]
 8000a10:	2b3a      	cmp	r3, #58	@ 0x3a
 8000a12:	d002      	beq.n	8000a1a <get_frame+0x23a>
 8000a14:	79fb      	ldrb	r3, [r7, #7]
 8000a16:	2b3b      	cmp	r3, #59	@ 0x3b
 8000a18:	d104      	bne.n	8000a24 <get_frame+0x244>
				frame.state = FIND_START;
 8000a1a:	4b16      	ldr	r3, [pc, #88]	@ (8000a74 <get_frame+0x294>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	f883 221c 	strb.w	r2, [r3, #540]	@ 0x21c
				return;
 8000a22:	e11c      	b.n	8000c5e <get_frame+0x47e>
			}
			else {
				frame.data[frame.data_id] = ch;
 8000a24:	4b13      	ldr	r3, [pc, #76]	@ (8000a74 <get_frame+0x294>)
 8000a26:	f8b3 3212 	ldrh.w	r3, [r3, #530]	@ 0x212
 8000a2a:	461a      	mov	r2, r3
 8000a2c:	4b11      	ldr	r3, [pc, #68]	@ (8000a74 <get_frame+0x294>)
 8000a2e:	4413      	add	r3, r2
 8000a30:	79fa      	ldrb	r2, [r7, #7]
 8000a32:	f883 210b 	strb.w	r2, [r3, #267]	@ 0x10b
				frame.data_id++;
 8000a36:	4b0f      	ldr	r3, [pc, #60]	@ (8000a74 <get_frame+0x294>)
 8000a38:	f8b3 3212 	ldrh.w	r3, [r3, #530]	@ 0x212
 8000a3c:	3301      	adds	r3, #1
 8000a3e:	b29a      	uxth	r2, r3
 8000a40:	4b0c      	ldr	r3, [pc, #48]	@ (8000a74 <get_frame+0x294>)
 8000a42:	f8a3 2212 	strh.w	r2, [r3, #530]	@ 0x212
				break;
 8000a46:	e10a      	b.n	8000c5e <get_frame+0x47e>
			}
		}
		else {
			frame.data_raw[frame.data_raw_id] = '\0';
 8000a48:	4b0a      	ldr	r3, [pc, #40]	@ (8000a74 <get_frame+0x294>)
 8000a4a:	f8b3 3214 	ldrh.w	r3, [r3, #532]	@ 0x214
 8000a4e:	461a      	mov	r2, r3
 8000a50:	4b08      	ldr	r3, [pc, #32]	@ (8000a74 <get_frame+0x294>)
 8000a52:	4413      	add	r3, r2
 8000a54:	2200      	movs	r2, #0
 8000a56:	729a      	strb	r2, [r3, #10]
			frame.data[frame.data_id] = '\0';
 8000a58:	4b06      	ldr	r3, [pc, #24]	@ (8000a74 <get_frame+0x294>)
 8000a5a:	f8b3 3212 	ldrh.w	r3, [r3, #530]	@ 0x212
 8000a5e:	461a      	mov	r2, r3
 8000a60:	4b04      	ldr	r3, [pc, #16]	@ (8000a74 <get_frame+0x294>)
 8000a62:	4413      	add	r3, r2
 8000a64:	2200      	movs	r2, #0
 8000a66:	f883 210b 	strb.w	r2, [r3, #267]	@ 0x10b
			frame.state = FIND_CRC;
 8000a6a:	4b02      	ldr	r3, [pc, #8]	@ (8000a74 <get_frame+0x294>)
 8000a6c:	2205      	movs	r2, #5
 8000a6e:	f883 221c 	strb.w	r2, [r3, #540]	@ 0x21c
			return;
 8000a72:	e0f4      	b.n	8000c5e <get_frame+0x47e>
 8000a74:	20000510 	.word	0x20000510
 8000a78:	08004f1c 	.word	0x08004f1c
 8000a7c:	08004f20 	.word	0x08004f20
 8000a80:	20000513 	.word	0x20000513
 8000a84:	20000516 	.word	0x20000516
		}
	}

	case FIND_MASKED: {
		frame.masked_counter++;
 8000a88:	4b76      	ldr	r3, [pc, #472]	@ (8000c64 <get_frame+0x484>)
 8000a8a:	f8b3 321a 	ldrh.w	r3, [r3, #538]	@ 0x21a
 8000a8e:	3301      	adds	r3, #1
 8000a90:	b29a      	uxth	r2, r3
 8000a92:	4b74      	ldr	r3, [pc, #464]	@ (8000c64 <get_frame+0x484>)
 8000a94:	f8a3 221a 	strh.w	r2, [r3, #538]	@ 0x21a
		frame.data_raw[frame.data_raw_id++] = ch;
 8000a98:	4b72      	ldr	r3, [pc, #456]	@ (8000c64 <get_frame+0x484>)
 8000a9a:	f8b3 3214 	ldrh.w	r3, [r3, #532]	@ 0x214
 8000a9e:	1c5a      	adds	r2, r3, #1
 8000aa0:	b291      	uxth	r1, r2
 8000aa2:	4a70      	ldr	r2, [pc, #448]	@ (8000c64 <get_frame+0x484>)
 8000aa4:	f8a2 1214 	strh.w	r1, [r2, #532]	@ 0x214
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	4b6e      	ldr	r3, [pc, #440]	@ (8000c64 <get_frame+0x484>)
 8000aac:	4413      	add	r3, r2
 8000aae:	79fa      	ldrb	r2, [r7, #7]
 8000ab0:	729a      	strb	r2, [r3, #10]
		switch(ch) {
 8000ab2:	79fb      	ldrb	r3, [r7, #7]
 8000ab4:	2b2f      	cmp	r3, #47	@ 0x2f
 8000ab6:	d029      	beq.n	8000b0c <get_frame+0x32c>
 8000ab8:	2b2f      	cmp	r3, #47	@ 0x2f
 8000aba:	dc39      	bgt.n	8000b30 <get_frame+0x350>
 8000abc:	2b2c      	cmp	r3, #44	@ 0x2c
 8000abe:	d013      	beq.n	8000ae8 <get_frame+0x308>
 8000ac0:	2b2e      	cmp	r3, #46	@ 0x2e
 8000ac2:	d135      	bne.n	8000b30 <get_frame+0x350>
		case MASKED_START: {
			frame.data[frame.data_id++] = ':';
 8000ac4:	4b67      	ldr	r3, [pc, #412]	@ (8000c64 <get_frame+0x484>)
 8000ac6:	f8b3 3212 	ldrh.w	r3, [r3, #530]	@ 0x212
 8000aca:	1c5a      	adds	r2, r3, #1
 8000acc:	b291      	uxth	r1, r2
 8000ace:	4a65      	ldr	r2, [pc, #404]	@ (8000c64 <get_frame+0x484>)
 8000ad0:	f8a2 1212 	strh.w	r1, [r2, #530]	@ 0x212
 8000ad4:	461a      	mov	r2, r3
 8000ad6:	4b63      	ldr	r3, [pc, #396]	@ (8000c64 <get_frame+0x484>)
 8000ad8:	4413      	add	r3, r2
 8000ada:	223a      	movs	r2, #58	@ 0x3a
 8000adc:	f883 210b 	strb.w	r2, [r3, #267]	@ 0x10b
			frame.state = FIND_DATA;
 8000ae0:	4b60      	ldr	r3, [pc, #384]	@ (8000c64 <get_frame+0x484>)
 8000ae2:	2204      	movs	r2, #4
 8000ae4:	f883 221c 	strb.w	r2, [r3, #540]	@ 0x21c
		}
		case MASKED_END: {
			frame.data[frame.data_id++] = ';';
 8000ae8:	4b5e      	ldr	r3, [pc, #376]	@ (8000c64 <get_frame+0x484>)
 8000aea:	f8b3 3212 	ldrh.w	r3, [r3, #530]	@ 0x212
 8000aee:	1c5a      	adds	r2, r3, #1
 8000af0:	b291      	uxth	r1, r2
 8000af2:	4a5c      	ldr	r2, [pc, #368]	@ (8000c64 <get_frame+0x484>)
 8000af4:	f8a2 1212 	strh.w	r1, [r2, #530]	@ 0x212
 8000af8:	461a      	mov	r2, r3
 8000afa:	4b5a      	ldr	r3, [pc, #360]	@ (8000c64 <get_frame+0x484>)
 8000afc:	4413      	add	r3, r2
 8000afe:	223b      	movs	r2, #59	@ 0x3b
 8000b00:	f883 210b 	strb.w	r2, [r3, #267]	@ 0x10b
			frame.state = FIND_DATA;
 8000b04:	4b57      	ldr	r3, [pc, #348]	@ (8000c64 <get_frame+0x484>)
 8000b06:	2204      	movs	r2, #4
 8000b08:	f883 221c 	strb.w	r2, [r3, #540]	@ 0x21c
		}
		case MASK: {
			frame.data[frame.data_id++] = '/';
 8000b0c:	4b55      	ldr	r3, [pc, #340]	@ (8000c64 <get_frame+0x484>)
 8000b0e:	f8b3 3212 	ldrh.w	r3, [r3, #530]	@ 0x212
 8000b12:	1c5a      	adds	r2, r3, #1
 8000b14:	b291      	uxth	r1, r2
 8000b16:	4a53      	ldr	r2, [pc, #332]	@ (8000c64 <get_frame+0x484>)
 8000b18:	f8a2 1212 	strh.w	r1, [r2, #530]	@ 0x212
 8000b1c:	461a      	mov	r2, r3
 8000b1e:	4b51      	ldr	r3, [pc, #324]	@ (8000c64 <get_frame+0x484>)
 8000b20:	4413      	add	r3, r2
 8000b22:	222f      	movs	r2, #47	@ 0x2f
 8000b24:	f883 210b 	strb.w	r2, [r3, #267]	@ 0x10b
			frame.state = FIND_DATA;
 8000b28:	4b4e      	ldr	r3, [pc, #312]	@ (8000c64 <get_frame+0x484>)
 8000b2a:	2204      	movs	r2, #4
 8000b2c:	f883 221c 	strb.w	r2, [r3, #540]	@ 0x21c
		}
		default: {
			frame.state = FRAME_ERROR;
 8000b30:	4b4c      	ldr	r3, [pc, #304]	@ (8000c64 <get_frame+0x484>)
 8000b32:	2208      	movs	r2, #8
 8000b34:	f883 221c 	strb.w	r2, [r3, #540]	@ 0x21c
			return;
 8000b38:	e091      	b.n	8000c5e <get_frame+0x47e>
			return;
		}
	}

	case FIND_CRC: {
		if ((ch >= '0' && ch <= '9') || (ch >= 'A' && ch <= 'F')) {
 8000b3a:	79fb      	ldrb	r3, [r7, #7]
 8000b3c:	2b2f      	cmp	r3, #47	@ 0x2f
 8000b3e:	d902      	bls.n	8000b46 <get_frame+0x366>
 8000b40:	79fb      	ldrb	r3, [r7, #7]
 8000b42:	2b39      	cmp	r3, #57	@ 0x39
 8000b44:	d905      	bls.n	8000b52 <get_frame+0x372>
 8000b46:	79fb      	ldrb	r3, [r7, #7]
 8000b48:	2b40      	cmp	r3, #64	@ 0x40
 8000b4a:	d95b      	bls.n	8000c04 <get_frame+0x424>
 8000b4c:	79fb      	ldrb	r3, [r7, #7]
 8000b4e:	2b46      	cmp	r3, #70	@ 0x46
 8000b50:	d858      	bhi.n	8000c04 <get_frame+0x424>
			uint8_t value;
			if (ch >= '0' && ch <= '9') value = ch - '0';
 8000b52:	79fb      	ldrb	r3, [r7, #7]
 8000b54:	2b2f      	cmp	r3, #47	@ 0x2f
 8000b56:	d906      	bls.n	8000b66 <get_frame+0x386>
 8000b58:	79fb      	ldrb	r3, [r7, #7]
 8000b5a:	2b39      	cmp	r3, #57	@ 0x39
 8000b5c:	d803      	bhi.n	8000b66 <get_frame+0x386>
 8000b5e:	79fb      	ldrb	r3, [r7, #7]
 8000b60:	3b30      	subs	r3, #48	@ 0x30
 8000b62:	73fb      	strb	r3, [r7, #15]
 8000b64:	e002      	b.n	8000b6c <get_frame+0x38c>
			else value = ch - 'A' + 10;
 8000b66:	79fb      	ldrb	r3, [r7, #7]
 8000b68:	3b37      	subs	r3, #55	@ 0x37
 8000b6a:	73fb      	strb	r3, [r7, #15]

			switch(frame.crc_id) {
 8000b6c:	4b3d      	ldr	r3, [pc, #244]	@ (8000c64 <get_frame+0x484>)
 8000b6e:	f893 3216 	ldrb.w	r3, [r3, #534]	@ 0x216
 8000b72:	2b03      	cmp	r3, #3
 8000b74:	d83d      	bhi.n	8000bf2 <get_frame+0x412>
 8000b76:	a201      	add	r2, pc, #4	@ (adr r2, 8000b7c <get_frame+0x39c>)
 8000b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b7c:	08000b8d 	.word	0x08000b8d
 8000b80:	08000b9d 	.word	0x08000b9d
 8000b84:	08000bb9 	.word	0x08000bb9
 8000b88:	08000bd5 	.word	0x08000bd5
			case 0: {
				frame.crc = value << 12;
 8000b8c:	7bfb      	ldrb	r3, [r7, #15]
 8000b8e:	b29b      	uxth	r3, r3
 8000b90:	031b      	lsls	r3, r3, #12
 8000b92:	b29a      	uxth	r2, r3
 8000b94:	4b33      	ldr	r3, [pc, #204]	@ (8000c64 <get_frame+0x484>)
 8000b96:	f8a3 220c 	strh.w	r2, [r3, #524]	@ 0x20c
				break;
 8000b9a:	e02a      	b.n	8000bf2 <get_frame+0x412>
			}
			case 1: {
				frame.crc |= value << 8;
 8000b9c:	4b31      	ldr	r3, [pc, #196]	@ (8000c64 <get_frame+0x484>)
 8000b9e:	f8b3 320c 	ldrh.w	r3, [r3, #524]	@ 0x20c
 8000ba2:	b21a      	sxth	r2, r3
 8000ba4:	7bfb      	ldrb	r3, [r7, #15]
 8000ba6:	021b      	lsls	r3, r3, #8
 8000ba8:	b21b      	sxth	r3, r3
 8000baa:	4313      	orrs	r3, r2
 8000bac:	b21b      	sxth	r3, r3
 8000bae:	b29a      	uxth	r2, r3
 8000bb0:	4b2c      	ldr	r3, [pc, #176]	@ (8000c64 <get_frame+0x484>)
 8000bb2:	f8a3 220c 	strh.w	r2, [r3, #524]	@ 0x20c
				break;
 8000bb6:	e01c      	b.n	8000bf2 <get_frame+0x412>
			}
			case 2: {
				frame.crc |= value << 4;
 8000bb8:	4b2a      	ldr	r3, [pc, #168]	@ (8000c64 <get_frame+0x484>)
 8000bba:	f8b3 320c 	ldrh.w	r3, [r3, #524]	@ 0x20c
 8000bbe:	b21a      	sxth	r2, r3
 8000bc0:	7bfb      	ldrb	r3, [r7, #15]
 8000bc2:	011b      	lsls	r3, r3, #4
 8000bc4:	b21b      	sxth	r3, r3
 8000bc6:	4313      	orrs	r3, r2
 8000bc8:	b21b      	sxth	r3, r3
 8000bca:	b29a      	uxth	r2, r3
 8000bcc:	4b25      	ldr	r3, [pc, #148]	@ (8000c64 <get_frame+0x484>)
 8000bce:	f8a3 220c 	strh.w	r2, [r3, #524]	@ 0x20c
				break;
 8000bd2:	e00e      	b.n	8000bf2 <get_frame+0x412>
			}
			case 3: {
				frame.crc |= value;
 8000bd4:	4b23      	ldr	r3, [pc, #140]	@ (8000c64 <get_frame+0x484>)
 8000bd6:	f8b3 220c 	ldrh.w	r2, [r3, #524]	@ 0x20c
 8000bda:	7bfb      	ldrb	r3, [r7, #15]
 8000bdc:	b29b      	uxth	r3, r3
 8000bde:	4313      	orrs	r3, r2
 8000be0:	b29a      	uxth	r2, r3
 8000be2:	4b20      	ldr	r3, [pc, #128]	@ (8000c64 <get_frame+0x484>)
 8000be4:	f8a3 220c 	strh.w	r2, [r3, #524]	@ 0x20c
				frame.state = FIND_END;
 8000be8:	4b1e      	ldr	r3, [pc, #120]	@ (8000c64 <get_frame+0x484>)
 8000bea:	2206      	movs	r2, #6
 8000bec:	f883 221c 	strb.w	r2, [r3, #540]	@ 0x21c
				return;
 8000bf0:	e035      	b.n	8000c5e <get_frame+0x47e>
			}
			}
			frame.crc_id++;
 8000bf2:	4b1c      	ldr	r3, [pc, #112]	@ (8000c64 <get_frame+0x484>)
 8000bf4:	f893 3216 	ldrb.w	r3, [r3, #534]	@ 0x216
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	b2da      	uxtb	r2, r3
 8000bfc:	4b19      	ldr	r3, [pc, #100]	@ (8000c64 <get_frame+0x484>)
 8000bfe:	f883 2216 	strb.w	r2, [r3, #534]	@ 0x216
			break;
 8000c02:	e02c      	b.n	8000c5e <get_frame+0x47e>
		}
		else if (ch == FRAME_START || ch == FRAME_END) frame.state = FIND_START;
 8000c04:	79fb      	ldrb	r3, [r7, #7]
 8000c06:	2b3a      	cmp	r3, #58	@ 0x3a
 8000c08:	d002      	beq.n	8000c10 <get_frame+0x430>
 8000c0a:	79fb      	ldrb	r3, [r7, #7]
 8000c0c:	2b3b      	cmp	r3, #59	@ 0x3b
 8000c0e:	d104      	bne.n	8000c1a <get_frame+0x43a>
 8000c10:	4b14      	ldr	r3, [pc, #80]	@ (8000c64 <get_frame+0x484>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	f883 221c 	strb.w	r2, [r3, #540]	@ 0x21c
		else frame.state = FRAME_ERROR;
		break;
 8000c18:	e021      	b.n	8000c5e <get_frame+0x47e>
		else frame.state = FRAME_ERROR;
 8000c1a:	4b12      	ldr	r3, [pc, #72]	@ (8000c64 <get_frame+0x484>)
 8000c1c:	2208      	movs	r2, #8
 8000c1e:	f883 221c 	strb.w	r2, [r3, #540]	@ 0x21c
		break;
 8000c22:	e01c      	b.n	8000c5e <get_frame+0x47e>
	}

	case FIND_END: {
		if (ch == FRAME_END) {
 8000c24:	79fb      	ldrb	r3, [r7, #7]
 8000c26:	2b3b      	cmp	r3, #59	@ 0x3b
 8000c28:	d106      	bne.n	8000c38 <get_frame+0x458>
			frame.complete = true;
 8000c2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c64 <get_frame+0x484>)
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	f883 221d 	strb.w	r2, [r3, #541]	@ 0x21d
			process_frame();
 8000c32:	f7ff fcf1 	bl	8000618 <process_frame>
			return;
 8000c36:	e012      	b.n	8000c5e <get_frame+0x47e>
		}
		else if (ch == FRAME_START) frame.state = FIND_START;
 8000c38:	79fb      	ldrb	r3, [r7, #7]
 8000c3a:	2b3a      	cmp	r3, #58	@ 0x3a
 8000c3c:	d104      	bne.n	8000c48 <get_frame+0x468>
 8000c3e:	4b09      	ldr	r3, [pc, #36]	@ (8000c64 <get_frame+0x484>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	f883 221c 	strb.w	r2, [r3, #540]	@ 0x21c
		else frame.state = FRAME_ERROR;
		break;
 8000c46:	e00a      	b.n	8000c5e <get_frame+0x47e>
		else frame.state = FRAME_ERROR;
 8000c48:	4b06      	ldr	r3, [pc, #24]	@ (8000c64 <get_frame+0x484>)
 8000c4a:	2208      	movs	r2, #8
 8000c4c:	f883 221c 	strb.w	r2, [r3, #540]	@ 0x21c
		break;
 8000c50:	e005      	b.n	8000c5e <get_frame+0x47e>
	}

	case FRAME_ERROR: {
//		USART_fsend("error during frame processing");
		frame.state = FIND_START;
 8000c52:	4b04      	ldr	r3, [pc, #16]	@ (8000c64 <get_frame+0x484>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	f883 221c 	strb.w	r2, [r3, #540]	@ 0x21c
		return;
 8000c5a:	e000      	b.n	8000c5e <get_frame+0x47e>
		return;
 8000c5c:	bf00      	nop
	}

	}
}
 8000c5e:	3710      	adds	r7, #16
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	20000510 	.word	0x20000510

08000c68 <handle_char>:

void handle_char() {
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
	//__disable_irq();
	is_handling = 1;
 8000c6e:	4b10      	ldr	r3, [pc, #64]	@ (8000cb0 <handle_char+0x48>)
 8000c70:	2201      	movs	r2, #1
 8000c72:	701a      	strb	r2, [r3, #0]
	//__enable_irq();

	int16_t ch;
	if ((ch = USART_getchar()) >= 0 && ch < 128) {
 8000c74:	f7ff fc60 	bl	8000538 <USART_getchar>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	80fb      	strh	r3, [r7, #6]
 8000c7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	db0e      	blt.n	8000ca2 <handle_char+0x3a>
 8000c84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c88:	2b7f      	cmp	r3, #127	@ 0x7f
 8000c8a:	dc0a      	bgt.n	8000ca2 <handle_char+0x3a>
		USART_fsend("  |%c|  ", ch);
 8000c8c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c90:	4619      	mov	r1, r3
 8000c92:	4808      	ldr	r0, [pc, #32]	@ (8000cb4 <handle_char+0x4c>)
 8000c94:	f7ff fb42 	bl	800031c <USART_fsend>
		get_frame((uint8_t)ch);
 8000c98:	88fb      	ldrh	r3, [r7, #6]
 8000c9a:	b2db      	uxtb	r3, r3
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f7ff fd9f 	bl	80007e0 <get_frame>
	}

	//__disable_irq();
	is_handling = 0;
 8000ca2:	4b03      	ldr	r3, [pc, #12]	@ (8000cb0 <handle_char+0x48>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	701a      	strb	r2, [r3, #0]
	//__enable_irq();
}
 8000ca8:	bf00      	nop
 8000caa:	3708      	adds	r7, #8
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	2000050c 	.word	0x2000050c
 8000cb4:	08004f24 	.word	0x08004f24

08000cb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cbc:	f000 fb12 	bl	80012e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cc0:	f000 f82c 	bl	8000d1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cc4:	f7ff fa4a 	bl	800015c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000cc8:	f000 fa76 	bl	80011b8 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000ccc:	f000 f994 	bl	8000ff8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &USART_BUF_RX[USART_RX_EMPTY], 1);
 8000cd0:	4b0d      	ldr	r3, [pc, #52]	@ (8000d08 <main+0x50>)
 8000cd2:	881b      	ldrh	r3, [r3, #0]
 8000cd4:	b29b      	uxth	r3, r3
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	4b0c      	ldr	r3, [pc, #48]	@ (8000d0c <main+0x54>)
 8000cda:	4413      	add	r3, r2
 8000cdc:	2201      	movs	r2, #1
 8000cde:	4619      	mov	r1, r3
 8000ce0:	480b      	ldr	r0, [pc, #44]	@ (8000d10 <main+0x58>)
 8000ce2:	f002 f9f2 	bl	80030ca <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (USART_RX_EMPTY != USART_RX_BUSY && !is_handling) {
 8000ce6:	4b08      	ldr	r3, [pc, #32]	@ (8000d08 <main+0x50>)
 8000ce8:	881b      	ldrh	r3, [r3, #0]
 8000cea:	b29a      	uxth	r2, r3
 8000cec:	4b09      	ldr	r3, [pc, #36]	@ (8000d14 <main+0x5c>)
 8000cee:	881b      	ldrh	r3, [r3, #0]
 8000cf0:	b29b      	uxth	r3, r3
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d0f7      	beq.n	8000ce6 <main+0x2e>
 8000cf6:	4b08      	ldr	r3, [pc, #32]	@ (8000d18 <main+0x60>)
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d1f2      	bne.n	8000ce6 <main+0x2e>
		  handle_char();
 8000d00:	f7ff ffb2 	bl	8000c68 <handle_char>
	  if (USART_RX_EMPTY != USART_RX_BUSY && !is_handling) {
 8000d04:	e7ef      	b.n	8000ce6 <main+0x2e>
 8000d06:	bf00      	nop
 8000d08:	20000104 	.word	0x20000104
 8000d0c:	20000084 	.word	0x20000084
 8000d10:	2000077c 	.word	0x2000077c
 8000d14:	20000106 	.word	0x20000106
 8000d18:	2000050c 	.word	0x2000050c

08000d1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b090      	sub	sp, #64	@ 0x40
 8000d20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d22:	f107 0318 	add.w	r3, r7, #24
 8000d26:	2228      	movs	r2, #40	@ 0x28
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f003 f968 	bl	8004000 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d30:	1d3b      	adds	r3, r7, #4
 8000d32:	2200      	movs	r2, #0
 8000d34:	601a      	str	r2, [r3, #0]
 8000d36:	605a      	str	r2, [r3, #4]
 8000d38:	609a      	str	r2, [r3, #8]
 8000d3a:	60da      	str	r2, [r3, #12]
 8000d3c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d3e:	2302      	movs	r3, #2
 8000d40:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d42:	2301      	movs	r3, #1
 8000d44:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d46:	2310      	movs	r3, #16
 8000d48:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000d52:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000d56:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d58:	f107 0318 	add.w	r3, r7, #24
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f000 fea1 	bl	8001aa4 <HAL_RCC_OscConfig>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000d68:	f000 f81a 	bl	8000da0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d6c:	230f      	movs	r3, #15
 8000d6e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d70:	2302      	movs	r3, #2
 8000d72:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d74:	2300      	movs	r3, #0
 8000d76:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d78:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d7c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d82:	1d3b      	adds	r3, r7, #4
 8000d84:	2102      	movs	r1, #2
 8000d86:	4618      	mov	r0, r3
 8000d88:	f001 f90e 	bl	8001fa8 <HAL_RCC_ClockConfig>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000d92:	f000 f805 	bl	8000da0 <Error_Handler>
  }
}
 8000d96:	bf00      	nop
 8000d98:	3740      	adds	r7, #64	@ 0x40
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
	...

08000da0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	USART_fsend("problem");
 8000da4:	4803      	ldr	r0, [pc, #12]	@ (8000db4 <Error_Handler+0x14>)
 8000da6:	f7ff fab9 	bl	800031c <USART_fsend>
  __ASM volatile ("cpsid i" : : : "memory");
 8000daa:	b672      	cpsid	i
}
 8000dac:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dae:	bf00      	nop
 8000db0:	e7fd      	b.n	8000dae <Error_Handler+0xe>
 8000db2:	bf00      	nop
 8000db4:	08004f30 	.word	0x08004f30

08000db8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b085      	sub	sp, #20
 8000dbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000dbe:	4b15      	ldr	r3, [pc, #84]	@ (8000e14 <HAL_MspInit+0x5c>)
 8000dc0:	699b      	ldr	r3, [r3, #24]
 8000dc2:	4a14      	ldr	r2, [pc, #80]	@ (8000e14 <HAL_MspInit+0x5c>)
 8000dc4:	f043 0301 	orr.w	r3, r3, #1
 8000dc8:	6193      	str	r3, [r2, #24]
 8000dca:	4b12      	ldr	r3, [pc, #72]	@ (8000e14 <HAL_MspInit+0x5c>)
 8000dcc:	699b      	ldr	r3, [r3, #24]
 8000dce:	f003 0301 	and.w	r3, r3, #1
 8000dd2:	60bb      	str	r3, [r7, #8]
 8000dd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dd6:	4b0f      	ldr	r3, [pc, #60]	@ (8000e14 <HAL_MspInit+0x5c>)
 8000dd8:	69db      	ldr	r3, [r3, #28]
 8000dda:	4a0e      	ldr	r2, [pc, #56]	@ (8000e14 <HAL_MspInit+0x5c>)
 8000ddc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000de0:	61d3      	str	r3, [r2, #28]
 8000de2:	4b0c      	ldr	r3, [pc, #48]	@ (8000e14 <HAL_MspInit+0x5c>)
 8000de4:	69db      	ldr	r3, [r3, #28]
 8000de6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dea:	607b      	str	r3, [r7, #4]
 8000dec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000dee:	4b0a      	ldr	r3, [pc, #40]	@ (8000e18 <HAL_MspInit+0x60>)
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	60fb      	str	r3, [r7, #12]
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000dfa:	60fb      	str	r3, [r7, #12]
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000e02:	60fb      	str	r3, [r7, #12]
 8000e04:	4a04      	ldr	r2, [pc, #16]	@ (8000e18 <HAL_MspInit+0x60>)
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e0a:	bf00      	nop
 8000e0c:	3714      	adds	r7, #20
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bc80      	pop	{r7}
 8000e12:	4770      	bx	lr
 8000e14:	40021000 	.word	0x40021000
 8000e18:	40010000 	.word	0x40010000

08000e1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e20:	bf00      	nop
 8000e22:	e7fd      	b.n	8000e20 <NMI_Handler+0x4>

08000e24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e28:	bf00      	nop
 8000e2a:	e7fd      	b.n	8000e28 <HardFault_Handler+0x4>

08000e2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e30:	bf00      	nop
 8000e32:	e7fd      	b.n	8000e30 <MemManage_Handler+0x4>

08000e34 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e38:	bf00      	nop
 8000e3a:	e7fd      	b.n	8000e38 <BusFault_Handler+0x4>

08000e3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e40:	bf00      	nop
 8000e42:	e7fd      	b.n	8000e40 <UsageFault_Handler+0x4>

08000e44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e48:	bf00      	nop
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bc80      	pop	{r7}
 8000e4e:	4770      	bx	lr

08000e50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e54:	bf00      	nop
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bc80      	pop	{r7}
 8000e5a:	4770      	bx	lr

08000e5c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e60:	bf00      	nop
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bc80      	pop	{r7}
 8000e66:	4770      	bx	lr

08000e68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e6c:	f000 fa80 	bl	8001370 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e70:	bf00      	nop
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e78:	4802      	ldr	r0, [pc, #8]	@ (8000e84 <TIM2_IRQHandler+0x10>)
 8000e7a:	f001 faca 	bl	8002412 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000e7e:	bf00      	nop
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	20000734 	.word	0x20000734

08000e88 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e8c:	4802      	ldr	r0, [pc, #8]	@ (8000e98 <USART2_IRQHandler+0x10>)
 8000e8e:	f002 f941 	bl	8003114 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e92:	bf00      	nop
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	2000077c 	.word	0x2000077c

08000e9c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000ea0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000ea4:	f000 fddc 	bl	8001a60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ea8:	bf00      	nop
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b086      	sub	sp, #24
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	60f8      	str	r0, [r7, #12]
 8000eb4:	60b9      	str	r1, [r7, #8]
 8000eb6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eb8:	2300      	movs	r3, #0
 8000eba:	617b      	str	r3, [r7, #20]
 8000ebc:	e00a      	b.n	8000ed4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ebe:	f3af 8000 	nop.w
 8000ec2:	4601      	mov	r1, r0
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	1c5a      	adds	r2, r3, #1
 8000ec8:	60ba      	str	r2, [r7, #8]
 8000eca:	b2ca      	uxtb	r2, r1
 8000ecc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	617b      	str	r3, [r7, #20]
 8000ed4:	697a      	ldr	r2, [r7, #20]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	dbf0      	blt.n	8000ebe <_read+0x12>
  }

  return len;
 8000edc:	687b      	ldr	r3, [r7, #4]
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3718      	adds	r7, #24
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}

08000ee6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	b086      	sub	sp, #24
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	60f8      	str	r0, [r7, #12]
 8000eee:	60b9      	str	r1, [r7, #8]
 8000ef0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	617b      	str	r3, [r7, #20]
 8000ef6:	e009      	b.n	8000f0c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	1c5a      	adds	r2, r3, #1
 8000efc:	60ba      	str	r2, [r7, #8]
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	4618      	mov	r0, r3
 8000f02:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	3301      	adds	r3, #1
 8000f0a:	617b      	str	r3, [r7, #20]
 8000f0c:	697a      	ldr	r2, [r7, #20]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	429a      	cmp	r2, r3
 8000f12:	dbf1      	blt.n	8000ef8 <_write+0x12>
  }
  return len;
 8000f14:	687b      	ldr	r3, [r7, #4]
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3718      	adds	r7, #24
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <_close>:

int _close(int file)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	b083      	sub	sp, #12
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f26:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	370c      	adds	r7, #12
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bc80      	pop	{r7}
 8000f32:	4770      	bx	lr

08000f34 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f44:	605a      	str	r2, [r3, #4]
  return 0;
 8000f46:	2300      	movs	r3, #0
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bc80      	pop	{r7}
 8000f50:	4770      	bx	lr

08000f52 <_isatty>:

int _isatty(int file)
{
 8000f52:	b480      	push	{r7}
 8000f54:	b083      	sub	sp, #12
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f5a:	2301      	movs	r3, #1
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	370c      	adds	r7, #12
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bc80      	pop	{r7}
 8000f64:	4770      	bx	lr

08000f66 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f66:	b480      	push	{r7}
 8000f68:	b085      	sub	sp, #20
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	60f8      	str	r0, [r7, #12]
 8000f6e:	60b9      	str	r1, [r7, #8]
 8000f70:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f72:	2300      	movs	r3, #0
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	3714      	adds	r7, #20
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bc80      	pop	{r7}
 8000f7c:	4770      	bx	lr
	...

08000f80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b086      	sub	sp, #24
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f88:	4a14      	ldr	r2, [pc, #80]	@ (8000fdc <_sbrk+0x5c>)
 8000f8a:	4b15      	ldr	r3, [pc, #84]	@ (8000fe0 <_sbrk+0x60>)
 8000f8c:	1ad3      	subs	r3, r2, r3
 8000f8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f94:	4b13      	ldr	r3, [pc, #76]	@ (8000fe4 <_sbrk+0x64>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d102      	bne.n	8000fa2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f9c:	4b11      	ldr	r3, [pc, #68]	@ (8000fe4 <_sbrk+0x64>)
 8000f9e:	4a12      	ldr	r2, [pc, #72]	@ (8000fe8 <_sbrk+0x68>)
 8000fa0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fa2:	4b10      	ldr	r3, [pc, #64]	@ (8000fe4 <_sbrk+0x64>)
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4413      	add	r3, r2
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	429a      	cmp	r2, r3
 8000fae:	d207      	bcs.n	8000fc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fb0:	f003 f896 	bl	80040e0 <__errno>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	220c      	movs	r2, #12
 8000fb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fba:	f04f 33ff 	mov.w	r3, #4294967295
 8000fbe:	e009      	b.n	8000fd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fc0:	4b08      	ldr	r3, [pc, #32]	@ (8000fe4 <_sbrk+0x64>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fc6:	4b07      	ldr	r3, [pc, #28]	@ (8000fe4 <_sbrk+0x64>)
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4413      	add	r3, r2
 8000fce:	4a05      	ldr	r2, [pc, #20]	@ (8000fe4 <_sbrk+0x64>)
 8000fd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fd2:	68fb      	ldr	r3, [r7, #12]
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	3718      	adds	r7, #24
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	20005000 	.word	0x20005000
 8000fe0:	00000400 	.word	0x00000400
 8000fe4:	20000730 	.word	0x20000730
 8000fe8:	20000918 	.word	0x20000918

08000fec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ff0:	bf00      	nop
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bc80      	pop	{r7}
 8000ff6:	4770      	bx	lr

08000ff8 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b090      	sub	sp, #64	@ 0x40
 8000ffc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ffe:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001002:	2200      	movs	r2, #0
 8001004:	601a      	str	r2, [r3, #0]
 8001006:	605a      	str	r2, [r3, #4]
 8001008:	609a      	str	r2, [r3, #8]
 800100a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800100c:	f107 031c 	add.w	r3, r7, #28
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	605a      	str	r2, [r3, #4]
 8001016:	609a      	str	r2, [r3, #8]
 8001018:	60da      	str	r2, [r3, #12]
 800101a:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800101c:	f107 030c 	add.w	r3, r7, #12
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	605a      	str	r2, [r3, #4]
 8001026:	609a      	str	r2, [r3, #8]
 8001028:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800102a:	1d3b      	adds	r3, r7, #4
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001032:	4b3e      	ldr	r3, [pc, #248]	@ (800112c <MX_TIM2_Init+0x134>)
 8001034:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001038:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31;
 800103a:	4b3c      	ldr	r3, [pc, #240]	@ (800112c <MX_TIM2_Init+0x134>)
 800103c:	221f      	movs	r2, #31
 800103e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001040:	4b3a      	ldr	r3, [pc, #232]	@ (800112c <MX_TIM2_Init+0x134>)
 8001042:	2200      	movs	r2, #0
 8001044:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001046:	4b39      	ldr	r3, [pc, #228]	@ (800112c <MX_TIM2_Init+0x134>)
 8001048:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800104c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800104e:	4b37      	ldr	r3, [pc, #220]	@ (800112c <MX_TIM2_Init+0x134>)
 8001050:	2200      	movs	r2, #0
 8001052:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001054:	4b35      	ldr	r3, [pc, #212]	@ (800112c <MX_TIM2_Init+0x134>)
 8001056:	2200      	movs	r2, #0
 8001058:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800105a:	4834      	ldr	r0, [pc, #208]	@ (800112c <MX_TIM2_Init+0x134>)
 800105c:	f001 f932 	bl	80022c4 <HAL_TIM_Base_Init>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001066:	f7ff fe9b 	bl	8000da0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800106a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800106e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001070:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001074:	4619      	mov	r1, r3
 8001076:	482d      	ldr	r0, [pc, #180]	@ (800112c <MX_TIM2_Init+0x134>)
 8001078:	f001 fb57 	bl	800272a <HAL_TIM_ConfigClockSource>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001082:	f7ff fe8d 	bl	8000da0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001086:	4829      	ldr	r0, [pc, #164]	@ (800112c <MX_TIM2_Init+0x134>)
 8001088:	f001 f96b 	bl	8002362 <HAL_TIM_IC_Init>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001092:	f7ff fe85 	bl	8000da0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001096:	2304      	movs	r3, #4
 8001098:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 800109a:	2350      	movs	r3, #80	@ 0x50
 800109c:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800109e:	2300      	movs	r3, #0
 80010a0:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 80010a2:	2300      	movs	r3, #0
 80010a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 80010a6:	2300      	movs	r3, #0
 80010a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80010aa:	f107 031c 	add.w	r3, r7, #28
 80010ae:	4619      	mov	r1, r3
 80010b0:	481e      	ldr	r0, [pc, #120]	@ (800112c <MX_TIM2_Init+0x134>)
 80010b2:	f001 fc01 	bl	80028b8 <HAL_TIM_SlaveConfigSynchro>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MX_TIM2_Init+0xc8>
  {
    Error_Handler();
 80010bc:	f7ff fe70 	bl	8000da0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80010c0:	2300      	movs	r3, #0
 80010c2:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80010c4:	2301      	movs	r3, #1
 80010c6:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80010c8:	2300      	movs	r3, #0
 80010ca:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 80010cc:	2300      	movs	r3, #0
 80010ce:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80010d0:	f107 030c 	add.w	r3, r7, #12
 80010d4:	2200      	movs	r2, #0
 80010d6:	4619      	mov	r1, r3
 80010d8:	4814      	ldr	r0, [pc, #80]	@ (800112c <MX_TIM2_Init+0x134>)
 80010da:	f001 fa8a 	bl	80025f2 <HAL_TIM_IC_ConfigChannel>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 80010e4:	f7ff fe5c 	bl	8000da0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80010e8:	2302      	movs	r3, #2
 80010ea:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80010ec:	2302      	movs	r3, #2
 80010ee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80010f0:	f107 030c 	add.w	r3, r7, #12
 80010f4:	2204      	movs	r2, #4
 80010f6:	4619      	mov	r1, r3
 80010f8:	480c      	ldr	r0, [pc, #48]	@ (800112c <MX_TIM2_Init+0x134>)
 80010fa:	f001 fa7a 	bl	80025f2 <HAL_TIM_IC_ConfigChannel>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_TIM2_Init+0x110>
  {
    Error_Handler();
 8001104:	f7ff fe4c 	bl	8000da0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001108:	2300      	movs	r3, #0
 800110a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800110c:	2300      	movs	r3, #0
 800110e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001110:	1d3b      	adds	r3, r7, #4
 8001112:	4619      	mov	r1, r3
 8001114:	4805      	ldr	r0, [pc, #20]	@ (800112c <MX_TIM2_Init+0x134>)
 8001116:	f001 fee3 	bl	8002ee0 <HAL_TIMEx_MasterConfigSynchronization>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_TIM2_Init+0x12c>
  {
    Error_Handler();
 8001120:	f7ff fe3e 	bl	8000da0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001124:	bf00      	nop
 8001126:	3740      	adds	r7, #64	@ 0x40
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	20000734 	.word	0x20000734

08001130 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b088      	sub	sp, #32
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001138:	f107 0310 	add.w	r3, r7, #16
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	605a      	str	r2, [r3, #4]
 8001142:	609a      	str	r2, [r3, #8]
 8001144:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM2)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800114e:	d12b      	bne.n	80011a8 <HAL_TIM_Base_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001150:	4b17      	ldr	r3, [pc, #92]	@ (80011b0 <HAL_TIM_Base_MspInit+0x80>)
 8001152:	69db      	ldr	r3, [r3, #28]
 8001154:	4a16      	ldr	r2, [pc, #88]	@ (80011b0 <HAL_TIM_Base_MspInit+0x80>)
 8001156:	f043 0301 	orr.w	r3, r3, #1
 800115a:	61d3      	str	r3, [r2, #28]
 800115c:	4b14      	ldr	r3, [pc, #80]	@ (80011b0 <HAL_TIM_Base_MspInit+0x80>)
 800115e:	69db      	ldr	r3, [r3, #28]
 8001160:	f003 0301 	and.w	r3, r3, #1
 8001164:	60fb      	str	r3, [r7, #12]
 8001166:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001168:	4b11      	ldr	r3, [pc, #68]	@ (80011b0 <HAL_TIM_Base_MspInit+0x80>)
 800116a:	699b      	ldr	r3, [r3, #24]
 800116c:	4a10      	ldr	r2, [pc, #64]	@ (80011b0 <HAL_TIM_Base_MspInit+0x80>)
 800116e:	f043 0304 	orr.w	r3, r3, #4
 8001172:	6193      	str	r3, [r2, #24]
 8001174:	4b0e      	ldr	r3, [pc, #56]	@ (80011b0 <HAL_TIM_Base_MspInit+0x80>)
 8001176:	699b      	ldr	r3, [r3, #24]
 8001178:	f003 0304 	and.w	r3, r3, #4
 800117c:	60bb      	str	r3, [r7, #8]
 800117e:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001180:	2301      	movs	r3, #1
 8001182:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001184:	2300      	movs	r3, #0
 8001186:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001188:	2300      	movs	r3, #0
 800118a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800118c:	f107 0310 	add.w	r3, r7, #16
 8001190:	4619      	mov	r1, r3
 8001192:	4808      	ldr	r0, [pc, #32]	@ (80011b4 <HAL_TIM_Base_MspInit+0x84>)
 8001194:	f000 fac8 	bl	8001728 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001198:	2200      	movs	r2, #0
 800119a:	2100      	movs	r1, #0
 800119c:	201c      	movs	r0, #28
 800119e:	f000 f9da 	bl	8001556 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80011a2:	201c      	movs	r0, #28
 80011a4:	f000 f9f3 	bl	800158e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80011a8:	bf00      	nop
 80011aa:	3720      	adds	r7, #32
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	40021000 	.word	0x40021000
 80011b4:	40010800 	.word	0x40010800

080011b8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011bc:	4b11      	ldr	r3, [pc, #68]	@ (8001204 <MX_USART2_UART_Init+0x4c>)
 80011be:	4a12      	ldr	r2, [pc, #72]	@ (8001208 <MX_USART2_UART_Init+0x50>)
 80011c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011c2:	4b10      	ldr	r3, [pc, #64]	@ (8001204 <MX_USART2_UART_Init+0x4c>)
 80011c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001204 <MX_USART2_UART_Init+0x4c>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001204 <MX_USART2_UART_Init+0x4c>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001204 <MX_USART2_UART_Init+0x4c>)
 80011d8:	2200      	movs	r2, #0
 80011da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011dc:	4b09      	ldr	r3, [pc, #36]	@ (8001204 <MX_USART2_UART_Init+0x4c>)
 80011de:	220c      	movs	r2, #12
 80011e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011e2:	4b08      	ldr	r3, [pc, #32]	@ (8001204 <MX_USART2_UART_Init+0x4c>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011e8:	4b06      	ldr	r3, [pc, #24]	@ (8001204 <MX_USART2_UART_Init+0x4c>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011ee:	4805      	ldr	r0, [pc, #20]	@ (8001204 <MX_USART2_UART_Init+0x4c>)
 80011f0:	f001 fee6 	bl	8002fc0 <HAL_UART_Init>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011fa:	f7ff fdd1 	bl	8000da0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011fe:	bf00      	nop
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	2000077c 	.word	0x2000077c
 8001208:	40004400 	.word	0x40004400

0800120c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b088      	sub	sp, #32
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001214:	f107 0310 	add.w	r3, r7, #16
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	609a      	str	r2, [r3, #8]
 8001220:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a19      	ldr	r2, [pc, #100]	@ (800128c <HAL_UART_MspInit+0x80>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d12b      	bne.n	8001284 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800122c:	4b18      	ldr	r3, [pc, #96]	@ (8001290 <HAL_UART_MspInit+0x84>)
 800122e:	69db      	ldr	r3, [r3, #28]
 8001230:	4a17      	ldr	r2, [pc, #92]	@ (8001290 <HAL_UART_MspInit+0x84>)
 8001232:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001236:	61d3      	str	r3, [r2, #28]
 8001238:	4b15      	ldr	r3, [pc, #84]	@ (8001290 <HAL_UART_MspInit+0x84>)
 800123a:	69db      	ldr	r3, [r3, #28]
 800123c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001240:	60fb      	str	r3, [r7, #12]
 8001242:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001244:	4b12      	ldr	r3, [pc, #72]	@ (8001290 <HAL_UART_MspInit+0x84>)
 8001246:	699b      	ldr	r3, [r3, #24]
 8001248:	4a11      	ldr	r2, [pc, #68]	@ (8001290 <HAL_UART_MspInit+0x84>)
 800124a:	f043 0304 	orr.w	r3, r3, #4
 800124e:	6193      	str	r3, [r2, #24]
 8001250:	4b0f      	ldr	r3, [pc, #60]	@ (8001290 <HAL_UART_MspInit+0x84>)
 8001252:	699b      	ldr	r3, [r3, #24]
 8001254:	f003 0304 	and.w	r3, r3, #4
 8001258:	60bb      	str	r3, [r7, #8]
 800125a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800125c:	230c      	movs	r3, #12
 800125e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001260:	2302      	movs	r3, #2
 8001262:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001264:	2302      	movs	r3, #2
 8001266:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001268:	f107 0310 	add.w	r3, r7, #16
 800126c:	4619      	mov	r1, r3
 800126e:	4809      	ldr	r0, [pc, #36]	@ (8001294 <HAL_UART_MspInit+0x88>)
 8001270:	f000 fa5a 	bl	8001728 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001274:	2200      	movs	r2, #0
 8001276:	2100      	movs	r1, #0
 8001278:	2026      	movs	r0, #38	@ 0x26
 800127a:	f000 f96c 	bl	8001556 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800127e:	2026      	movs	r0, #38	@ 0x26
 8001280:	f000 f985 	bl	800158e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001284:	bf00      	nop
 8001286:	3720      	adds	r7, #32
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	40004400 	.word	0x40004400
 8001290:	40021000 	.word	0x40021000
 8001294:	40010800 	.word	0x40010800

08001298 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001298:	f7ff fea8 	bl	8000fec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800129c:	480b      	ldr	r0, [pc, #44]	@ (80012cc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800129e:	490c      	ldr	r1, [pc, #48]	@ (80012d0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80012a0:	4a0c      	ldr	r2, [pc, #48]	@ (80012d4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80012a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012a4:	e002      	b.n	80012ac <LoopCopyDataInit>

080012a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012aa:	3304      	adds	r3, #4

080012ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012b0:	d3f9      	bcc.n	80012a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012b2:	4a09      	ldr	r2, [pc, #36]	@ (80012d8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80012b4:	4c09      	ldr	r4, [pc, #36]	@ (80012dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012b8:	e001      	b.n	80012be <LoopFillZerobss>

080012ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012bc:	3204      	adds	r2, #4

080012be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012c0:	d3fb      	bcc.n	80012ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012c2:	f002 ff13 	bl	80040ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012c6:	f7ff fcf7 	bl	8000cb8 <main>
  bx lr
 80012ca:	4770      	bx	lr
  ldr r0, =_sdata
 80012cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012d0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80012d4:	080050a8 	.word	0x080050a8
  ldr r2, =_sbss
 80012d8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80012dc:	20000914 	.word	0x20000914

080012e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012e0:	e7fe      	b.n	80012e0 <ADC1_2_IRQHandler>
	...

080012e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012e8:	4b08      	ldr	r3, [pc, #32]	@ (800130c <HAL_Init+0x28>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a07      	ldr	r2, [pc, #28]	@ (800130c <HAL_Init+0x28>)
 80012ee:	f043 0310 	orr.w	r3, r3, #16
 80012f2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012f4:	2003      	movs	r0, #3
 80012f6:	f000 f923 	bl	8001540 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012fa:	2000      	movs	r0, #0
 80012fc:	f000 f808 	bl	8001310 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001300:	f7ff fd5a 	bl	8000db8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001304:	2300      	movs	r3, #0
}
 8001306:	4618      	mov	r0, r3
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	40022000 	.word	0x40022000

08001310 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001318:	4b12      	ldr	r3, [pc, #72]	@ (8001364 <HAL_InitTick+0x54>)
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	4b12      	ldr	r3, [pc, #72]	@ (8001368 <HAL_InitTick+0x58>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	4619      	mov	r1, r3
 8001322:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001326:	fbb3 f3f1 	udiv	r3, r3, r1
 800132a:	fbb2 f3f3 	udiv	r3, r2, r3
 800132e:	4618      	mov	r0, r3
 8001330:	f000 f93b 	bl	80015aa <HAL_SYSTICK_Config>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e00e      	b.n	800135c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2b0f      	cmp	r3, #15
 8001342:	d80a      	bhi.n	800135a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001344:	2200      	movs	r2, #0
 8001346:	6879      	ldr	r1, [r7, #4]
 8001348:	f04f 30ff 	mov.w	r0, #4294967295
 800134c:	f000 f903 	bl	8001556 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001350:	4a06      	ldr	r2, [pc, #24]	@ (800136c <HAL_InitTick+0x5c>)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001356:	2300      	movs	r3, #0
 8001358:	e000      	b.n	800135c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
}
 800135c:	4618      	mov	r0, r3
 800135e:	3708      	adds	r7, #8
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	20000000 	.word	0x20000000
 8001368:	20000008 	.word	0x20000008
 800136c:	20000004 	.word	0x20000004

08001370 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001374:	4b05      	ldr	r3, [pc, #20]	@ (800138c <HAL_IncTick+0x1c>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	461a      	mov	r2, r3
 800137a:	4b05      	ldr	r3, [pc, #20]	@ (8001390 <HAL_IncTick+0x20>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4413      	add	r3, r2
 8001380:	4a03      	ldr	r2, [pc, #12]	@ (8001390 <HAL_IncTick+0x20>)
 8001382:	6013      	str	r3, [r2, #0]
}
 8001384:	bf00      	nop
 8001386:	46bd      	mov	sp, r7
 8001388:	bc80      	pop	{r7}
 800138a:	4770      	bx	lr
 800138c:	20000008 	.word	0x20000008
 8001390:	200007c4 	.word	0x200007c4

08001394 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  return uwTick;
 8001398:	4b02      	ldr	r3, [pc, #8]	@ (80013a4 <HAL_GetTick+0x10>)
 800139a:	681b      	ldr	r3, [r3, #0]
}
 800139c:	4618      	mov	r0, r3
 800139e:	46bd      	mov	sp, r7
 80013a0:	bc80      	pop	{r7}
 80013a2:	4770      	bx	lr
 80013a4:	200007c4 	.word	0x200007c4

080013a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b085      	sub	sp, #20
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	f003 0307 	and.w	r3, r3, #7
 80013b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013b8:	4b0c      	ldr	r3, [pc, #48]	@ (80013ec <__NVIC_SetPriorityGrouping+0x44>)
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013be:	68ba      	ldr	r2, [r7, #8]
 80013c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80013c4:	4013      	ands	r3, r2
 80013c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80013d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013da:	4a04      	ldr	r2, [pc, #16]	@ (80013ec <__NVIC_SetPriorityGrouping+0x44>)
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	60d3      	str	r3, [r2, #12]
}
 80013e0:	bf00      	nop
 80013e2:	3714      	adds	r7, #20
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bc80      	pop	{r7}
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	e000ed00 	.word	0xe000ed00

080013f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013f4:	4b04      	ldr	r3, [pc, #16]	@ (8001408 <__NVIC_GetPriorityGrouping+0x18>)
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	0a1b      	lsrs	r3, r3, #8
 80013fa:	f003 0307 	and.w	r3, r3, #7
}
 80013fe:	4618      	mov	r0, r3
 8001400:	46bd      	mov	sp, r7
 8001402:	bc80      	pop	{r7}
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	e000ed00 	.word	0xe000ed00

0800140c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	4603      	mov	r3, r0
 8001414:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141a:	2b00      	cmp	r3, #0
 800141c:	db0b      	blt.n	8001436 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800141e:	79fb      	ldrb	r3, [r7, #7]
 8001420:	f003 021f 	and.w	r2, r3, #31
 8001424:	4906      	ldr	r1, [pc, #24]	@ (8001440 <__NVIC_EnableIRQ+0x34>)
 8001426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142a:	095b      	lsrs	r3, r3, #5
 800142c:	2001      	movs	r0, #1
 800142e:	fa00 f202 	lsl.w	r2, r0, r2
 8001432:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001436:	bf00      	nop
 8001438:	370c      	adds	r7, #12
 800143a:	46bd      	mov	sp, r7
 800143c:	bc80      	pop	{r7}
 800143e:	4770      	bx	lr
 8001440:	e000e100 	.word	0xe000e100

08001444 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	4603      	mov	r3, r0
 800144c:	6039      	str	r1, [r7, #0]
 800144e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001450:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001454:	2b00      	cmp	r3, #0
 8001456:	db0a      	blt.n	800146e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	b2da      	uxtb	r2, r3
 800145c:	490c      	ldr	r1, [pc, #48]	@ (8001490 <__NVIC_SetPriority+0x4c>)
 800145e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001462:	0112      	lsls	r2, r2, #4
 8001464:	b2d2      	uxtb	r2, r2
 8001466:	440b      	add	r3, r1
 8001468:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800146c:	e00a      	b.n	8001484 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	b2da      	uxtb	r2, r3
 8001472:	4908      	ldr	r1, [pc, #32]	@ (8001494 <__NVIC_SetPriority+0x50>)
 8001474:	79fb      	ldrb	r3, [r7, #7]
 8001476:	f003 030f 	and.w	r3, r3, #15
 800147a:	3b04      	subs	r3, #4
 800147c:	0112      	lsls	r2, r2, #4
 800147e:	b2d2      	uxtb	r2, r2
 8001480:	440b      	add	r3, r1
 8001482:	761a      	strb	r2, [r3, #24]
}
 8001484:	bf00      	nop
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	bc80      	pop	{r7}
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	e000e100 	.word	0xe000e100
 8001494:	e000ed00 	.word	0xe000ed00

08001498 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001498:	b480      	push	{r7}
 800149a:	b089      	sub	sp, #36	@ 0x24
 800149c:	af00      	add	r7, sp, #0
 800149e:	60f8      	str	r0, [r7, #12]
 80014a0:	60b9      	str	r1, [r7, #8]
 80014a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	f003 0307 	and.w	r3, r3, #7
 80014aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	f1c3 0307 	rsb	r3, r3, #7
 80014b2:	2b04      	cmp	r3, #4
 80014b4:	bf28      	it	cs
 80014b6:	2304      	movcs	r3, #4
 80014b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	3304      	adds	r3, #4
 80014be:	2b06      	cmp	r3, #6
 80014c0:	d902      	bls.n	80014c8 <NVIC_EncodePriority+0x30>
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	3b03      	subs	r3, #3
 80014c6:	e000      	b.n	80014ca <NVIC_EncodePriority+0x32>
 80014c8:	2300      	movs	r3, #0
 80014ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014cc:	f04f 32ff 	mov.w	r2, #4294967295
 80014d0:	69bb      	ldr	r3, [r7, #24]
 80014d2:	fa02 f303 	lsl.w	r3, r2, r3
 80014d6:	43da      	mvns	r2, r3
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	401a      	ands	r2, r3
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014e0:	f04f 31ff 	mov.w	r1, #4294967295
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	fa01 f303 	lsl.w	r3, r1, r3
 80014ea:	43d9      	mvns	r1, r3
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f0:	4313      	orrs	r3, r2
         );
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3724      	adds	r7, #36	@ 0x24
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bc80      	pop	{r7}
 80014fa:	4770      	bx	lr

080014fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	3b01      	subs	r3, #1
 8001508:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800150c:	d301      	bcc.n	8001512 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800150e:	2301      	movs	r3, #1
 8001510:	e00f      	b.n	8001532 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001512:	4a0a      	ldr	r2, [pc, #40]	@ (800153c <SysTick_Config+0x40>)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	3b01      	subs	r3, #1
 8001518:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800151a:	210f      	movs	r1, #15
 800151c:	f04f 30ff 	mov.w	r0, #4294967295
 8001520:	f7ff ff90 	bl	8001444 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001524:	4b05      	ldr	r3, [pc, #20]	@ (800153c <SysTick_Config+0x40>)
 8001526:	2200      	movs	r2, #0
 8001528:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800152a:	4b04      	ldr	r3, [pc, #16]	@ (800153c <SysTick_Config+0x40>)
 800152c:	2207      	movs	r2, #7
 800152e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001530:	2300      	movs	r3, #0
}
 8001532:	4618      	mov	r0, r3
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	e000e010 	.word	0xe000e010

08001540 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f7ff ff2d 	bl	80013a8 <__NVIC_SetPriorityGrouping>
}
 800154e:	bf00      	nop
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}

08001556 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001556:	b580      	push	{r7, lr}
 8001558:	b086      	sub	sp, #24
 800155a:	af00      	add	r7, sp, #0
 800155c:	4603      	mov	r3, r0
 800155e:	60b9      	str	r1, [r7, #8]
 8001560:	607a      	str	r2, [r7, #4]
 8001562:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001564:	2300      	movs	r3, #0
 8001566:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001568:	f7ff ff42 	bl	80013f0 <__NVIC_GetPriorityGrouping>
 800156c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800156e:	687a      	ldr	r2, [r7, #4]
 8001570:	68b9      	ldr	r1, [r7, #8]
 8001572:	6978      	ldr	r0, [r7, #20]
 8001574:	f7ff ff90 	bl	8001498 <NVIC_EncodePriority>
 8001578:	4602      	mov	r2, r0
 800157a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800157e:	4611      	mov	r1, r2
 8001580:	4618      	mov	r0, r3
 8001582:	f7ff ff5f 	bl	8001444 <__NVIC_SetPriority>
}
 8001586:	bf00      	nop
 8001588:	3718      	adds	r7, #24
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}

0800158e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800158e:	b580      	push	{r7, lr}
 8001590:	b082      	sub	sp, #8
 8001592:	af00      	add	r7, sp, #0
 8001594:	4603      	mov	r3, r0
 8001596:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001598:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159c:	4618      	mov	r0, r3
 800159e:	f7ff ff35 	bl	800140c <__NVIC_EnableIRQ>
}
 80015a2:	bf00      	nop
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}

080015aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015aa:	b580      	push	{r7, lr}
 80015ac:	b082      	sub	sp, #8
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f7ff ffa2 	bl	80014fc <SysTick_Config>
 80015b8:	4603      	mov	r3, r0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015c2:	b480      	push	{r7}
 80015c4:	b085      	sub	sp, #20
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015ca:	2300      	movs	r3, #0
 80015cc:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	d008      	beq.n	80015ec <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2204      	movs	r2, #4
 80015de:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2200      	movs	r2, #0
 80015e4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e020      	b.n	800162e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f022 020e 	bic.w	r2, r2, #14
 80015fa:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f022 0201 	bic.w	r2, r2, #1
 800160a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001614:	2101      	movs	r1, #1
 8001616:	fa01 f202 	lsl.w	r2, r1, r2
 800161a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2201      	movs	r2, #1
 8001620:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2200      	movs	r2, #0
 8001628:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800162c:	7bfb      	ldrb	r3, [r7, #15]
}
 800162e:	4618      	mov	r0, r3
 8001630:	3714      	adds	r7, #20
 8001632:	46bd      	mov	sp, r7
 8001634:	bc80      	pop	{r7}
 8001636:	4770      	bx	lr

08001638 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001640:	2300      	movs	r3, #0
 8001642:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800164a:	b2db      	uxtb	r3, r3
 800164c:	2b02      	cmp	r3, #2
 800164e:	d005      	beq.n	800165c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2204      	movs	r2, #4
 8001654:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	73fb      	strb	r3, [r7, #15]
 800165a:	e051      	b.n	8001700 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f022 020e 	bic.w	r2, r2, #14
 800166a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f022 0201 	bic.w	r2, r2, #1
 800167a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a22      	ldr	r2, [pc, #136]	@ (800170c <HAL_DMA_Abort_IT+0xd4>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d029      	beq.n	80016da <HAL_DMA_Abort_IT+0xa2>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a21      	ldr	r2, [pc, #132]	@ (8001710 <HAL_DMA_Abort_IT+0xd8>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d022      	beq.n	80016d6 <HAL_DMA_Abort_IT+0x9e>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a1f      	ldr	r2, [pc, #124]	@ (8001714 <HAL_DMA_Abort_IT+0xdc>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d01a      	beq.n	80016d0 <HAL_DMA_Abort_IT+0x98>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a1e      	ldr	r2, [pc, #120]	@ (8001718 <HAL_DMA_Abort_IT+0xe0>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d012      	beq.n	80016ca <HAL_DMA_Abort_IT+0x92>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a1c      	ldr	r2, [pc, #112]	@ (800171c <HAL_DMA_Abort_IT+0xe4>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d00a      	beq.n	80016c4 <HAL_DMA_Abort_IT+0x8c>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a1b      	ldr	r2, [pc, #108]	@ (8001720 <HAL_DMA_Abort_IT+0xe8>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d102      	bne.n	80016be <HAL_DMA_Abort_IT+0x86>
 80016b8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80016bc:	e00e      	b.n	80016dc <HAL_DMA_Abort_IT+0xa4>
 80016be:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80016c2:	e00b      	b.n	80016dc <HAL_DMA_Abort_IT+0xa4>
 80016c4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80016c8:	e008      	b.n	80016dc <HAL_DMA_Abort_IT+0xa4>
 80016ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016ce:	e005      	b.n	80016dc <HAL_DMA_Abort_IT+0xa4>
 80016d0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80016d4:	e002      	b.n	80016dc <HAL_DMA_Abort_IT+0xa4>
 80016d6:	2310      	movs	r3, #16
 80016d8:	e000      	b.n	80016dc <HAL_DMA_Abort_IT+0xa4>
 80016da:	2301      	movs	r3, #1
 80016dc:	4a11      	ldr	r2, [pc, #68]	@ (8001724 <HAL_DMA_Abort_IT+0xec>)
 80016de:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2201      	movs	r2, #1
 80016e4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2200      	movs	r2, #0
 80016ec:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d003      	beq.n	8001700 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	4798      	blx	r3
    } 
  }
  return status;
 8001700:	7bfb      	ldrb	r3, [r7, #15]
}
 8001702:	4618      	mov	r0, r3
 8001704:	3710      	adds	r7, #16
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	40020008 	.word	0x40020008
 8001710:	4002001c 	.word	0x4002001c
 8001714:	40020030 	.word	0x40020030
 8001718:	40020044 	.word	0x40020044
 800171c:	40020058 	.word	0x40020058
 8001720:	4002006c 	.word	0x4002006c
 8001724:	40020000 	.word	0x40020000

08001728 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001728:	b480      	push	{r7}
 800172a:	b08b      	sub	sp, #44	@ 0x2c
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001732:	2300      	movs	r3, #0
 8001734:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001736:	2300      	movs	r3, #0
 8001738:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800173a:	e169      	b.n	8001a10 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800173c:	2201      	movs	r2, #1
 800173e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	69fa      	ldr	r2, [r7, #28]
 800174c:	4013      	ands	r3, r2
 800174e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	429a      	cmp	r2, r3
 8001756:	f040 8158 	bne.w	8001a0a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	4a9a      	ldr	r2, [pc, #616]	@ (80019c8 <HAL_GPIO_Init+0x2a0>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d05e      	beq.n	8001822 <HAL_GPIO_Init+0xfa>
 8001764:	4a98      	ldr	r2, [pc, #608]	@ (80019c8 <HAL_GPIO_Init+0x2a0>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d875      	bhi.n	8001856 <HAL_GPIO_Init+0x12e>
 800176a:	4a98      	ldr	r2, [pc, #608]	@ (80019cc <HAL_GPIO_Init+0x2a4>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d058      	beq.n	8001822 <HAL_GPIO_Init+0xfa>
 8001770:	4a96      	ldr	r2, [pc, #600]	@ (80019cc <HAL_GPIO_Init+0x2a4>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d86f      	bhi.n	8001856 <HAL_GPIO_Init+0x12e>
 8001776:	4a96      	ldr	r2, [pc, #600]	@ (80019d0 <HAL_GPIO_Init+0x2a8>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d052      	beq.n	8001822 <HAL_GPIO_Init+0xfa>
 800177c:	4a94      	ldr	r2, [pc, #592]	@ (80019d0 <HAL_GPIO_Init+0x2a8>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d869      	bhi.n	8001856 <HAL_GPIO_Init+0x12e>
 8001782:	4a94      	ldr	r2, [pc, #592]	@ (80019d4 <HAL_GPIO_Init+0x2ac>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d04c      	beq.n	8001822 <HAL_GPIO_Init+0xfa>
 8001788:	4a92      	ldr	r2, [pc, #584]	@ (80019d4 <HAL_GPIO_Init+0x2ac>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d863      	bhi.n	8001856 <HAL_GPIO_Init+0x12e>
 800178e:	4a92      	ldr	r2, [pc, #584]	@ (80019d8 <HAL_GPIO_Init+0x2b0>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d046      	beq.n	8001822 <HAL_GPIO_Init+0xfa>
 8001794:	4a90      	ldr	r2, [pc, #576]	@ (80019d8 <HAL_GPIO_Init+0x2b0>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d85d      	bhi.n	8001856 <HAL_GPIO_Init+0x12e>
 800179a:	2b12      	cmp	r3, #18
 800179c:	d82a      	bhi.n	80017f4 <HAL_GPIO_Init+0xcc>
 800179e:	2b12      	cmp	r3, #18
 80017a0:	d859      	bhi.n	8001856 <HAL_GPIO_Init+0x12e>
 80017a2:	a201      	add	r2, pc, #4	@ (adr r2, 80017a8 <HAL_GPIO_Init+0x80>)
 80017a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017a8:	08001823 	.word	0x08001823
 80017ac:	080017fd 	.word	0x080017fd
 80017b0:	0800180f 	.word	0x0800180f
 80017b4:	08001851 	.word	0x08001851
 80017b8:	08001857 	.word	0x08001857
 80017bc:	08001857 	.word	0x08001857
 80017c0:	08001857 	.word	0x08001857
 80017c4:	08001857 	.word	0x08001857
 80017c8:	08001857 	.word	0x08001857
 80017cc:	08001857 	.word	0x08001857
 80017d0:	08001857 	.word	0x08001857
 80017d4:	08001857 	.word	0x08001857
 80017d8:	08001857 	.word	0x08001857
 80017dc:	08001857 	.word	0x08001857
 80017e0:	08001857 	.word	0x08001857
 80017e4:	08001857 	.word	0x08001857
 80017e8:	08001857 	.word	0x08001857
 80017ec:	08001805 	.word	0x08001805
 80017f0:	08001819 	.word	0x08001819
 80017f4:	4a79      	ldr	r2, [pc, #484]	@ (80019dc <HAL_GPIO_Init+0x2b4>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d013      	beq.n	8001822 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80017fa:	e02c      	b.n	8001856 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	623b      	str	r3, [r7, #32]
          break;
 8001802:	e029      	b.n	8001858 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	3304      	adds	r3, #4
 800180a:	623b      	str	r3, [r7, #32]
          break;
 800180c:	e024      	b.n	8001858 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	68db      	ldr	r3, [r3, #12]
 8001812:	3308      	adds	r3, #8
 8001814:	623b      	str	r3, [r7, #32]
          break;
 8001816:	e01f      	b.n	8001858 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	330c      	adds	r3, #12
 800181e:	623b      	str	r3, [r7, #32]
          break;
 8001820:	e01a      	b.n	8001858 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d102      	bne.n	8001830 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800182a:	2304      	movs	r3, #4
 800182c:	623b      	str	r3, [r7, #32]
          break;
 800182e:	e013      	b.n	8001858 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	2b01      	cmp	r3, #1
 8001836:	d105      	bne.n	8001844 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001838:	2308      	movs	r3, #8
 800183a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	69fa      	ldr	r2, [r7, #28]
 8001840:	611a      	str	r2, [r3, #16]
          break;
 8001842:	e009      	b.n	8001858 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001844:	2308      	movs	r3, #8
 8001846:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	69fa      	ldr	r2, [r7, #28]
 800184c:	615a      	str	r2, [r3, #20]
          break;
 800184e:	e003      	b.n	8001858 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001850:	2300      	movs	r3, #0
 8001852:	623b      	str	r3, [r7, #32]
          break;
 8001854:	e000      	b.n	8001858 <HAL_GPIO_Init+0x130>
          break;
 8001856:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001858:	69bb      	ldr	r3, [r7, #24]
 800185a:	2bff      	cmp	r3, #255	@ 0xff
 800185c:	d801      	bhi.n	8001862 <HAL_GPIO_Init+0x13a>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	e001      	b.n	8001866 <HAL_GPIO_Init+0x13e>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	3304      	adds	r3, #4
 8001866:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001868:	69bb      	ldr	r3, [r7, #24]
 800186a:	2bff      	cmp	r3, #255	@ 0xff
 800186c:	d802      	bhi.n	8001874 <HAL_GPIO_Init+0x14c>
 800186e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	e002      	b.n	800187a <HAL_GPIO_Init+0x152>
 8001874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001876:	3b08      	subs	r3, #8
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	210f      	movs	r1, #15
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	fa01 f303 	lsl.w	r3, r1, r3
 8001888:	43db      	mvns	r3, r3
 800188a:	401a      	ands	r2, r3
 800188c:	6a39      	ldr	r1, [r7, #32]
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	fa01 f303 	lsl.w	r3, r1, r3
 8001894:	431a      	orrs	r2, r3
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	f000 80b1 	beq.w	8001a0a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80018a8:	4b4d      	ldr	r3, [pc, #308]	@ (80019e0 <HAL_GPIO_Init+0x2b8>)
 80018aa:	699b      	ldr	r3, [r3, #24]
 80018ac:	4a4c      	ldr	r2, [pc, #304]	@ (80019e0 <HAL_GPIO_Init+0x2b8>)
 80018ae:	f043 0301 	orr.w	r3, r3, #1
 80018b2:	6193      	str	r3, [r2, #24]
 80018b4:	4b4a      	ldr	r3, [pc, #296]	@ (80019e0 <HAL_GPIO_Init+0x2b8>)
 80018b6:	699b      	ldr	r3, [r3, #24]
 80018b8:	f003 0301 	and.w	r3, r3, #1
 80018bc:	60bb      	str	r3, [r7, #8]
 80018be:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80018c0:	4a48      	ldr	r2, [pc, #288]	@ (80019e4 <HAL_GPIO_Init+0x2bc>)
 80018c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018c4:	089b      	lsrs	r3, r3, #2
 80018c6:	3302      	adds	r3, #2
 80018c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018cc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80018ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018d0:	f003 0303 	and.w	r3, r3, #3
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	220f      	movs	r2, #15
 80018d8:	fa02 f303 	lsl.w	r3, r2, r3
 80018dc:	43db      	mvns	r3, r3
 80018de:	68fa      	ldr	r2, [r7, #12]
 80018e0:	4013      	ands	r3, r2
 80018e2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	4a40      	ldr	r2, [pc, #256]	@ (80019e8 <HAL_GPIO_Init+0x2c0>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d013      	beq.n	8001914 <HAL_GPIO_Init+0x1ec>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	4a3f      	ldr	r2, [pc, #252]	@ (80019ec <HAL_GPIO_Init+0x2c4>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d00d      	beq.n	8001910 <HAL_GPIO_Init+0x1e8>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	4a3e      	ldr	r2, [pc, #248]	@ (80019f0 <HAL_GPIO_Init+0x2c8>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d007      	beq.n	800190c <HAL_GPIO_Init+0x1e4>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	4a3d      	ldr	r2, [pc, #244]	@ (80019f4 <HAL_GPIO_Init+0x2cc>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d101      	bne.n	8001908 <HAL_GPIO_Init+0x1e0>
 8001904:	2303      	movs	r3, #3
 8001906:	e006      	b.n	8001916 <HAL_GPIO_Init+0x1ee>
 8001908:	2304      	movs	r3, #4
 800190a:	e004      	b.n	8001916 <HAL_GPIO_Init+0x1ee>
 800190c:	2302      	movs	r3, #2
 800190e:	e002      	b.n	8001916 <HAL_GPIO_Init+0x1ee>
 8001910:	2301      	movs	r3, #1
 8001912:	e000      	b.n	8001916 <HAL_GPIO_Init+0x1ee>
 8001914:	2300      	movs	r3, #0
 8001916:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001918:	f002 0203 	and.w	r2, r2, #3
 800191c:	0092      	lsls	r2, r2, #2
 800191e:	4093      	lsls	r3, r2
 8001920:	68fa      	ldr	r2, [r7, #12]
 8001922:	4313      	orrs	r3, r2
 8001924:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001926:	492f      	ldr	r1, [pc, #188]	@ (80019e4 <HAL_GPIO_Init+0x2bc>)
 8001928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800192a:	089b      	lsrs	r3, r3, #2
 800192c:	3302      	adds	r3, #2
 800192e:	68fa      	ldr	r2, [r7, #12]
 8001930:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800193c:	2b00      	cmp	r3, #0
 800193e:	d006      	beq.n	800194e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001940:	4b2d      	ldr	r3, [pc, #180]	@ (80019f8 <HAL_GPIO_Init+0x2d0>)
 8001942:	689a      	ldr	r2, [r3, #8]
 8001944:	492c      	ldr	r1, [pc, #176]	@ (80019f8 <HAL_GPIO_Init+0x2d0>)
 8001946:	69bb      	ldr	r3, [r7, #24]
 8001948:	4313      	orrs	r3, r2
 800194a:	608b      	str	r3, [r1, #8]
 800194c:	e006      	b.n	800195c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800194e:	4b2a      	ldr	r3, [pc, #168]	@ (80019f8 <HAL_GPIO_Init+0x2d0>)
 8001950:	689a      	ldr	r2, [r3, #8]
 8001952:	69bb      	ldr	r3, [r7, #24]
 8001954:	43db      	mvns	r3, r3
 8001956:	4928      	ldr	r1, [pc, #160]	@ (80019f8 <HAL_GPIO_Init+0x2d0>)
 8001958:	4013      	ands	r3, r2
 800195a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001964:	2b00      	cmp	r3, #0
 8001966:	d006      	beq.n	8001976 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001968:	4b23      	ldr	r3, [pc, #140]	@ (80019f8 <HAL_GPIO_Init+0x2d0>)
 800196a:	68da      	ldr	r2, [r3, #12]
 800196c:	4922      	ldr	r1, [pc, #136]	@ (80019f8 <HAL_GPIO_Init+0x2d0>)
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	4313      	orrs	r3, r2
 8001972:	60cb      	str	r3, [r1, #12]
 8001974:	e006      	b.n	8001984 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001976:	4b20      	ldr	r3, [pc, #128]	@ (80019f8 <HAL_GPIO_Init+0x2d0>)
 8001978:	68da      	ldr	r2, [r3, #12]
 800197a:	69bb      	ldr	r3, [r7, #24]
 800197c:	43db      	mvns	r3, r3
 800197e:	491e      	ldr	r1, [pc, #120]	@ (80019f8 <HAL_GPIO_Init+0x2d0>)
 8001980:	4013      	ands	r3, r2
 8001982:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800198c:	2b00      	cmp	r3, #0
 800198e:	d006      	beq.n	800199e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001990:	4b19      	ldr	r3, [pc, #100]	@ (80019f8 <HAL_GPIO_Init+0x2d0>)
 8001992:	685a      	ldr	r2, [r3, #4]
 8001994:	4918      	ldr	r1, [pc, #96]	@ (80019f8 <HAL_GPIO_Init+0x2d0>)
 8001996:	69bb      	ldr	r3, [r7, #24]
 8001998:	4313      	orrs	r3, r2
 800199a:	604b      	str	r3, [r1, #4]
 800199c:	e006      	b.n	80019ac <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800199e:	4b16      	ldr	r3, [pc, #88]	@ (80019f8 <HAL_GPIO_Init+0x2d0>)
 80019a0:	685a      	ldr	r2, [r3, #4]
 80019a2:	69bb      	ldr	r3, [r7, #24]
 80019a4:	43db      	mvns	r3, r3
 80019a6:	4914      	ldr	r1, [pc, #80]	@ (80019f8 <HAL_GPIO_Init+0x2d0>)
 80019a8:	4013      	ands	r3, r2
 80019aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d021      	beq.n	80019fc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80019b8:	4b0f      	ldr	r3, [pc, #60]	@ (80019f8 <HAL_GPIO_Init+0x2d0>)
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	490e      	ldr	r1, [pc, #56]	@ (80019f8 <HAL_GPIO_Init+0x2d0>)
 80019be:	69bb      	ldr	r3, [r7, #24]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	600b      	str	r3, [r1, #0]
 80019c4:	e021      	b.n	8001a0a <HAL_GPIO_Init+0x2e2>
 80019c6:	bf00      	nop
 80019c8:	10320000 	.word	0x10320000
 80019cc:	10310000 	.word	0x10310000
 80019d0:	10220000 	.word	0x10220000
 80019d4:	10210000 	.word	0x10210000
 80019d8:	10120000 	.word	0x10120000
 80019dc:	10110000 	.word	0x10110000
 80019e0:	40021000 	.word	0x40021000
 80019e4:	40010000 	.word	0x40010000
 80019e8:	40010800 	.word	0x40010800
 80019ec:	40010c00 	.word	0x40010c00
 80019f0:	40011000 	.word	0x40011000
 80019f4:	40011400 	.word	0x40011400
 80019f8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80019fc:	4b0b      	ldr	r3, [pc, #44]	@ (8001a2c <HAL_GPIO_Init+0x304>)
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	69bb      	ldr	r3, [r7, #24]
 8001a02:	43db      	mvns	r3, r3
 8001a04:	4909      	ldr	r1, [pc, #36]	@ (8001a2c <HAL_GPIO_Init+0x304>)
 8001a06:	4013      	ands	r3, r2
 8001a08:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a16:	fa22 f303 	lsr.w	r3, r2, r3
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	f47f ae8e 	bne.w	800173c <HAL_GPIO_Init+0x14>
  }
}
 8001a20:	bf00      	nop
 8001a22:	bf00      	nop
 8001a24:	372c      	adds	r7, #44	@ 0x2c
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bc80      	pop	{r7}
 8001a2a:	4770      	bx	lr
 8001a2c:	40010400 	.word	0x40010400

08001a30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	460b      	mov	r3, r1
 8001a3a:	807b      	strh	r3, [r7, #2]
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a40:	787b      	ldrb	r3, [r7, #1]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d003      	beq.n	8001a4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a46:	887a      	ldrh	r2, [r7, #2]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a4c:	e003      	b.n	8001a56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a4e:	887b      	ldrh	r3, [r7, #2]
 8001a50:	041a      	lsls	r2, r3, #16
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	611a      	str	r2, [r3, #16]
}
 8001a56:	bf00      	nop
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bc80      	pop	{r7}
 8001a5e:	4770      	bx	lr

08001a60 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	4603      	mov	r3, r0
 8001a68:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001a6a:	4b08      	ldr	r3, [pc, #32]	@ (8001a8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a6c:	695a      	ldr	r2, [r3, #20]
 8001a6e:	88fb      	ldrh	r3, [r7, #6]
 8001a70:	4013      	ands	r3, r2
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d006      	beq.n	8001a84 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a76:	4a05      	ldr	r2, [pc, #20]	@ (8001a8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a78:	88fb      	ldrh	r3, [r7, #6]
 8001a7a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a7c:	88fb      	ldrh	r3, [r7, #6]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f000 f806 	bl	8001a90 <HAL_GPIO_EXTI_Callback>
  }
}
 8001a84:	bf00      	nop
 8001a86:	3708      	adds	r7, #8
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	40010400 	.word	0x40010400

08001a90 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	4603      	mov	r3, r0
 8001a98:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001a9a:	bf00      	nop
 8001a9c:	370c      	adds	r7, #12
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bc80      	pop	{r7}
 8001aa2:	4770      	bx	lr

08001aa4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b086      	sub	sp, #24
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d101      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e272      	b.n	8001f9c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0301 	and.w	r3, r3, #1
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	f000 8087 	beq.w	8001bd2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ac4:	4b92      	ldr	r3, [pc, #584]	@ (8001d10 <HAL_RCC_OscConfig+0x26c>)
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f003 030c 	and.w	r3, r3, #12
 8001acc:	2b04      	cmp	r3, #4
 8001ace:	d00c      	beq.n	8001aea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ad0:	4b8f      	ldr	r3, [pc, #572]	@ (8001d10 <HAL_RCC_OscConfig+0x26c>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f003 030c 	and.w	r3, r3, #12
 8001ad8:	2b08      	cmp	r3, #8
 8001ada:	d112      	bne.n	8001b02 <HAL_RCC_OscConfig+0x5e>
 8001adc:	4b8c      	ldr	r3, [pc, #560]	@ (8001d10 <HAL_RCC_OscConfig+0x26c>)
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ae4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ae8:	d10b      	bne.n	8001b02 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aea:	4b89      	ldr	r3, [pc, #548]	@ (8001d10 <HAL_RCC_OscConfig+0x26c>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d06c      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x12c>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d168      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e24c      	b.n	8001f9c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b0a:	d106      	bne.n	8001b1a <HAL_RCC_OscConfig+0x76>
 8001b0c:	4b80      	ldr	r3, [pc, #512]	@ (8001d10 <HAL_RCC_OscConfig+0x26c>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a7f      	ldr	r2, [pc, #508]	@ (8001d10 <HAL_RCC_OscConfig+0x26c>)
 8001b12:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b16:	6013      	str	r3, [r2, #0]
 8001b18:	e02e      	b.n	8001b78 <HAL_RCC_OscConfig+0xd4>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d10c      	bne.n	8001b3c <HAL_RCC_OscConfig+0x98>
 8001b22:	4b7b      	ldr	r3, [pc, #492]	@ (8001d10 <HAL_RCC_OscConfig+0x26c>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a7a      	ldr	r2, [pc, #488]	@ (8001d10 <HAL_RCC_OscConfig+0x26c>)
 8001b28:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b2c:	6013      	str	r3, [r2, #0]
 8001b2e:	4b78      	ldr	r3, [pc, #480]	@ (8001d10 <HAL_RCC_OscConfig+0x26c>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a77      	ldr	r2, [pc, #476]	@ (8001d10 <HAL_RCC_OscConfig+0x26c>)
 8001b34:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b38:	6013      	str	r3, [r2, #0]
 8001b3a:	e01d      	b.n	8001b78 <HAL_RCC_OscConfig+0xd4>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b44:	d10c      	bne.n	8001b60 <HAL_RCC_OscConfig+0xbc>
 8001b46:	4b72      	ldr	r3, [pc, #456]	@ (8001d10 <HAL_RCC_OscConfig+0x26c>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a71      	ldr	r2, [pc, #452]	@ (8001d10 <HAL_RCC_OscConfig+0x26c>)
 8001b4c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b50:	6013      	str	r3, [r2, #0]
 8001b52:	4b6f      	ldr	r3, [pc, #444]	@ (8001d10 <HAL_RCC_OscConfig+0x26c>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a6e      	ldr	r2, [pc, #440]	@ (8001d10 <HAL_RCC_OscConfig+0x26c>)
 8001b58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b5c:	6013      	str	r3, [r2, #0]
 8001b5e:	e00b      	b.n	8001b78 <HAL_RCC_OscConfig+0xd4>
 8001b60:	4b6b      	ldr	r3, [pc, #428]	@ (8001d10 <HAL_RCC_OscConfig+0x26c>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a6a      	ldr	r2, [pc, #424]	@ (8001d10 <HAL_RCC_OscConfig+0x26c>)
 8001b66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b6a:	6013      	str	r3, [r2, #0]
 8001b6c:	4b68      	ldr	r3, [pc, #416]	@ (8001d10 <HAL_RCC_OscConfig+0x26c>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a67      	ldr	r2, [pc, #412]	@ (8001d10 <HAL_RCC_OscConfig+0x26c>)
 8001b72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b76:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d013      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b80:	f7ff fc08 	bl	8001394 <HAL_GetTick>
 8001b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b86:	e008      	b.n	8001b9a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b88:	f7ff fc04 	bl	8001394 <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	2b64      	cmp	r3, #100	@ 0x64
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e200      	b.n	8001f9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b9a:	4b5d      	ldr	r3, [pc, #372]	@ (8001d10 <HAL_RCC_OscConfig+0x26c>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d0f0      	beq.n	8001b88 <HAL_RCC_OscConfig+0xe4>
 8001ba6:	e014      	b.n	8001bd2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba8:	f7ff fbf4 	bl	8001394 <HAL_GetTick>
 8001bac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bae:	e008      	b.n	8001bc2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bb0:	f7ff fbf0 	bl	8001394 <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	2b64      	cmp	r3, #100	@ 0x64
 8001bbc:	d901      	bls.n	8001bc2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e1ec      	b.n	8001f9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bc2:	4b53      	ldr	r3, [pc, #332]	@ (8001d10 <HAL_RCC_OscConfig+0x26c>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d1f0      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x10c>
 8001bce:	e000      	b.n	8001bd2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0302 	and.w	r3, r3, #2
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d063      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bde:	4b4c      	ldr	r3, [pc, #304]	@ (8001d10 <HAL_RCC_OscConfig+0x26c>)
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f003 030c 	and.w	r3, r3, #12
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d00b      	beq.n	8001c02 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001bea:	4b49      	ldr	r3, [pc, #292]	@ (8001d10 <HAL_RCC_OscConfig+0x26c>)
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f003 030c 	and.w	r3, r3, #12
 8001bf2:	2b08      	cmp	r3, #8
 8001bf4:	d11c      	bne.n	8001c30 <HAL_RCC_OscConfig+0x18c>
 8001bf6:	4b46      	ldr	r3, [pc, #280]	@ (8001d10 <HAL_RCC_OscConfig+0x26c>)
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d116      	bne.n	8001c30 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c02:	4b43      	ldr	r3, [pc, #268]	@ (8001d10 <HAL_RCC_OscConfig+0x26c>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0302 	and.w	r3, r3, #2
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d005      	beq.n	8001c1a <HAL_RCC_OscConfig+0x176>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	691b      	ldr	r3, [r3, #16]
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d001      	beq.n	8001c1a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e1c0      	b.n	8001f9c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c1a:	4b3d      	ldr	r3, [pc, #244]	@ (8001d10 <HAL_RCC_OscConfig+0x26c>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	695b      	ldr	r3, [r3, #20]
 8001c26:	00db      	lsls	r3, r3, #3
 8001c28:	4939      	ldr	r1, [pc, #228]	@ (8001d10 <HAL_RCC_OscConfig+0x26c>)
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c2e:	e03a      	b.n	8001ca6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	691b      	ldr	r3, [r3, #16]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d020      	beq.n	8001c7a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c38:	4b36      	ldr	r3, [pc, #216]	@ (8001d14 <HAL_RCC_OscConfig+0x270>)
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c3e:	f7ff fba9 	bl	8001394 <HAL_GetTick>
 8001c42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c44:	e008      	b.n	8001c58 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c46:	f7ff fba5 	bl	8001394 <HAL_GetTick>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d901      	bls.n	8001c58 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c54:	2303      	movs	r3, #3
 8001c56:	e1a1      	b.n	8001f9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c58:	4b2d      	ldr	r3, [pc, #180]	@ (8001d10 <HAL_RCC_OscConfig+0x26c>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 0302 	and.w	r3, r3, #2
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d0f0      	beq.n	8001c46 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c64:	4b2a      	ldr	r3, [pc, #168]	@ (8001d10 <HAL_RCC_OscConfig+0x26c>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	695b      	ldr	r3, [r3, #20]
 8001c70:	00db      	lsls	r3, r3, #3
 8001c72:	4927      	ldr	r1, [pc, #156]	@ (8001d10 <HAL_RCC_OscConfig+0x26c>)
 8001c74:	4313      	orrs	r3, r2
 8001c76:	600b      	str	r3, [r1, #0]
 8001c78:	e015      	b.n	8001ca6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c7a:	4b26      	ldr	r3, [pc, #152]	@ (8001d14 <HAL_RCC_OscConfig+0x270>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c80:	f7ff fb88 	bl	8001394 <HAL_GetTick>
 8001c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c86:	e008      	b.n	8001c9a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c88:	f7ff fb84 	bl	8001394 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d901      	bls.n	8001c9a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e180      	b.n	8001f9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c9a:	4b1d      	ldr	r3, [pc, #116]	@ (8001d10 <HAL_RCC_OscConfig+0x26c>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0302 	and.w	r3, r3, #2
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d1f0      	bne.n	8001c88 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 0308 	and.w	r3, r3, #8
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d03a      	beq.n	8001d28 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	699b      	ldr	r3, [r3, #24]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d019      	beq.n	8001cee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cba:	4b17      	ldr	r3, [pc, #92]	@ (8001d18 <HAL_RCC_OscConfig+0x274>)
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cc0:	f7ff fb68 	bl	8001394 <HAL_GetTick>
 8001cc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cc6:	e008      	b.n	8001cda <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cc8:	f7ff fb64 	bl	8001394 <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d901      	bls.n	8001cda <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e160      	b.n	8001f9c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cda:	4b0d      	ldr	r3, [pc, #52]	@ (8001d10 <HAL_RCC_OscConfig+0x26c>)
 8001cdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cde:	f003 0302 	and.w	r3, r3, #2
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d0f0      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001ce6:	2001      	movs	r0, #1
 8001ce8:	f000 face 	bl	8002288 <RCC_Delay>
 8001cec:	e01c      	b.n	8001d28 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cee:	4b0a      	ldr	r3, [pc, #40]	@ (8001d18 <HAL_RCC_OscConfig+0x274>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cf4:	f7ff fb4e 	bl	8001394 <HAL_GetTick>
 8001cf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cfa:	e00f      	b.n	8001d1c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cfc:	f7ff fb4a 	bl	8001394 <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d908      	bls.n	8001d1c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e146      	b.n	8001f9c <HAL_RCC_OscConfig+0x4f8>
 8001d0e:	bf00      	nop
 8001d10:	40021000 	.word	0x40021000
 8001d14:	42420000 	.word	0x42420000
 8001d18:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d1c:	4b92      	ldr	r3, [pc, #584]	@ (8001f68 <HAL_RCC_OscConfig+0x4c4>)
 8001d1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d20:	f003 0302 	and.w	r3, r3, #2
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d1e9      	bne.n	8001cfc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0304 	and.w	r3, r3, #4
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	f000 80a6 	beq.w	8001e82 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d36:	2300      	movs	r3, #0
 8001d38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d3a:	4b8b      	ldr	r3, [pc, #556]	@ (8001f68 <HAL_RCC_OscConfig+0x4c4>)
 8001d3c:	69db      	ldr	r3, [r3, #28]
 8001d3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d10d      	bne.n	8001d62 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d46:	4b88      	ldr	r3, [pc, #544]	@ (8001f68 <HAL_RCC_OscConfig+0x4c4>)
 8001d48:	69db      	ldr	r3, [r3, #28]
 8001d4a:	4a87      	ldr	r2, [pc, #540]	@ (8001f68 <HAL_RCC_OscConfig+0x4c4>)
 8001d4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d50:	61d3      	str	r3, [r2, #28]
 8001d52:	4b85      	ldr	r3, [pc, #532]	@ (8001f68 <HAL_RCC_OscConfig+0x4c4>)
 8001d54:	69db      	ldr	r3, [r3, #28]
 8001d56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d5a:	60bb      	str	r3, [r7, #8]
 8001d5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d62:	4b82      	ldr	r3, [pc, #520]	@ (8001f6c <HAL_RCC_OscConfig+0x4c8>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d118      	bne.n	8001da0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d6e:	4b7f      	ldr	r3, [pc, #508]	@ (8001f6c <HAL_RCC_OscConfig+0x4c8>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a7e      	ldr	r2, [pc, #504]	@ (8001f6c <HAL_RCC_OscConfig+0x4c8>)
 8001d74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d7a:	f7ff fb0b 	bl	8001394 <HAL_GetTick>
 8001d7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d80:	e008      	b.n	8001d94 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d82:	f7ff fb07 	bl	8001394 <HAL_GetTick>
 8001d86:	4602      	mov	r2, r0
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	2b64      	cmp	r3, #100	@ 0x64
 8001d8e:	d901      	bls.n	8001d94 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d90:	2303      	movs	r3, #3
 8001d92:	e103      	b.n	8001f9c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d94:	4b75      	ldr	r3, [pc, #468]	@ (8001f6c <HAL_RCC_OscConfig+0x4c8>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d0f0      	beq.n	8001d82 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d106      	bne.n	8001db6 <HAL_RCC_OscConfig+0x312>
 8001da8:	4b6f      	ldr	r3, [pc, #444]	@ (8001f68 <HAL_RCC_OscConfig+0x4c4>)
 8001daa:	6a1b      	ldr	r3, [r3, #32]
 8001dac:	4a6e      	ldr	r2, [pc, #440]	@ (8001f68 <HAL_RCC_OscConfig+0x4c4>)
 8001dae:	f043 0301 	orr.w	r3, r3, #1
 8001db2:	6213      	str	r3, [r2, #32]
 8001db4:	e02d      	b.n	8001e12 <HAL_RCC_OscConfig+0x36e>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	68db      	ldr	r3, [r3, #12]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d10c      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x334>
 8001dbe:	4b6a      	ldr	r3, [pc, #424]	@ (8001f68 <HAL_RCC_OscConfig+0x4c4>)
 8001dc0:	6a1b      	ldr	r3, [r3, #32]
 8001dc2:	4a69      	ldr	r2, [pc, #420]	@ (8001f68 <HAL_RCC_OscConfig+0x4c4>)
 8001dc4:	f023 0301 	bic.w	r3, r3, #1
 8001dc8:	6213      	str	r3, [r2, #32]
 8001dca:	4b67      	ldr	r3, [pc, #412]	@ (8001f68 <HAL_RCC_OscConfig+0x4c4>)
 8001dcc:	6a1b      	ldr	r3, [r3, #32]
 8001dce:	4a66      	ldr	r2, [pc, #408]	@ (8001f68 <HAL_RCC_OscConfig+0x4c4>)
 8001dd0:	f023 0304 	bic.w	r3, r3, #4
 8001dd4:	6213      	str	r3, [r2, #32]
 8001dd6:	e01c      	b.n	8001e12 <HAL_RCC_OscConfig+0x36e>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	2b05      	cmp	r3, #5
 8001dde:	d10c      	bne.n	8001dfa <HAL_RCC_OscConfig+0x356>
 8001de0:	4b61      	ldr	r3, [pc, #388]	@ (8001f68 <HAL_RCC_OscConfig+0x4c4>)
 8001de2:	6a1b      	ldr	r3, [r3, #32]
 8001de4:	4a60      	ldr	r2, [pc, #384]	@ (8001f68 <HAL_RCC_OscConfig+0x4c4>)
 8001de6:	f043 0304 	orr.w	r3, r3, #4
 8001dea:	6213      	str	r3, [r2, #32]
 8001dec:	4b5e      	ldr	r3, [pc, #376]	@ (8001f68 <HAL_RCC_OscConfig+0x4c4>)
 8001dee:	6a1b      	ldr	r3, [r3, #32]
 8001df0:	4a5d      	ldr	r2, [pc, #372]	@ (8001f68 <HAL_RCC_OscConfig+0x4c4>)
 8001df2:	f043 0301 	orr.w	r3, r3, #1
 8001df6:	6213      	str	r3, [r2, #32]
 8001df8:	e00b      	b.n	8001e12 <HAL_RCC_OscConfig+0x36e>
 8001dfa:	4b5b      	ldr	r3, [pc, #364]	@ (8001f68 <HAL_RCC_OscConfig+0x4c4>)
 8001dfc:	6a1b      	ldr	r3, [r3, #32]
 8001dfe:	4a5a      	ldr	r2, [pc, #360]	@ (8001f68 <HAL_RCC_OscConfig+0x4c4>)
 8001e00:	f023 0301 	bic.w	r3, r3, #1
 8001e04:	6213      	str	r3, [r2, #32]
 8001e06:	4b58      	ldr	r3, [pc, #352]	@ (8001f68 <HAL_RCC_OscConfig+0x4c4>)
 8001e08:	6a1b      	ldr	r3, [r3, #32]
 8001e0a:	4a57      	ldr	r2, [pc, #348]	@ (8001f68 <HAL_RCC_OscConfig+0x4c4>)
 8001e0c:	f023 0304 	bic.w	r3, r3, #4
 8001e10:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d015      	beq.n	8001e46 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e1a:	f7ff fabb 	bl	8001394 <HAL_GetTick>
 8001e1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e20:	e00a      	b.n	8001e38 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e22:	f7ff fab7 	bl	8001394 <HAL_GetTick>
 8001e26:	4602      	mov	r2, r0
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d901      	bls.n	8001e38 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e34:	2303      	movs	r3, #3
 8001e36:	e0b1      	b.n	8001f9c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e38:	4b4b      	ldr	r3, [pc, #300]	@ (8001f68 <HAL_RCC_OscConfig+0x4c4>)
 8001e3a:	6a1b      	ldr	r3, [r3, #32]
 8001e3c:	f003 0302 	and.w	r3, r3, #2
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d0ee      	beq.n	8001e22 <HAL_RCC_OscConfig+0x37e>
 8001e44:	e014      	b.n	8001e70 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e46:	f7ff faa5 	bl	8001394 <HAL_GetTick>
 8001e4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e4c:	e00a      	b.n	8001e64 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e4e:	f7ff faa1 	bl	8001394 <HAL_GetTick>
 8001e52:	4602      	mov	r2, r0
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d901      	bls.n	8001e64 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e60:	2303      	movs	r3, #3
 8001e62:	e09b      	b.n	8001f9c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e64:	4b40      	ldr	r3, [pc, #256]	@ (8001f68 <HAL_RCC_OscConfig+0x4c4>)
 8001e66:	6a1b      	ldr	r3, [r3, #32]
 8001e68:	f003 0302 	and.w	r3, r3, #2
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d1ee      	bne.n	8001e4e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e70:	7dfb      	ldrb	r3, [r7, #23]
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d105      	bne.n	8001e82 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e76:	4b3c      	ldr	r3, [pc, #240]	@ (8001f68 <HAL_RCC_OscConfig+0x4c4>)
 8001e78:	69db      	ldr	r3, [r3, #28]
 8001e7a:	4a3b      	ldr	r2, [pc, #236]	@ (8001f68 <HAL_RCC_OscConfig+0x4c4>)
 8001e7c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e80:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	69db      	ldr	r3, [r3, #28]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	f000 8087 	beq.w	8001f9a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e8c:	4b36      	ldr	r3, [pc, #216]	@ (8001f68 <HAL_RCC_OscConfig+0x4c4>)
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f003 030c 	and.w	r3, r3, #12
 8001e94:	2b08      	cmp	r3, #8
 8001e96:	d061      	beq.n	8001f5c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	69db      	ldr	r3, [r3, #28]
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d146      	bne.n	8001f2e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ea0:	4b33      	ldr	r3, [pc, #204]	@ (8001f70 <HAL_RCC_OscConfig+0x4cc>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea6:	f7ff fa75 	bl	8001394 <HAL_GetTick>
 8001eaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eac:	e008      	b.n	8001ec0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eae:	f7ff fa71 	bl	8001394 <HAL_GetTick>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	d901      	bls.n	8001ec0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	e06d      	b.n	8001f9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ec0:	4b29      	ldr	r3, [pc, #164]	@ (8001f68 <HAL_RCC_OscConfig+0x4c4>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d1f0      	bne.n	8001eae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6a1b      	ldr	r3, [r3, #32]
 8001ed0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ed4:	d108      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ed6:	4b24      	ldr	r3, [pc, #144]	@ (8001f68 <HAL_RCC_OscConfig+0x4c4>)
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	4921      	ldr	r1, [pc, #132]	@ (8001f68 <HAL_RCC_OscConfig+0x4c4>)
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ee8:	4b1f      	ldr	r3, [pc, #124]	@ (8001f68 <HAL_RCC_OscConfig+0x4c4>)
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6a19      	ldr	r1, [r3, #32]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ef8:	430b      	orrs	r3, r1
 8001efa:	491b      	ldr	r1, [pc, #108]	@ (8001f68 <HAL_RCC_OscConfig+0x4c4>)
 8001efc:	4313      	orrs	r3, r2
 8001efe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f00:	4b1b      	ldr	r3, [pc, #108]	@ (8001f70 <HAL_RCC_OscConfig+0x4cc>)
 8001f02:	2201      	movs	r2, #1
 8001f04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f06:	f7ff fa45 	bl	8001394 <HAL_GetTick>
 8001f0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f0c:	e008      	b.n	8001f20 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f0e:	f7ff fa41 	bl	8001394 <HAL_GetTick>
 8001f12:	4602      	mov	r2, r0
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d901      	bls.n	8001f20 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	e03d      	b.n	8001f9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f20:	4b11      	ldr	r3, [pc, #68]	@ (8001f68 <HAL_RCC_OscConfig+0x4c4>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d0f0      	beq.n	8001f0e <HAL_RCC_OscConfig+0x46a>
 8001f2c:	e035      	b.n	8001f9a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f2e:	4b10      	ldr	r3, [pc, #64]	@ (8001f70 <HAL_RCC_OscConfig+0x4cc>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f34:	f7ff fa2e 	bl	8001394 <HAL_GetTick>
 8001f38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f3a:	e008      	b.n	8001f4e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f3c:	f7ff fa2a 	bl	8001394 <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d901      	bls.n	8001f4e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e026      	b.n	8001f9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f4e:	4b06      	ldr	r3, [pc, #24]	@ (8001f68 <HAL_RCC_OscConfig+0x4c4>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d1f0      	bne.n	8001f3c <HAL_RCC_OscConfig+0x498>
 8001f5a:	e01e      	b.n	8001f9a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	69db      	ldr	r3, [r3, #28]
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d107      	bne.n	8001f74 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e019      	b.n	8001f9c <HAL_RCC_OscConfig+0x4f8>
 8001f68:	40021000 	.word	0x40021000
 8001f6c:	40007000 	.word	0x40007000
 8001f70:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f74:	4b0b      	ldr	r3, [pc, #44]	@ (8001fa4 <HAL_RCC_OscConfig+0x500>)
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6a1b      	ldr	r3, [r3, #32]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d106      	bne.n	8001f96 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d001      	beq.n	8001f9a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e000      	b.n	8001f9c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001f9a:	2300      	movs	r3, #0
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3718      	adds	r7, #24
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	40021000 	.word	0x40021000

08001fa8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d101      	bne.n	8001fbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e0d0      	b.n	800215e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fbc:	4b6a      	ldr	r3, [pc, #424]	@ (8002168 <HAL_RCC_ClockConfig+0x1c0>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0307 	and.w	r3, r3, #7
 8001fc4:	683a      	ldr	r2, [r7, #0]
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d910      	bls.n	8001fec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fca:	4b67      	ldr	r3, [pc, #412]	@ (8002168 <HAL_RCC_ClockConfig+0x1c0>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f023 0207 	bic.w	r2, r3, #7
 8001fd2:	4965      	ldr	r1, [pc, #404]	@ (8002168 <HAL_RCC_ClockConfig+0x1c0>)
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fda:	4b63      	ldr	r3, [pc, #396]	@ (8002168 <HAL_RCC_ClockConfig+0x1c0>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0307 	and.w	r3, r3, #7
 8001fe2:	683a      	ldr	r2, [r7, #0]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d001      	beq.n	8001fec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e0b8      	b.n	800215e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0302 	and.w	r3, r3, #2
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d020      	beq.n	800203a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0304 	and.w	r3, r3, #4
 8002000:	2b00      	cmp	r3, #0
 8002002:	d005      	beq.n	8002010 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002004:	4b59      	ldr	r3, [pc, #356]	@ (800216c <HAL_RCC_ClockConfig+0x1c4>)
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	4a58      	ldr	r2, [pc, #352]	@ (800216c <HAL_RCC_ClockConfig+0x1c4>)
 800200a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800200e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0308 	and.w	r3, r3, #8
 8002018:	2b00      	cmp	r3, #0
 800201a:	d005      	beq.n	8002028 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800201c:	4b53      	ldr	r3, [pc, #332]	@ (800216c <HAL_RCC_ClockConfig+0x1c4>)
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	4a52      	ldr	r2, [pc, #328]	@ (800216c <HAL_RCC_ClockConfig+0x1c4>)
 8002022:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002026:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002028:	4b50      	ldr	r3, [pc, #320]	@ (800216c <HAL_RCC_ClockConfig+0x1c4>)
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	494d      	ldr	r1, [pc, #308]	@ (800216c <HAL_RCC_ClockConfig+0x1c4>)
 8002036:	4313      	orrs	r3, r2
 8002038:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0301 	and.w	r3, r3, #1
 8002042:	2b00      	cmp	r3, #0
 8002044:	d040      	beq.n	80020c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	2b01      	cmp	r3, #1
 800204c:	d107      	bne.n	800205e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800204e:	4b47      	ldr	r3, [pc, #284]	@ (800216c <HAL_RCC_ClockConfig+0x1c4>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d115      	bne.n	8002086 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e07f      	b.n	800215e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	2b02      	cmp	r3, #2
 8002064:	d107      	bne.n	8002076 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002066:	4b41      	ldr	r3, [pc, #260]	@ (800216c <HAL_RCC_ClockConfig+0x1c4>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d109      	bne.n	8002086 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e073      	b.n	800215e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002076:	4b3d      	ldr	r3, [pc, #244]	@ (800216c <HAL_RCC_ClockConfig+0x1c4>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0302 	and.w	r3, r3, #2
 800207e:	2b00      	cmp	r3, #0
 8002080:	d101      	bne.n	8002086 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e06b      	b.n	800215e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002086:	4b39      	ldr	r3, [pc, #228]	@ (800216c <HAL_RCC_ClockConfig+0x1c4>)
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	f023 0203 	bic.w	r2, r3, #3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	4936      	ldr	r1, [pc, #216]	@ (800216c <HAL_RCC_ClockConfig+0x1c4>)
 8002094:	4313      	orrs	r3, r2
 8002096:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002098:	f7ff f97c 	bl	8001394 <HAL_GetTick>
 800209c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800209e:	e00a      	b.n	80020b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020a0:	f7ff f978 	bl	8001394 <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d901      	bls.n	80020b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e053      	b.n	800215e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020b6:	4b2d      	ldr	r3, [pc, #180]	@ (800216c <HAL_RCC_ClockConfig+0x1c4>)
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f003 020c 	and.w	r2, r3, #12
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d1eb      	bne.n	80020a0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020c8:	4b27      	ldr	r3, [pc, #156]	@ (8002168 <HAL_RCC_ClockConfig+0x1c0>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0307 	and.w	r3, r3, #7
 80020d0:	683a      	ldr	r2, [r7, #0]
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d210      	bcs.n	80020f8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020d6:	4b24      	ldr	r3, [pc, #144]	@ (8002168 <HAL_RCC_ClockConfig+0x1c0>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f023 0207 	bic.w	r2, r3, #7
 80020de:	4922      	ldr	r1, [pc, #136]	@ (8002168 <HAL_RCC_ClockConfig+0x1c0>)
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020e6:	4b20      	ldr	r3, [pc, #128]	@ (8002168 <HAL_RCC_ClockConfig+0x1c0>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0307 	and.w	r3, r3, #7
 80020ee:	683a      	ldr	r2, [r7, #0]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d001      	beq.n	80020f8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e032      	b.n	800215e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0304 	and.w	r3, r3, #4
 8002100:	2b00      	cmp	r3, #0
 8002102:	d008      	beq.n	8002116 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002104:	4b19      	ldr	r3, [pc, #100]	@ (800216c <HAL_RCC_ClockConfig+0x1c4>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	4916      	ldr	r1, [pc, #88]	@ (800216c <HAL_RCC_ClockConfig+0x1c4>)
 8002112:	4313      	orrs	r3, r2
 8002114:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0308 	and.w	r3, r3, #8
 800211e:	2b00      	cmp	r3, #0
 8002120:	d009      	beq.n	8002136 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002122:	4b12      	ldr	r3, [pc, #72]	@ (800216c <HAL_RCC_ClockConfig+0x1c4>)
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	691b      	ldr	r3, [r3, #16]
 800212e:	00db      	lsls	r3, r3, #3
 8002130:	490e      	ldr	r1, [pc, #56]	@ (800216c <HAL_RCC_ClockConfig+0x1c4>)
 8002132:	4313      	orrs	r3, r2
 8002134:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002136:	f000 f821 	bl	800217c <HAL_RCC_GetSysClockFreq>
 800213a:	4602      	mov	r2, r0
 800213c:	4b0b      	ldr	r3, [pc, #44]	@ (800216c <HAL_RCC_ClockConfig+0x1c4>)
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	091b      	lsrs	r3, r3, #4
 8002142:	f003 030f 	and.w	r3, r3, #15
 8002146:	490a      	ldr	r1, [pc, #40]	@ (8002170 <HAL_RCC_ClockConfig+0x1c8>)
 8002148:	5ccb      	ldrb	r3, [r1, r3]
 800214a:	fa22 f303 	lsr.w	r3, r2, r3
 800214e:	4a09      	ldr	r2, [pc, #36]	@ (8002174 <HAL_RCC_ClockConfig+0x1cc>)
 8002150:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002152:	4b09      	ldr	r3, [pc, #36]	@ (8002178 <HAL_RCC_ClockConfig+0x1d0>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4618      	mov	r0, r3
 8002158:	f7ff f8da 	bl	8001310 <HAL_InitTick>

  return HAL_OK;
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	3710      	adds	r7, #16
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	40022000 	.word	0x40022000
 800216c:	40021000 	.word	0x40021000
 8002170:	08004f38 	.word	0x08004f38
 8002174:	20000000 	.word	0x20000000
 8002178:	20000004 	.word	0x20000004

0800217c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800217c:	b480      	push	{r7}
 800217e:	b087      	sub	sp, #28
 8002180:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002182:	2300      	movs	r3, #0
 8002184:	60fb      	str	r3, [r7, #12]
 8002186:	2300      	movs	r3, #0
 8002188:	60bb      	str	r3, [r7, #8]
 800218a:	2300      	movs	r3, #0
 800218c:	617b      	str	r3, [r7, #20]
 800218e:	2300      	movs	r3, #0
 8002190:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002192:	2300      	movs	r3, #0
 8002194:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002196:	4b1e      	ldr	r3, [pc, #120]	@ (8002210 <HAL_RCC_GetSysClockFreq+0x94>)
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	f003 030c 	and.w	r3, r3, #12
 80021a2:	2b04      	cmp	r3, #4
 80021a4:	d002      	beq.n	80021ac <HAL_RCC_GetSysClockFreq+0x30>
 80021a6:	2b08      	cmp	r3, #8
 80021a8:	d003      	beq.n	80021b2 <HAL_RCC_GetSysClockFreq+0x36>
 80021aa:	e027      	b.n	80021fc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021ac:	4b19      	ldr	r3, [pc, #100]	@ (8002214 <HAL_RCC_GetSysClockFreq+0x98>)
 80021ae:	613b      	str	r3, [r7, #16]
      break;
 80021b0:	e027      	b.n	8002202 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	0c9b      	lsrs	r3, r3, #18
 80021b6:	f003 030f 	and.w	r3, r3, #15
 80021ba:	4a17      	ldr	r2, [pc, #92]	@ (8002218 <HAL_RCC_GetSysClockFreq+0x9c>)
 80021bc:	5cd3      	ldrb	r3, [r2, r3]
 80021be:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d010      	beq.n	80021ec <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80021ca:	4b11      	ldr	r3, [pc, #68]	@ (8002210 <HAL_RCC_GetSysClockFreq+0x94>)
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	0c5b      	lsrs	r3, r3, #17
 80021d0:	f003 0301 	and.w	r3, r3, #1
 80021d4:	4a11      	ldr	r2, [pc, #68]	@ (800221c <HAL_RCC_GetSysClockFreq+0xa0>)
 80021d6:	5cd3      	ldrb	r3, [r2, r3]
 80021d8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a0d      	ldr	r2, [pc, #52]	@ (8002214 <HAL_RCC_GetSysClockFreq+0x98>)
 80021de:	fb03 f202 	mul.w	r2, r3, r2
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80021e8:	617b      	str	r3, [r7, #20]
 80021ea:	e004      	b.n	80021f6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	4a0c      	ldr	r2, [pc, #48]	@ (8002220 <HAL_RCC_GetSysClockFreq+0xa4>)
 80021f0:	fb02 f303 	mul.w	r3, r2, r3
 80021f4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	613b      	str	r3, [r7, #16]
      break;
 80021fa:	e002      	b.n	8002202 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021fc:	4b05      	ldr	r3, [pc, #20]	@ (8002214 <HAL_RCC_GetSysClockFreq+0x98>)
 80021fe:	613b      	str	r3, [r7, #16]
      break;
 8002200:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002202:	693b      	ldr	r3, [r7, #16]
}
 8002204:	4618      	mov	r0, r3
 8002206:	371c      	adds	r7, #28
 8002208:	46bd      	mov	sp, r7
 800220a:	bc80      	pop	{r7}
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	40021000 	.word	0x40021000
 8002214:	007a1200 	.word	0x007a1200
 8002218:	08004f50 	.word	0x08004f50
 800221c:	08004f60 	.word	0x08004f60
 8002220:	003d0900 	.word	0x003d0900

08002224 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002228:	4b02      	ldr	r3, [pc, #8]	@ (8002234 <HAL_RCC_GetHCLKFreq+0x10>)
 800222a:	681b      	ldr	r3, [r3, #0]
}
 800222c:	4618      	mov	r0, r3
 800222e:	46bd      	mov	sp, r7
 8002230:	bc80      	pop	{r7}
 8002232:	4770      	bx	lr
 8002234:	20000000 	.word	0x20000000

08002238 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800223c:	f7ff fff2 	bl	8002224 <HAL_RCC_GetHCLKFreq>
 8002240:	4602      	mov	r2, r0
 8002242:	4b05      	ldr	r3, [pc, #20]	@ (8002258 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	0a1b      	lsrs	r3, r3, #8
 8002248:	f003 0307 	and.w	r3, r3, #7
 800224c:	4903      	ldr	r1, [pc, #12]	@ (800225c <HAL_RCC_GetPCLK1Freq+0x24>)
 800224e:	5ccb      	ldrb	r3, [r1, r3]
 8002250:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002254:	4618      	mov	r0, r3
 8002256:	bd80      	pop	{r7, pc}
 8002258:	40021000 	.word	0x40021000
 800225c:	08004f48 	.word	0x08004f48

08002260 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002264:	f7ff ffde 	bl	8002224 <HAL_RCC_GetHCLKFreq>
 8002268:	4602      	mov	r2, r0
 800226a:	4b05      	ldr	r3, [pc, #20]	@ (8002280 <HAL_RCC_GetPCLK2Freq+0x20>)
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	0adb      	lsrs	r3, r3, #11
 8002270:	f003 0307 	and.w	r3, r3, #7
 8002274:	4903      	ldr	r1, [pc, #12]	@ (8002284 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002276:	5ccb      	ldrb	r3, [r1, r3]
 8002278:	fa22 f303 	lsr.w	r3, r2, r3
}
 800227c:	4618      	mov	r0, r3
 800227e:	bd80      	pop	{r7, pc}
 8002280:	40021000 	.word	0x40021000
 8002284:	08004f48 	.word	0x08004f48

08002288 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002288:	b480      	push	{r7}
 800228a:	b085      	sub	sp, #20
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002290:	4b0a      	ldr	r3, [pc, #40]	@ (80022bc <RCC_Delay+0x34>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a0a      	ldr	r2, [pc, #40]	@ (80022c0 <RCC_Delay+0x38>)
 8002296:	fba2 2303 	umull	r2, r3, r2, r3
 800229a:	0a5b      	lsrs	r3, r3, #9
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	fb02 f303 	mul.w	r3, r2, r3
 80022a2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80022a4:	bf00      	nop
  }
  while (Delay --);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	1e5a      	subs	r2, r3, #1
 80022aa:	60fa      	str	r2, [r7, #12]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d1f9      	bne.n	80022a4 <RCC_Delay+0x1c>
}
 80022b0:	bf00      	nop
 80022b2:	bf00      	nop
 80022b4:	3714      	adds	r7, #20
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bc80      	pop	{r7}
 80022ba:	4770      	bx	lr
 80022bc:	20000000 	.word	0x20000000
 80022c0:	10624dd3 	.word	0x10624dd3

080022c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d101      	bne.n	80022d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e041      	b.n	800235a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d106      	bne.n	80022f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2200      	movs	r2, #0
 80022e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f7fe ff20 	bl	8001130 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2202      	movs	r2, #2
 80022f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	3304      	adds	r3, #4
 8002300:	4619      	mov	r1, r3
 8002302:	4610      	mov	r0, r2
 8002304:	f000 fb48 	bl	8002998 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2201      	movs	r2, #1
 800230c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2201      	movs	r2, #1
 8002314:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2201      	movs	r2, #1
 800231c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2201      	movs	r2, #1
 8002324:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2201      	movs	r2, #1
 800232c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2201      	movs	r2, #1
 8002334:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2201      	movs	r2, #1
 800233c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2201      	movs	r2, #1
 8002344:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2201      	movs	r2, #1
 800234c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2201      	movs	r2, #1
 8002354:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002358:	2300      	movs	r3, #0
}
 800235a:	4618      	mov	r0, r3
 800235c:	3708      	adds	r7, #8
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}

08002362 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002362:	b580      	push	{r7, lr}
 8002364:	b082      	sub	sp, #8
 8002366:	af00      	add	r7, sp, #0
 8002368:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d101      	bne.n	8002374 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e041      	b.n	80023f8 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800237a:	b2db      	uxtb	r3, r3
 800237c:	2b00      	cmp	r3, #0
 800237e:	d106      	bne.n	800238e <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2200      	movs	r2, #0
 8002384:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f000 f839 	bl	8002400 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2202      	movs	r2, #2
 8002392:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	3304      	adds	r3, #4
 800239e:	4619      	mov	r1, r3
 80023a0:	4610      	mov	r0, r2
 80023a2:	f000 faf9 	bl	8002998 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2201      	movs	r2, #1
 80023aa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2201      	movs	r2, #1
 80023b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2201      	movs	r2, #1
 80023ba:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2201      	movs	r2, #1
 80023c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2201      	movs	r2, #1
 80023ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2201      	movs	r2, #1
 80023d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2201      	movs	r2, #1
 80023da:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2201      	movs	r2, #1
 80023e2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2201      	movs	r2, #1
 80023ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2201      	movs	r2, #1
 80023f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80023f6:	2300      	movs	r3, #0
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3708      	adds	r7, #8
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}

08002400 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002408:	bf00      	nop
 800240a:	370c      	adds	r7, #12
 800240c:	46bd      	mov	sp, r7
 800240e:	bc80      	pop	{r7}
 8002410:	4770      	bx	lr

08002412 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002412:	b580      	push	{r7, lr}
 8002414:	b084      	sub	sp, #16
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	691b      	ldr	r3, [r3, #16]
 8002428:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	f003 0302 	and.w	r3, r3, #2
 8002430:	2b00      	cmp	r3, #0
 8002432:	d020      	beq.n	8002476 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	f003 0302 	and.w	r3, r3, #2
 800243a:	2b00      	cmp	r3, #0
 800243c:	d01b      	beq.n	8002476 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f06f 0202 	mvn.w	r2, #2
 8002446:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2201      	movs	r2, #1
 800244c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	699b      	ldr	r3, [r3, #24]
 8002454:	f003 0303 	and.w	r3, r3, #3
 8002458:	2b00      	cmp	r3, #0
 800245a:	d003      	beq.n	8002464 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f000 fa7f 	bl	8002960 <HAL_TIM_IC_CaptureCallback>
 8002462:	e005      	b.n	8002470 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f000 fa72 	bl	800294e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f000 fa81 	bl	8002972 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2200      	movs	r2, #0
 8002474:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	f003 0304 	and.w	r3, r3, #4
 800247c:	2b00      	cmp	r3, #0
 800247e:	d020      	beq.n	80024c2 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f003 0304 	and.w	r3, r3, #4
 8002486:	2b00      	cmp	r3, #0
 8002488:	d01b      	beq.n	80024c2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f06f 0204 	mvn.w	r2, #4
 8002492:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2202      	movs	r2, #2
 8002498:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	699b      	ldr	r3, [r3, #24]
 80024a0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d003      	beq.n	80024b0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f000 fa59 	bl	8002960 <HAL_TIM_IC_CaptureCallback>
 80024ae:	e005      	b.n	80024bc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f000 fa4c 	bl	800294e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f000 fa5b 	bl	8002972 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2200      	movs	r2, #0
 80024c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	f003 0308 	and.w	r3, r3, #8
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d020      	beq.n	800250e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	f003 0308 	and.w	r3, r3, #8
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d01b      	beq.n	800250e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f06f 0208 	mvn.w	r2, #8
 80024de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2204      	movs	r2, #4
 80024e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	69db      	ldr	r3, [r3, #28]
 80024ec:	f003 0303 	and.w	r3, r3, #3
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d003      	beq.n	80024fc <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f000 fa33 	bl	8002960 <HAL_TIM_IC_CaptureCallback>
 80024fa:	e005      	b.n	8002508 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f000 fa26 	bl	800294e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f000 fa35 	bl	8002972 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2200      	movs	r2, #0
 800250c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	f003 0310 	and.w	r3, r3, #16
 8002514:	2b00      	cmp	r3, #0
 8002516:	d020      	beq.n	800255a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f003 0310 	and.w	r3, r3, #16
 800251e:	2b00      	cmp	r3, #0
 8002520:	d01b      	beq.n	800255a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f06f 0210 	mvn.w	r2, #16
 800252a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2208      	movs	r2, #8
 8002530:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	69db      	ldr	r3, [r3, #28]
 8002538:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800253c:	2b00      	cmp	r3, #0
 800253e:	d003      	beq.n	8002548 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f000 fa0d 	bl	8002960 <HAL_TIM_IC_CaptureCallback>
 8002546:	e005      	b.n	8002554 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f000 fa00 	bl	800294e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f000 fa0f 	bl	8002972 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	f003 0301 	and.w	r3, r3, #1
 8002560:	2b00      	cmp	r3, #0
 8002562:	d00c      	beq.n	800257e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f003 0301 	and.w	r3, r3, #1
 800256a:	2b00      	cmp	r3, #0
 800256c:	d007      	beq.n	800257e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f06f 0201 	mvn.w	r2, #1
 8002576:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f000 f9df 	bl	800293c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002584:	2b00      	cmp	r3, #0
 8002586:	d00c      	beq.n	80025a2 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800258e:	2b00      	cmp	r3, #0
 8002590:	d007      	beq.n	80025a2 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800259a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	f000 fd06 	bl	8002fae <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d00c      	beq.n	80025c6 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d007      	beq.n	80025c6 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80025be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f000 f9df 	bl	8002984 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	f003 0320 	and.w	r3, r3, #32
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d00c      	beq.n	80025ea <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	f003 0320 	and.w	r3, r3, #32
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d007      	beq.n	80025ea <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f06f 0220 	mvn.w	r2, #32
 80025e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	f000 fcd9 	bl	8002f9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80025ea:	bf00      	nop
 80025ec:	3710      	adds	r7, #16
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}

080025f2 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80025f2:	b580      	push	{r7, lr}
 80025f4:	b086      	sub	sp, #24
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	60f8      	str	r0, [r7, #12]
 80025fa:	60b9      	str	r1, [r7, #8]
 80025fc:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025fe:	2300      	movs	r3, #0
 8002600:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002608:	2b01      	cmp	r3, #1
 800260a:	d101      	bne.n	8002610 <HAL_TIM_IC_ConfigChannel+0x1e>
 800260c:	2302      	movs	r3, #2
 800260e:	e088      	b.n	8002722 <HAL_TIM_IC_ConfigChannel+0x130>
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2201      	movs	r2, #1
 8002614:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d11b      	bne.n	8002656 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800262e:	f000 fab3 	bl	8002b98 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	699a      	ldr	r2, [r3, #24]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f022 020c 	bic.w	r2, r2, #12
 8002640:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	6999      	ldr	r1, [r3, #24]
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	689a      	ldr	r2, [r3, #8]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	430a      	orrs	r2, r1
 8002652:	619a      	str	r2, [r3, #24]
 8002654:	e060      	b.n	8002718 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2b04      	cmp	r3, #4
 800265a:	d11c      	bne.n	8002696 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800266c:	f000 fb1c 	bl	8002ca8 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	699a      	ldr	r2, [r3, #24]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800267e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	6999      	ldr	r1, [r3, #24]
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	021a      	lsls	r2, r3, #8
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	430a      	orrs	r2, r1
 8002692:	619a      	str	r2, [r3, #24]
 8002694:	e040      	b.n	8002718 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2b08      	cmp	r3, #8
 800269a:	d11b      	bne.n	80026d4 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80026ac:	f000 fb67 	bl	8002d7e <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	69da      	ldr	r2, [r3, #28]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f022 020c 	bic.w	r2, r2, #12
 80026be:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	69d9      	ldr	r1, [r3, #28]
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	689a      	ldr	r2, [r3, #8]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	430a      	orrs	r2, r1
 80026d0:	61da      	str	r2, [r3, #28]
 80026d2:	e021      	b.n	8002718 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2b0c      	cmp	r3, #12
 80026d8:	d11c      	bne.n	8002714 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80026ea:	f000 fb83 	bl	8002df4 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	69da      	ldr	r2, [r3, #28]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80026fc:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	69d9      	ldr	r1, [r3, #28]
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	021a      	lsls	r2, r3, #8
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	430a      	orrs	r2, r1
 8002710:	61da      	str	r2, [r3, #28]
 8002712:	e001      	b.n	8002718 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2200      	movs	r2, #0
 800271c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002720:	7dfb      	ldrb	r3, [r7, #23]
}
 8002722:	4618      	mov	r0, r3
 8002724:	3718      	adds	r7, #24
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}

0800272a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800272a:	b580      	push	{r7, lr}
 800272c:	b084      	sub	sp, #16
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
 8002732:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002734:	2300      	movs	r3, #0
 8002736:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800273e:	2b01      	cmp	r3, #1
 8002740:	d101      	bne.n	8002746 <HAL_TIM_ConfigClockSource+0x1c>
 8002742:	2302      	movs	r3, #2
 8002744:	e0b4      	b.n	80028b0 <HAL_TIM_ConfigClockSource+0x186>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2201      	movs	r2, #1
 800274a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2202      	movs	r2, #2
 8002752:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002764:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800276c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	68ba      	ldr	r2, [r7, #8]
 8002774:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800277e:	d03e      	beq.n	80027fe <HAL_TIM_ConfigClockSource+0xd4>
 8002780:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002784:	f200 8087 	bhi.w	8002896 <HAL_TIM_ConfigClockSource+0x16c>
 8002788:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800278c:	f000 8086 	beq.w	800289c <HAL_TIM_ConfigClockSource+0x172>
 8002790:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002794:	d87f      	bhi.n	8002896 <HAL_TIM_ConfigClockSource+0x16c>
 8002796:	2b70      	cmp	r3, #112	@ 0x70
 8002798:	d01a      	beq.n	80027d0 <HAL_TIM_ConfigClockSource+0xa6>
 800279a:	2b70      	cmp	r3, #112	@ 0x70
 800279c:	d87b      	bhi.n	8002896 <HAL_TIM_ConfigClockSource+0x16c>
 800279e:	2b60      	cmp	r3, #96	@ 0x60
 80027a0:	d050      	beq.n	8002844 <HAL_TIM_ConfigClockSource+0x11a>
 80027a2:	2b60      	cmp	r3, #96	@ 0x60
 80027a4:	d877      	bhi.n	8002896 <HAL_TIM_ConfigClockSource+0x16c>
 80027a6:	2b50      	cmp	r3, #80	@ 0x50
 80027a8:	d03c      	beq.n	8002824 <HAL_TIM_ConfigClockSource+0xfa>
 80027aa:	2b50      	cmp	r3, #80	@ 0x50
 80027ac:	d873      	bhi.n	8002896 <HAL_TIM_ConfigClockSource+0x16c>
 80027ae:	2b40      	cmp	r3, #64	@ 0x40
 80027b0:	d058      	beq.n	8002864 <HAL_TIM_ConfigClockSource+0x13a>
 80027b2:	2b40      	cmp	r3, #64	@ 0x40
 80027b4:	d86f      	bhi.n	8002896 <HAL_TIM_ConfigClockSource+0x16c>
 80027b6:	2b30      	cmp	r3, #48	@ 0x30
 80027b8:	d064      	beq.n	8002884 <HAL_TIM_ConfigClockSource+0x15a>
 80027ba:	2b30      	cmp	r3, #48	@ 0x30
 80027bc:	d86b      	bhi.n	8002896 <HAL_TIM_ConfigClockSource+0x16c>
 80027be:	2b20      	cmp	r3, #32
 80027c0:	d060      	beq.n	8002884 <HAL_TIM_ConfigClockSource+0x15a>
 80027c2:	2b20      	cmp	r3, #32
 80027c4:	d867      	bhi.n	8002896 <HAL_TIM_ConfigClockSource+0x16c>
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d05c      	beq.n	8002884 <HAL_TIM_ConfigClockSource+0x15a>
 80027ca:	2b10      	cmp	r3, #16
 80027cc:	d05a      	beq.n	8002884 <HAL_TIM_ConfigClockSource+0x15a>
 80027ce:	e062      	b.n	8002896 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80027e0:	f000 fb5e 	bl	8002ea0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80027f2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	68ba      	ldr	r2, [r7, #8]
 80027fa:	609a      	str	r2, [r3, #8]
      break;
 80027fc:	e04f      	b.n	800289e <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800280e:	f000 fb47 	bl	8002ea0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	689a      	ldr	r2, [r3, #8]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002820:	609a      	str	r2, [r3, #8]
      break;
 8002822:	e03c      	b.n	800289e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002830:	461a      	mov	r2, r3
 8002832:	f000 fa0b 	bl	8002c4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	2150      	movs	r1, #80	@ 0x50
 800283c:	4618      	mov	r0, r3
 800283e:	f000 fb15 	bl	8002e6c <TIM_ITRx_SetConfig>
      break;
 8002842:	e02c      	b.n	800289e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002850:	461a      	mov	r2, r3
 8002852:	f000 fa65 	bl	8002d20 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	2160      	movs	r1, #96	@ 0x60
 800285c:	4618      	mov	r0, r3
 800285e:	f000 fb05 	bl	8002e6c <TIM_ITRx_SetConfig>
      break;
 8002862:	e01c      	b.n	800289e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002870:	461a      	mov	r2, r3
 8002872:	f000 f9eb 	bl	8002c4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	2140      	movs	r1, #64	@ 0x40
 800287c:	4618      	mov	r0, r3
 800287e:	f000 faf5 	bl	8002e6c <TIM_ITRx_SetConfig>
      break;
 8002882:	e00c      	b.n	800289e <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4619      	mov	r1, r3
 800288e:	4610      	mov	r0, r2
 8002890:	f000 faec 	bl	8002e6c <TIM_ITRx_SetConfig>
      break;
 8002894:	e003      	b.n	800289e <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	73fb      	strb	r3, [r7, #15]
      break;
 800289a:	e000      	b.n	800289e <HAL_TIM_ConfigClockSource+0x174>
      break;
 800289c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2201      	movs	r2, #1
 80028a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80028ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3710      	adds	r7, #16
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d101      	bne.n	80028d0 <HAL_TIM_SlaveConfigSynchro+0x18>
 80028cc:	2302      	movs	r3, #2
 80028ce:	e031      	b.n	8002934 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2202      	movs	r2, #2
 80028dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80028e0:	6839      	ldr	r1, [r7, #0]
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f000 f8c6 	bl	8002a74 <TIM_SlaveTimer_SetConfig>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d009      	beq.n	8002902 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2201      	movs	r2, #1
 80028f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e018      	b.n	8002934 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	68da      	ldr	r2, [r3, #12]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002910:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	68da      	ldr	r2, [r3, #12]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002920:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2201      	movs	r2, #1
 8002926:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2200      	movs	r2, #0
 800292e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002932:	2300      	movs	r3, #0
}
 8002934:	4618      	mov	r0, r3
 8002936:	3708      	adds	r7, #8
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}

0800293c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002944:	bf00      	nop
 8002946:	370c      	adds	r7, #12
 8002948:	46bd      	mov	sp, r7
 800294a:	bc80      	pop	{r7}
 800294c:	4770      	bx	lr

0800294e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800294e:	b480      	push	{r7}
 8002950:	b083      	sub	sp, #12
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002956:	bf00      	nop
 8002958:	370c      	adds	r7, #12
 800295a:	46bd      	mov	sp, r7
 800295c:	bc80      	pop	{r7}
 800295e:	4770      	bx	lr

08002960 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002968:	bf00      	nop
 800296a:	370c      	adds	r7, #12
 800296c:	46bd      	mov	sp, r7
 800296e:	bc80      	pop	{r7}
 8002970:	4770      	bx	lr

08002972 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002972:	b480      	push	{r7}
 8002974:	b083      	sub	sp, #12
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800297a:	bf00      	nop
 800297c:	370c      	adds	r7, #12
 800297e:	46bd      	mov	sp, r7
 8002980:	bc80      	pop	{r7}
 8002982:	4770      	bx	lr

08002984 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800298c:	bf00      	nop
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	bc80      	pop	{r7}
 8002994:	4770      	bx	lr
	...

08002998 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002998:	b480      	push	{r7}
 800299a:	b085      	sub	sp, #20
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	4a2f      	ldr	r2, [pc, #188]	@ (8002a68 <TIM_Base_SetConfig+0xd0>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d00b      	beq.n	80029c8 <TIM_Base_SetConfig+0x30>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029b6:	d007      	beq.n	80029c8 <TIM_Base_SetConfig+0x30>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	4a2c      	ldr	r2, [pc, #176]	@ (8002a6c <TIM_Base_SetConfig+0xd4>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d003      	beq.n	80029c8 <TIM_Base_SetConfig+0x30>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	4a2b      	ldr	r2, [pc, #172]	@ (8002a70 <TIM_Base_SetConfig+0xd8>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d108      	bne.n	80029da <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	68fa      	ldr	r2, [r7, #12]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4a22      	ldr	r2, [pc, #136]	@ (8002a68 <TIM_Base_SetConfig+0xd0>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d00b      	beq.n	80029fa <TIM_Base_SetConfig+0x62>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029e8:	d007      	beq.n	80029fa <TIM_Base_SetConfig+0x62>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a1f      	ldr	r2, [pc, #124]	@ (8002a6c <TIM_Base_SetConfig+0xd4>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d003      	beq.n	80029fa <TIM_Base_SetConfig+0x62>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a1e      	ldr	r2, [pc, #120]	@ (8002a70 <TIM_Base_SetConfig+0xd8>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d108      	bne.n	8002a0c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	68db      	ldr	r3, [r3, #12]
 8002a06:	68fa      	ldr	r2, [r7, #12]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	695b      	ldr	r3, [r3, #20]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	68fa      	ldr	r2, [r7, #12]
 8002a1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	689a      	ldr	r2, [r3, #8]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	4a0d      	ldr	r2, [pc, #52]	@ (8002a68 <TIM_Base_SetConfig+0xd0>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d103      	bne.n	8002a40 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	691a      	ldr	r2, [r3, #16]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2201      	movs	r2, #1
 8002a44:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	691b      	ldr	r3, [r3, #16]
 8002a4a:	f003 0301 	and.w	r3, r3, #1
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d005      	beq.n	8002a5e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	f023 0201 	bic.w	r2, r3, #1
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	611a      	str	r2, [r3, #16]
  }
}
 8002a5e:	bf00      	nop
 8002a60:	3714      	adds	r7, #20
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bc80      	pop	{r7}
 8002a66:	4770      	bx	lr
 8002a68:	40012c00 	.word	0x40012c00
 8002a6c:	40000400 	.word	0x40000400
 8002a70:	40000800 	.word	0x40000800

08002a74 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b086      	sub	sp, #24
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a90:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	693a      	ldr	r2, [r7, #16]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	f023 0307 	bic.w	r3, r3, #7
 8002aa2:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	693a      	ldr	r2, [r7, #16]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	693a      	ldr	r2, [r7, #16]
 8002ab4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	2b70      	cmp	r3, #112	@ 0x70
 8002abc:	d01a      	beq.n	8002af4 <TIM_SlaveTimer_SetConfig+0x80>
 8002abe:	2b70      	cmp	r3, #112	@ 0x70
 8002ac0:	d860      	bhi.n	8002b84 <TIM_SlaveTimer_SetConfig+0x110>
 8002ac2:	2b60      	cmp	r3, #96	@ 0x60
 8002ac4:	d054      	beq.n	8002b70 <TIM_SlaveTimer_SetConfig+0xfc>
 8002ac6:	2b60      	cmp	r3, #96	@ 0x60
 8002ac8:	d85c      	bhi.n	8002b84 <TIM_SlaveTimer_SetConfig+0x110>
 8002aca:	2b50      	cmp	r3, #80	@ 0x50
 8002acc:	d046      	beq.n	8002b5c <TIM_SlaveTimer_SetConfig+0xe8>
 8002ace:	2b50      	cmp	r3, #80	@ 0x50
 8002ad0:	d858      	bhi.n	8002b84 <TIM_SlaveTimer_SetConfig+0x110>
 8002ad2:	2b40      	cmp	r3, #64	@ 0x40
 8002ad4:	d019      	beq.n	8002b0a <TIM_SlaveTimer_SetConfig+0x96>
 8002ad6:	2b40      	cmp	r3, #64	@ 0x40
 8002ad8:	d854      	bhi.n	8002b84 <TIM_SlaveTimer_SetConfig+0x110>
 8002ada:	2b30      	cmp	r3, #48	@ 0x30
 8002adc:	d055      	beq.n	8002b8a <TIM_SlaveTimer_SetConfig+0x116>
 8002ade:	2b30      	cmp	r3, #48	@ 0x30
 8002ae0:	d850      	bhi.n	8002b84 <TIM_SlaveTimer_SetConfig+0x110>
 8002ae2:	2b20      	cmp	r3, #32
 8002ae4:	d051      	beq.n	8002b8a <TIM_SlaveTimer_SetConfig+0x116>
 8002ae6:	2b20      	cmp	r3, #32
 8002ae8:	d84c      	bhi.n	8002b84 <TIM_SlaveTimer_SetConfig+0x110>
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d04d      	beq.n	8002b8a <TIM_SlaveTimer_SetConfig+0x116>
 8002aee:	2b10      	cmp	r3, #16
 8002af0:	d04b      	beq.n	8002b8a <TIM_SlaveTimer_SetConfig+0x116>
 8002af2:	e047      	b.n	8002b84 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8002b04:	f000 f9cc 	bl	8002ea0 <TIM_ETR_SetConfig>
      break;
 8002b08:	e040      	b.n	8002b8c <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	2b05      	cmp	r3, #5
 8002b10:	d101      	bne.n	8002b16 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e03b      	b.n	8002b8e <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	6a1b      	ldr	r3, [r3, #32]
 8002b1c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	6a1a      	ldr	r2, [r3, #32]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f022 0201 	bic.w	r2, r2, #1
 8002b2c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	699b      	ldr	r3, [r3, #24]
 8002b34:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002b3c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	011b      	lsls	r3, r3, #4
 8002b44:	68ba      	ldr	r2, [r7, #8]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	68ba      	ldr	r2, [r7, #8]
 8002b50:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	68fa      	ldr	r2, [r7, #12]
 8002b58:	621a      	str	r2, [r3, #32]
      break;
 8002b5a:	e017      	b.n	8002b8c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b68:	461a      	mov	r2, r3
 8002b6a:	f000 f86f 	bl	8002c4c <TIM_TI1_ConfigInputStage>
      break;
 8002b6e:	e00d      	b.n	8002b8c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	f000 f8cf 	bl	8002d20 <TIM_TI2_ConfigInputStage>
      break;
 8002b82:	e003      	b.n	8002b8c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	75fb      	strb	r3, [r7, #23]
      break;
 8002b88:	e000      	b.n	8002b8c <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8002b8a:	bf00      	nop
  }

  return status;
 8002b8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3718      	adds	r7, #24
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
	...

08002b98 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b087      	sub	sp, #28
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	60b9      	str	r1, [r7, #8]
 8002ba2:	607a      	str	r2, [r7, #4]
 8002ba4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6a1b      	ldr	r3, [r3, #32]
 8002baa:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	6a1b      	ldr	r3, [r3, #32]
 8002bb0:	f023 0201 	bic.w	r2, r3, #1
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	699b      	ldr	r3, [r3, #24]
 8002bbc:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	4a1f      	ldr	r2, [pc, #124]	@ (8002c40 <TIM_TI1_SetConfig+0xa8>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d00b      	beq.n	8002bde <TIM_TI1_SetConfig+0x46>
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bcc:	d007      	beq.n	8002bde <TIM_TI1_SetConfig+0x46>
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	4a1c      	ldr	r2, [pc, #112]	@ (8002c44 <TIM_TI1_SetConfig+0xac>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d003      	beq.n	8002bde <TIM_TI1_SetConfig+0x46>
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	4a1b      	ldr	r2, [pc, #108]	@ (8002c48 <TIM_TI1_SetConfig+0xb0>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d101      	bne.n	8002be2 <TIM_TI1_SetConfig+0x4a>
 8002bde:	2301      	movs	r3, #1
 8002be0:	e000      	b.n	8002be4 <TIM_TI1_SetConfig+0x4c>
 8002be2:	2300      	movs	r3, #0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d008      	beq.n	8002bfa <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	f023 0303 	bic.w	r3, r3, #3
 8002bee:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002bf0:	697a      	ldr	r2, [r7, #20]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	617b      	str	r3, [r7, #20]
 8002bf8:	e003      	b.n	8002c02 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	f043 0301 	orr.w	r3, r3, #1
 8002c00:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002c08:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	011b      	lsls	r3, r3, #4
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	697a      	ldr	r2, [r7, #20]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	f023 030a 	bic.w	r3, r3, #10
 8002c1c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	f003 030a 	and.w	r3, r3, #10
 8002c24:	693a      	ldr	r2, [r7, #16]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	697a      	ldr	r2, [r7, #20]
 8002c2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	693a      	ldr	r2, [r7, #16]
 8002c34:	621a      	str	r2, [r3, #32]
}
 8002c36:	bf00      	nop
 8002c38:	371c      	adds	r7, #28
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bc80      	pop	{r7}
 8002c3e:	4770      	bx	lr
 8002c40:	40012c00 	.word	0x40012c00
 8002c44:	40000400 	.word	0x40000400
 8002c48:	40000800 	.word	0x40000800

08002c4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b087      	sub	sp, #28
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	60b9      	str	r1, [r7, #8]
 8002c56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6a1b      	ldr	r3, [r3, #32]
 8002c5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6a1b      	ldr	r3, [r3, #32]
 8002c62:	f023 0201 	bic.w	r2, r3, #1
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	699b      	ldr	r3, [r3, #24]
 8002c6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002c76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	011b      	lsls	r3, r3, #4
 8002c7c:	693a      	ldr	r2, [r7, #16]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	f023 030a 	bic.w	r3, r3, #10
 8002c88:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002c8a:	697a      	ldr	r2, [r7, #20]
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	693a      	ldr	r2, [r7, #16]
 8002c96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	697a      	ldr	r2, [r7, #20]
 8002c9c:	621a      	str	r2, [r3, #32]
}
 8002c9e:	bf00      	nop
 8002ca0:	371c      	adds	r7, #28
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bc80      	pop	{r7}
 8002ca6:	4770      	bx	lr

08002ca8 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b087      	sub	sp, #28
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	60f8      	str	r0, [r7, #12]
 8002cb0:	60b9      	str	r1, [r7, #8]
 8002cb2:	607a      	str	r2, [r7, #4]
 8002cb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6a1b      	ldr	r3, [r3, #32]
 8002cba:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6a1b      	ldr	r3, [r3, #32]
 8002cc0:	f023 0210 	bic.w	r2, r3, #16
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	699b      	ldr	r3, [r3, #24]
 8002ccc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002cd4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	021b      	lsls	r3, r3, #8
 8002cda:	693a      	ldr	r2, [r7, #16]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002ce6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	031b      	lsls	r3, r3, #12
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	693a      	ldr	r2, [r7, #16]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002cfa:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	011b      	lsls	r3, r3, #4
 8002d00:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8002d04:	697a      	ldr	r2, [r7, #20]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	693a      	ldr	r2, [r7, #16]
 8002d0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	697a      	ldr	r2, [r7, #20]
 8002d14:	621a      	str	r2, [r3, #32]
}
 8002d16:	bf00      	nop
 8002d18:	371c      	adds	r7, #28
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bc80      	pop	{r7}
 8002d1e:	4770      	bx	lr

08002d20 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b087      	sub	sp, #28
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	6a1b      	ldr	r3, [r3, #32]
 8002d30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	6a1b      	ldr	r3, [r3, #32]
 8002d36:	f023 0210 	bic.w	r2, r3, #16
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	699b      	ldr	r3, [r3, #24]
 8002d42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002d4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	031b      	lsls	r3, r3, #12
 8002d50:	693a      	ldr	r2, [r7, #16]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002d5c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	011b      	lsls	r3, r3, #4
 8002d62:	697a      	ldr	r2, [r7, #20]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	693a      	ldr	r2, [r7, #16]
 8002d6c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	697a      	ldr	r2, [r7, #20]
 8002d72:	621a      	str	r2, [r3, #32]
}
 8002d74:	bf00      	nop
 8002d76:	371c      	adds	r7, #28
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bc80      	pop	{r7}
 8002d7c:	4770      	bx	lr

08002d7e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002d7e:	b480      	push	{r7}
 8002d80:	b087      	sub	sp, #28
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	60f8      	str	r0, [r7, #12]
 8002d86:	60b9      	str	r1, [r7, #8]
 8002d88:	607a      	str	r2, [r7, #4]
 8002d8a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6a1b      	ldr	r3, [r3, #32]
 8002d90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6a1b      	ldr	r3, [r3, #32]
 8002d96:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	69db      	ldr	r3, [r3, #28]
 8002da2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	f023 0303 	bic.w	r3, r3, #3
 8002daa:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8002dac:	693a      	ldr	r2, [r7, #16]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002dba:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	011b      	lsls	r3, r3, #4
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	693a      	ldr	r2, [r7, #16]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002dce:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	021b      	lsls	r3, r3, #8
 8002dd4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002dd8:	697a      	ldr	r2, [r7, #20]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	693a      	ldr	r2, [r7, #16]
 8002de2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	697a      	ldr	r2, [r7, #20]
 8002de8:	621a      	str	r2, [r3, #32]
}
 8002dea:	bf00      	nop
 8002dec:	371c      	adds	r7, #28
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bc80      	pop	{r7}
 8002df2:	4770      	bx	lr

08002df4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b087      	sub	sp, #28
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	60f8      	str	r0, [r7, #12]
 8002dfc:	60b9      	str	r1, [r7, #8]
 8002dfe:	607a      	str	r2, [r7, #4]
 8002e00:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	6a1b      	ldr	r3, [r3, #32]
 8002e06:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	6a1b      	ldr	r3, [r3, #32]
 8002e0c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	69db      	ldr	r3, [r3, #28]
 8002e18:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e20:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	021b      	lsls	r3, r3, #8
 8002e26:	693a      	ldr	r2, [r7, #16]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002e32:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	031b      	lsls	r3, r3, #12
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	693a      	ldr	r2, [r7, #16]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002e46:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	031b      	lsls	r3, r3, #12
 8002e4c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e50:	697a      	ldr	r2, [r7, #20]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	693a      	ldr	r2, [r7, #16]
 8002e5a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	697a      	ldr	r2, [r7, #20]
 8002e60:	621a      	str	r2, [r3, #32]
}
 8002e62:	bf00      	nop
 8002e64:	371c      	adds	r7, #28
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bc80      	pop	{r7}
 8002e6a:	4770      	bx	lr

08002e6c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b085      	sub	sp, #20
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e82:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e84:	683a      	ldr	r2, [r7, #0]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	f043 0307 	orr.w	r3, r3, #7
 8002e8e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	68fa      	ldr	r2, [r7, #12]
 8002e94:	609a      	str	r2, [r3, #8]
}
 8002e96:	bf00      	nop
 8002e98:	3714      	adds	r7, #20
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bc80      	pop	{r7}
 8002e9e:	4770      	bx	lr

08002ea0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b087      	sub	sp, #28
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	60b9      	str	r1, [r7, #8]
 8002eaa:	607a      	str	r2, [r7, #4]
 8002eac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002eba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	021a      	lsls	r2, r3, #8
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	431a      	orrs	r2, r3
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	697a      	ldr	r2, [r7, #20]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	697a      	ldr	r2, [r7, #20]
 8002ed2:	609a      	str	r2, [r3, #8]
}
 8002ed4:	bf00      	nop
 8002ed6:	371c      	adds	r7, #28
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bc80      	pop	{r7}
 8002edc:	4770      	bx	lr
	...

08002ee0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b085      	sub	sp, #20
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d101      	bne.n	8002ef8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ef4:	2302      	movs	r3, #2
 8002ef6:	e046      	b.n	8002f86 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2202      	movs	r2, #2
 8002f04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	68fa      	ldr	r2, [r7, #12]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	68fa      	ldr	r2, [r7, #12]
 8002f30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a16      	ldr	r2, [pc, #88]	@ (8002f90 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d00e      	beq.n	8002f5a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f44:	d009      	beq.n	8002f5a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a12      	ldr	r2, [pc, #72]	@ (8002f94 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d004      	beq.n	8002f5a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a10      	ldr	r2, [pc, #64]	@ (8002f98 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d10c      	bne.n	8002f74 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002f60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	68ba      	ldr	r2, [r7, #8]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	68ba      	ldr	r2, [r7, #8]
 8002f72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002f84:	2300      	movs	r3, #0
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3714      	adds	r7, #20
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bc80      	pop	{r7}
 8002f8e:	4770      	bx	lr
 8002f90:	40012c00 	.word	0x40012c00
 8002f94:	40000400 	.word	0x40000400
 8002f98:	40000800 	.word	0x40000800

08002f9c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002fa4:	bf00      	nop
 8002fa6:	370c      	adds	r7, #12
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bc80      	pop	{r7}
 8002fac:	4770      	bx	lr

08002fae <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002fae:	b480      	push	{r7}
 8002fb0:	b083      	sub	sp, #12
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002fb6:	bf00      	nop
 8002fb8:	370c      	adds	r7, #12
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bc80      	pop	{r7}
 8002fbe:	4770      	bx	lr

08002fc0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b082      	sub	sp, #8
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d101      	bne.n	8002fd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e042      	b.n	8003058 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d106      	bne.n	8002fec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f7fe f910 	bl	800120c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2224      	movs	r2, #36	@ 0x24
 8002ff0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	68da      	ldr	r2, [r3, #12]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003002:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f000 fcff 	bl	8003a08 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	691a      	ldr	r2, [r3, #16]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003018:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	695a      	ldr	r2, [r3, #20]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003028:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	68da      	ldr	r2, [r3, #12]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003038:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2220      	movs	r2, #32
 8003044:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2220      	movs	r2, #32
 800304c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003056:	2300      	movs	r3, #0
}
 8003058:	4618      	mov	r0, r3
 800305a:	3708      	adds	r7, #8
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}

08003060 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003060:	b480      	push	{r7}
 8003062:	b085      	sub	sp, #20
 8003064:	af00      	add	r7, sp, #0
 8003066:	60f8      	str	r0, [r7, #12]
 8003068:	60b9      	str	r1, [r7, #8]
 800306a:	4613      	mov	r3, r2
 800306c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003074:	b2db      	uxtb	r3, r3
 8003076:	2b20      	cmp	r3, #32
 8003078:	d121      	bne.n	80030be <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d002      	beq.n	8003086 <HAL_UART_Transmit_IT+0x26>
 8003080:	88fb      	ldrh	r3, [r7, #6]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d101      	bne.n	800308a <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e01a      	b.n	80030c0 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	68ba      	ldr	r2, [r7, #8]
 800308e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	88fa      	ldrh	r2, [r7, #6]
 8003094:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	88fa      	ldrh	r2, [r7, #6]
 800309a:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2200      	movs	r2, #0
 80030a0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2221      	movs	r2, #33	@ 0x21
 80030a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	68da      	ldr	r2, [r3, #12]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80030b8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80030ba:	2300      	movs	r3, #0
 80030bc:	e000      	b.n	80030c0 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80030be:	2302      	movs	r3, #2
  }
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3714      	adds	r7, #20
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bc80      	pop	{r7}
 80030c8:	4770      	bx	lr

080030ca <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80030ca:	b580      	push	{r7, lr}
 80030cc:	b084      	sub	sp, #16
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	60f8      	str	r0, [r7, #12]
 80030d2:	60b9      	str	r1, [r7, #8]
 80030d4:	4613      	mov	r3, r2
 80030d6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	2b20      	cmp	r3, #32
 80030e2:	d112      	bne.n	800310a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d002      	beq.n	80030f0 <HAL_UART_Receive_IT+0x26>
 80030ea:	88fb      	ldrh	r3, [r7, #6]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d101      	bne.n	80030f4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e00b      	b.n	800310c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2200      	movs	r2, #0
 80030f8:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80030fa:	88fb      	ldrh	r3, [r7, #6]
 80030fc:	461a      	mov	r2, r3
 80030fe:	68b9      	ldr	r1, [r7, #8]
 8003100:	68f8      	ldr	r0, [r7, #12]
 8003102:	f000 faad 	bl	8003660 <UART_Start_Receive_IT>
 8003106:	4603      	mov	r3, r0
 8003108:	e000      	b.n	800310c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800310a:	2302      	movs	r3, #2
  }
}
 800310c:	4618      	mov	r0, r3
 800310e:	3710      	adds	r7, #16
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}

08003114 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b0ba      	sub	sp, #232	@ 0xe8
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	695b      	ldr	r3, [r3, #20]
 8003136:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800313a:	2300      	movs	r3, #0
 800313c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003140:	2300      	movs	r3, #0
 8003142:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003146:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800314a:	f003 030f 	and.w	r3, r3, #15
 800314e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003152:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003156:	2b00      	cmp	r3, #0
 8003158:	d10f      	bne.n	800317a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800315a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800315e:	f003 0320 	and.w	r3, r3, #32
 8003162:	2b00      	cmp	r3, #0
 8003164:	d009      	beq.n	800317a <HAL_UART_IRQHandler+0x66>
 8003166:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800316a:	f003 0320 	and.w	r3, r3, #32
 800316e:	2b00      	cmp	r3, #0
 8003170:	d003      	beq.n	800317a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f000 fb8a 	bl	800388c <UART_Receive_IT>
      return;
 8003178:	e25b      	b.n	8003632 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800317a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800317e:	2b00      	cmp	r3, #0
 8003180:	f000 80de 	beq.w	8003340 <HAL_UART_IRQHandler+0x22c>
 8003184:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003188:	f003 0301 	and.w	r3, r3, #1
 800318c:	2b00      	cmp	r3, #0
 800318e:	d106      	bne.n	800319e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003190:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003194:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003198:	2b00      	cmp	r3, #0
 800319a:	f000 80d1 	beq.w	8003340 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800319e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031a2:	f003 0301 	and.w	r3, r3, #1
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d00b      	beq.n	80031c2 <HAL_UART_IRQHandler+0xae>
 80031aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80031ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d005      	beq.n	80031c2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031ba:	f043 0201 	orr.w	r2, r3, #1
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80031c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031c6:	f003 0304 	and.w	r3, r3, #4
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d00b      	beq.n	80031e6 <HAL_UART_IRQHandler+0xd2>
 80031ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80031d2:	f003 0301 	and.w	r3, r3, #1
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d005      	beq.n	80031e6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031de:	f043 0202 	orr.w	r2, r3, #2
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80031e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031ea:	f003 0302 	and.w	r3, r3, #2
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d00b      	beq.n	800320a <HAL_UART_IRQHandler+0xf6>
 80031f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80031f6:	f003 0301 	and.w	r3, r3, #1
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d005      	beq.n	800320a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003202:	f043 0204 	orr.w	r2, r3, #4
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800320a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800320e:	f003 0308 	and.w	r3, r3, #8
 8003212:	2b00      	cmp	r3, #0
 8003214:	d011      	beq.n	800323a <HAL_UART_IRQHandler+0x126>
 8003216:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800321a:	f003 0320 	and.w	r3, r3, #32
 800321e:	2b00      	cmp	r3, #0
 8003220:	d105      	bne.n	800322e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003222:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003226:	f003 0301 	and.w	r3, r3, #1
 800322a:	2b00      	cmp	r3, #0
 800322c:	d005      	beq.n	800323a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003232:	f043 0208 	orr.w	r2, r3, #8
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800323e:	2b00      	cmp	r3, #0
 8003240:	f000 81f2 	beq.w	8003628 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003244:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003248:	f003 0320 	and.w	r3, r3, #32
 800324c:	2b00      	cmp	r3, #0
 800324e:	d008      	beq.n	8003262 <HAL_UART_IRQHandler+0x14e>
 8003250:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003254:	f003 0320 	and.w	r3, r3, #32
 8003258:	2b00      	cmp	r3, #0
 800325a:	d002      	beq.n	8003262 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f000 fb15 	bl	800388c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	695b      	ldr	r3, [r3, #20]
 8003268:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800326c:	2b00      	cmp	r3, #0
 800326e:	bf14      	ite	ne
 8003270:	2301      	movne	r3, #1
 8003272:	2300      	moveq	r3, #0
 8003274:	b2db      	uxtb	r3, r3
 8003276:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800327e:	f003 0308 	and.w	r3, r3, #8
 8003282:	2b00      	cmp	r3, #0
 8003284:	d103      	bne.n	800328e <HAL_UART_IRQHandler+0x17a>
 8003286:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800328a:	2b00      	cmp	r3, #0
 800328c:	d04f      	beq.n	800332e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f000 fa1f 	bl	80036d2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	695b      	ldr	r3, [r3, #20]
 800329a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d041      	beq.n	8003326 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	3314      	adds	r3, #20
 80032a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80032b0:	e853 3f00 	ldrex	r3, [r3]
 80032b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80032b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80032bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80032c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	3314      	adds	r3, #20
 80032ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80032ce:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80032d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80032da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80032de:	e841 2300 	strex	r3, r2, [r1]
 80032e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80032e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d1d9      	bne.n	80032a2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d013      	beq.n	800331e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032fa:	4a7e      	ldr	r2, [pc, #504]	@ (80034f4 <HAL_UART_IRQHandler+0x3e0>)
 80032fc:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003302:	4618      	mov	r0, r3
 8003304:	f7fe f998 	bl	8001638 <HAL_DMA_Abort_IT>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d016      	beq.n	800333c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003312:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003318:	4610      	mov	r0, r2
 800331a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800331c:	e00e      	b.n	800333c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f000 f98a 	bl	8003638 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003324:	e00a      	b.n	800333c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f000 f986 	bl	8003638 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800332c:	e006      	b.n	800333c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 f982 	bl	8003638 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800333a:	e175      	b.n	8003628 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800333c:	bf00      	nop
    return;
 800333e:	e173      	b.n	8003628 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003344:	2b01      	cmp	r3, #1
 8003346:	f040 814f 	bne.w	80035e8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800334a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800334e:	f003 0310 	and.w	r3, r3, #16
 8003352:	2b00      	cmp	r3, #0
 8003354:	f000 8148 	beq.w	80035e8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003358:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800335c:	f003 0310 	and.w	r3, r3, #16
 8003360:	2b00      	cmp	r3, #0
 8003362:	f000 8141 	beq.w	80035e8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003366:	2300      	movs	r3, #0
 8003368:	60bb      	str	r3, [r7, #8]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	60bb      	str	r3, [r7, #8]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	60bb      	str	r3, [r7, #8]
 800337a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	695b      	ldr	r3, [r3, #20]
 8003382:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003386:	2b00      	cmp	r3, #0
 8003388:	f000 80b6 	beq.w	80034f8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003398:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800339c:	2b00      	cmp	r3, #0
 800339e:	f000 8145 	beq.w	800362c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80033a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80033aa:	429a      	cmp	r2, r3
 80033ac:	f080 813e 	bcs.w	800362c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80033b6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033bc:	699b      	ldr	r3, [r3, #24]
 80033be:	2b20      	cmp	r3, #32
 80033c0:	f000 8088 	beq.w	80034d4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	330c      	adds	r3, #12
 80033ca:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80033d2:	e853 3f00 	ldrex	r3, [r3]
 80033d6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80033da:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80033de:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80033e2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	330c      	adds	r3, #12
 80033ec:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80033f0:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80033f4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033f8:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80033fc:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003400:	e841 2300 	strex	r3, r2, [r1]
 8003404:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003408:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800340c:	2b00      	cmp	r3, #0
 800340e:	d1d9      	bne.n	80033c4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	3314      	adds	r3, #20
 8003416:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003418:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800341a:	e853 3f00 	ldrex	r3, [r3]
 800341e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003420:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003422:	f023 0301 	bic.w	r3, r3, #1
 8003426:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	3314      	adds	r3, #20
 8003430:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003434:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003438:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800343a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800343c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003440:	e841 2300 	strex	r3, r2, [r1]
 8003444:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003446:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003448:	2b00      	cmp	r3, #0
 800344a:	d1e1      	bne.n	8003410 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	3314      	adds	r3, #20
 8003452:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003454:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003456:	e853 3f00 	ldrex	r3, [r3]
 800345a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800345c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800345e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003462:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	3314      	adds	r3, #20
 800346c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003470:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003472:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003474:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003476:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003478:	e841 2300 	strex	r3, r2, [r1]
 800347c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800347e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003480:	2b00      	cmp	r3, #0
 8003482:	d1e3      	bne.n	800344c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2220      	movs	r2, #32
 8003488:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	330c      	adds	r3, #12
 8003498:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800349a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800349c:	e853 3f00 	ldrex	r3, [r3]
 80034a0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80034a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80034a4:	f023 0310 	bic.w	r3, r3, #16
 80034a8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	330c      	adds	r3, #12
 80034b2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80034b6:	65ba      	str	r2, [r7, #88]	@ 0x58
 80034b8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ba:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80034bc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80034be:	e841 2300 	strex	r3, r2, [r1]
 80034c2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80034c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d1e3      	bne.n	8003492 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034ce:	4618      	mov	r0, r3
 80034d0:	f7fe f877 	bl	80015c2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2202      	movs	r2, #2
 80034d8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	b29b      	uxth	r3, r3
 80034e8:	4619      	mov	r1, r3
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f000 f8ad 	bl	800364a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80034f0:	e09c      	b.n	800362c <HAL_UART_IRQHandler+0x518>
 80034f2:	bf00      	nop
 80034f4:	08003797 	.word	0x08003797
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003500:	b29b      	uxth	r3, r3
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800350c:	b29b      	uxth	r3, r3
 800350e:	2b00      	cmp	r3, #0
 8003510:	f000 808e 	beq.w	8003630 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003514:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003518:	2b00      	cmp	r3, #0
 800351a:	f000 8089 	beq.w	8003630 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	330c      	adds	r3, #12
 8003524:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003526:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003528:	e853 3f00 	ldrex	r3, [r3]
 800352c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800352e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003530:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003534:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	330c      	adds	r3, #12
 800353e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003542:	647a      	str	r2, [r7, #68]	@ 0x44
 8003544:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003546:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003548:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800354a:	e841 2300 	strex	r3, r2, [r1]
 800354e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003550:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003552:	2b00      	cmp	r3, #0
 8003554:	d1e3      	bne.n	800351e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	3314      	adds	r3, #20
 800355c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800355e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003560:	e853 3f00 	ldrex	r3, [r3]
 8003564:	623b      	str	r3, [r7, #32]
   return(result);
 8003566:	6a3b      	ldr	r3, [r7, #32]
 8003568:	f023 0301 	bic.w	r3, r3, #1
 800356c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	3314      	adds	r3, #20
 8003576:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800357a:	633a      	str	r2, [r7, #48]	@ 0x30
 800357c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800357e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003580:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003582:	e841 2300 	strex	r3, r2, [r1]
 8003586:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003588:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800358a:	2b00      	cmp	r3, #0
 800358c:	d1e3      	bne.n	8003556 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2220      	movs	r2, #32
 8003592:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	330c      	adds	r3, #12
 80035a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	e853 3f00 	ldrex	r3, [r3]
 80035aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f023 0310 	bic.w	r3, r3, #16
 80035b2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	330c      	adds	r3, #12
 80035bc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80035c0:	61fa      	str	r2, [r7, #28]
 80035c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035c4:	69b9      	ldr	r1, [r7, #24]
 80035c6:	69fa      	ldr	r2, [r7, #28]
 80035c8:	e841 2300 	strex	r3, r2, [r1]
 80035cc:	617b      	str	r3, [r7, #20]
   return(result);
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d1e3      	bne.n	800359c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2202      	movs	r2, #2
 80035d8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80035da:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80035de:	4619      	mov	r1, r3
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f000 f832 	bl	800364a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80035e6:	e023      	b.n	8003630 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80035e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d009      	beq.n	8003608 <HAL_UART_IRQHandler+0x4f4>
 80035f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d003      	beq.n	8003608 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f000 f8dc 	bl	80037be <UART_Transmit_IT>
    return;
 8003606:	e014      	b.n	8003632 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003608:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800360c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003610:	2b00      	cmp	r3, #0
 8003612:	d00e      	beq.n	8003632 <HAL_UART_IRQHandler+0x51e>
 8003614:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003618:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800361c:	2b00      	cmp	r3, #0
 800361e:	d008      	beq.n	8003632 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f000 f91b 	bl	800385c <UART_EndTransmit_IT>
    return;
 8003626:	e004      	b.n	8003632 <HAL_UART_IRQHandler+0x51e>
    return;
 8003628:	bf00      	nop
 800362a:	e002      	b.n	8003632 <HAL_UART_IRQHandler+0x51e>
      return;
 800362c:	bf00      	nop
 800362e:	e000      	b.n	8003632 <HAL_UART_IRQHandler+0x51e>
      return;
 8003630:	bf00      	nop
  }
}
 8003632:	37e8      	adds	r7, #232	@ 0xe8
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}

08003638 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003640:	bf00      	nop
 8003642:	370c      	adds	r7, #12
 8003644:	46bd      	mov	sp, r7
 8003646:	bc80      	pop	{r7}
 8003648:	4770      	bx	lr

0800364a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800364a:	b480      	push	{r7}
 800364c:	b083      	sub	sp, #12
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]
 8003652:	460b      	mov	r3, r1
 8003654:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003656:	bf00      	nop
 8003658:	370c      	adds	r7, #12
 800365a:	46bd      	mov	sp, r7
 800365c:	bc80      	pop	{r7}
 800365e:	4770      	bx	lr

08003660 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003660:	b480      	push	{r7}
 8003662:	b085      	sub	sp, #20
 8003664:	af00      	add	r7, sp, #0
 8003666:	60f8      	str	r0, [r7, #12]
 8003668:	60b9      	str	r1, [r7, #8]
 800366a:	4613      	mov	r3, r2
 800366c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	68ba      	ldr	r2, [r7, #8]
 8003672:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	88fa      	ldrh	r2, [r7, #6]
 8003678:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	88fa      	ldrh	r2, [r7, #6]
 800367e:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2200      	movs	r2, #0
 8003684:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2222      	movs	r2, #34	@ 0x22
 800368a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	691b      	ldr	r3, [r3, #16]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d007      	beq.n	80036a6 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	68da      	ldr	r2, [r3, #12]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80036a4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	695a      	ldr	r2, [r3, #20]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f042 0201 	orr.w	r2, r2, #1
 80036b4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	68da      	ldr	r2, [r3, #12]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f042 0220 	orr.w	r2, r2, #32
 80036c4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80036c6:	2300      	movs	r3, #0
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3714      	adds	r7, #20
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bc80      	pop	{r7}
 80036d0:	4770      	bx	lr

080036d2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80036d2:	b480      	push	{r7}
 80036d4:	b095      	sub	sp, #84	@ 0x54
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	330c      	adds	r3, #12
 80036e0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036e4:	e853 3f00 	ldrex	r3, [r3]
 80036e8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80036ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80036f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	330c      	adds	r3, #12
 80036f8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80036fa:	643a      	str	r2, [r7, #64]	@ 0x40
 80036fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036fe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003700:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003702:	e841 2300 	strex	r3, r2, [r1]
 8003706:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003708:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800370a:	2b00      	cmp	r3, #0
 800370c:	d1e5      	bne.n	80036da <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	3314      	adds	r3, #20
 8003714:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003716:	6a3b      	ldr	r3, [r7, #32]
 8003718:	e853 3f00 	ldrex	r3, [r3]
 800371c:	61fb      	str	r3, [r7, #28]
   return(result);
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	f023 0301 	bic.w	r3, r3, #1
 8003724:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	3314      	adds	r3, #20
 800372c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800372e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003730:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003732:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003734:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003736:	e841 2300 	strex	r3, r2, [r1]
 800373a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800373c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800373e:	2b00      	cmp	r3, #0
 8003740:	d1e5      	bne.n	800370e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003746:	2b01      	cmp	r3, #1
 8003748:	d119      	bne.n	800377e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	330c      	adds	r3, #12
 8003750:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	e853 3f00 	ldrex	r3, [r3]
 8003758:	60bb      	str	r3, [r7, #8]
   return(result);
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	f023 0310 	bic.w	r3, r3, #16
 8003760:	647b      	str	r3, [r7, #68]	@ 0x44
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	330c      	adds	r3, #12
 8003768:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800376a:	61ba      	str	r2, [r7, #24]
 800376c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800376e:	6979      	ldr	r1, [r7, #20]
 8003770:	69ba      	ldr	r2, [r7, #24]
 8003772:	e841 2300 	strex	r3, r2, [r1]
 8003776:	613b      	str	r3, [r7, #16]
   return(result);
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d1e5      	bne.n	800374a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2220      	movs	r2, #32
 8003782:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800378c:	bf00      	nop
 800378e:	3754      	adds	r7, #84	@ 0x54
 8003790:	46bd      	mov	sp, r7
 8003792:	bc80      	pop	{r7}
 8003794:	4770      	bx	lr

08003796 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003796:	b580      	push	{r7, lr}
 8003798:	b084      	sub	sp, #16
 800379a:	af00      	add	r7, sp, #0
 800379c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037a2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2200      	movs	r2, #0
 80037a8:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2200      	movs	r2, #0
 80037ae:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80037b0:	68f8      	ldr	r0, [r7, #12]
 80037b2:	f7ff ff41 	bl	8003638 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80037b6:	bf00      	nop
 80037b8:	3710      	adds	r7, #16
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}

080037be <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80037be:	b480      	push	{r7}
 80037c0:	b085      	sub	sp, #20
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	2b21      	cmp	r3, #33	@ 0x21
 80037d0:	d13e      	bne.n	8003850 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037da:	d114      	bne.n	8003806 <UART_Transmit_IT+0x48>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	691b      	ldr	r3, [r3, #16]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d110      	bne.n	8003806 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6a1b      	ldr	r3, [r3, #32]
 80037e8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	881b      	ldrh	r3, [r3, #0]
 80037ee:	461a      	mov	r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037f8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6a1b      	ldr	r3, [r3, #32]
 80037fe:	1c9a      	adds	r2, r3, #2
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	621a      	str	r2, [r3, #32]
 8003804:	e008      	b.n	8003818 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6a1b      	ldr	r3, [r3, #32]
 800380a:	1c59      	adds	r1, r3, #1
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	6211      	str	r1, [r2, #32]
 8003810:	781a      	ldrb	r2, [r3, #0]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800381c:	b29b      	uxth	r3, r3
 800381e:	3b01      	subs	r3, #1
 8003820:	b29b      	uxth	r3, r3
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	4619      	mov	r1, r3
 8003826:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003828:	2b00      	cmp	r3, #0
 800382a:	d10f      	bne.n	800384c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	68da      	ldr	r2, [r3, #12]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800383a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	68da      	ldr	r2, [r3, #12]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800384a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800384c:	2300      	movs	r3, #0
 800384e:	e000      	b.n	8003852 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003850:	2302      	movs	r3, #2
  }
}
 8003852:	4618      	mov	r0, r3
 8003854:	3714      	adds	r7, #20
 8003856:	46bd      	mov	sp, r7
 8003858:	bc80      	pop	{r7}
 800385a:	4770      	bx	lr

0800385c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b082      	sub	sp, #8
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	68da      	ldr	r2, [r3, #12]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003872:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2220      	movs	r2, #32
 8003878:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f7fc fe21 	bl	80004c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003882:	2300      	movs	r3, #0
}
 8003884:	4618      	mov	r0, r3
 8003886:	3708      	adds	r7, #8
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}

0800388c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b08c      	sub	sp, #48	@ 0x30
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800389a:	b2db      	uxtb	r3, r3
 800389c:	2b22      	cmp	r3, #34	@ 0x22
 800389e:	f040 80ae 	bne.w	80039fe <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038aa:	d117      	bne.n	80038dc <UART_Receive_IT+0x50>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	691b      	ldr	r3, [r3, #16]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d113      	bne.n	80038dc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80038b4:	2300      	movs	r3, #0
 80038b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038bc:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038ca:	b29a      	uxth	r2, r3
 80038cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038ce:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038d4:	1c9a      	adds	r2, r3, #2
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	629a      	str	r2, [r3, #40]	@ 0x28
 80038da:	e026      	b.n	800392a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80038e2:	2300      	movs	r3, #0
 80038e4:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038ee:	d007      	beq.n	8003900 <UART_Receive_IT+0x74>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d10a      	bne.n	800390e <UART_Receive_IT+0x82>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	691b      	ldr	r3, [r3, #16]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d106      	bne.n	800390e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	b2da      	uxtb	r2, r3
 8003908:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800390a:	701a      	strb	r2, [r3, #0]
 800390c:	e008      	b.n	8003920 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	b2db      	uxtb	r3, r3
 8003916:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800391a:	b2da      	uxtb	r2, r3
 800391c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800391e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003924:	1c5a      	adds	r2, r3, #1
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800392e:	b29b      	uxth	r3, r3
 8003930:	3b01      	subs	r3, #1
 8003932:	b29b      	uxth	r3, r3
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	4619      	mov	r1, r3
 8003938:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800393a:	2b00      	cmp	r3, #0
 800393c:	d15d      	bne.n	80039fa <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	68da      	ldr	r2, [r3, #12]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f022 0220 	bic.w	r2, r2, #32
 800394c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	68da      	ldr	r2, [r3, #12]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800395c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	695a      	ldr	r2, [r3, #20]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f022 0201 	bic.w	r2, r2, #1
 800396c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2220      	movs	r2, #32
 8003972:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003980:	2b01      	cmp	r3, #1
 8003982:	d135      	bne.n	80039f0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	330c      	adds	r3, #12
 8003990:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	e853 3f00 	ldrex	r3, [r3]
 8003998:	613b      	str	r3, [r7, #16]
   return(result);
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	f023 0310 	bic.w	r3, r3, #16
 80039a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	330c      	adds	r3, #12
 80039a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039aa:	623a      	str	r2, [r7, #32]
 80039ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ae:	69f9      	ldr	r1, [r7, #28]
 80039b0:	6a3a      	ldr	r2, [r7, #32]
 80039b2:	e841 2300 	strex	r3, r2, [r1]
 80039b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80039b8:	69bb      	ldr	r3, [r7, #24]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d1e5      	bne.n	800398a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0310 	and.w	r3, r3, #16
 80039c8:	2b10      	cmp	r3, #16
 80039ca:	d10a      	bne.n	80039e2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80039cc:	2300      	movs	r3, #0
 80039ce:	60fb      	str	r3, [r7, #12]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	60fb      	str	r3, [r7, #12]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	60fb      	str	r3, [r7, #12]
 80039e0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80039e6:	4619      	mov	r1, r3
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f7ff fe2e 	bl	800364a <HAL_UARTEx_RxEventCallback>
 80039ee:	e002      	b.n	80039f6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f7fc fd3b 	bl	800046c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80039f6:	2300      	movs	r3, #0
 80039f8:	e002      	b.n	8003a00 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80039fa:	2300      	movs	r3, #0
 80039fc:	e000      	b.n	8003a00 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80039fe:	2302      	movs	r3, #2
  }
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3730      	adds	r7, #48	@ 0x30
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}

08003a08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b084      	sub	sp, #16
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	691b      	ldr	r3, [r3, #16]
 8003a16:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	68da      	ldr	r2, [r3, #12]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	430a      	orrs	r2, r1
 8003a24:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	689a      	ldr	r2, [r3, #8]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	691b      	ldr	r3, [r3, #16]
 8003a2e:	431a      	orrs	r2, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	695b      	ldr	r3, [r3, #20]
 8003a34:	4313      	orrs	r3, r2
 8003a36:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003a42:	f023 030c 	bic.w	r3, r3, #12
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	6812      	ldr	r2, [r2, #0]
 8003a4a:	68b9      	ldr	r1, [r7, #8]
 8003a4c:	430b      	orrs	r3, r1
 8003a4e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	695b      	ldr	r3, [r3, #20]
 8003a56:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	699a      	ldr	r2, [r3, #24]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	430a      	orrs	r2, r1
 8003a64:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a2c      	ldr	r2, [pc, #176]	@ (8003b1c <UART_SetConfig+0x114>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d103      	bne.n	8003a78 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003a70:	f7fe fbf6 	bl	8002260 <HAL_RCC_GetPCLK2Freq>
 8003a74:	60f8      	str	r0, [r7, #12]
 8003a76:	e002      	b.n	8003a7e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003a78:	f7fe fbde 	bl	8002238 <HAL_RCC_GetPCLK1Freq>
 8003a7c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a7e:	68fa      	ldr	r2, [r7, #12]
 8003a80:	4613      	mov	r3, r2
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	4413      	add	r3, r2
 8003a86:	009a      	lsls	r2, r3, #2
 8003a88:	441a      	add	r2, r3
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a94:	4a22      	ldr	r2, [pc, #136]	@ (8003b20 <UART_SetConfig+0x118>)
 8003a96:	fba2 2303 	umull	r2, r3, r2, r3
 8003a9a:	095b      	lsrs	r3, r3, #5
 8003a9c:	0119      	lsls	r1, r3, #4
 8003a9e:	68fa      	ldr	r2, [r7, #12]
 8003aa0:	4613      	mov	r3, r2
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	4413      	add	r3, r2
 8003aa6:	009a      	lsls	r2, r3, #2
 8003aa8:	441a      	add	r2, r3
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ab4:	4b1a      	ldr	r3, [pc, #104]	@ (8003b20 <UART_SetConfig+0x118>)
 8003ab6:	fba3 0302 	umull	r0, r3, r3, r2
 8003aba:	095b      	lsrs	r3, r3, #5
 8003abc:	2064      	movs	r0, #100	@ 0x64
 8003abe:	fb00 f303 	mul.w	r3, r0, r3
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	011b      	lsls	r3, r3, #4
 8003ac6:	3332      	adds	r3, #50	@ 0x32
 8003ac8:	4a15      	ldr	r2, [pc, #84]	@ (8003b20 <UART_SetConfig+0x118>)
 8003aca:	fba2 2303 	umull	r2, r3, r2, r3
 8003ace:	095b      	lsrs	r3, r3, #5
 8003ad0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003ad4:	4419      	add	r1, r3
 8003ad6:	68fa      	ldr	r2, [r7, #12]
 8003ad8:	4613      	mov	r3, r2
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	4413      	add	r3, r2
 8003ade:	009a      	lsls	r2, r3, #2
 8003ae0:	441a      	add	r2, r3
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003aec:	4b0c      	ldr	r3, [pc, #48]	@ (8003b20 <UART_SetConfig+0x118>)
 8003aee:	fba3 0302 	umull	r0, r3, r3, r2
 8003af2:	095b      	lsrs	r3, r3, #5
 8003af4:	2064      	movs	r0, #100	@ 0x64
 8003af6:	fb00 f303 	mul.w	r3, r0, r3
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	011b      	lsls	r3, r3, #4
 8003afe:	3332      	adds	r3, #50	@ 0x32
 8003b00:	4a07      	ldr	r2, [pc, #28]	@ (8003b20 <UART_SetConfig+0x118>)
 8003b02:	fba2 2303 	umull	r2, r3, r2, r3
 8003b06:	095b      	lsrs	r3, r3, #5
 8003b08:	f003 020f 	and.w	r2, r3, #15
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	440a      	add	r2, r1
 8003b12:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003b14:	bf00      	nop
 8003b16:	3710      	adds	r7, #16
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	40013800 	.word	0x40013800
 8003b20:	51eb851f 	.word	0x51eb851f

08003b24 <atoi>:
 8003b24:	220a      	movs	r2, #10
 8003b26:	2100      	movs	r1, #0
 8003b28:	f000 b928 	b.w	8003d7c <strtol>

08003b2c <sbrk_aligned>:
 8003b2c:	b570      	push	{r4, r5, r6, lr}
 8003b2e:	4e0f      	ldr	r6, [pc, #60]	@ (8003b6c <sbrk_aligned+0x40>)
 8003b30:	460c      	mov	r4, r1
 8003b32:	6831      	ldr	r1, [r6, #0]
 8003b34:	4605      	mov	r5, r0
 8003b36:	b911      	cbnz	r1, 8003b3e <sbrk_aligned+0x12>
 8003b38:	f000 fab0 	bl	800409c <_sbrk_r>
 8003b3c:	6030      	str	r0, [r6, #0]
 8003b3e:	4621      	mov	r1, r4
 8003b40:	4628      	mov	r0, r5
 8003b42:	f000 faab 	bl	800409c <_sbrk_r>
 8003b46:	1c43      	adds	r3, r0, #1
 8003b48:	d103      	bne.n	8003b52 <sbrk_aligned+0x26>
 8003b4a:	f04f 34ff 	mov.w	r4, #4294967295
 8003b4e:	4620      	mov	r0, r4
 8003b50:	bd70      	pop	{r4, r5, r6, pc}
 8003b52:	1cc4      	adds	r4, r0, #3
 8003b54:	f024 0403 	bic.w	r4, r4, #3
 8003b58:	42a0      	cmp	r0, r4
 8003b5a:	d0f8      	beq.n	8003b4e <sbrk_aligned+0x22>
 8003b5c:	1a21      	subs	r1, r4, r0
 8003b5e:	4628      	mov	r0, r5
 8003b60:	f000 fa9c 	bl	800409c <_sbrk_r>
 8003b64:	3001      	adds	r0, #1
 8003b66:	d1f2      	bne.n	8003b4e <sbrk_aligned+0x22>
 8003b68:	e7ef      	b.n	8003b4a <sbrk_aligned+0x1e>
 8003b6a:	bf00      	nop
 8003b6c:	200007c8 	.word	0x200007c8

08003b70 <_malloc_r>:
 8003b70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b74:	1ccd      	adds	r5, r1, #3
 8003b76:	f025 0503 	bic.w	r5, r5, #3
 8003b7a:	3508      	adds	r5, #8
 8003b7c:	2d0c      	cmp	r5, #12
 8003b7e:	bf38      	it	cc
 8003b80:	250c      	movcc	r5, #12
 8003b82:	2d00      	cmp	r5, #0
 8003b84:	4606      	mov	r6, r0
 8003b86:	db01      	blt.n	8003b8c <_malloc_r+0x1c>
 8003b88:	42a9      	cmp	r1, r5
 8003b8a:	d904      	bls.n	8003b96 <_malloc_r+0x26>
 8003b8c:	230c      	movs	r3, #12
 8003b8e:	6033      	str	r3, [r6, #0]
 8003b90:	2000      	movs	r0, #0
 8003b92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b96:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003c6c <_malloc_r+0xfc>
 8003b9a:	f000 f869 	bl	8003c70 <__malloc_lock>
 8003b9e:	f8d8 3000 	ldr.w	r3, [r8]
 8003ba2:	461c      	mov	r4, r3
 8003ba4:	bb44      	cbnz	r4, 8003bf8 <_malloc_r+0x88>
 8003ba6:	4629      	mov	r1, r5
 8003ba8:	4630      	mov	r0, r6
 8003baa:	f7ff ffbf 	bl	8003b2c <sbrk_aligned>
 8003bae:	1c43      	adds	r3, r0, #1
 8003bb0:	4604      	mov	r4, r0
 8003bb2:	d158      	bne.n	8003c66 <_malloc_r+0xf6>
 8003bb4:	f8d8 4000 	ldr.w	r4, [r8]
 8003bb8:	4627      	mov	r7, r4
 8003bba:	2f00      	cmp	r7, #0
 8003bbc:	d143      	bne.n	8003c46 <_malloc_r+0xd6>
 8003bbe:	2c00      	cmp	r4, #0
 8003bc0:	d04b      	beq.n	8003c5a <_malloc_r+0xea>
 8003bc2:	6823      	ldr	r3, [r4, #0]
 8003bc4:	4639      	mov	r1, r7
 8003bc6:	4630      	mov	r0, r6
 8003bc8:	eb04 0903 	add.w	r9, r4, r3
 8003bcc:	f000 fa66 	bl	800409c <_sbrk_r>
 8003bd0:	4581      	cmp	r9, r0
 8003bd2:	d142      	bne.n	8003c5a <_malloc_r+0xea>
 8003bd4:	6821      	ldr	r1, [r4, #0]
 8003bd6:	4630      	mov	r0, r6
 8003bd8:	1a6d      	subs	r5, r5, r1
 8003bda:	4629      	mov	r1, r5
 8003bdc:	f7ff ffa6 	bl	8003b2c <sbrk_aligned>
 8003be0:	3001      	adds	r0, #1
 8003be2:	d03a      	beq.n	8003c5a <_malloc_r+0xea>
 8003be4:	6823      	ldr	r3, [r4, #0]
 8003be6:	442b      	add	r3, r5
 8003be8:	6023      	str	r3, [r4, #0]
 8003bea:	f8d8 3000 	ldr.w	r3, [r8]
 8003bee:	685a      	ldr	r2, [r3, #4]
 8003bf0:	bb62      	cbnz	r2, 8003c4c <_malloc_r+0xdc>
 8003bf2:	f8c8 7000 	str.w	r7, [r8]
 8003bf6:	e00f      	b.n	8003c18 <_malloc_r+0xa8>
 8003bf8:	6822      	ldr	r2, [r4, #0]
 8003bfa:	1b52      	subs	r2, r2, r5
 8003bfc:	d420      	bmi.n	8003c40 <_malloc_r+0xd0>
 8003bfe:	2a0b      	cmp	r2, #11
 8003c00:	d917      	bls.n	8003c32 <_malloc_r+0xc2>
 8003c02:	1961      	adds	r1, r4, r5
 8003c04:	42a3      	cmp	r3, r4
 8003c06:	6025      	str	r5, [r4, #0]
 8003c08:	bf18      	it	ne
 8003c0a:	6059      	strne	r1, [r3, #4]
 8003c0c:	6863      	ldr	r3, [r4, #4]
 8003c0e:	bf08      	it	eq
 8003c10:	f8c8 1000 	streq.w	r1, [r8]
 8003c14:	5162      	str	r2, [r4, r5]
 8003c16:	604b      	str	r3, [r1, #4]
 8003c18:	4630      	mov	r0, r6
 8003c1a:	f000 f82f 	bl	8003c7c <__malloc_unlock>
 8003c1e:	f104 000b 	add.w	r0, r4, #11
 8003c22:	1d23      	adds	r3, r4, #4
 8003c24:	f020 0007 	bic.w	r0, r0, #7
 8003c28:	1ac2      	subs	r2, r0, r3
 8003c2a:	bf1c      	itt	ne
 8003c2c:	1a1b      	subne	r3, r3, r0
 8003c2e:	50a3      	strne	r3, [r4, r2]
 8003c30:	e7af      	b.n	8003b92 <_malloc_r+0x22>
 8003c32:	6862      	ldr	r2, [r4, #4]
 8003c34:	42a3      	cmp	r3, r4
 8003c36:	bf0c      	ite	eq
 8003c38:	f8c8 2000 	streq.w	r2, [r8]
 8003c3c:	605a      	strne	r2, [r3, #4]
 8003c3e:	e7eb      	b.n	8003c18 <_malloc_r+0xa8>
 8003c40:	4623      	mov	r3, r4
 8003c42:	6864      	ldr	r4, [r4, #4]
 8003c44:	e7ae      	b.n	8003ba4 <_malloc_r+0x34>
 8003c46:	463c      	mov	r4, r7
 8003c48:	687f      	ldr	r7, [r7, #4]
 8003c4a:	e7b6      	b.n	8003bba <_malloc_r+0x4a>
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	42a3      	cmp	r3, r4
 8003c52:	d1fb      	bne.n	8003c4c <_malloc_r+0xdc>
 8003c54:	2300      	movs	r3, #0
 8003c56:	6053      	str	r3, [r2, #4]
 8003c58:	e7de      	b.n	8003c18 <_malloc_r+0xa8>
 8003c5a:	230c      	movs	r3, #12
 8003c5c:	4630      	mov	r0, r6
 8003c5e:	6033      	str	r3, [r6, #0]
 8003c60:	f000 f80c 	bl	8003c7c <__malloc_unlock>
 8003c64:	e794      	b.n	8003b90 <_malloc_r+0x20>
 8003c66:	6005      	str	r5, [r0, #0]
 8003c68:	e7d6      	b.n	8003c18 <_malloc_r+0xa8>
 8003c6a:	bf00      	nop
 8003c6c:	200007cc 	.word	0x200007cc

08003c70 <__malloc_lock>:
 8003c70:	4801      	ldr	r0, [pc, #4]	@ (8003c78 <__malloc_lock+0x8>)
 8003c72:	f000 ba60 	b.w	8004136 <__retarget_lock_acquire_recursive>
 8003c76:	bf00      	nop
 8003c78:	20000910 	.word	0x20000910

08003c7c <__malloc_unlock>:
 8003c7c:	4801      	ldr	r0, [pc, #4]	@ (8003c84 <__malloc_unlock+0x8>)
 8003c7e:	f000 ba5b 	b.w	8004138 <__retarget_lock_release_recursive>
 8003c82:	bf00      	nop
 8003c84:	20000910 	.word	0x20000910

08003c88 <_strtol_l.constprop.0>:
 8003c88:	2b24      	cmp	r3, #36	@ 0x24
 8003c8a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c8e:	4686      	mov	lr, r0
 8003c90:	4690      	mov	r8, r2
 8003c92:	d801      	bhi.n	8003c98 <_strtol_l.constprop.0+0x10>
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d106      	bne.n	8003ca6 <_strtol_l.constprop.0+0x1e>
 8003c98:	f000 fa22 	bl	80040e0 <__errno>
 8003c9c:	2316      	movs	r3, #22
 8003c9e:	6003      	str	r3, [r0, #0]
 8003ca0:	2000      	movs	r0, #0
 8003ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ca6:	460d      	mov	r5, r1
 8003ca8:	4833      	ldr	r0, [pc, #204]	@ (8003d78 <_strtol_l.constprop.0+0xf0>)
 8003caa:	462a      	mov	r2, r5
 8003cac:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003cb0:	5d06      	ldrb	r6, [r0, r4]
 8003cb2:	f016 0608 	ands.w	r6, r6, #8
 8003cb6:	d1f8      	bne.n	8003caa <_strtol_l.constprop.0+0x22>
 8003cb8:	2c2d      	cmp	r4, #45	@ 0x2d
 8003cba:	d12d      	bne.n	8003d18 <_strtol_l.constprop.0+0x90>
 8003cbc:	2601      	movs	r6, #1
 8003cbe:	782c      	ldrb	r4, [r5, #0]
 8003cc0:	1c95      	adds	r5, r2, #2
 8003cc2:	f033 0210 	bics.w	r2, r3, #16
 8003cc6:	d109      	bne.n	8003cdc <_strtol_l.constprop.0+0x54>
 8003cc8:	2c30      	cmp	r4, #48	@ 0x30
 8003cca:	d12a      	bne.n	8003d22 <_strtol_l.constprop.0+0x9a>
 8003ccc:	782a      	ldrb	r2, [r5, #0]
 8003cce:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8003cd2:	2a58      	cmp	r2, #88	@ 0x58
 8003cd4:	d125      	bne.n	8003d22 <_strtol_l.constprop.0+0x9a>
 8003cd6:	2310      	movs	r3, #16
 8003cd8:	786c      	ldrb	r4, [r5, #1]
 8003cda:	3502      	adds	r5, #2
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8003ce2:	f10c 3cff 	add.w	ip, ip, #4294967295
 8003ce6:	fbbc f9f3 	udiv	r9, ip, r3
 8003cea:	4610      	mov	r0, r2
 8003cec:	fb03 ca19 	mls	sl, r3, r9, ip
 8003cf0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8003cf4:	2f09      	cmp	r7, #9
 8003cf6:	d81b      	bhi.n	8003d30 <_strtol_l.constprop.0+0xa8>
 8003cf8:	463c      	mov	r4, r7
 8003cfa:	42a3      	cmp	r3, r4
 8003cfc:	dd27      	ble.n	8003d4e <_strtol_l.constprop.0+0xc6>
 8003cfe:	1c57      	adds	r7, r2, #1
 8003d00:	d007      	beq.n	8003d12 <_strtol_l.constprop.0+0x8a>
 8003d02:	4581      	cmp	r9, r0
 8003d04:	d320      	bcc.n	8003d48 <_strtol_l.constprop.0+0xc0>
 8003d06:	d101      	bne.n	8003d0c <_strtol_l.constprop.0+0x84>
 8003d08:	45a2      	cmp	sl, r4
 8003d0a:	db1d      	blt.n	8003d48 <_strtol_l.constprop.0+0xc0>
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	fb00 4003 	mla	r0, r0, r3, r4
 8003d12:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003d16:	e7eb      	b.n	8003cf0 <_strtol_l.constprop.0+0x68>
 8003d18:	2c2b      	cmp	r4, #43	@ 0x2b
 8003d1a:	bf04      	itt	eq
 8003d1c:	782c      	ldrbeq	r4, [r5, #0]
 8003d1e:	1c95      	addeq	r5, r2, #2
 8003d20:	e7cf      	b.n	8003cc2 <_strtol_l.constprop.0+0x3a>
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d1da      	bne.n	8003cdc <_strtol_l.constprop.0+0x54>
 8003d26:	2c30      	cmp	r4, #48	@ 0x30
 8003d28:	bf0c      	ite	eq
 8003d2a:	2308      	moveq	r3, #8
 8003d2c:	230a      	movne	r3, #10
 8003d2e:	e7d5      	b.n	8003cdc <_strtol_l.constprop.0+0x54>
 8003d30:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8003d34:	2f19      	cmp	r7, #25
 8003d36:	d801      	bhi.n	8003d3c <_strtol_l.constprop.0+0xb4>
 8003d38:	3c37      	subs	r4, #55	@ 0x37
 8003d3a:	e7de      	b.n	8003cfa <_strtol_l.constprop.0+0x72>
 8003d3c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8003d40:	2f19      	cmp	r7, #25
 8003d42:	d804      	bhi.n	8003d4e <_strtol_l.constprop.0+0xc6>
 8003d44:	3c57      	subs	r4, #87	@ 0x57
 8003d46:	e7d8      	b.n	8003cfa <_strtol_l.constprop.0+0x72>
 8003d48:	f04f 32ff 	mov.w	r2, #4294967295
 8003d4c:	e7e1      	b.n	8003d12 <_strtol_l.constprop.0+0x8a>
 8003d4e:	1c53      	adds	r3, r2, #1
 8003d50:	d108      	bne.n	8003d64 <_strtol_l.constprop.0+0xdc>
 8003d52:	2322      	movs	r3, #34	@ 0x22
 8003d54:	4660      	mov	r0, ip
 8003d56:	f8ce 3000 	str.w	r3, [lr]
 8003d5a:	f1b8 0f00 	cmp.w	r8, #0
 8003d5e:	d0a0      	beq.n	8003ca2 <_strtol_l.constprop.0+0x1a>
 8003d60:	1e69      	subs	r1, r5, #1
 8003d62:	e006      	b.n	8003d72 <_strtol_l.constprop.0+0xea>
 8003d64:	b106      	cbz	r6, 8003d68 <_strtol_l.constprop.0+0xe0>
 8003d66:	4240      	negs	r0, r0
 8003d68:	f1b8 0f00 	cmp.w	r8, #0
 8003d6c:	d099      	beq.n	8003ca2 <_strtol_l.constprop.0+0x1a>
 8003d6e:	2a00      	cmp	r2, #0
 8003d70:	d1f6      	bne.n	8003d60 <_strtol_l.constprop.0+0xd8>
 8003d72:	f8c8 1000 	str.w	r1, [r8]
 8003d76:	e794      	b.n	8003ca2 <_strtol_l.constprop.0+0x1a>
 8003d78:	08004f63 	.word	0x08004f63

08003d7c <strtol>:
 8003d7c:	4613      	mov	r3, r2
 8003d7e:	460a      	mov	r2, r1
 8003d80:	4601      	mov	r1, r0
 8003d82:	4802      	ldr	r0, [pc, #8]	@ (8003d8c <strtol+0x10>)
 8003d84:	6800      	ldr	r0, [r0, #0]
 8003d86:	f7ff bf7f 	b.w	8003c88 <_strtol_l.constprop.0>
 8003d8a:	bf00      	nop
 8003d8c:	20000018 	.word	0x20000018

08003d90 <std>:
 8003d90:	2300      	movs	r3, #0
 8003d92:	b510      	push	{r4, lr}
 8003d94:	4604      	mov	r4, r0
 8003d96:	e9c0 3300 	strd	r3, r3, [r0]
 8003d9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003d9e:	6083      	str	r3, [r0, #8]
 8003da0:	8181      	strh	r1, [r0, #12]
 8003da2:	6643      	str	r3, [r0, #100]	@ 0x64
 8003da4:	81c2      	strh	r2, [r0, #14]
 8003da6:	6183      	str	r3, [r0, #24]
 8003da8:	4619      	mov	r1, r3
 8003daa:	2208      	movs	r2, #8
 8003dac:	305c      	adds	r0, #92	@ 0x5c
 8003dae:	f000 f927 	bl	8004000 <memset>
 8003db2:	4b0d      	ldr	r3, [pc, #52]	@ (8003de8 <std+0x58>)
 8003db4:	6224      	str	r4, [r4, #32]
 8003db6:	6263      	str	r3, [r4, #36]	@ 0x24
 8003db8:	4b0c      	ldr	r3, [pc, #48]	@ (8003dec <std+0x5c>)
 8003dba:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003dbc:	4b0c      	ldr	r3, [pc, #48]	@ (8003df0 <std+0x60>)
 8003dbe:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003dc0:	4b0c      	ldr	r3, [pc, #48]	@ (8003df4 <std+0x64>)
 8003dc2:	6323      	str	r3, [r4, #48]	@ 0x30
 8003dc4:	4b0c      	ldr	r3, [pc, #48]	@ (8003df8 <std+0x68>)
 8003dc6:	429c      	cmp	r4, r3
 8003dc8:	d006      	beq.n	8003dd8 <std+0x48>
 8003dca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003dce:	4294      	cmp	r4, r2
 8003dd0:	d002      	beq.n	8003dd8 <std+0x48>
 8003dd2:	33d0      	adds	r3, #208	@ 0xd0
 8003dd4:	429c      	cmp	r4, r3
 8003dd6:	d105      	bne.n	8003de4 <std+0x54>
 8003dd8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003ddc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003de0:	f000 b9a8 	b.w	8004134 <__retarget_lock_init_recursive>
 8003de4:	bd10      	pop	{r4, pc}
 8003de6:	bf00      	nop
 8003de8:	08003f39 	.word	0x08003f39
 8003dec:	08003f5b 	.word	0x08003f5b
 8003df0:	08003f93 	.word	0x08003f93
 8003df4:	08003fb7 	.word	0x08003fb7
 8003df8:	200007d0 	.word	0x200007d0

08003dfc <stdio_exit_handler>:
 8003dfc:	4a02      	ldr	r2, [pc, #8]	@ (8003e08 <stdio_exit_handler+0xc>)
 8003dfe:	4903      	ldr	r1, [pc, #12]	@ (8003e0c <stdio_exit_handler+0x10>)
 8003e00:	4803      	ldr	r0, [pc, #12]	@ (8003e10 <stdio_exit_handler+0x14>)
 8003e02:	f000 b869 	b.w	8003ed8 <_fwalk_sglue>
 8003e06:	bf00      	nop
 8003e08:	2000000c 	.word	0x2000000c
 8003e0c:	08004b21 	.word	0x08004b21
 8003e10:	2000001c 	.word	0x2000001c

08003e14 <cleanup_stdio>:
 8003e14:	6841      	ldr	r1, [r0, #4]
 8003e16:	4b0c      	ldr	r3, [pc, #48]	@ (8003e48 <cleanup_stdio+0x34>)
 8003e18:	b510      	push	{r4, lr}
 8003e1a:	4299      	cmp	r1, r3
 8003e1c:	4604      	mov	r4, r0
 8003e1e:	d001      	beq.n	8003e24 <cleanup_stdio+0x10>
 8003e20:	f000 fe7e 	bl	8004b20 <_fflush_r>
 8003e24:	68a1      	ldr	r1, [r4, #8]
 8003e26:	4b09      	ldr	r3, [pc, #36]	@ (8003e4c <cleanup_stdio+0x38>)
 8003e28:	4299      	cmp	r1, r3
 8003e2a:	d002      	beq.n	8003e32 <cleanup_stdio+0x1e>
 8003e2c:	4620      	mov	r0, r4
 8003e2e:	f000 fe77 	bl	8004b20 <_fflush_r>
 8003e32:	68e1      	ldr	r1, [r4, #12]
 8003e34:	4b06      	ldr	r3, [pc, #24]	@ (8003e50 <cleanup_stdio+0x3c>)
 8003e36:	4299      	cmp	r1, r3
 8003e38:	d004      	beq.n	8003e44 <cleanup_stdio+0x30>
 8003e3a:	4620      	mov	r0, r4
 8003e3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e40:	f000 be6e 	b.w	8004b20 <_fflush_r>
 8003e44:	bd10      	pop	{r4, pc}
 8003e46:	bf00      	nop
 8003e48:	200007d0 	.word	0x200007d0
 8003e4c:	20000838 	.word	0x20000838
 8003e50:	200008a0 	.word	0x200008a0

08003e54 <global_stdio_init.part.0>:
 8003e54:	b510      	push	{r4, lr}
 8003e56:	4b0b      	ldr	r3, [pc, #44]	@ (8003e84 <global_stdio_init.part.0+0x30>)
 8003e58:	4c0b      	ldr	r4, [pc, #44]	@ (8003e88 <global_stdio_init.part.0+0x34>)
 8003e5a:	4a0c      	ldr	r2, [pc, #48]	@ (8003e8c <global_stdio_init.part.0+0x38>)
 8003e5c:	4620      	mov	r0, r4
 8003e5e:	601a      	str	r2, [r3, #0]
 8003e60:	2104      	movs	r1, #4
 8003e62:	2200      	movs	r2, #0
 8003e64:	f7ff ff94 	bl	8003d90 <std>
 8003e68:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	2109      	movs	r1, #9
 8003e70:	f7ff ff8e 	bl	8003d90 <std>
 8003e74:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003e78:	2202      	movs	r2, #2
 8003e7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e7e:	2112      	movs	r1, #18
 8003e80:	f7ff bf86 	b.w	8003d90 <std>
 8003e84:	20000908 	.word	0x20000908
 8003e88:	200007d0 	.word	0x200007d0
 8003e8c:	08003dfd 	.word	0x08003dfd

08003e90 <__sfp_lock_acquire>:
 8003e90:	4801      	ldr	r0, [pc, #4]	@ (8003e98 <__sfp_lock_acquire+0x8>)
 8003e92:	f000 b950 	b.w	8004136 <__retarget_lock_acquire_recursive>
 8003e96:	bf00      	nop
 8003e98:	20000911 	.word	0x20000911

08003e9c <__sfp_lock_release>:
 8003e9c:	4801      	ldr	r0, [pc, #4]	@ (8003ea4 <__sfp_lock_release+0x8>)
 8003e9e:	f000 b94b 	b.w	8004138 <__retarget_lock_release_recursive>
 8003ea2:	bf00      	nop
 8003ea4:	20000911 	.word	0x20000911

08003ea8 <__sinit>:
 8003ea8:	b510      	push	{r4, lr}
 8003eaa:	4604      	mov	r4, r0
 8003eac:	f7ff fff0 	bl	8003e90 <__sfp_lock_acquire>
 8003eb0:	6a23      	ldr	r3, [r4, #32]
 8003eb2:	b11b      	cbz	r3, 8003ebc <__sinit+0x14>
 8003eb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003eb8:	f7ff bff0 	b.w	8003e9c <__sfp_lock_release>
 8003ebc:	4b04      	ldr	r3, [pc, #16]	@ (8003ed0 <__sinit+0x28>)
 8003ebe:	6223      	str	r3, [r4, #32]
 8003ec0:	4b04      	ldr	r3, [pc, #16]	@ (8003ed4 <__sinit+0x2c>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d1f5      	bne.n	8003eb4 <__sinit+0xc>
 8003ec8:	f7ff ffc4 	bl	8003e54 <global_stdio_init.part.0>
 8003ecc:	e7f2      	b.n	8003eb4 <__sinit+0xc>
 8003ece:	bf00      	nop
 8003ed0:	08003e15 	.word	0x08003e15
 8003ed4:	20000908 	.word	0x20000908

08003ed8 <_fwalk_sglue>:
 8003ed8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003edc:	4607      	mov	r7, r0
 8003ede:	4688      	mov	r8, r1
 8003ee0:	4614      	mov	r4, r2
 8003ee2:	2600      	movs	r6, #0
 8003ee4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003ee8:	f1b9 0901 	subs.w	r9, r9, #1
 8003eec:	d505      	bpl.n	8003efa <_fwalk_sglue+0x22>
 8003eee:	6824      	ldr	r4, [r4, #0]
 8003ef0:	2c00      	cmp	r4, #0
 8003ef2:	d1f7      	bne.n	8003ee4 <_fwalk_sglue+0xc>
 8003ef4:	4630      	mov	r0, r6
 8003ef6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003efa:	89ab      	ldrh	r3, [r5, #12]
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d907      	bls.n	8003f10 <_fwalk_sglue+0x38>
 8003f00:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003f04:	3301      	adds	r3, #1
 8003f06:	d003      	beq.n	8003f10 <_fwalk_sglue+0x38>
 8003f08:	4629      	mov	r1, r5
 8003f0a:	4638      	mov	r0, r7
 8003f0c:	47c0      	blx	r8
 8003f0e:	4306      	orrs	r6, r0
 8003f10:	3568      	adds	r5, #104	@ 0x68
 8003f12:	e7e9      	b.n	8003ee8 <_fwalk_sglue+0x10>

08003f14 <iprintf>:
 8003f14:	b40f      	push	{r0, r1, r2, r3}
 8003f16:	b507      	push	{r0, r1, r2, lr}
 8003f18:	4906      	ldr	r1, [pc, #24]	@ (8003f34 <iprintf+0x20>)
 8003f1a:	ab04      	add	r3, sp, #16
 8003f1c:	6808      	ldr	r0, [r1, #0]
 8003f1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f22:	6881      	ldr	r1, [r0, #8]
 8003f24:	9301      	str	r3, [sp, #4]
 8003f26:	f000 fad1 	bl	80044cc <_vfiprintf_r>
 8003f2a:	b003      	add	sp, #12
 8003f2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f30:	b004      	add	sp, #16
 8003f32:	4770      	bx	lr
 8003f34:	20000018 	.word	0x20000018

08003f38 <__sread>:
 8003f38:	b510      	push	{r4, lr}
 8003f3a:	460c      	mov	r4, r1
 8003f3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f40:	f000 f89a 	bl	8004078 <_read_r>
 8003f44:	2800      	cmp	r0, #0
 8003f46:	bfab      	itete	ge
 8003f48:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003f4a:	89a3      	ldrhlt	r3, [r4, #12]
 8003f4c:	181b      	addge	r3, r3, r0
 8003f4e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003f52:	bfac      	ite	ge
 8003f54:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003f56:	81a3      	strhlt	r3, [r4, #12]
 8003f58:	bd10      	pop	{r4, pc}

08003f5a <__swrite>:
 8003f5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f5e:	461f      	mov	r7, r3
 8003f60:	898b      	ldrh	r3, [r1, #12]
 8003f62:	4605      	mov	r5, r0
 8003f64:	05db      	lsls	r3, r3, #23
 8003f66:	460c      	mov	r4, r1
 8003f68:	4616      	mov	r6, r2
 8003f6a:	d505      	bpl.n	8003f78 <__swrite+0x1e>
 8003f6c:	2302      	movs	r3, #2
 8003f6e:	2200      	movs	r2, #0
 8003f70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f74:	f000 f86e 	bl	8004054 <_lseek_r>
 8003f78:	89a3      	ldrh	r3, [r4, #12]
 8003f7a:	4632      	mov	r2, r6
 8003f7c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003f80:	81a3      	strh	r3, [r4, #12]
 8003f82:	4628      	mov	r0, r5
 8003f84:	463b      	mov	r3, r7
 8003f86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f8e:	f000 b895 	b.w	80040bc <_write_r>

08003f92 <__sseek>:
 8003f92:	b510      	push	{r4, lr}
 8003f94:	460c      	mov	r4, r1
 8003f96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f9a:	f000 f85b 	bl	8004054 <_lseek_r>
 8003f9e:	1c43      	adds	r3, r0, #1
 8003fa0:	89a3      	ldrh	r3, [r4, #12]
 8003fa2:	bf15      	itete	ne
 8003fa4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003fa6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003faa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003fae:	81a3      	strheq	r3, [r4, #12]
 8003fb0:	bf18      	it	ne
 8003fb2:	81a3      	strhne	r3, [r4, #12]
 8003fb4:	bd10      	pop	{r4, pc}

08003fb6 <__sclose>:
 8003fb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fba:	f000 b83b 	b.w	8004034 <_close_r>
	...

08003fc0 <_vsiprintf_r>:
 8003fc0:	b500      	push	{lr}
 8003fc2:	b09b      	sub	sp, #108	@ 0x6c
 8003fc4:	9100      	str	r1, [sp, #0]
 8003fc6:	9104      	str	r1, [sp, #16]
 8003fc8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003fcc:	9105      	str	r1, [sp, #20]
 8003fce:	9102      	str	r1, [sp, #8]
 8003fd0:	4905      	ldr	r1, [pc, #20]	@ (8003fe8 <_vsiprintf_r+0x28>)
 8003fd2:	9103      	str	r1, [sp, #12]
 8003fd4:	4669      	mov	r1, sp
 8003fd6:	f000 f955 	bl	8004284 <_svfiprintf_r>
 8003fda:	2200      	movs	r2, #0
 8003fdc:	9b00      	ldr	r3, [sp, #0]
 8003fde:	701a      	strb	r2, [r3, #0]
 8003fe0:	b01b      	add	sp, #108	@ 0x6c
 8003fe2:	f85d fb04 	ldr.w	pc, [sp], #4
 8003fe6:	bf00      	nop
 8003fe8:	ffff0208 	.word	0xffff0208

08003fec <vsiprintf>:
 8003fec:	4613      	mov	r3, r2
 8003fee:	460a      	mov	r2, r1
 8003ff0:	4601      	mov	r1, r0
 8003ff2:	4802      	ldr	r0, [pc, #8]	@ (8003ffc <vsiprintf+0x10>)
 8003ff4:	6800      	ldr	r0, [r0, #0]
 8003ff6:	f7ff bfe3 	b.w	8003fc0 <_vsiprintf_r>
 8003ffa:	bf00      	nop
 8003ffc:	20000018 	.word	0x20000018

08004000 <memset>:
 8004000:	4603      	mov	r3, r0
 8004002:	4402      	add	r2, r0
 8004004:	4293      	cmp	r3, r2
 8004006:	d100      	bne.n	800400a <memset+0xa>
 8004008:	4770      	bx	lr
 800400a:	f803 1b01 	strb.w	r1, [r3], #1
 800400e:	e7f9      	b.n	8004004 <memset+0x4>

08004010 <strncmp>:
 8004010:	b510      	push	{r4, lr}
 8004012:	b16a      	cbz	r2, 8004030 <strncmp+0x20>
 8004014:	3901      	subs	r1, #1
 8004016:	1884      	adds	r4, r0, r2
 8004018:	f810 2b01 	ldrb.w	r2, [r0], #1
 800401c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8004020:	429a      	cmp	r2, r3
 8004022:	d103      	bne.n	800402c <strncmp+0x1c>
 8004024:	42a0      	cmp	r0, r4
 8004026:	d001      	beq.n	800402c <strncmp+0x1c>
 8004028:	2a00      	cmp	r2, #0
 800402a:	d1f5      	bne.n	8004018 <strncmp+0x8>
 800402c:	1ad0      	subs	r0, r2, r3
 800402e:	bd10      	pop	{r4, pc}
 8004030:	4610      	mov	r0, r2
 8004032:	e7fc      	b.n	800402e <strncmp+0x1e>

08004034 <_close_r>:
 8004034:	b538      	push	{r3, r4, r5, lr}
 8004036:	2300      	movs	r3, #0
 8004038:	4d05      	ldr	r5, [pc, #20]	@ (8004050 <_close_r+0x1c>)
 800403a:	4604      	mov	r4, r0
 800403c:	4608      	mov	r0, r1
 800403e:	602b      	str	r3, [r5, #0]
 8004040:	f7fc ff6d 	bl	8000f1e <_close>
 8004044:	1c43      	adds	r3, r0, #1
 8004046:	d102      	bne.n	800404e <_close_r+0x1a>
 8004048:	682b      	ldr	r3, [r5, #0]
 800404a:	b103      	cbz	r3, 800404e <_close_r+0x1a>
 800404c:	6023      	str	r3, [r4, #0]
 800404e:	bd38      	pop	{r3, r4, r5, pc}
 8004050:	2000090c 	.word	0x2000090c

08004054 <_lseek_r>:
 8004054:	b538      	push	{r3, r4, r5, lr}
 8004056:	4604      	mov	r4, r0
 8004058:	4608      	mov	r0, r1
 800405a:	4611      	mov	r1, r2
 800405c:	2200      	movs	r2, #0
 800405e:	4d05      	ldr	r5, [pc, #20]	@ (8004074 <_lseek_r+0x20>)
 8004060:	602a      	str	r2, [r5, #0]
 8004062:	461a      	mov	r2, r3
 8004064:	f7fc ff7f 	bl	8000f66 <_lseek>
 8004068:	1c43      	adds	r3, r0, #1
 800406a:	d102      	bne.n	8004072 <_lseek_r+0x1e>
 800406c:	682b      	ldr	r3, [r5, #0]
 800406e:	b103      	cbz	r3, 8004072 <_lseek_r+0x1e>
 8004070:	6023      	str	r3, [r4, #0]
 8004072:	bd38      	pop	{r3, r4, r5, pc}
 8004074:	2000090c 	.word	0x2000090c

08004078 <_read_r>:
 8004078:	b538      	push	{r3, r4, r5, lr}
 800407a:	4604      	mov	r4, r0
 800407c:	4608      	mov	r0, r1
 800407e:	4611      	mov	r1, r2
 8004080:	2200      	movs	r2, #0
 8004082:	4d05      	ldr	r5, [pc, #20]	@ (8004098 <_read_r+0x20>)
 8004084:	602a      	str	r2, [r5, #0]
 8004086:	461a      	mov	r2, r3
 8004088:	f7fc ff10 	bl	8000eac <_read>
 800408c:	1c43      	adds	r3, r0, #1
 800408e:	d102      	bne.n	8004096 <_read_r+0x1e>
 8004090:	682b      	ldr	r3, [r5, #0]
 8004092:	b103      	cbz	r3, 8004096 <_read_r+0x1e>
 8004094:	6023      	str	r3, [r4, #0]
 8004096:	bd38      	pop	{r3, r4, r5, pc}
 8004098:	2000090c 	.word	0x2000090c

0800409c <_sbrk_r>:
 800409c:	b538      	push	{r3, r4, r5, lr}
 800409e:	2300      	movs	r3, #0
 80040a0:	4d05      	ldr	r5, [pc, #20]	@ (80040b8 <_sbrk_r+0x1c>)
 80040a2:	4604      	mov	r4, r0
 80040a4:	4608      	mov	r0, r1
 80040a6:	602b      	str	r3, [r5, #0]
 80040a8:	f7fc ff6a 	bl	8000f80 <_sbrk>
 80040ac:	1c43      	adds	r3, r0, #1
 80040ae:	d102      	bne.n	80040b6 <_sbrk_r+0x1a>
 80040b0:	682b      	ldr	r3, [r5, #0]
 80040b2:	b103      	cbz	r3, 80040b6 <_sbrk_r+0x1a>
 80040b4:	6023      	str	r3, [r4, #0]
 80040b6:	bd38      	pop	{r3, r4, r5, pc}
 80040b8:	2000090c 	.word	0x2000090c

080040bc <_write_r>:
 80040bc:	b538      	push	{r3, r4, r5, lr}
 80040be:	4604      	mov	r4, r0
 80040c0:	4608      	mov	r0, r1
 80040c2:	4611      	mov	r1, r2
 80040c4:	2200      	movs	r2, #0
 80040c6:	4d05      	ldr	r5, [pc, #20]	@ (80040dc <_write_r+0x20>)
 80040c8:	602a      	str	r2, [r5, #0]
 80040ca:	461a      	mov	r2, r3
 80040cc:	f7fc ff0b 	bl	8000ee6 <_write>
 80040d0:	1c43      	adds	r3, r0, #1
 80040d2:	d102      	bne.n	80040da <_write_r+0x1e>
 80040d4:	682b      	ldr	r3, [r5, #0]
 80040d6:	b103      	cbz	r3, 80040da <_write_r+0x1e>
 80040d8:	6023      	str	r3, [r4, #0]
 80040da:	bd38      	pop	{r3, r4, r5, pc}
 80040dc:	2000090c 	.word	0x2000090c

080040e0 <__errno>:
 80040e0:	4b01      	ldr	r3, [pc, #4]	@ (80040e8 <__errno+0x8>)
 80040e2:	6818      	ldr	r0, [r3, #0]
 80040e4:	4770      	bx	lr
 80040e6:	bf00      	nop
 80040e8:	20000018 	.word	0x20000018

080040ec <__libc_init_array>:
 80040ec:	b570      	push	{r4, r5, r6, lr}
 80040ee:	2600      	movs	r6, #0
 80040f0:	4d0c      	ldr	r5, [pc, #48]	@ (8004124 <__libc_init_array+0x38>)
 80040f2:	4c0d      	ldr	r4, [pc, #52]	@ (8004128 <__libc_init_array+0x3c>)
 80040f4:	1b64      	subs	r4, r4, r5
 80040f6:	10a4      	asrs	r4, r4, #2
 80040f8:	42a6      	cmp	r6, r4
 80040fa:	d109      	bne.n	8004110 <__libc_init_array+0x24>
 80040fc:	f000 febc 	bl	8004e78 <_init>
 8004100:	2600      	movs	r6, #0
 8004102:	4d0a      	ldr	r5, [pc, #40]	@ (800412c <__libc_init_array+0x40>)
 8004104:	4c0a      	ldr	r4, [pc, #40]	@ (8004130 <__libc_init_array+0x44>)
 8004106:	1b64      	subs	r4, r4, r5
 8004108:	10a4      	asrs	r4, r4, #2
 800410a:	42a6      	cmp	r6, r4
 800410c:	d105      	bne.n	800411a <__libc_init_array+0x2e>
 800410e:	bd70      	pop	{r4, r5, r6, pc}
 8004110:	f855 3b04 	ldr.w	r3, [r5], #4
 8004114:	4798      	blx	r3
 8004116:	3601      	adds	r6, #1
 8004118:	e7ee      	b.n	80040f8 <__libc_init_array+0xc>
 800411a:	f855 3b04 	ldr.w	r3, [r5], #4
 800411e:	4798      	blx	r3
 8004120:	3601      	adds	r6, #1
 8004122:	e7f2      	b.n	800410a <__libc_init_array+0x1e>
 8004124:	080050a0 	.word	0x080050a0
 8004128:	080050a0 	.word	0x080050a0
 800412c:	080050a0 	.word	0x080050a0
 8004130:	080050a4 	.word	0x080050a4

08004134 <__retarget_lock_init_recursive>:
 8004134:	4770      	bx	lr

08004136 <__retarget_lock_acquire_recursive>:
 8004136:	4770      	bx	lr

08004138 <__retarget_lock_release_recursive>:
 8004138:	4770      	bx	lr
	...

0800413c <_free_r>:
 800413c:	b538      	push	{r3, r4, r5, lr}
 800413e:	4605      	mov	r5, r0
 8004140:	2900      	cmp	r1, #0
 8004142:	d040      	beq.n	80041c6 <_free_r+0x8a>
 8004144:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004148:	1f0c      	subs	r4, r1, #4
 800414a:	2b00      	cmp	r3, #0
 800414c:	bfb8      	it	lt
 800414e:	18e4      	addlt	r4, r4, r3
 8004150:	f7ff fd8e 	bl	8003c70 <__malloc_lock>
 8004154:	4a1c      	ldr	r2, [pc, #112]	@ (80041c8 <_free_r+0x8c>)
 8004156:	6813      	ldr	r3, [r2, #0]
 8004158:	b933      	cbnz	r3, 8004168 <_free_r+0x2c>
 800415a:	6063      	str	r3, [r4, #4]
 800415c:	6014      	str	r4, [r2, #0]
 800415e:	4628      	mov	r0, r5
 8004160:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004164:	f7ff bd8a 	b.w	8003c7c <__malloc_unlock>
 8004168:	42a3      	cmp	r3, r4
 800416a:	d908      	bls.n	800417e <_free_r+0x42>
 800416c:	6820      	ldr	r0, [r4, #0]
 800416e:	1821      	adds	r1, r4, r0
 8004170:	428b      	cmp	r3, r1
 8004172:	bf01      	itttt	eq
 8004174:	6819      	ldreq	r1, [r3, #0]
 8004176:	685b      	ldreq	r3, [r3, #4]
 8004178:	1809      	addeq	r1, r1, r0
 800417a:	6021      	streq	r1, [r4, #0]
 800417c:	e7ed      	b.n	800415a <_free_r+0x1e>
 800417e:	461a      	mov	r2, r3
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	b10b      	cbz	r3, 8004188 <_free_r+0x4c>
 8004184:	42a3      	cmp	r3, r4
 8004186:	d9fa      	bls.n	800417e <_free_r+0x42>
 8004188:	6811      	ldr	r1, [r2, #0]
 800418a:	1850      	adds	r0, r2, r1
 800418c:	42a0      	cmp	r0, r4
 800418e:	d10b      	bne.n	80041a8 <_free_r+0x6c>
 8004190:	6820      	ldr	r0, [r4, #0]
 8004192:	4401      	add	r1, r0
 8004194:	1850      	adds	r0, r2, r1
 8004196:	4283      	cmp	r3, r0
 8004198:	6011      	str	r1, [r2, #0]
 800419a:	d1e0      	bne.n	800415e <_free_r+0x22>
 800419c:	6818      	ldr	r0, [r3, #0]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	4408      	add	r0, r1
 80041a2:	6010      	str	r0, [r2, #0]
 80041a4:	6053      	str	r3, [r2, #4]
 80041a6:	e7da      	b.n	800415e <_free_r+0x22>
 80041a8:	d902      	bls.n	80041b0 <_free_r+0x74>
 80041aa:	230c      	movs	r3, #12
 80041ac:	602b      	str	r3, [r5, #0]
 80041ae:	e7d6      	b.n	800415e <_free_r+0x22>
 80041b0:	6820      	ldr	r0, [r4, #0]
 80041b2:	1821      	adds	r1, r4, r0
 80041b4:	428b      	cmp	r3, r1
 80041b6:	bf01      	itttt	eq
 80041b8:	6819      	ldreq	r1, [r3, #0]
 80041ba:	685b      	ldreq	r3, [r3, #4]
 80041bc:	1809      	addeq	r1, r1, r0
 80041be:	6021      	streq	r1, [r4, #0]
 80041c0:	6063      	str	r3, [r4, #4]
 80041c2:	6054      	str	r4, [r2, #4]
 80041c4:	e7cb      	b.n	800415e <_free_r+0x22>
 80041c6:	bd38      	pop	{r3, r4, r5, pc}
 80041c8:	200007cc 	.word	0x200007cc

080041cc <__ssputs_r>:
 80041cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041d0:	461f      	mov	r7, r3
 80041d2:	688e      	ldr	r6, [r1, #8]
 80041d4:	4682      	mov	sl, r0
 80041d6:	42be      	cmp	r6, r7
 80041d8:	460c      	mov	r4, r1
 80041da:	4690      	mov	r8, r2
 80041dc:	680b      	ldr	r3, [r1, #0]
 80041de:	d82d      	bhi.n	800423c <__ssputs_r+0x70>
 80041e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80041e4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80041e8:	d026      	beq.n	8004238 <__ssputs_r+0x6c>
 80041ea:	6965      	ldr	r5, [r4, #20]
 80041ec:	6909      	ldr	r1, [r1, #16]
 80041ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80041f2:	eba3 0901 	sub.w	r9, r3, r1
 80041f6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80041fa:	1c7b      	adds	r3, r7, #1
 80041fc:	444b      	add	r3, r9
 80041fe:	106d      	asrs	r5, r5, #1
 8004200:	429d      	cmp	r5, r3
 8004202:	bf38      	it	cc
 8004204:	461d      	movcc	r5, r3
 8004206:	0553      	lsls	r3, r2, #21
 8004208:	d527      	bpl.n	800425a <__ssputs_r+0x8e>
 800420a:	4629      	mov	r1, r5
 800420c:	f7ff fcb0 	bl	8003b70 <_malloc_r>
 8004210:	4606      	mov	r6, r0
 8004212:	b360      	cbz	r0, 800426e <__ssputs_r+0xa2>
 8004214:	464a      	mov	r2, r9
 8004216:	6921      	ldr	r1, [r4, #16]
 8004218:	f000 fd66 	bl	8004ce8 <memcpy>
 800421c:	89a3      	ldrh	r3, [r4, #12]
 800421e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004222:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004226:	81a3      	strh	r3, [r4, #12]
 8004228:	6126      	str	r6, [r4, #16]
 800422a:	444e      	add	r6, r9
 800422c:	6026      	str	r6, [r4, #0]
 800422e:	463e      	mov	r6, r7
 8004230:	6165      	str	r5, [r4, #20]
 8004232:	eba5 0509 	sub.w	r5, r5, r9
 8004236:	60a5      	str	r5, [r4, #8]
 8004238:	42be      	cmp	r6, r7
 800423a:	d900      	bls.n	800423e <__ssputs_r+0x72>
 800423c:	463e      	mov	r6, r7
 800423e:	4632      	mov	r2, r6
 8004240:	4641      	mov	r1, r8
 8004242:	6820      	ldr	r0, [r4, #0]
 8004244:	f000 fd28 	bl	8004c98 <memmove>
 8004248:	2000      	movs	r0, #0
 800424a:	68a3      	ldr	r3, [r4, #8]
 800424c:	1b9b      	subs	r3, r3, r6
 800424e:	60a3      	str	r3, [r4, #8]
 8004250:	6823      	ldr	r3, [r4, #0]
 8004252:	4433      	add	r3, r6
 8004254:	6023      	str	r3, [r4, #0]
 8004256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800425a:	462a      	mov	r2, r5
 800425c:	f000 fd52 	bl	8004d04 <_realloc_r>
 8004260:	4606      	mov	r6, r0
 8004262:	2800      	cmp	r0, #0
 8004264:	d1e0      	bne.n	8004228 <__ssputs_r+0x5c>
 8004266:	4650      	mov	r0, sl
 8004268:	6921      	ldr	r1, [r4, #16]
 800426a:	f7ff ff67 	bl	800413c <_free_r>
 800426e:	230c      	movs	r3, #12
 8004270:	f8ca 3000 	str.w	r3, [sl]
 8004274:	89a3      	ldrh	r3, [r4, #12]
 8004276:	f04f 30ff 	mov.w	r0, #4294967295
 800427a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800427e:	81a3      	strh	r3, [r4, #12]
 8004280:	e7e9      	b.n	8004256 <__ssputs_r+0x8a>
	...

08004284 <_svfiprintf_r>:
 8004284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004288:	4698      	mov	r8, r3
 800428a:	898b      	ldrh	r3, [r1, #12]
 800428c:	4607      	mov	r7, r0
 800428e:	061b      	lsls	r3, r3, #24
 8004290:	460d      	mov	r5, r1
 8004292:	4614      	mov	r4, r2
 8004294:	b09d      	sub	sp, #116	@ 0x74
 8004296:	d510      	bpl.n	80042ba <_svfiprintf_r+0x36>
 8004298:	690b      	ldr	r3, [r1, #16]
 800429a:	b973      	cbnz	r3, 80042ba <_svfiprintf_r+0x36>
 800429c:	2140      	movs	r1, #64	@ 0x40
 800429e:	f7ff fc67 	bl	8003b70 <_malloc_r>
 80042a2:	6028      	str	r0, [r5, #0]
 80042a4:	6128      	str	r0, [r5, #16]
 80042a6:	b930      	cbnz	r0, 80042b6 <_svfiprintf_r+0x32>
 80042a8:	230c      	movs	r3, #12
 80042aa:	603b      	str	r3, [r7, #0]
 80042ac:	f04f 30ff 	mov.w	r0, #4294967295
 80042b0:	b01d      	add	sp, #116	@ 0x74
 80042b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042b6:	2340      	movs	r3, #64	@ 0x40
 80042b8:	616b      	str	r3, [r5, #20]
 80042ba:	2300      	movs	r3, #0
 80042bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80042be:	2320      	movs	r3, #32
 80042c0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80042c4:	2330      	movs	r3, #48	@ 0x30
 80042c6:	f04f 0901 	mov.w	r9, #1
 80042ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80042ce:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8004468 <_svfiprintf_r+0x1e4>
 80042d2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80042d6:	4623      	mov	r3, r4
 80042d8:	469a      	mov	sl, r3
 80042da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80042de:	b10a      	cbz	r2, 80042e4 <_svfiprintf_r+0x60>
 80042e0:	2a25      	cmp	r2, #37	@ 0x25
 80042e2:	d1f9      	bne.n	80042d8 <_svfiprintf_r+0x54>
 80042e4:	ebba 0b04 	subs.w	fp, sl, r4
 80042e8:	d00b      	beq.n	8004302 <_svfiprintf_r+0x7e>
 80042ea:	465b      	mov	r3, fp
 80042ec:	4622      	mov	r2, r4
 80042ee:	4629      	mov	r1, r5
 80042f0:	4638      	mov	r0, r7
 80042f2:	f7ff ff6b 	bl	80041cc <__ssputs_r>
 80042f6:	3001      	adds	r0, #1
 80042f8:	f000 80a7 	beq.w	800444a <_svfiprintf_r+0x1c6>
 80042fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80042fe:	445a      	add	r2, fp
 8004300:	9209      	str	r2, [sp, #36]	@ 0x24
 8004302:	f89a 3000 	ldrb.w	r3, [sl]
 8004306:	2b00      	cmp	r3, #0
 8004308:	f000 809f 	beq.w	800444a <_svfiprintf_r+0x1c6>
 800430c:	2300      	movs	r3, #0
 800430e:	f04f 32ff 	mov.w	r2, #4294967295
 8004312:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004316:	f10a 0a01 	add.w	sl, sl, #1
 800431a:	9304      	str	r3, [sp, #16]
 800431c:	9307      	str	r3, [sp, #28]
 800431e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004322:	931a      	str	r3, [sp, #104]	@ 0x68
 8004324:	4654      	mov	r4, sl
 8004326:	2205      	movs	r2, #5
 8004328:	f814 1b01 	ldrb.w	r1, [r4], #1
 800432c:	484e      	ldr	r0, [pc, #312]	@ (8004468 <_svfiprintf_r+0x1e4>)
 800432e:	f000 fccd 	bl	8004ccc <memchr>
 8004332:	9a04      	ldr	r2, [sp, #16]
 8004334:	b9d8      	cbnz	r0, 800436e <_svfiprintf_r+0xea>
 8004336:	06d0      	lsls	r0, r2, #27
 8004338:	bf44      	itt	mi
 800433a:	2320      	movmi	r3, #32
 800433c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004340:	0711      	lsls	r1, r2, #28
 8004342:	bf44      	itt	mi
 8004344:	232b      	movmi	r3, #43	@ 0x2b
 8004346:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800434a:	f89a 3000 	ldrb.w	r3, [sl]
 800434e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004350:	d015      	beq.n	800437e <_svfiprintf_r+0xfa>
 8004352:	4654      	mov	r4, sl
 8004354:	2000      	movs	r0, #0
 8004356:	f04f 0c0a 	mov.w	ip, #10
 800435a:	9a07      	ldr	r2, [sp, #28]
 800435c:	4621      	mov	r1, r4
 800435e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004362:	3b30      	subs	r3, #48	@ 0x30
 8004364:	2b09      	cmp	r3, #9
 8004366:	d94b      	bls.n	8004400 <_svfiprintf_r+0x17c>
 8004368:	b1b0      	cbz	r0, 8004398 <_svfiprintf_r+0x114>
 800436a:	9207      	str	r2, [sp, #28]
 800436c:	e014      	b.n	8004398 <_svfiprintf_r+0x114>
 800436e:	eba0 0308 	sub.w	r3, r0, r8
 8004372:	fa09 f303 	lsl.w	r3, r9, r3
 8004376:	4313      	orrs	r3, r2
 8004378:	46a2      	mov	sl, r4
 800437a:	9304      	str	r3, [sp, #16]
 800437c:	e7d2      	b.n	8004324 <_svfiprintf_r+0xa0>
 800437e:	9b03      	ldr	r3, [sp, #12]
 8004380:	1d19      	adds	r1, r3, #4
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	9103      	str	r1, [sp, #12]
 8004386:	2b00      	cmp	r3, #0
 8004388:	bfbb      	ittet	lt
 800438a:	425b      	neglt	r3, r3
 800438c:	f042 0202 	orrlt.w	r2, r2, #2
 8004390:	9307      	strge	r3, [sp, #28]
 8004392:	9307      	strlt	r3, [sp, #28]
 8004394:	bfb8      	it	lt
 8004396:	9204      	strlt	r2, [sp, #16]
 8004398:	7823      	ldrb	r3, [r4, #0]
 800439a:	2b2e      	cmp	r3, #46	@ 0x2e
 800439c:	d10a      	bne.n	80043b4 <_svfiprintf_r+0x130>
 800439e:	7863      	ldrb	r3, [r4, #1]
 80043a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80043a2:	d132      	bne.n	800440a <_svfiprintf_r+0x186>
 80043a4:	9b03      	ldr	r3, [sp, #12]
 80043a6:	3402      	adds	r4, #2
 80043a8:	1d1a      	adds	r2, r3, #4
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	9203      	str	r2, [sp, #12]
 80043ae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80043b2:	9305      	str	r3, [sp, #20]
 80043b4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800446c <_svfiprintf_r+0x1e8>
 80043b8:	2203      	movs	r2, #3
 80043ba:	4650      	mov	r0, sl
 80043bc:	7821      	ldrb	r1, [r4, #0]
 80043be:	f000 fc85 	bl	8004ccc <memchr>
 80043c2:	b138      	cbz	r0, 80043d4 <_svfiprintf_r+0x150>
 80043c4:	2240      	movs	r2, #64	@ 0x40
 80043c6:	9b04      	ldr	r3, [sp, #16]
 80043c8:	eba0 000a 	sub.w	r0, r0, sl
 80043cc:	4082      	lsls	r2, r0
 80043ce:	4313      	orrs	r3, r2
 80043d0:	3401      	adds	r4, #1
 80043d2:	9304      	str	r3, [sp, #16]
 80043d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043d8:	2206      	movs	r2, #6
 80043da:	4825      	ldr	r0, [pc, #148]	@ (8004470 <_svfiprintf_r+0x1ec>)
 80043dc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80043e0:	f000 fc74 	bl	8004ccc <memchr>
 80043e4:	2800      	cmp	r0, #0
 80043e6:	d036      	beq.n	8004456 <_svfiprintf_r+0x1d2>
 80043e8:	4b22      	ldr	r3, [pc, #136]	@ (8004474 <_svfiprintf_r+0x1f0>)
 80043ea:	bb1b      	cbnz	r3, 8004434 <_svfiprintf_r+0x1b0>
 80043ec:	9b03      	ldr	r3, [sp, #12]
 80043ee:	3307      	adds	r3, #7
 80043f0:	f023 0307 	bic.w	r3, r3, #7
 80043f4:	3308      	adds	r3, #8
 80043f6:	9303      	str	r3, [sp, #12]
 80043f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80043fa:	4433      	add	r3, r6
 80043fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80043fe:	e76a      	b.n	80042d6 <_svfiprintf_r+0x52>
 8004400:	460c      	mov	r4, r1
 8004402:	2001      	movs	r0, #1
 8004404:	fb0c 3202 	mla	r2, ip, r2, r3
 8004408:	e7a8      	b.n	800435c <_svfiprintf_r+0xd8>
 800440a:	2300      	movs	r3, #0
 800440c:	f04f 0c0a 	mov.w	ip, #10
 8004410:	4619      	mov	r1, r3
 8004412:	3401      	adds	r4, #1
 8004414:	9305      	str	r3, [sp, #20]
 8004416:	4620      	mov	r0, r4
 8004418:	f810 2b01 	ldrb.w	r2, [r0], #1
 800441c:	3a30      	subs	r2, #48	@ 0x30
 800441e:	2a09      	cmp	r2, #9
 8004420:	d903      	bls.n	800442a <_svfiprintf_r+0x1a6>
 8004422:	2b00      	cmp	r3, #0
 8004424:	d0c6      	beq.n	80043b4 <_svfiprintf_r+0x130>
 8004426:	9105      	str	r1, [sp, #20]
 8004428:	e7c4      	b.n	80043b4 <_svfiprintf_r+0x130>
 800442a:	4604      	mov	r4, r0
 800442c:	2301      	movs	r3, #1
 800442e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004432:	e7f0      	b.n	8004416 <_svfiprintf_r+0x192>
 8004434:	ab03      	add	r3, sp, #12
 8004436:	9300      	str	r3, [sp, #0]
 8004438:	462a      	mov	r2, r5
 800443a:	4638      	mov	r0, r7
 800443c:	4b0e      	ldr	r3, [pc, #56]	@ (8004478 <_svfiprintf_r+0x1f4>)
 800443e:	a904      	add	r1, sp, #16
 8004440:	f3af 8000 	nop.w
 8004444:	1c42      	adds	r2, r0, #1
 8004446:	4606      	mov	r6, r0
 8004448:	d1d6      	bne.n	80043f8 <_svfiprintf_r+0x174>
 800444a:	89ab      	ldrh	r3, [r5, #12]
 800444c:	065b      	lsls	r3, r3, #25
 800444e:	f53f af2d 	bmi.w	80042ac <_svfiprintf_r+0x28>
 8004452:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004454:	e72c      	b.n	80042b0 <_svfiprintf_r+0x2c>
 8004456:	ab03      	add	r3, sp, #12
 8004458:	9300      	str	r3, [sp, #0]
 800445a:	462a      	mov	r2, r5
 800445c:	4638      	mov	r0, r7
 800445e:	4b06      	ldr	r3, [pc, #24]	@ (8004478 <_svfiprintf_r+0x1f4>)
 8004460:	a904      	add	r1, sp, #16
 8004462:	f000 f9bd 	bl	80047e0 <_printf_i>
 8004466:	e7ed      	b.n	8004444 <_svfiprintf_r+0x1c0>
 8004468:	08005063 	.word	0x08005063
 800446c:	08005069 	.word	0x08005069
 8004470:	0800506d 	.word	0x0800506d
 8004474:	00000000 	.word	0x00000000
 8004478:	080041cd 	.word	0x080041cd

0800447c <__sfputc_r>:
 800447c:	6893      	ldr	r3, [r2, #8]
 800447e:	b410      	push	{r4}
 8004480:	3b01      	subs	r3, #1
 8004482:	2b00      	cmp	r3, #0
 8004484:	6093      	str	r3, [r2, #8]
 8004486:	da07      	bge.n	8004498 <__sfputc_r+0x1c>
 8004488:	6994      	ldr	r4, [r2, #24]
 800448a:	42a3      	cmp	r3, r4
 800448c:	db01      	blt.n	8004492 <__sfputc_r+0x16>
 800448e:	290a      	cmp	r1, #10
 8004490:	d102      	bne.n	8004498 <__sfputc_r+0x1c>
 8004492:	bc10      	pop	{r4}
 8004494:	f000 bb6c 	b.w	8004b70 <__swbuf_r>
 8004498:	6813      	ldr	r3, [r2, #0]
 800449a:	1c58      	adds	r0, r3, #1
 800449c:	6010      	str	r0, [r2, #0]
 800449e:	7019      	strb	r1, [r3, #0]
 80044a0:	4608      	mov	r0, r1
 80044a2:	bc10      	pop	{r4}
 80044a4:	4770      	bx	lr

080044a6 <__sfputs_r>:
 80044a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044a8:	4606      	mov	r6, r0
 80044aa:	460f      	mov	r7, r1
 80044ac:	4614      	mov	r4, r2
 80044ae:	18d5      	adds	r5, r2, r3
 80044b0:	42ac      	cmp	r4, r5
 80044b2:	d101      	bne.n	80044b8 <__sfputs_r+0x12>
 80044b4:	2000      	movs	r0, #0
 80044b6:	e007      	b.n	80044c8 <__sfputs_r+0x22>
 80044b8:	463a      	mov	r2, r7
 80044ba:	4630      	mov	r0, r6
 80044bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044c0:	f7ff ffdc 	bl	800447c <__sfputc_r>
 80044c4:	1c43      	adds	r3, r0, #1
 80044c6:	d1f3      	bne.n	80044b0 <__sfputs_r+0xa>
 80044c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080044cc <_vfiprintf_r>:
 80044cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044d0:	460d      	mov	r5, r1
 80044d2:	4614      	mov	r4, r2
 80044d4:	4698      	mov	r8, r3
 80044d6:	4606      	mov	r6, r0
 80044d8:	b09d      	sub	sp, #116	@ 0x74
 80044da:	b118      	cbz	r0, 80044e4 <_vfiprintf_r+0x18>
 80044dc:	6a03      	ldr	r3, [r0, #32]
 80044de:	b90b      	cbnz	r3, 80044e4 <_vfiprintf_r+0x18>
 80044e0:	f7ff fce2 	bl	8003ea8 <__sinit>
 80044e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80044e6:	07d9      	lsls	r1, r3, #31
 80044e8:	d405      	bmi.n	80044f6 <_vfiprintf_r+0x2a>
 80044ea:	89ab      	ldrh	r3, [r5, #12]
 80044ec:	059a      	lsls	r2, r3, #22
 80044ee:	d402      	bmi.n	80044f6 <_vfiprintf_r+0x2a>
 80044f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80044f2:	f7ff fe20 	bl	8004136 <__retarget_lock_acquire_recursive>
 80044f6:	89ab      	ldrh	r3, [r5, #12]
 80044f8:	071b      	lsls	r3, r3, #28
 80044fa:	d501      	bpl.n	8004500 <_vfiprintf_r+0x34>
 80044fc:	692b      	ldr	r3, [r5, #16]
 80044fe:	b99b      	cbnz	r3, 8004528 <_vfiprintf_r+0x5c>
 8004500:	4629      	mov	r1, r5
 8004502:	4630      	mov	r0, r6
 8004504:	f000 fb72 	bl	8004bec <__swsetup_r>
 8004508:	b170      	cbz	r0, 8004528 <_vfiprintf_r+0x5c>
 800450a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800450c:	07dc      	lsls	r4, r3, #31
 800450e:	d504      	bpl.n	800451a <_vfiprintf_r+0x4e>
 8004510:	f04f 30ff 	mov.w	r0, #4294967295
 8004514:	b01d      	add	sp, #116	@ 0x74
 8004516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800451a:	89ab      	ldrh	r3, [r5, #12]
 800451c:	0598      	lsls	r0, r3, #22
 800451e:	d4f7      	bmi.n	8004510 <_vfiprintf_r+0x44>
 8004520:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004522:	f7ff fe09 	bl	8004138 <__retarget_lock_release_recursive>
 8004526:	e7f3      	b.n	8004510 <_vfiprintf_r+0x44>
 8004528:	2300      	movs	r3, #0
 800452a:	9309      	str	r3, [sp, #36]	@ 0x24
 800452c:	2320      	movs	r3, #32
 800452e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004532:	2330      	movs	r3, #48	@ 0x30
 8004534:	f04f 0901 	mov.w	r9, #1
 8004538:	f8cd 800c 	str.w	r8, [sp, #12]
 800453c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80046e8 <_vfiprintf_r+0x21c>
 8004540:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004544:	4623      	mov	r3, r4
 8004546:	469a      	mov	sl, r3
 8004548:	f813 2b01 	ldrb.w	r2, [r3], #1
 800454c:	b10a      	cbz	r2, 8004552 <_vfiprintf_r+0x86>
 800454e:	2a25      	cmp	r2, #37	@ 0x25
 8004550:	d1f9      	bne.n	8004546 <_vfiprintf_r+0x7a>
 8004552:	ebba 0b04 	subs.w	fp, sl, r4
 8004556:	d00b      	beq.n	8004570 <_vfiprintf_r+0xa4>
 8004558:	465b      	mov	r3, fp
 800455a:	4622      	mov	r2, r4
 800455c:	4629      	mov	r1, r5
 800455e:	4630      	mov	r0, r6
 8004560:	f7ff ffa1 	bl	80044a6 <__sfputs_r>
 8004564:	3001      	adds	r0, #1
 8004566:	f000 80a7 	beq.w	80046b8 <_vfiprintf_r+0x1ec>
 800456a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800456c:	445a      	add	r2, fp
 800456e:	9209      	str	r2, [sp, #36]	@ 0x24
 8004570:	f89a 3000 	ldrb.w	r3, [sl]
 8004574:	2b00      	cmp	r3, #0
 8004576:	f000 809f 	beq.w	80046b8 <_vfiprintf_r+0x1ec>
 800457a:	2300      	movs	r3, #0
 800457c:	f04f 32ff 	mov.w	r2, #4294967295
 8004580:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004584:	f10a 0a01 	add.w	sl, sl, #1
 8004588:	9304      	str	r3, [sp, #16]
 800458a:	9307      	str	r3, [sp, #28]
 800458c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004590:	931a      	str	r3, [sp, #104]	@ 0x68
 8004592:	4654      	mov	r4, sl
 8004594:	2205      	movs	r2, #5
 8004596:	f814 1b01 	ldrb.w	r1, [r4], #1
 800459a:	4853      	ldr	r0, [pc, #332]	@ (80046e8 <_vfiprintf_r+0x21c>)
 800459c:	f000 fb96 	bl	8004ccc <memchr>
 80045a0:	9a04      	ldr	r2, [sp, #16]
 80045a2:	b9d8      	cbnz	r0, 80045dc <_vfiprintf_r+0x110>
 80045a4:	06d1      	lsls	r1, r2, #27
 80045a6:	bf44      	itt	mi
 80045a8:	2320      	movmi	r3, #32
 80045aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80045ae:	0713      	lsls	r3, r2, #28
 80045b0:	bf44      	itt	mi
 80045b2:	232b      	movmi	r3, #43	@ 0x2b
 80045b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80045b8:	f89a 3000 	ldrb.w	r3, [sl]
 80045bc:	2b2a      	cmp	r3, #42	@ 0x2a
 80045be:	d015      	beq.n	80045ec <_vfiprintf_r+0x120>
 80045c0:	4654      	mov	r4, sl
 80045c2:	2000      	movs	r0, #0
 80045c4:	f04f 0c0a 	mov.w	ip, #10
 80045c8:	9a07      	ldr	r2, [sp, #28]
 80045ca:	4621      	mov	r1, r4
 80045cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80045d0:	3b30      	subs	r3, #48	@ 0x30
 80045d2:	2b09      	cmp	r3, #9
 80045d4:	d94b      	bls.n	800466e <_vfiprintf_r+0x1a2>
 80045d6:	b1b0      	cbz	r0, 8004606 <_vfiprintf_r+0x13a>
 80045d8:	9207      	str	r2, [sp, #28]
 80045da:	e014      	b.n	8004606 <_vfiprintf_r+0x13a>
 80045dc:	eba0 0308 	sub.w	r3, r0, r8
 80045e0:	fa09 f303 	lsl.w	r3, r9, r3
 80045e4:	4313      	orrs	r3, r2
 80045e6:	46a2      	mov	sl, r4
 80045e8:	9304      	str	r3, [sp, #16]
 80045ea:	e7d2      	b.n	8004592 <_vfiprintf_r+0xc6>
 80045ec:	9b03      	ldr	r3, [sp, #12]
 80045ee:	1d19      	adds	r1, r3, #4
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	9103      	str	r1, [sp, #12]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	bfbb      	ittet	lt
 80045f8:	425b      	neglt	r3, r3
 80045fa:	f042 0202 	orrlt.w	r2, r2, #2
 80045fe:	9307      	strge	r3, [sp, #28]
 8004600:	9307      	strlt	r3, [sp, #28]
 8004602:	bfb8      	it	lt
 8004604:	9204      	strlt	r2, [sp, #16]
 8004606:	7823      	ldrb	r3, [r4, #0]
 8004608:	2b2e      	cmp	r3, #46	@ 0x2e
 800460a:	d10a      	bne.n	8004622 <_vfiprintf_r+0x156>
 800460c:	7863      	ldrb	r3, [r4, #1]
 800460e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004610:	d132      	bne.n	8004678 <_vfiprintf_r+0x1ac>
 8004612:	9b03      	ldr	r3, [sp, #12]
 8004614:	3402      	adds	r4, #2
 8004616:	1d1a      	adds	r2, r3, #4
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	9203      	str	r2, [sp, #12]
 800461c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004620:	9305      	str	r3, [sp, #20]
 8004622:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80046ec <_vfiprintf_r+0x220>
 8004626:	2203      	movs	r2, #3
 8004628:	4650      	mov	r0, sl
 800462a:	7821      	ldrb	r1, [r4, #0]
 800462c:	f000 fb4e 	bl	8004ccc <memchr>
 8004630:	b138      	cbz	r0, 8004642 <_vfiprintf_r+0x176>
 8004632:	2240      	movs	r2, #64	@ 0x40
 8004634:	9b04      	ldr	r3, [sp, #16]
 8004636:	eba0 000a 	sub.w	r0, r0, sl
 800463a:	4082      	lsls	r2, r0
 800463c:	4313      	orrs	r3, r2
 800463e:	3401      	adds	r4, #1
 8004640:	9304      	str	r3, [sp, #16]
 8004642:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004646:	2206      	movs	r2, #6
 8004648:	4829      	ldr	r0, [pc, #164]	@ (80046f0 <_vfiprintf_r+0x224>)
 800464a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800464e:	f000 fb3d 	bl	8004ccc <memchr>
 8004652:	2800      	cmp	r0, #0
 8004654:	d03f      	beq.n	80046d6 <_vfiprintf_r+0x20a>
 8004656:	4b27      	ldr	r3, [pc, #156]	@ (80046f4 <_vfiprintf_r+0x228>)
 8004658:	bb1b      	cbnz	r3, 80046a2 <_vfiprintf_r+0x1d6>
 800465a:	9b03      	ldr	r3, [sp, #12]
 800465c:	3307      	adds	r3, #7
 800465e:	f023 0307 	bic.w	r3, r3, #7
 8004662:	3308      	adds	r3, #8
 8004664:	9303      	str	r3, [sp, #12]
 8004666:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004668:	443b      	add	r3, r7
 800466a:	9309      	str	r3, [sp, #36]	@ 0x24
 800466c:	e76a      	b.n	8004544 <_vfiprintf_r+0x78>
 800466e:	460c      	mov	r4, r1
 8004670:	2001      	movs	r0, #1
 8004672:	fb0c 3202 	mla	r2, ip, r2, r3
 8004676:	e7a8      	b.n	80045ca <_vfiprintf_r+0xfe>
 8004678:	2300      	movs	r3, #0
 800467a:	f04f 0c0a 	mov.w	ip, #10
 800467e:	4619      	mov	r1, r3
 8004680:	3401      	adds	r4, #1
 8004682:	9305      	str	r3, [sp, #20]
 8004684:	4620      	mov	r0, r4
 8004686:	f810 2b01 	ldrb.w	r2, [r0], #1
 800468a:	3a30      	subs	r2, #48	@ 0x30
 800468c:	2a09      	cmp	r2, #9
 800468e:	d903      	bls.n	8004698 <_vfiprintf_r+0x1cc>
 8004690:	2b00      	cmp	r3, #0
 8004692:	d0c6      	beq.n	8004622 <_vfiprintf_r+0x156>
 8004694:	9105      	str	r1, [sp, #20]
 8004696:	e7c4      	b.n	8004622 <_vfiprintf_r+0x156>
 8004698:	4604      	mov	r4, r0
 800469a:	2301      	movs	r3, #1
 800469c:	fb0c 2101 	mla	r1, ip, r1, r2
 80046a0:	e7f0      	b.n	8004684 <_vfiprintf_r+0x1b8>
 80046a2:	ab03      	add	r3, sp, #12
 80046a4:	9300      	str	r3, [sp, #0]
 80046a6:	462a      	mov	r2, r5
 80046a8:	4630      	mov	r0, r6
 80046aa:	4b13      	ldr	r3, [pc, #76]	@ (80046f8 <_vfiprintf_r+0x22c>)
 80046ac:	a904      	add	r1, sp, #16
 80046ae:	f3af 8000 	nop.w
 80046b2:	4607      	mov	r7, r0
 80046b4:	1c78      	adds	r0, r7, #1
 80046b6:	d1d6      	bne.n	8004666 <_vfiprintf_r+0x19a>
 80046b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80046ba:	07d9      	lsls	r1, r3, #31
 80046bc:	d405      	bmi.n	80046ca <_vfiprintf_r+0x1fe>
 80046be:	89ab      	ldrh	r3, [r5, #12]
 80046c0:	059a      	lsls	r2, r3, #22
 80046c2:	d402      	bmi.n	80046ca <_vfiprintf_r+0x1fe>
 80046c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80046c6:	f7ff fd37 	bl	8004138 <__retarget_lock_release_recursive>
 80046ca:	89ab      	ldrh	r3, [r5, #12]
 80046cc:	065b      	lsls	r3, r3, #25
 80046ce:	f53f af1f 	bmi.w	8004510 <_vfiprintf_r+0x44>
 80046d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80046d4:	e71e      	b.n	8004514 <_vfiprintf_r+0x48>
 80046d6:	ab03      	add	r3, sp, #12
 80046d8:	9300      	str	r3, [sp, #0]
 80046da:	462a      	mov	r2, r5
 80046dc:	4630      	mov	r0, r6
 80046de:	4b06      	ldr	r3, [pc, #24]	@ (80046f8 <_vfiprintf_r+0x22c>)
 80046e0:	a904      	add	r1, sp, #16
 80046e2:	f000 f87d 	bl	80047e0 <_printf_i>
 80046e6:	e7e4      	b.n	80046b2 <_vfiprintf_r+0x1e6>
 80046e8:	08005063 	.word	0x08005063
 80046ec:	08005069 	.word	0x08005069
 80046f0:	0800506d 	.word	0x0800506d
 80046f4:	00000000 	.word	0x00000000
 80046f8:	080044a7 	.word	0x080044a7

080046fc <_printf_common>:
 80046fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004700:	4616      	mov	r6, r2
 8004702:	4698      	mov	r8, r3
 8004704:	688a      	ldr	r2, [r1, #8]
 8004706:	690b      	ldr	r3, [r1, #16]
 8004708:	4607      	mov	r7, r0
 800470a:	4293      	cmp	r3, r2
 800470c:	bfb8      	it	lt
 800470e:	4613      	movlt	r3, r2
 8004710:	6033      	str	r3, [r6, #0]
 8004712:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004716:	460c      	mov	r4, r1
 8004718:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800471c:	b10a      	cbz	r2, 8004722 <_printf_common+0x26>
 800471e:	3301      	adds	r3, #1
 8004720:	6033      	str	r3, [r6, #0]
 8004722:	6823      	ldr	r3, [r4, #0]
 8004724:	0699      	lsls	r1, r3, #26
 8004726:	bf42      	ittt	mi
 8004728:	6833      	ldrmi	r3, [r6, #0]
 800472a:	3302      	addmi	r3, #2
 800472c:	6033      	strmi	r3, [r6, #0]
 800472e:	6825      	ldr	r5, [r4, #0]
 8004730:	f015 0506 	ands.w	r5, r5, #6
 8004734:	d106      	bne.n	8004744 <_printf_common+0x48>
 8004736:	f104 0a19 	add.w	sl, r4, #25
 800473a:	68e3      	ldr	r3, [r4, #12]
 800473c:	6832      	ldr	r2, [r6, #0]
 800473e:	1a9b      	subs	r3, r3, r2
 8004740:	42ab      	cmp	r3, r5
 8004742:	dc2b      	bgt.n	800479c <_printf_common+0xa0>
 8004744:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004748:	6822      	ldr	r2, [r4, #0]
 800474a:	3b00      	subs	r3, #0
 800474c:	bf18      	it	ne
 800474e:	2301      	movne	r3, #1
 8004750:	0692      	lsls	r2, r2, #26
 8004752:	d430      	bmi.n	80047b6 <_printf_common+0xba>
 8004754:	4641      	mov	r1, r8
 8004756:	4638      	mov	r0, r7
 8004758:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800475c:	47c8      	blx	r9
 800475e:	3001      	adds	r0, #1
 8004760:	d023      	beq.n	80047aa <_printf_common+0xae>
 8004762:	6823      	ldr	r3, [r4, #0]
 8004764:	6922      	ldr	r2, [r4, #16]
 8004766:	f003 0306 	and.w	r3, r3, #6
 800476a:	2b04      	cmp	r3, #4
 800476c:	bf14      	ite	ne
 800476e:	2500      	movne	r5, #0
 8004770:	6833      	ldreq	r3, [r6, #0]
 8004772:	f04f 0600 	mov.w	r6, #0
 8004776:	bf08      	it	eq
 8004778:	68e5      	ldreq	r5, [r4, #12]
 800477a:	f104 041a 	add.w	r4, r4, #26
 800477e:	bf08      	it	eq
 8004780:	1aed      	subeq	r5, r5, r3
 8004782:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004786:	bf08      	it	eq
 8004788:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800478c:	4293      	cmp	r3, r2
 800478e:	bfc4      	itt	gt
 8004790:	1a9b      	subgt	r3, r3, r2
 8004792:	18ed      	addgt	r5, r5, r3
 8004794:	42b5      	cmp	r5, r6
 8004796:	d11a      	bne.n	80047ce <_printf_common+0xd2>
 8004798:	2000      	movs	r0, #0
 800479a:	e008      	b.n	80047ae <_printf_common+0xb2>
 800479c:	2301      	movs	r3, #1
 800479e:	4652      	mov	r2, sl
 80047a0:	4641      	mov	r1, r8
 80047a2:	4638      	mov	r0, r7
 80047a4:	47c8      	blx	r9
 80047a6:	3001      	adds	r0, #1
 80047a8:	d103      	bne.n	80047b2 <_printf_common+0xb6>
 80047aa:	f04f 30ff 	mov.w	r0, #4294967295
 80047ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047b2:	3501      	adds	r5, #1
 80047b4:	e7c1      	b.n	800473a <_printf_common+0x3e>
 80047b6:	2030      	movs	r0, #48	@ 0x30
 80047b8:	18e1      	adds	r1, r4, r3
 80047ba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80047be:	1c5a      	adds	r2, r3, #1
 80047c0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80047c4:	4422      	add	r2, r4
 80047c6:	3302      	adds	r3, #2
 80047c8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80047cc:	e7c2      	b.n	8004754 <_printf_common+0x58>
 80047ce:	2301      	movs	r3, #1
 80047d0:	4622      	mov	r2, r4
 80047d2:	4641      	mov	r1, r8
 80047d4:	4638      	mov	r0, r7
 80047d6:	47c8      	blx	r9
 80047d8:	3001      	adds	r0, #1
 80047da:	d0e6      	beq.n	80047aa <_printf_common+0xae>
 80047dc:	3601      	adds	r6, #1
 80047de:	e7d9      	b.n	8004794 <_printf_common+0x98>

080047e0 <_printf_i>:
 80047e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80047e4:	7e0f      	ldrb	r7, [r1, #24]
 80047e6:	4691      	mov	r9, r2
 80047e8:	2f78      	cmp	r7, #120	@ 0x78
 80047ea:	4680      	mov	r8, r0
 80047ec:	460c      	mov	r4, r1
 80047ee:	469a      	mov	sl, r3
 80047f0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80047f2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80047f6:	d807      	bhi.n	8004808 <_printf_i+0x28>
 80047f8:	2f62      	cmp	r7, #98	@ 0x62
 80047fa:	d80a      	bhi.n	8004812 <_printf_i+0x32>
 80047fc:	2f00      	cmp	r7, #0
 80047fe:	f000 80d3 	beq.w	80049a8 <_printf_i+0x1c8>
 8004802:	2f58      	cmp	r7, #88	@ 0x58
 8004804:	f000 80ba 	beq.w	800497c <_printf_i+0x19c>
 8004808:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800480c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004810:	e03a      	b.n	8004888 <_printf_i+0xa8>
 8004812:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004816:	2b15      	cmp	r3, #21
 8004818:	d8f6      	bhi.n	8004808 <_printf_i+0x28>
 800481a:	a101      	add	r1, pc, #4	@ (adr r1, 8004820 <_printf_i+0x40>)
 800481c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004820:	08004879 	.word	0x08004879
 8004824:	0800488d 	.word	0x0800488d
 8004828:	08004809 	.word	0x08004809
 800482c:	08004809 	.word	0x08004809
 8004830:	08004809 	.word	0x08004809
 8004834:	08004809 	.word	0x08004809
 8004838:	0800488d 	.word	0x0800488d
 800483c:	08004809 	.word	0x08004809
 8004840:	08004809 	.word	0x08004809
 8004844:	08004809 	.word	0x08004809
 8004848:	08004809 	.word	0x08004809
 800484c:	0800498f 	.word	0x0800498f
 8004850:	080048b7 	.word	0x080048b7
 8004854:	08004949 	.word	0x08004949
 8004858:	08004809 	.word	0x08004809
 800485c:	08004809 	.word	0x08004809
 8004860:	080049b1 	.word	0x080049b1
 8004864:	08004809 	.word	0x08004809
 8004868:	080048b7 	.word	0x080048b7
 800486c:	08004809 	.word	0x08004809
 8004870:	08004809 	.word	0x08004809
 8004874:	08004951 	.word	0x08004951
 8004878:	6833      	ldr	r3, [r6, #0]
 800487a:	1d1a      	adds	r2, r3, #4
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	6032      	str	r2, [r6, #0]
 8004880:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004884:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004888:	2301      	movs	r3, #1
 800488a:	e09e      	b.n	80049ca <_printf_i+0x1ea>
 800488c:	6833      	ldr	r3, [r6, #0]
 800488e:	6820      	ldr	r0, [r4, #0]
 8004890:	1d19      	adds	r1, r3, #4
 8004892:	6031      	str	r1, [r6, #0]
 8004894:	0606      	lsls	r6, r0, #24
 8004896:	d501      	bpl.n	800489c <_printf_i+0xbc>
 8004898:	681d      	ldr	r5, [r3, #0]
 800489a:	e003      	b.n	80048a4 <_printf_i+0xc4>
 800489c:	0645      	lsls	r5, r0, #25
 800489e:	d5fb      	bpl.n	8004898 <_printf_i+0xb8>
 80048a0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80048a4:	2d00      	cmp	r5, #0
 80048a6:	da03      	bge.n	80048b0 <_printf_i+0xd0>
 80048a8:	232d      	movs	r3, #45	@ 0x2d
 80048aa:	426d      	negs	r5, r5
 80048ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80048b0:	230a      	movs	r3, #10
 80048b2:	4859      	ldr	r0, [pc, #356]	@ (8004a18 <_printf_i+0x238>)
 80048b4:	e011      	b.n	80048da <_printf_i+0xfa>
 80048b6:	6821      	ldr	r1, [r4, #0]
 80048b8:	6833      	ldr	r3, [r6, #0]
 80048ba:	0608      	lsls	r0, r1, #24
 80048bc:	f853 5b04 	ldr.w	r5, [r3], #4
 80048c0:	d402      	bmi.n	80048c8 <_printf_i+0xe8>
 80048c2:	0649      	lsls	r1, r1, #25
 80048c4:	bf48      	it	mi
 80048c6:	b2ad      	uxthmi	r5, r5
 80048c8:	2f6f      	cmp	r7, #111	@ 0x6f
 80048ca:	6033      	str	r3, [r6, #0]
 80048cc:	bf14      	ite	ne
 80048ce:	230a      	movne	r3, #10
 80048d0:	2308      	moveq	r3, #8
 80048d2:	4851      	ldr	r0, [pc, #324]	@ (8004a18 <_printf_i+0x238>)
 80048d4:	2100      	movs	r1, #0
 80048d6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80048da:	6866      	ldr	r6, [r4, #4]
 80048dc:	2e00      	cmp	r6, #0
 80048de:	bfa8      	it	ge
 80048e0:	6821      	ldrge	r1, [r4, #0]
 80048e2:	60a6      	str	r6, [r4, #8]
 80048e4:	bfa4      	itt	ge
 80048e6:	f021 0104 	bicge.w	r1, r1, #4
 80048ea:	6021      	strge	r1, [r4, #0]
 80048ec:	b90d      	cbnz	r5, 80048f2 <_printf_i+0x112>
 80048ee:	2e00      	cmp	r6, #0
 80048f0:	d04b      	beq.n	800498a <_printf_i+0x1aa>
 80048f2:	4616      	mov	r6, r2
 80048f4:	fbb5 f1f3 	udiv	r1, r5, r3
 80048f8:	fb03 5711 	mls	r7, r3, r1, r5
 80048fc:	5dc7      	ldrb	r7, [r0, r7]
 80048fe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004902:	462f      	mov	r7, r5
 8004904:	42bb      	cmp	r3, r7
 8004906:	460d      	mov	r5, r1
 8004908:	d9f4      	bls.n	80048f4 <_printf_i+0x114>
 800490a:	2b08      	cmp	r3, #8
 800490c:	d10b      	bne.n	8004926 <_printf_i+0x146>
 800490e:	6823      	ldr	r3, [r4, #0]
 8004910:	07df      	lsls	r7, r3, #31
 8004912:	d508      	bpl.n	8004926 <_printf_i+0x146>
 8004914:	6923      	ldr	r3, [r4, #16]
 8004916:	6861      	ldr	r1, [r4, #4]
 8004918:	4299      	cmp	r1, r3
 800491a:	bfde      	ittt	le
 800491c:	2330      	movle	r3, #48	@ 0x30
 800491e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004922:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004926:	1b92      	subs	r2, r2, r6
 8004928:	6122      	str	r2, [r4, #16]
 800492a:	464b      	mov	r3, r9
 800492c:	4621      	mov	r1, r4
 800492e:	4640      	mov	r0, r8
 8004930:	f8cd a000 	str.w	sl, [sp]
 8004934:	aa03      	add	r2, sp, #12
 8004936:	f7ff fee1 	bl	80046fc <_printf_common>
 800493a:	3001      	adds	r0, #1
 800493c:	d14a      	bne.n	80049d4 <_printf_i+0x1f4>
 800493e:	f04f 30ff 	mov.w	r0, #4294967295
 8004942:	b004      	add	sp, #16
 8004944:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004948:	6823      	ldr	r3, [r4, #0]
 800494a:	f043 0320 	orr.w	r3, r3, #32
 800494e:	6023      	str	r3, [r4, #0]
 8004950:	2778      	movs	r7, #120	@ 0x78
 8004952:	4832      	ldr	r0, [pc, #200]	@ (8004a1c <_printf_i+0x23c>)
 8004954:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004958:	6823      	ldr	r3, [r4, #0]
 800495a:	6831      	ldr	r1, [r6, #0]
 800495c:	061f      	lsls	r7, r3, #24
 800495e:	f851 5b04 	ldr.w	r5, [r1], #4
 8004962:	d402      	bmi.n	800496a <_printf_i+0x18a>
 8004964:	065f      	lsls	r7, r3, #25
 8004966:	bf48      	it	mi
 8004968:	b2ad      	uxthmi	r5, r5
 800496a:	6031      	str	r1, [r6, #0]
 800496c:	07d9      	lsls	r1, r3, #31
 800496e:	bf44      	itt	mi
 8004970:	f043 0320 	orrmi.w	r3, r3, #32
 8004974:	6023      	strmi	r3, [r4, #0]
 8004976:	b11d      	cbz	r5, 8004980 <_printf_i+0x1a0>
 8004978:	2310      	movs	r3, #16
 800497a:	e7ab      	b.n	80048d4 <_printf_i+0xf4>
 800497c:	4826      	ldr	r0, [pc, #152]	@ (8004a18 <_printf_i+0x238>)
 800497e:	e7e9      	b.n	8004954 <_printf_i+0x174>
 8004980:	6823      	ldr	r3, [r4, #0]
 8004982:	f023 0320 	bic.w	r3, r3, #32
 8004986:	6023      	str	r3, [r4, #0]
 8004988:	e7f6      	b.n	8004978 <_printf_i+0x198>
 800498a:	4616      	mov	r6, r2
 800498c:	e7bd      	b.n	800490a <_printf_i+0x12a>
 800498e:	6833      	ldr	r3, [r6, #0]
 8004990:	6825      	ldr	r5, [r4, #0]
 8004992:	1d18      	adds	r0, r3, #4
 8004994:	6961      	ldr	r1, [r4, #20]
 8004996:	6030      	str	r0, [r6, #0]
 8004998:	062e      	lsls	r6, r5, #24
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	d501      	bpl.n	80049a2 <_printf_i+0x1c2>
 800499e:	6019      	str	r1, [r3, #0]
 80049a0:	e002      	b.n	80049a8 <_printf_i+0x1c8>
 80049a2:	0668      	lsls	r0, r5, #25
 80049a4:	d5fb      	bpl.n	800499e <_printf_i+0x1be>
 80049a6:	8019      	strh	r1, [r3, #0]
 80049a8:	2300      	movs	r3, #0
 80049aa:	4616      	mov	r6, r2
 80049ac:	6123      	str	r3, [r4, #16]
 80049ae:	e7bc      	b.n	800492a <_printf_i+0x14a>
 80049b0:	6833      	ldr	r3, [r6, #0]
 80049b2:	2100      	movs	r1, #0
 80049b4:	1d1a      	adds	r2, r3, #4
 80049b6:	6032      	str	r2, [r6, #0]
 80049b8:	681e      	ldr	r6, [r3, #0]
 80049ba:	6862      	ldr	r2, [r4, #4]
 80049bc:	4630      	mov	r0, r6
 80049be:	f000 f985 	bl	8004ccc <memchr>
 80049c2:	b108      	cbz	r0, 80049c8 <_printf_i+0x1e8>
 80049c4:	1b80      	subs	r0, r0, r6
 80049c6:	6060      	str	r0, [r4, #4]
 80049c8:	6863      	ldr	r3, [r4, #4]
 80049ca:	6123      	str	r3, [r4, #16]
 80049cc:	2300      	movs	r3, #0
 80049ce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80049d2:	e7aa      	b.n	800492a <_printf_i+0x14a>
 80049d4:	4632      	mov	r2, r6
 80049d6:	4649      	mov	r1, r9
 80049d8:	4640      	mov	r0, r8
 80049da:	6923      	ldr	r3, [r4, #16]
 80049dc:	47d0      	blx	sl
 80049de:	3001      	adds	r0, #1
 80049e0:	d0ad      	beq.n	800493e <_printf_i+0x15e>
 80049e2:	6823      	ldr	r3, [r4, #0]
 80049e4:	079b      	lsls	r3, r3, #30
 80049e6:	d413      	bmi.n	8004a10 <_printf_i+0x230>
 80049e8:	68e0      	ldr	r0, [r4, #12]
 80049ea:	9b03      	ldr	r3, [sp, #12]
 80049ec:	4298      	cmp	r0, r3
 80049ee:	bfb8      	it	lt
 80049f0:	4618      	movlt	r0, r3
 80049f2:	e7a6      	b.n	8004942 <_printf_i+0x162>
 80049f4:	2301      	movs	r3, #1
 80049f6:	4632      	mov	r2, r6
 80049f8:	4649      	mov	r1, r9
 80049fa:	4640      	mov	r0, r8
 80049fc:	47d0      	blx	sl
 80049fe:	3001      	adds	r0, #1
 8004a00:	d09d      	beq.n	800493e <_printf_i+0x15e>
 8004a02:	3501      	adds	r5, #1
 8004a04:	68e3      	ldr	r3, [r4, #12]
 8004a06:	9903      	ldr	r1, [sp, #12]
 8004a08:	1a5b      	subs	r3, r3, r1
 8004a0a:	42ab      	cmp	r3, r5
 8004a0c:	dcf2      	bgt.n	80049f4 <_printf_i+0x214>
 8004a0e:	e7eb      	b.n	80049e8 <_printf_i+0x208>
 8004a10:	2500      	movs	r5, #0
 8004a12:	f104 0619 	add.w	r6, r4, #25
 8004a16:	e7f5      	b.n	8004a04 <_printf_i+0x224>
 8004a18:	08005074 	.word	0x08005074
 8004a1c:	08005085 	.word	0x08005085

08004a20 <__sflush_r>:
 8004a20:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a26:	0716      	lsls	r6, r2, #28
 8004a28:	4605      	mov	r5, r0
 8004a2a:	460c      	mov	r4, r1
 8004a2c:	d454      	bmi.n	8004ad8 <__sflush_r+0xb8>
 8004a2e:	684b      	ldr	r3, [r1, #4]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	dc02      	bgt.n	8004a3a <__sflush_r+0x1a>
 8004a34:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	dd48      	ble.n	8004acc <__sflush_r+0xac>
 8004a3a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004a3c:	2e00      	cmp	r6, #0
 8004a3e:	d045      	beq.n	8004acc <__sflush_r+0xac>
 8004a40:	2300      	movs	r3, #0
 8004a42:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004a46:	682f      	ldr	r7, [r5, #0]
 8004a48:	6a21      	ldr	r1, [r4, #32]
 8004a4a:	602b      	str	r3, [r5, #0]
 8004a4c:	d030      	beq.n	8004ab0 <__sflush_r+0x90>
 8004a4e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004a50:	89a3      	ldrh	r3, [r4, #12]
 8004a52:	0759      	lsls	r1, r3, #29
 8004a54:	d505      	bpl.n	8004a62 <__sflush_r+0x42>
 8004a56:	6863      	ldr	r3, [r4, #4]
 8004a58:	1ad2      	subs	r2, r2, r3
 8004a5a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004a5c:	b10b      	cbz	r3, 8004a62 <__sflush_r+0x42>
 8004a5e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004a60:	1ad2      	subs	r2, r2, r3
 8004a62:	2300      	movs	r3, #0
 8004a64:	4628      	mov	r0, r5
 8004a66:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004a68:	6a21      	ldr	r1, [r4, #32]
 8004a6a:	47b0      	blx	r6
 8004a6c:	1c43      	adds	r3, r0, #1
 8004a6e:	89a3      	ldrh	r3, [r4, #12]
 8004a70:	d106      	bne.n	8004a80 <__sflush_r+0x60>
 8004a72:	6829      	ldr	r1, [r5, #0]
 8004a74:	291d      	cmp	r1, #29
 8004a76:	d82b      	bhi.n	8004ad0 <__sflush_r+0xb0>
 8004a78:	4a28      	ldr	r2, [pc, #160]	@ (8004b1c <__sflush_r+0xfc>)
 8004a7a:	410a      	asrs	r2, r1
 8004a7c:	07d6      	lsls	r6, r2, #31
 8004a7e:	d427      	bmi.n	8004ad0 <__sflush_r+0xb0>
 8004a80:	2200      	movs	r2, #0
 8004a82:	6062      	str	r2, [r4, #4]
 8004a84:	6922      	ldr	r2, [r4, #16]
 8004a86:	04d9      	lsls	r1, r3, #19
 8004a88:	6022      	str	r2, [r4, #0]
 8004a8a:	d504      	bpl.n	8004a96 <__sflush_r+0x76>
 8004a8c:	1c42      	adds	r2, r0, #1
 8004a8e:	d101      	bne.n	8004a94 <__sflush_r+0x74>
 8004a90:	682b      	ldr	r3, [r5, #0]
 8004a92:	b903      	cbnz	r3, 8004a96 <__sflush_r+0x76>
 8004a94:	6560      	str	r0, [r4, #84]	@ 0x54
 8004a96:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004a98:	602f      	str	r7, [r5, #0]
 8004a9a:	b1b9      	cbz	r1, 8004acc <__sflush_r+0xac>
 8004a9c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004aa0:	4299      	cmp	r1, r3
 8004aa2:	d002      	beq.n	8004aaa <__sflush_r+0x8a>
 8004aa4:	4628      	mov	r0, r5
 8004aa6:	f7ff fb49 	bl	800413c <_free_r>
 8004aaa:	2300      	movs	r3, #0
 8004aac:	6363      	str	r3, [r4, #52]	@ 0x34
 8004aae:	e00d      	b.n	8004acc <__sflush_r+0xac>
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	4628      	mov	r0, r5
 8004ab4:	47b0      	blx	r6
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	1c50      	adds	r0, r2, #1
 8004aba:	d1c9      	bne.n	8004a50 <__sflush_r+0x30>
 8004abc:	682b      	ldr	r3, [r5, #0]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d0c6      	beq.n	8004a50 <__sflush_r+0x30>
 8004ac2:	2b1d      	cmp	r3, #29
 8004ac4:	d001      	beq.n	8004aca <__sflush_r+0xaa>
 8004ac6:	2b16      	cmp	r3, #22
 8004ac8:	d11d      	bne.n	8004b06 <__sflush_r+0xe6>
 8004aca:	602f      	str	r7, [r5, #0]
 8004acc:	2000      	movs	r0, #0
 8004ace:	e021      	b.n	8004b14 <__sflush_r+0xf4>
 8004ad0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ad4:	b21b      	sxth	r3, r3
 8004ad6:	e01a      	b.n	8004b0e <__sflush_r+0xee>
 8004ad8:	690f      	ldr	r7, [r1, #16]
 8004ada:	2f00      	cmp	r7, #0
 8004adc:	d0f6      	beq.n	8004acc <__sflush_r+0xac>
 8004ade:	0793      	lsls	r3, r2, #30
 8004ae0:	bf18      	it	ne
 8004ae2:	2300      	movne	r3, #0
 8004ae4:	680e      	ldr	r6, [r1, #0]
 8004ae6:	bf08      	it	eq
 8004ae8:	694b      	ldreq	r3, [r1, #20]
 8004aea:	1bf6      	subs	r6, r6, r7
 8004aec:	600f      	str	r7, [r1, #0]
 8004aee:	608b      	str	r3, [r1, #8]
 8004af0:	2e00      	cmp	r6, #0
 8004af2:	ddeb      	ble.n	8004acc <__sflush_r+0xac>
 8004af4:	4633      	mov	r3, r6
 8004af6:	463a      	mov	r2, r7
 8004af8:	4628      	mov	r0, r5
 8004afa:	6a21      	ldr	r1, [r4, #32]
 8004afc:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8004b00:	47e0      	blx	ip
 8004b02:	2800      	cmp	r0, #0
 8004b04:	dc07      	bgt.n	8004b16 <__sflush_r+0xf6>
 8004b06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b0e:	f04f 30ff 	mov.w	r0, #4294967295
 8004b12:	81a3      	strh	r3, [r4, #12]
 8004b14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b16:	4407      	add	r7, r0
 8004b18:	1a36      	subs	r6, r6, r0
 8004b1a:	e7e9      	b.n	8004af0 <__sflush_r+0xd0>
 8004b1c:	dfbffffe 	.word	0xdfbffffe

08004b20 <_fflush_r>:
 8004b20:	b538      	push	{r3, r4, r5, lr}
 8004b22:	690b      	ldr	r3, [r1, #16]
 8004b24:	4605      	mov	r5, r0
 8004b26:	460c      	mov	r4, r1
 8004b28:	b913      	cbnz	r3, 8004b30 <_fflush_r+0x10>
 8004b2a:	2500      	movs	r5, #0
 8004b2c:	4628      	mov	r0, r5
 8004b2e:	bd38      	pop	{r3, r4, r5, pc}
 8004b30:	b118      	cbz	r0, 8004b3a <_fflush_r+0x1a>
 8004b32:	6a03      	ldr	r3, [r0, #32]
 8004b34:	b90b      	cbnz	r3, 8004b3a <_fflush_r+0x1a>
 8004b36:	f7ff f9b7 	bl	8003ea8 <__sinit>
 8004b3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d0f3      	beq.n	8004b2a <_fflush_r+0xa>
 8004b42:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004b44:	07d0      	lsls	r0, r2, #31
 8004b46:	d404      	bmi.n	8004b52 <_fflush_r+0x32>
 8004b48:	0599      	lsls	r1, r3, #22
 8004b4a:	d402      	bmi.n	8004b52 <_fflush_r+0x32>
 8004b4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004b4e:	f7ff faf2 	bl	8004136 <__retarget_lock_acquire_recursive>
 8004b52:	4628      	mov	r0, r5
 8004b54:	4621      	mov	r1, r4
 8004b56:	f7ff ff63 	bl	8004a20 <__sflush_r>
 8004b5a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004b5c:	4605      	mov	r5, r0
 8004b5e:	07da      	lsls	r2, r3, #31
 8004b60:	d4e4      	bmi.n	8004b2c <_fflush_r+0xc>
 8004b62:	89a3      	ldrh	r3, [r4, #12]
 8004b64:	059b      	lsls	r3, r3, #22
 8004b66:	d4e1      	bmi.n	8004b2c <_fflush_r+0xc>
 8004b68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004b6a:	f7ff fae5 	bl	8004138 <__retarget_lock_release_recursive>
 8004b6e:	e7dd      	b.n	8004b2c <_fflush_r+0xc>

08004b70 <__swbuf_r>:
 8004b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b72:	460e      	mov	r6, r1
 8004b74:	4614      	mov	r4, r2
 8004b76:	4605      	mov	r5, r0
 8004b78:	b118      	cbz	r0, 8004b82 <__swbuf_r+0x12>
 8004b7a:	6a03      	ldr	r3, [r0, #32]
 8004b7c:	b90b      	cbnz	r3, 8004b82 <__swbuf_r+0x12>
 8004b7e:	f7ff f993 	bl	8003ea8 <__sinit>
 8004b82:	69a3      	ldr	r3, [r4, #24]
 8004b84:	60a3      	str	r3, [r4, #8]
 8004b86:	89a3      	ldrh	r3, [r4, #12]
 8004b88:	071a      	lsls	r2, r3, #28
 8004b8a:	d501      	bpl.n	8004b90 <__swbuf_r+0x20>
 8004b8c:	6923      	ldr	r3, [r4, #16]
 8004b8e:	b943      	cbnz	r3, 8004ba2 <__swbuf_r+0x32>
 8004b90:	4621      	mov	r1, r4
 8004b92:	4628      	mov	r0, r5
 8004b94:	f000 f82a 	bl	8004bec <__swsetup_r>
 8004b98:	b118      	cbz	r0, 8004ba2 <__swbuf_r+0x32>
 8004b9a:	f04f 37ff 	mov.w	r7, #4294967295
 8004b9e:	4638      	mov	r0, r7
 8004ba0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ba2:	6823      	ldr	r3, [r4, #0]
 8004ba4:	6922      	ldr	r2, [r4, #16]
 8004ba6:	b2f6      	uxtb	r6, r6
 8004ba8:	1a98      	subs	r0, r3, r2
 8004baa:	6963      	ldr	r3, [r4, #20]
 8004bac:	4637      	mov	r7, r6
 8004bae:	4283      	cmp	r3, r0
 8004bb0:	dc05      	bgt.n	8004bbe <__swbuf_r+0x4e>
 8004bb2:	4621      	mov	r1, r4
 8004bb4:	4628      	mov	r0, r5
 8004bb6:	f7ff ffb3 	bl	8004b20 <_fflush_r>
 8004bba:	2800      	cmp	r0, #0
 8004bbc:	d1ed      	bne.n	8004b9a <__swbuf_r+0x2a>
 8004bbe:	68a3      	ldr	r3, [r4, #8]
 8004bc0:	3b01      	subs	r3, #1
 8004bc2:	60a3      	str	r3, [r4, #8]
 8004bc4:	6823      	ldr	r3, [r4, #0]
 8004bc6:	1c5a      	adds	r2, r3, #1
 8004bc8:	6022      	str	r2, [r4, #0]
 8004bca:	701e      	strb	r6, [r3, #0]
 8004bcc:	6962      	ldr	r2, [r4, #20]
 8004bce:	1c43      	adds	r3, r0, #1
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d004      	beq.n	8004bde <__swbuf_r+0x6e>
 8004bd4:	89a3      	ldrh	r3, [r4, #12]
 8004bd6:	07db      	lsls	r3, r3, #31
 8004bd8:	d5e1      	bpl.n	8004b9e <__swbuf_r+0x2e>
 8004bda:	2e0a      	cmp	r6, #10
 8004bdc:	d1df      	bne.n	8004b9e <__swbuf_r+0x2e>
 8004bde:	4621      	mov	r1, r4
 8004be0:	4628      	mov	r0, r5
 8004be2:	f7ff ff9d 	bl	8004b20 <_fflush_r>
 8004be6:	2800      	cmp	r0, #0
 8004be8:	d0d9      	beq.n	8004b9e <__swbuf_r+0x2e>
 8004bea:	e7d6      	b.n	8004b9a <__swbuf_r+0x2a>

08004bec <__swsetup_r>:
 8004bec:	b538      	push	{r3, r4, r5, lr}
 8004bee:	4b29      	ldr	r3, [pc, #164]	@ (8004c94 <__swsetup_r+0xa8>)
 8004bf0:	4605      	mov	r5, r0
 8004bf2:	6818      	ldr	r0, [r3, #0]
 8004bf4:	460c      	mov	r4, r1
 8004bf6:	b118      	cbz	r0, 8004c00 <__swsetup_r+0x14>
 8004bf8:	6a03      	ldr	r3, [r0, #32]
 8004bfa:	b90b      	cbnz	r3, 8004c00 <__swsetup_r+0x14>
 8004bfc:	f7ff f954 	bl	8003ea8 <__sinit>
 8004c00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c04:	0719      	lsls	r1, r3, #28
 8004c06:	d422      	bmi.n	8004c4e <__swsetup_r+0x62>
 8004c08:	06da      	lsls	r2, r3, #27
 8004c0a:	d407      	bmi.n	8004c1c <__swsetup_r+0x30>
 8004c0c:	2209      	movs	r2, #9
 8004c0e:	602a      	str	r2, [r5, #0]
 8004c10:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c14:	f04f 30ff 	mov.w	r0, #4294967295
 8004c18:	81a3      	strh	r3, [r4, #12]
 8004c1a:	e033      	b.n	8004c84 <__swsetup_r+0x98>
 8004c1c:	0758      	lsls	r0, r3, #29
 8004c1e:	d512      	bpl.n	8004c46 <__swsetup_r+0x5a>
 8004c20:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004c22:	b141      	cbz	r1, 8004c36 <__swsetup_r+0x4a>
 8004c24:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004c28:	4299      	cmp	r1, r3
 8004c2a:	d002      	beq.n	8004c32 <__swsetup_r+0x46>
 8004c2c:	4628      	mov	r0, r5
 8004c2e:	f7ff fa85 	bl	800413c <_free_r>
 8004c32:	2300      	movs	r3, #0
 8004c34:	6363      	str	r3, [r4, #52]	@ 0x34
 8004c36:	89a3      	ldrh	r3, [r4, #12]
 8004c38:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004c3c:	81a3      	strh	r3, [r4, #12]
 8004c3e:	2300      	movs	r3, #0
 8004c40:	6063      	str	r3, [r4, #4]
 8004c42:	6923      	ldr	r3, [r4, #16]
 8004c44:	6023      	str	r3, [r4, #0]
 8004c46:	89a3      	ldrh	r3, [r4, #12]
 8004c48:	f043 0308 	orr.w	r3, r3, #8
 8004c4c:	81a3      	strh	r3, [r4, #12]
 8004c4e:	6923      	ldr	r3, [r4, #16]
 8004c50:	b94b      	cbnz	r3, 8004c66 <__swsetup_r+0x7a>
 8004c52:	89a3      	ldrh	r3, [r4, #12]
 8004c54:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004c58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c5c:	d003      	beq.n	8004c66 <__swsetup_r+0x7a>
 8004c5e:	4621      	mov	r1, r4
 8004c60:	4628      	mov	r0, r5
 8004c62:	f000 f8a2 	bl	8004daa <__smakebuf_r>
 8004c66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c6a:	f013 0201 	ands.w	r2, r3, #1
 8004c6e:	d00a      	beq.n	8004c86 <__swsetup_r+0x9a>
 8004c70:	2200      	movs	r2, #0
 8004c72:	60a2      	str	r2, [r4, #8]
 8004c74:	6962      	ldr	r2, [r4, #20]
 8004c76:	4252      	negs	r2, r2
 8004c78:	61a2      	str	r2, [r4, #24]
 8004c7a:	6922      	ldr	r2, [r4, #16]
 8004c7c:	b942      	cbnz	r2, 8004c90 <__swsetup_r+0xa4>
 8004c7e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004c82:	d1c5      	bne.n	8004c10 <__swsetup_r+0x24>
 8004c84:	bd38      	pop	{r3, r4, r5, pc}
 8004c86:	0799      	lsls	r1, r3, #30
 8004c88:	bf58      	it	pl
 8004c8a:	6962      	ldrpl	r2, [r4, #20]
 8004c8c:	60a2      	str	r2, [r4, #8]
 8004c8e:	e7f4      	b.n	8004c7a <__swsetup_r+0x8e>
 8004c90:	2000      	movs	r0, #0
 8004c92:	e7f7      	b.n	8004c84 <__swsetup_r+0x98>
 8004c94:	20000018 	.word	0x20000018

08004c98 <memmove>:
 8004c98:	4288      	cmp	r0, r1
 8004c9a:	b510      	push	{r4, lr}
 8004c9c:	eb01 0402 	add.w	r4, r1, r2
 8004ca0:	d902      	bls.n	8004ca8 <memmove+0x10>
 8004ca2:	4284      	cmp	r4, r0
 8004ca4:	4623      	mov	r3, r4
 8004ca6:	d807      	bhi.n	8004cb8 <memmove+0x20>
 8004ca8:	1e43      	subs	r3, r0, #1
 8004caa:	42a1      	cmp	r1, r4
 8004cac:	d008      	beq.n	8004cc0 <memmove+0x28>
 8004cae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004cb2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004cb6:	e7f8      	b.n	8004caa <memmove+0x12>
 8004cb8:	4601      	mov	r1, r0
 8004cba:	4402      	add	r2, r0
 8004cbc:	428a      	cmp	r2, r1
 8004cbe:	d100      	bne.n	8004cc2 <memmove+0x2a>
 8004cc0:	bd10      	pop	{r4, pc}
 8004cc2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004cc6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004cca:	e7f7      	b.n	8004cbc <memmove+0x24>

08004ccc <memchr>:
 8004ccc:	4603      	mov	r3, r0
 8004cce:	b510      	push	{r4, lr}
 8004cd0:	b2c9      	uxtb	r1, r1
 8004cd2:	4402      	add	r2, r0
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	d101      	bne.n	8004cde <memchr+0x12>
 8004cda:	2000      	movs	r0, #0
 8004cdc:	e003      	b.n	8004ce6 <memchr+0x1a>
 8004cde:	7804      	ldrb	r4, [r0, #0]
 8004ce0:	3301      	adds	r3, #1
 8004ce2:	428c      	cmp	r4, r1
 8004ce4:	d1f6      	bne.n	8004cd4 <memchr+0x8>
 8004ce6:	bd10      	pop	{r4, pc}

08004ce8 <memcpy>:
 8004ce8:	440a      	add	r2, r1
 8004cea:	4291      	cmp	r1, r2
 8004cec:	f100 33ff 	add.w	r3, r0, #4294967295
 8004cf0:	d100      	bne.n	8004cf4 <memcpy+0xc>
 8004cf2:	4770      	bx	lr
 8004cf4:	b510      	push	{r4, lr}
 8004cf6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004cfa:	4291      	cmp	r1, r2
 8004cfc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d00:	d1f9      	bne.n	8004cf6 <memcpy+0xe>
 8004d02:	bd10      	pop	{r4, pc}

08004d04 <_realloc_r>:
 8004d04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d08:	4680      	mov	r8, r0
 8004d0a:	4615      	mov	r5, r2
 8004d0c:	460c      	mov	r4, r1
 8004d0e:	b921      	cbnz	r1, 8004d1a <_realloc_r+0x16>
 8004d10:	4611      	mov	r1, r2
 8004d12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d16:	f7fe bf2b 	b.w	8003b70 <_malloc_r>
 8004d1a:	b92a      	cbnz	r2, 8004d28 <_realloc_r+0x24>
 8004d1c:	f7ff fa0e 	bl	800413c <_free_r>
 8004d20:	2400      	movs	r4, #0
 8004d22:	4620      	mov	r0, r4
 8004d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d28:	f000 f89e 	bl	8004e68 <_malloc_usable_size_r>
 8004d2c:	4285      	cmp	r5, r0
 8004d2e:	4606      	mov	r6, r0
 8004d30:	d802      	bhi.n	8004d38 <_realloc_r+0x34>
 8004d32:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004d36:	d8f4      	bhi.n	8004d22 <_realloc_r+0x1e>
 8004d38:	4629      	mov	r1, r5
 8004d3a:	4640      	mov	r0, r8
 8004d3c:	f7fe ff18 	bl	8003b70 <_malloc_r>
 8004d40:	4607      	mov	r7, r0
 8004d42:	2800      	cmp	r0, #0
 8004d44:	d0ec      	beq.n	8004d20 <_realloc_r+0x1c>
 8004d46:	42b5      	cmp	r5, r6
 8004d48:	462a      	mov	r2, r5
 8004d4a:	4621      	mov	r1, r4
 8004d4c:	bf28      	it	cs
 8004d4e:	4632      	movcs	r2, r6
 8004d50:	f7ff ffca 	bl	8004ce8 <memcpy>
 8004d54:	4621      	mov	r1, r4
 8004d56:	4640      	mov	r0, r8
 8004d58:	f7ff f9f0 	bl	800413c <_free_r>
 8004d5c:	463c      	mov	r4, r7
 8004d5e:	e7e0      	b.n	8004d22 <_realloc_r+0x1e>

08004d60 <__swhatbuf_r>:
 8004d60:	b570      	push	{r4, r5, r6, lr}
 8004d62:	460c      	mov	r4, r1
 8004d64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d68:	4615      	mov	r5, r2
 8004d6a:	2900      	cmp	r1, #0
 8004d6c:	461e      	mov	r6, r3
 8004d6e:	b096      	sub	sp, #88	@ 0x58
 8004d70:	da0c      	bge.n	8004d8c <__swhatbuf_r+0x2c>
 8004d72:	89a3      	ldrh	r3, [r4, #12]
 8004d74:	2100      	movs	r1, #0
 8004d76:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004d7a:	bf14      	ite	ne
 8004d7c:	2340      	movne	r3, #64	@ 0x40
 8004d7e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004d82:	2000      	movs	r0, #0
 8004d84:	6031      	str	r1, [r6, #0]
 8004d86:	602b      	str	r3, [r5, #0]
 8004d88:	b016      	add	sp, #88	@ 0x58
 8004d8a:	bd70      	pop	{r4, r5, r6, pc}
 8004d8c:	466a      	mov	r2, sp
 8004d8e:	f000 f849 	bl	8004e24 <_fstat_r>
 8004d92:	2800      	cmp	r0, #0
 8004d94:	dbed      	blt.n	8004d72 <__swhatbuf_r+0x12>
 8004d96:	9901      	ldr	r1, [sp, #4]
 8004d98:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004d9c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004da0:	4259      	negs	r1, r3
 8004da2:	4159      	adcs	r1, r3
 8004da4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004da8:	e7eb      	b.n	8004d82 <__swhatbuf_r+0x22>

08004daa <__smakebuf_r>:
 8004daa:	898b      	ldrh	r3, [r1, #12]
 8004dac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004dae:	079d      	lsls	r5, r3, #30
 8004db0:	4606      	mov	r6, r0
 8004db2:	460c      	mov	r4, r1
 8004db4:	d507      	bpl.n	8004dc6 <__smakebuf_r+0x1c>
 8004db6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004dba:	6023      	str	r3, [r4, #0]
 8004dbc:	6123      	str	r3, [r4, #16]
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	6163      	str	r3, [r4, #20]
 8004dc2:	b003      	add	sp, #12
 8004dc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004dc6:	466a      	mov	r2, sp
 8004dc8:	ab01      	add	r3, sp, #4
 8004dca:	f7ff ffc9 	bl	8004d60 <__swhatbuf_r>
 8004dce:	9f00      	ldr	r7, [sp, #0]
 8004dd0:	4605      	mov	r5, r0
 8004dd2:	4639      	mov	r1, r7
 8004dd4:	4630      	mov	r0, r6
 8004dd6:	f7fe fecb 	bl	8003b70 <_malloc_r>
 8004dda:	b948      	cbnz	r0, 8004df0 <__smakebuf_r+0x46>
 8004ddc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004de0:	059a      	lsls	r2, r3, #22
 8004de2:	d4ee      	bmi.n	8004dc2 <__smakebuf_r+0x18>
 8004de4:	f023 0303 	bic.w	r3, r3, #3
 8004de8:	f043 0302 	orr.w	r3, r3, #2
 8004dec:	81a3      	strh	r3, [r4, #12]
 8004dee:	e7e2      	b.n	8004db6 <__smakebuf_r+0xc>
 8004df0:	89a3      	ldrh	r3, [r4, #12]
 8004df2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004df6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004dfa:	81a3      	strh	r3, [r4, #12]
 8004dfc:	9b01      	ldr	r3, [sp, #4]
 8004dfe:	6020      	str	r0, [r4, #0]
 8004e00:	b15b      	cbz	r3, 8004e1a <__smakebuf_r+0x70>
 8004e02:	4630      	mov	r0, r6
 8004e04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e08:	f000 f81e 	bl	8004e48 <_isatty_r>
 8004e0c:	b128      	cbz	r0, 8004e1a <__smakebuf_r+0x70>
 8004e0e:	89a3      	ldrh	r3, [r4, #12]
 8004e10:	f023 0303 	bic.w	r3, r3, #3
 8004e14:	f043 0301 	orr.w	r3, r3, #1
 8004e18:	81a3      	strh	r3, [r4, #12]
 8004e1a:	89a3      	ldrh	r3, [r4, #12]
 8004e1c:	431d      	orrs	r5, r3
 8004e1e:	81a5      	strh	r5, [r4, #12]
 8004e20:	e7cf      	b.n	8004dc2 <__smakebuf_r+0x18>
	...

08004e24 <_fstat_r>:
 8004e24:	b538      	push	{r3, r4, r5, lr}
 8004e26:	2300      	movs	r3, #0
 8004e28:	4d06      	ldr	r5, [pc, #24]	@ (8004e44 <_fstat_r+0x20>)
 8004e2a:	4604      	mov	r4, r0
 8004e2c:	4608      	mov	r0, r1
 8004e2e:	4611      	mov	r1, r2
 8004e30:	602b      	str	r3, [r5, #0]
 8004e32:	f7fc f87f 	bl	8000f34 <_fstat>
 8004e36:	1c43      	adds	r3, r0, #1
 8004e38:	d102      	bne.n	8004e40 <_fstat_r+0x1c>
 8004e3a:	682b      	ldr	r3, [r5, #0]
 8004e3c:	b103      	cbz	r3, 8004e40 <_fstat_r+0x1c>
 8004e3e:	6023      	str	r3, [r4, #0]
 8004e40:	bd38      	pop	{r3, r4, r5, pc}
 8004e42:	bf00      	nop
 8004e44:	2000090c 	.word	0x2000090c

08004e48 <_isatty_r>:
 8004e48:	b538      	push	{r3, r4, r5, lr}
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	4d05      	ldr	r5, [pc, #20]	@ (8004e64 <_isatty_r+0x1c>)
 8004e4e:	4604      	mov	r4, r0
 8004e50:	4608      	mov	r0, r1
 8004e52:	602b      	str	r3, [r5, #0]
 8004e54:	f7fc f87d 	bl	8000f52 <_isatty>
 8004e58:	1c43      	adds	r3, r0, #1
 8004e5a:	d102      	bne.n	8004e62 <_isatty_r+0x1a>
 8004e5c:	682b      	ldr	r3, [r5, #0]
 8004e5e:	b103      	cbz	r3, 8004e62 <_isatty_r+0x1a>
 8004e60:	6023      	str	r3, [r4, #0]
 8004e62:	bd38      	pop	{r3, r4, r5, pc}
 8004e64:	2000090c 	.word	0x2000090c

08004e68 <_malloc_usable_size_r>:
 8004e68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e6c:	1f18      	subs	r0, r3, #4
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	bfbc      	itt	lt
 8004e72:	580b      	ldrlt	r3, [r1, r0]
 8004e74:	18c0      	addlt	r0, r0, r3
 8004e76:	4770      	bx	lr

08004e78 <_init>:
 8004e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e7a:	bf00      	nop
 8004e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e7e:	bc08      	pop	{r3}
 8004e80:	469e      	mov	lr, r3
 8004e82:	4770      	bx	lr

08004e84 <_fini>:
 8004e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e86:	bf00      	nop
 8004e88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e8a:	bc08      	pop	{r3}
 8004e8c:	469e      	mov	lr, r3
 8004e8e:	4770      	bx	lr
